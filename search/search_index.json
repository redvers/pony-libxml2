{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages pony-libxml2 builtin","title":"pony-libxml2"},{"location":"builtin--index/","text":"Builtin package \u00b6 The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries. Public Types \u00b6 primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq struct RuntimeOptions trait Real trait Integer trait SignedInteger trait UnsignedInteger trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform struct NullablePointer primitive None interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise interface DisposableActor primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth Private Types \u00b6 primitive _UTF32Encoder trait _ArithmeticConvertible primitive _ToString primitive _SignedArithmetic primitive _SignedUnsafeArithmetic primitive _UnsignedCheckedArithmetic primitive _SignedCheckedArithmetic trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Package"},{"location":"builtin--index/#builtin-package","text":"The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.","title":"Builtin package"},{"location":"builtin--index/#public-types","text":"primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq struct RuntimeOptions trait Real trait Integer trait SignedInteger trait UnsignedInteger trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform struct NullablePointer primitive None interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise interface DisposableActor primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth","title":"Public Types"},{"location":"builtin--index/#private-types","text":"primitive _UTF32Encoder trait _ArithmeticConvertible primitive _ToString primitive _SignedArithmetic primitive _SignedUnsafeArithmetic primitive _UnsignedCheckedArithmetic primitive _SignedCheckedArithmetic trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Private Types"},{"location":"builtin-AmbientAuth/","text":"AmbientAuth \u00b6 [Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth Constructors \u00b6 _create \u00b6 [Source] new val _create() : AmbientAuth val^ Returns \u00b6 AmbientAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AmbientAuth val) : Bool val Parameters \u00b6 that: AmbientAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AmbientAuth val) : Bool val Parameters \u00b6 that: AmbientAuth val Returns \u00b6 Bool val","title":"primitive AmbientAuth"},{"location":"builtin-AmbientAuth/#ambientauth","text":"[Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth","title":"AmbientAuth"},{"location":"builtin-AmbientAuth/#constructors","text":"","title":"Constructors"},{"location":"builtin-AmbientAuth/#_create","text":"[Source] new val _create() : AmbientAuth val^","title":"_create"},{"location":"builtin-AmbientAuth/#returns","text":"AmbientAuth val^","title":"Returns"},{"location":"builtin-AmbientAuth/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AmbientAuth/#eq","text":"[Source] fun box eq( that: AmbientAuth val) : Bool val","title":"eq"},{"location":"builtin-AmbientAuth/#parameters","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-AmbientAuth/#ne","text":"[Source] fun box ne( that: AmbientAuth val) : Bool val","title":"ne"},{"location":"builtin-AmbientAuth/#parameters_1","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Any/","text":"Any \u00b6 [Source] interface tag Any","title":"interface Any"},{"location":"builtin-Any/#any","text":"[Source] interface tag Any","title":"Any"},{"location":"builtin-Array/","text":"Array[A: A] \u00b6 [Source] Contiguous, resizable memory to store elements of type A. Usage \u00b6 Creating an Array of String: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space: let array = Array[String](10) // array.size() == 0 // array.space() >= 10 Accessing elements can be done via the apply(i: USize): this->A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a LIFO stack using those methods: while (array.size() > 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method: for element in array.values() do // do something with element end Memory allocation \u00b6 Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref Implements \u00b6 Seq [A] ref Constructors \u00b6 create \u00b6 [Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : Array[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 Array [A] ref^ init \u00b6 [Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^ Parameters \u00b6 from: A^ len: USize val Returns \u00b6 Array [A] ref^ from_cpointer \u00b6 [Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = 0) : Array[A] ref^ Parameters \u00b6 ptr: Pointer [A] ref len: USize val alloc: USize val = 0 Returns \u00b6 Array [A] ref^ Public Functions \u00b6 cpointer \u00b6 [Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = 0) : Pointer[A] tag Parameters \u00b6 offset: USize val = 0 Returns \u00b6 Pointer [A] tag size \u00b6 [Source] The number of elements in the array. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the array. fun box space() : USize val Returns \u00b6 USize val reserve \u00b6 [Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val compact \u00b6 [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val Returns \u00b6 None val undefined[optional B: (A & Real [B] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val read_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U8 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U8 val ? read_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U16 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U16 val ? read_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U32 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U32 val ? read_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U64 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U64 val ? read_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U128 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U128 val ? apply \u00b6 [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? update_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U8 val) : U8 val ? Parameters \u00b6 offset: USize val value: U8 val Returns \u00b6 U8 val ? update_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U16 val) : U16 val ? Parameters \u00b6 offset: USize val value: U16 val Returns \u00b6 U16 val ? update_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U32 val) : U32 val ? Parameters \u00b6 offset: USize val value: U32 val Returns \u00b6 U32 val ? update_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U64 val) : U64 val ? Parameters \u00b6 offset: USize val value: U64 val Returns \u00b6 U64 val ? update_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U128 val) : U128 val ? Parameters \u00b6 offset: USize val value: U128 val Returns \u00b6 U128 val ? update \u00b6 [Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? insert \u00b6 [Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. When inserting right beyond the last element, at index this.size() , the element will be appended, similar to push() , an insert at index 0 prepends the value to the array. An insert into an index beyond this.size() raises an error. let array = Array[U8](4) // [] array.insert(0, 0xDE)? // prepend: [0xDE] array.insert(array.size(), 0xBE)? // append: [0xDE; 0xBE] array.insert(1, 0xAD)? // insert: [0xDE; 0xAD; 0xBE] array.insert(array.size() + 1, 0xEF)? // error fun ref insert( i: USize val, value: A) : None val ? Parameters \u00b6 i: USize val value: A Returns \u00b6 None val ? delete \u00b6 [Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ? Parameters \u00b6 i: USize val Returns \u00b6 A^ ? truncate \u00b6 [Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val trim_in_place \u00b6 [Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 None val trim \u00b6 [Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : Array[A] val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 Array [A] val chop[optional B: (A & Any #send)] \u00b6 [Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements. The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below: class Example var other: (Example | None) = None let arr: Array[Example] iso = recover let obj1 = Example let obj2 = Example obj1.other = obj2 obj2.other = obj1 [obj1; obj2] end fun iso chop[optional B: (A & Any #send)]( split_point: USize val) : (Array[A] iso^ , Array[A] iso^) Parameters \u00b6 split_point: USize val Returns \u00b6 ( Array [A] iso^ , Array [A] iso^) unchop \u00b6 [Source] Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. fun iso unchop( b: Array[A] iso) : ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^) Parameters \u00b6 b: Array [A] iso Returns \u00b6 (( Array [A] iso^ , Array [A] iso^) | Array [A] iso^) copy_from[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A & Real[B] val & U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters \u00b6 src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val Returns \u00b6 None val copy_to \u00b6 [Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this->A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters \u00b6 dst: Array [this->A!] ref src_idx: USize val dst_idx: USize val len: USize val Returns \u00b6 None val remove \u00b6 [Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val Parameters \u00b6 i: USize val n: USize val Returns \u00b6 None val clear \u00b6 [Source] Remove all elements from the array. fun ref clear() : None val Returns \u00b6 None val push_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A & Real[B] val & U8 val)]( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val push_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A & Real[B] val & U8 val)]( value: U16 val) : None val Parameters \u00b6 value: U16 val Returns \u00b6 None val push_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A & Real[B] val & U8 val)]( value: U32 val) : None val Parameters \u00b6 value: U32 val Returns \u00b6 None val push_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A & Real[B] val & U8 val)]( value: U64 val) : None val Parameters \u00b6 value: U64 val Returns \u00b6 None val push_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A & Real[B] val & U8 val)]( value: U128 val) : None val Parameters \u00b6 value: U128 val Returns \u00b6 None val push \u00b6 [Source] Add an element to the end of the array. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val shift \u00b6 [Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val find \u00b6 [Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = 0, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ? Parameters \u00b6 value: A! offset: USize val = 0 nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 USize val ? contains \u00b6 [Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) => l == r} . fun box contains( value: A!, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : Bool val Parameters \u00b6 value: A! predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 Bool val rfind \u00b6 [Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = call, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ? Parameters \u00b6 value: A! offset: USize val = call nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 USize val ? clone \u00b6 [Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this->A!] ref^ Returns \u00b6 Array [this->A!] ref^ slice \u00b6 [Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Array[this->A!] ref^ Parameters \u00b6 from: USize val = 0 to: USize val = call step: USize val = 1 Returns \u00b6 Array [this->A!] ref^ permute \u00b6 [Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this->A!] ref^ ? Parameters \u00b6 indices: Iterator [ USize val] ref Returns \u00b6 Array [this->A!] ref^ ? reverse \u00b6 [Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this->A!] ref^ Returns \u00b6 Array [this->A!] ref^ reverse_in_place \u00b6 [Source] Reverse the array in place. fun ref reverse_in_place() : None val Returns \u00b6 None val swap_elements \u00b6 [Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ? Parameters \u00b6 i: USize val j: USize val Returns \u00b6 None val ? keys \u00b6 [Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayKeys [A, this-> Array [A] ref] ref^ values \u00b6 [Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayValues [A, this-> Array [A] ref] ref^ pairs \u00b6 [Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayPairs [A, this-> Array [A] ref] ref^ Private Functions \u00b6 _copy_to \u00b6 [Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this->A!] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val Parameters \u00b6 ptr: Pointer [this->A!] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0 Returns \u00b6 None val _element_size \u00b6 [Source] Element size in bytes for an element. fun box _element_size() : USize val Returns \u00b6 USize val","title":"class Array"},{"location":"builtin-Array/#arraya-a","text":"[Source] Contiguous, resizable memory to store elements of type A.","title":"Array[A: A]"},{"location":"builtin-Array/#usage","text":"Creating an Array of String: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space: let array = Array[String](10) // array.size() == 0 // array.space() >= 10 Accessing elements can be done via the apply(i: USize): this->A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a LIFO stack using those methods: while (array.size() > 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method: for element in array.values() do // do something with element end","title":"Usage"},{"location":"builtin-Array/#memory-allocation","text":"Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref","title":"Memory allocation"},{"location":"builtin-Array/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"builtin-Array/#constructors","text":"","title":"Constructors"},{"location":"builtin-Array/#create","text":"[Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : Array[A] ref^","title":"create"},{"location":"builtin-Array/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#init","text":"[Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^","title":"init"},{"location":"builtin-Array/#parameters_1","text":"from: A^ len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_1","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#from_cpointer","text":"[Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = 0) : Array[A] ref^","title":"from_cpointer"},{"location":"builtin-Array/#parameters_2","text":"ptr: Pointer [A] ref len: USize val alloc: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_2","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Array/#cpointer","text":"[Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = 0) : Pointer[A] tag","title":"cpointer"},{"location":"builtin-Array/#parameters_3","text":"offset: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_3","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Array/#size","text":"[Source] The number of elements in the array. fun box size() : USize val","title":"size"},{"location":"builtin-Array/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-Array/#space","text":"[Source] The available space in the array. fun box space() : USize val","title":"space"},{"location":"builtin-Array/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-Array/#reserve","text":"[Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Array/#parameters_4","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Array/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val","title":"compact"},{"location":"builtin-Array/#returns_7","text":"None val","title":"Returns"},{"location":"builtin-Array/#undefinedoptional-b-a-realb-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","text":"[Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"builtin-Array/#parameters_5","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Array/#read_u8optional-b-a-realb-val-u8-val","text":"[Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U8 val ?","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_6","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_9","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#read_u16optional-b-a-realb-val-u8-val","text":"[Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U16 val ?","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_7","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#read_u32optional-b-a-realb-val-u8-val","text":"[Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U32 val ?","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_8","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_11","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#read_u64optional-b-a-realb-val-u8-val","text":"[Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U64 val ?","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_9","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_12","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#read_u128optional-b-a-realb-val-u8-val","text":"[Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U128 val ?","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_10","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_13","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-Array/#parameters_11","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_14","text":"this->A ?","title":"Returns"},{"location":"builtin-Array/#update_u8optional-b-a-realb-val-u8-val","text":"[Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U8 val) : U8 val ?","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_12","text":"offset: USize val value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_15","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#update_u16optional-b-a-realb-val-u8-val","text":"[Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U16 val) : U16 val ?","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_13","text":"offset: USize val value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_16","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#update_u32optional-b-a-realb-val-u8-val","text":"[Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U32 val) : U32 val ?","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_14","text":"offset: USize val value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_17","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#update_u64optional-b-a-realb-val-u8-val","text":"[Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U64 val) : U64 val ?","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_15","text":"offset: USize val value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#update_u128optional-b-a-realb-val-u8-val","text":"[Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U128 val) : U128 val ?","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_16","text":"offset: USize val value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_19","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Array/#parameters_17","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_20","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#insert","text":"[Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. When inserting right beyond the last element, at index this.size() , the element will be appended, similar to push() , an insert at index 0 prepends the value to the array. An insert into an index beyond this.size() raises an error. let array = Array[U8](4) // [] array.insert(0, 0xDE)? // prepend: [0xDE] array.insert(array.size(), 0xBE)? // append: [0xDE; 0xBE] array.insert(1, 0xAD)? // insert: [0xDE; 0xAD; 0xBE] array.insert(array.size() + 1, 0xEF)? // error fun ref insert( i: USize val, value: A) : None val ?","title":"insert"},{"location":"builtin-Array/#parameters_18","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_21","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#delete","text":"[Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ?","title":"delete"},{"location":"builtin-Array/#parameters_19","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_22","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#truncate","text":"[Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Array/#parameters_20","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_23","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim_in_place","text":"[Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val","title":"trim_in_place"},{"location":"builtin-Array/#parameters_21","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_24","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim","text":"[Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : Array[A] val","title":"trim"},{"location":"builtin-Array/#parameters_22","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_25","text":"Array [A] val","title":"Returns"},{"location":"builtin-Array/#chopoptional-b-a-any-send","text":"[Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements. The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below: class Example var other: (Example | None) = None let arr: Array[Example] iso = recover let obj1 = Example let obj2 = Example obj1.other = obj2 obj2.other = obj1 [obj1; obj2] end fun iso chop[optional B: (A & Any #send)]( split_point: USize val) : (Array[A] iso^ , Array[A] iso^)","title":"chop[optional B: (A &amp; Any #send)]"},{"location":"builtin-Array/#parameters_23","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_26","text":"( Array [A] iso^ , Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#unchop","text":"[Source] Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. fun iso unchop( b: Array[A] iso) : ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)","title":"unchop"},{"location":"builtin-Array/#parameters_24","text":"b: Array [A] iso","title":"Parameters"},{"location":"builtin-Array/#returns_27","text":"(( Array [A] iso^ , Array [A] iso^) | Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#copy_fromoptional-b-a-realb-val-u8-val","text":"[Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A & Real[B] val & U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_25","text":"src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_28","text":"None val","title":"Returns"},{"location":"builtin-Array/#copy_to","text":"[Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this->A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_to"},{"location":"builtin-Array/#parameters_26","text":"dst: Array [this->A!] ref src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_29","text":"None val","title":"Returns"},{"location":"builtin-Array/#remove","text":"[Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val","title":"remove"},{"location":"builtin-Array/#parameters_27","text":"i: USize val n: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_30","text":"None val","title":"Returns"},{"location":"builtin-Array/#clear","text":"[Source] Remove all elements from the array. fun ref clear() : None val","title":"clear"},{"location":"builtin-Array/#returns_31","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u8optional-b-a-realb-val-u8-val","text":"[Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A & Real[B] val & U8 val)]( value: U8 val) : None val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_28","text":"value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_32","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u16optional-b-a-realb-val-u8-val","text":"[Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A & Real[B] val & U8 val)]( value: U16 val) : None val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_29","text":"value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_33","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u32optional-b-a-realb-val-u8-val","text":"[Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A & Real[B] val & U8 val)]( value: U32 val) : None val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_30","text":"value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_34","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u64optional-b-a-realb-val-u8-val","text":"[Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A & Real[B] val & U8 val)]( value: U64 val) : None val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_31","text":"value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_35","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u128optional-b-a-realb-val-u8-val","text":"[Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A & Real[B] val & U8 val)]( value: U128 val) : None val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_32","text":"value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_36","text":"None val","title":"Returns"},{"location":"builtin-Array/#push","text":"[Source] Add an element to the end of the array. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Array/#parameters_33","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_37","text":"None val","title":"Returns"},{"location":"builtin-Array/#pop","text":"[Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Array/#returns_38","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#unshift","text":"[Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Array/#parameters_34","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_39","text":"None val","title":"Returns"},{"location":"builtin-Array/#shift","text":"[Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Array/#returns_40","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-Array/#parameters_35","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-Array/#concat","text":"[Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-Array/#parameters_36","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_42","text":"None val","title":"Returns"},{"location":"builtin-Array/#find","text":"[Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = 0, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ?","title":"find"},{"location":"builtin-Array/#parameters_37","text":"value: A! offset: USize val = 0 nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_43","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#contains","text":"[Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) => l == r} . fun box contains( value: A!, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : Bool val","title":"contains"},{"location":"builtin-Array/#parameters_38","text":"value: A! predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_44","text":"Bool val","title":"Returns"},{"location":"builtin-Array/#rfind","text":"[Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = call, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ?","title":"rfind"},{"location":"builtin-Array/#parameters_39","text":"value: A! offset: USize val = call nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_45","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#clone","text":"[Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this->A!] ref^","title":"clone"},{"location":"builtin-Array/#returns_46","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#slice","text":"[Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Array[this->A!] ref^","title":"slice"},{"location":"builtin-Array/#parameters_40","text":"from: USize val = 0 to: USize val = call step: USize val = 1","title":"Parameters"},{"location":"builtin-Array/#returns_47","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#permute","text":"[Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this->A!] ref^ ?","title":"permute"},{"location":"builtin-Array/#parameters_41","text":"indices: Iterator [ USize val] ref","title":"Parameters"},{"location":"builtin-Array/#returns_48","text":"Array [this->A!] ref^ ?","title":"Returns"},{"location":"builtin-Array/#reverse","text":"[Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this->A!] ref^","title":"reverse"},{"location":"builtin-Array/#returns_49","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#reverse_in_place","text":"[Source] Reverse the array in place. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-Array/#returns_50","text":"None val","title":"Returns"},{"location":"builtin-Array/#swap_elements","text":"[Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ?","title":"swap_elements"},{"location":"builtin-Array/#parameters_42","text":"i: USize val j: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_51","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#keys","text":"[Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this->Array[A] ref] ref^","title":"keys"},{"location":"builtin-Array/#returns_52","text":"ArrayKeys [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#values","text":"[Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this->Array[A] ref] ref^","title":"values"},{"location":"builtin-Array/#returns_53","text":"ArrayValues [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#pairs","text":"[Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this->Array[A] ref] ref^","title":"pairs"},{"location":"builtin-Array/#returns_54","text":"ArrayPairs [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Array/#_copy_to","text":"[Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this->A!] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val","title":"_copy_to"},{"location":"builtin-Array/#parameters_43","text":"ptr: Pointer [this->A!] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_55","text":"None val","title":"Returns"},{"location":"builtin-Array/#_element_size","text":"[Source] Element size in bytes for an element. fun box _element_size() : USize val","title":"_element_size"},{"location":"builtin-Array/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-ArrayKeys/","text":"ArrayKeys[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref Implements \u00b6 Iterator [ USize val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayKeys[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayKeys [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : USize val Returns \u00b6 USize val","title":"class ArrayKeys"},{"location":"builtin-ArrayKeys/#arraykeysa-a-b-arraya-read","text":"[Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref","title":"ArrayKeys[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayKeys/#implements","text":"Iterator [ USize val] ref","title":"Implements"},{"location":"builtin-ArrayKeys/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayKeys/#create","text":"[Source] new ref create( array: B) : ArrayKeys[A, B] ref^","title":"create"},{"location":"builtin-ArrayKeys/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayKeys/#returns","text":"ArrayKeys [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayKeys/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayKeys/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayKeys/#next","text":"[Source] fun ref next() : USize val","title":"next"},{"location":"builtin-ArrayKeys/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-ArrayPairs/","text":"ArrayPairs[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B->A)] ref Implements \u00b6 Iterator [( USize val , B->A)] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayPairs[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayPairs [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : (USize val , B->A) ? Returns \u00b6 ( USize val , B->A) ?","title":"class ArrayPairs"},{"location":"builtin-ArrayPairs/#arraypairsa-a-b-arraya-read","text":"[Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B->A)] ref","title":"ArrayPairs[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayPairs/#implements","text":"Iterator [( USize val , B->A)] ref","title":"Implements"},{"location":"builtin-ArrayPairs/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayPairs/#create","text":"[Source] new ref create( array: B) : ArrayPairs[A, B] ref^","title":"create"},{"location":"builtin-ArrayPairs/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayPairs/#returns","text":"ArrayPairs [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayPairs/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayPairs/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayPairs/#next","text":"[Source] fun ref next() : (USize val , B->A) ?","title":"next"},{"location":"builtin-ArrayPairs/#returns_2","text":"( USize val , B->A) ?","title":"Returns"},{"location":"builtin-ArrayValues/","text":"ArrayValues[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B->A] ref Implements \u00b6 Iterator [B->A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayValues[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayValues [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : B->A ? Returns \u00b6 B->A ? rewind \u00b6 [Source] fun ref rewind() : ArrayValues[A, B] ref Returns \u00b6 ArrayValues [A, B] ref","title":"class ArrayValues"},{"location":"builtin-ArrayValues/#arrayvaluesa-a-b-arraya-read","text":"[Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B->A] ref","title":"ArrayValues[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayValues/#implements","text":"Iterator [B->A] ref","title":"Implements"},{"location":"builtin-ArrayValues/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayValues/#create","text":"[Source] new ref create( array: B) : ArrayValues[A, B] ref^","title":"create"},{"location":"builtin-ArrayValues/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayValues/#returns","text":"ArrayValues [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayValues/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayValues/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayValues/#next","text":"[Source] fun ref next() : B->A ?","title":"next"},{"location":"builtin-ArrayValues/#returns_2","text":"B->A ?","title":"Returns"},{"location":"builtin-ArrayValues/#rewind","text":"[Source] fun ref rewind() : ArrayValues[A, B] ref","title":"rewind"},{"location":"builtin-ArrayValues/#returns_3","text":"ArrayValues [A, B] ref","title":"Returns"},{"location":"builtin-AsioEvent/","text":"AsioEvent \u00b6 [Source] Functions for asynchronous event notification. primitive val AsioEvent Constructors \u00b6 create \u00b6 [Source] new val create() : AsioEvent val^ Returns \u00b6 AsioEvent val^ Public Functions \u00b6 none \u00b6 [Source] An empty event. fun box none() : Pointer[AsioEvent val] tag Returns \u00b6 Pointer [ AsioEvent val] tag readable \u00b6 [Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val writeable \u00b6 [Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val disposable \u00b6 [Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val oneshotable \u00b6 [Source] Returns true if the flags contain the oneshot flag. fun box oneshotable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val dispose \u00b6 [Source] fun box dispose() : U32 val Returns \u00b6 U32 val read \u00b6 [Source] fun box read() : U32 val Returns \u00b6 U32 val write \u00b6 [Source] fun box write() : U32 val Returns \u00b6 U32 val timer \u00b6 [Source] fun box timer() : U32 val Returns \u00b6 U32 val signal \u00b6 [Source] fun box signal() : U32 val Returns \u00b6 U32 val read_write \u00b6 [Source] fun box read_write() : U32 val Returns \u00b6 U32 val oneshot \u00b6 [Source] fun box oneshot() : U32 val Returns \u00b6 U32 val read_write_oneshot \u00b6 [Source] fun box read_write_oneshot() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: AsioEvent val) : Bool val Parameters \u00b6 that: AsioEvent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AsioEvent val) : Bool val Parameters \u00b6 that: AsioEvent val Returns \u00b6 Bool val","title":"primitive AsioEvent"},{"location":"builtin-AsioEvent/#asioevent","text":"[Source] Functions for asynchronous event notification. primitive val AsioEvent","title":"AsioEvent"},{"location":"builtin-AsioEvent/#constructors","text":"","title":"Constructors"},{"location":"builtin-AsioEvent/#create","text":"[Source] new val create() : AsioEvent val^","title":"create"},{"location":"builtin-AsioEvent/#returns","text":"AsioEvent val^","title":"Returns"},{"location":"builtin-AsioEvent/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AsioEvent/#none","text":"[Source] An empty event. fun box none() : Pointer[AsioEvent val] tag","title":"none"},{"location":"builtin-AsioEvent/#returns_1","text":"Pointer [ AsioEvent val] tag","title":"Returns"},{"location":"builtin-AsioEvent/#readable","text":"[Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val","title":"readable"},{"location":"builtin-AsioEvent/#parameters","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#writeable","text":"[Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val","title":"writeable"},{"location":"builtin-AsioEvent/#parameters_1","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#disposable","text":"[Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val","title":"disposable"},{"location":"builtin-AsioEvent/#parameters_2","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshotable","text":"[Source] Returns true if the flags contain the oneshot flag. fun box oneshotable( flags: U32 val) : Bool val","title":"oneshotable"},{"location":"builtin-AsioEvent/#parameters_3","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#dispose","text":"[Source] fun box dispose() : U32 val","title":"dispose"},{"location":"builtin-AsioEvent/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read","text":"[Source] fun box read() : U32 val","title":"read"},{"location":"builtin-AsioEvent/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#write","text":"[Source] fun box write() : U32 val","title":"write"},{"location":"builtin-AsioEvent/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#timer","text":"[Source] fun box timer() : U32 val","title":"timer"},{"location":"builtin-AsioEvent/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#signal","text":"[Source] fun box signal() : U32 val","title":"signal"},{"location":"builtin-AsioEvent/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write","text":"[Source] fun box read_write() : U32 val","title":"read_write"},{"location":"builtin-AsioEvent/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshot","text":"[Source] fun box oneshot() : U32 val","title":"oneshot"},{"location":"builtin-AsioEvent/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write_oneshot","text":"[Source] fun box read_write_oneshot() : U32 val","title":"read_write_oneshot"},{"location":"builtin-AsioEvent/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#eq","text":"[Source] fun box eq( that: AsioEvent val) : Bool val","title":"eq"},{"location":"builtin-AsioEvent/#parameters_4","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#ne","text":"[Source] fun box ne( that: AsioEvent val) : Bool val","title":"ne"},{"location":"builtin-AsioEvent/#parameters_5","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEventID/","text":"AsioEventID \u00b6 [Source] type AsioEventID is Pointer[AsioEvent val] tag Type Alias For \u00b6 Pointer [ AsioEvent val] tag","title":"type AsioEventID"},{"location":"builtin-AsioEventID/#asioeventid","text":"[Source] type AsioEventID is Pointer[AsioEvent val] tag","title":"AsioEventID"},{"location":"builtin-AsioEventID/#type-alias-for","text":"Pointer [ AsioEvent val] tag","title":"Type Alias For"},{"location":"builtin-AsioEventNotify/","text":"AsioEventNotify \u00b6 [Source] interface tag AsioEventNotify Private Behaviours \u00b6 _event_notify \u00b6 [Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"interface AsioEventNotify"},{"location":"builtin-AsioEventNotify/#asioeventnotify","text":"[Source] interface tag AsioEventNotify","title":"AsioEventNotify"},{"location":"builtin-AsioEventNotify/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-AsioEventNotify/#_event_notify","text":"[Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-AsioEventNotify/#parameters","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Bool/","text":"Bool \u00b6 [Source] primitive val Bool is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create( from: Bool val) : Bool val^ Parameters \u00b6 from: Bool val Returns \u00b6 Bool val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_and \u00b6 [Source] fun box op_and( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_or \u00b6 [Source] fun box op_or( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_xor \u00b6 [Source] fun box op_xor( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_not \u00b6 [Source] fun box op_not() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^","title":"primitive Bool"},{"location":"builtin-Bool/#bool","text":"[Source] primitive val Bool is Stringable box","title":"Bool"},{"location":"builtin-Bool/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-Bool/#constructors","text":"","title":"Constructors"},{"location":"builtin-Bool/#create","text":"[Source] new val create( from: Bool val) : Bool val^","title":"create"},{"location":"builtin-Bool/#parameters","text":"from: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns","text":"Bool val^","title":"Returns"},{"location":"builtin-Bool/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Bool/#eq","text":"[Source] fun box eq( y: Bool val) : Bool val","title":"eq"},{"location":"builtin-Bool/#parameters_1","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#ne","text":"[Source] fun box ne( y: Bool val) : Bool val","title":"ne"},{"location":"builtin-Bool/#parameters_2","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_and","text":"[Source] fun box op_and( y: Bool val) : Bool val","title":"op_and"},{"location":"builtin-Bool/#parameters_3","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_or","text":"[Source] fun box op_or( y: Bool val) : Bool val","title":"op_or"},{"location":"builtin-Bool/#parameters_4","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_xor","text":"[Source] fun box op_xor( y: Bool val) : Bool val","title":"op_xor"},{"location":"builtin-Bool/#parameters_5","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_not","text":"[Source] fun box op_not() : Bool val","title":"op_not"},{"location":"builtin-Bool/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Bool/#returns_7","text":"String iso^","title":"Returns"},{"location":"builtin-ByteSeq/","text":"ByteSeq \u00b6 [Source] type ByteSeq is (String val | Array[U8 val] val) Type Alias For \u00b6 ( String val | Array [ U8 val] val)","title":"type ByteSeq"},{"location":"builtin-ByteSeq/#byteseq","text":"[Source] type ByteSeq is (String val | Array[U8 val] val)","title":"ByteSeq"},{"location":"builtin-ByteSeq/#type-alias-for","text":"( String val | Array [ U8 val] val)","title":"Type Alias For"},{"location":"builtin-ByteSeqIter/","text":"ByteSeqIter \u00b6 [Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter Public Functions \u00b6 values \u00b6 [Source] fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref Returns \u00b6 Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"interface ByteSeqIter"},{"location":"builtin-ByteSeqIter/#byteseqiter","text":"[Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter","title":"ByteSeqIter"},{"location":"builtin-ByteSeqIter/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ByteSeqIter/#values","text":"[Source] fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref","title":"values"},{"location":"builtin-ByteSeqIter/#returns","text":"Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"Returns"},{"location":"builtin-Comparable/","text":"Comparable[A: Comparable [A] #read] \u00b6 [Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref Implements \u00b6 Equatable [A] ref Public Functions \u00b6 lt \u00b6 [Source] fun box lt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val compare \u00b6 [Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface Comparable"},{"location":"builtin-Comparable/#comparablea-comparablea-read","text":"[Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref","title":"Comparable[A: Comparable[A] #read]"},{"location":"builtin-Comparable/#implements","text":"Equatable [A] ref","title":"Implements"},{"location":"builtin-Comparable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Comparable/#lt","text":"[Source] fun box lt( that: box->A) : Bool val","title":"lt"},{"location":"builtin-Comparable/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#le","text":"[Source] fun box le( that: box->A) : Bool val","title":"le"},{"location":"builtin-Comparable/#parameters_1","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ge","text":"[Source] fun box ge( that: box->A) : Bool val","title":"ge"},{"location":"builtin-Comparable/#parameters_2","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#gt","text":"[Source] fun box gt( that: box->A) : Bool val","title":"gt"},{"location":"builtin-Comparable/#parameters_3","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#compare","text":"[Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Comparable/#parameters_4","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_4","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Comparable/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-Comparable/#parameters_5","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ne","text":"[Source] fun box ne( that: box->A) : Bool val","title":"ne"},{"location":"builtin-Comparable/#parameters_6","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Compare/","text":"Compare \u00b6 [Source] type Compare is (Less val | Equal val | Greater val) Type Alias For \u00b6 ( Less val | Equal val | Greater val)","title":"type Compare"},{"location":"builtin-Compare/#compare","text":"[Source] type Compare is (Less val | Equal val | Greater val)","title":"Compare"},{"location":"builtin-Compare/#type-alias-for","text":"( Less val | Equal val | Greater val)","title":"Type Alias For"},{"location":"builtin-DisposableActor/","text":"DisposableActor \u00b6 [Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor Public Behaviours \u00b6 dispose \u00b6 [Source] be dispose()","title":"interface DisposableActor"},{"location":"builtin-DisposableActor/#disposableactor","text":"[Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor","title":"DisposableActor"},{"location":"builtin-DisposableActor/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-DisposableActor/#dispose","text":"[Source] be dispose()","title":"dispose"},{"location":"builtin-DoNotOptimise/","text":"DoNotOptimise \u00b6 [Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise Constructors \u00b6 create \u00b6 [Source] new val create() : DoNotOptimise val^ Returns \u00b6 DoNotOptimise val^ Public Functions \u00b6 apply[A: A] \u00b6 [Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val Parameters \u00b6 obj: A Returns \u00b6 None val observe \u00b6 [Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: DoNotOptimise val) : Bool val Parameters \u00b6 that: DoNotOptimise val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DoNotOptimise val) : Bool val Parameters \u00b6 that: DoNotOptimise val Returns \u00b6 Bool val","title":"primitive DoNotOptimise"},{"location":"builtin-DoNotOptimise/#donotoptimise","text":"[Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise","title":"DoNotOptimise"},{"location":"builtin-DoNotOptimise/#constructors","text":"","title":"Constructors"},{"location":"builtin-DoNotOptimise/#create","text":"[Source] new val create() : DoNotOptimise val^","title":"create"},{"location":"builtin-DoNotOptimise/#returns","text":"DoNotOptimise val^","title":"Returns"},{"location":"builtin-DoNotOptimise/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-DoNotOptimise/#applya-a","text":"[Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val","title":"apply[A: A]"},{"location":"builtin-DoNotOptimise/#parameters","text":"obj: A","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#observe","text":"[Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val","title":"observe"},{"location":"builtin-DoNotOptimise/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#eq","text":"[Source] fun box eq( that: DoNotOptimise val) : Bool val","title":"eq"},{"location":"builtin-DoNotOptimise/#parameters_1","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-DoNotOptimise/#ne","text":"[Source] fun box ne( that: DoNotOptimise val) : Bool val","title":"ne"},{"location":"builtin-DoNotOptimise/#parameters_2","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Env/","text":"Env \u00b6 [Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env Constructors \u00b6 _create \u00b6 [Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^ Parameters \u00b6 argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val Returns \u00b6 Env ref^ create \u00b6 [Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^ Parameters \u00b6 root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val Returns \u00b6 Env val^ Public fields \u00b6 let root: ( AmbientAuth val | None val) \u00b6 [Source] The root capability. Can be None for artificially constructed Env instances. let input: InputStream tag \u00b6 [Source] Stdin represented as an actor. let out: OutStream tag \u00b6 [Source] Stdout let err: OutStream tag \u00b6 [Source] Stderr let args: Array [ String val] val \u00b6 [Source] The command line used to start the program. let vars: Array [ String val] val \u00b6 [Source] The program's environment variables. let exitcode: {(I32)} val \u00b6 [Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. Private Functions \u00b6 _count_strings \u00b6 [Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val Parameters \u00b6 data: Pointer [ Pointer [ U8 val] ref] val Returns \u00b6 USize val _strings_from_pointers \u00b6 [Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^ Parameters \u00b6 data: Pointer [ Pointer [ U8 val] ref] val len: USize val Returns \u00b6 Array [ String val] iso^","title":"class Env"},{"location":"builtin-Env/#env","text":"[Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env","title":"Env"},{"location":"builtin-Env/#constructors","text":"","title":"Constructors"},{"location":"builtin-Env/#_create","text":"[Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^","title":"_create"},{"location":"builtin-Env/#parameters","text":"argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns","text":"Env ref^","title":"Returns"},{"location":"builtin-Env/#create","text":"[Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^","title":"create"},{"location":"builtin-Env/#parameters_1","text":"root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val","title":"Parameters"},{"location":"builtin-Env/#returns_1","text":"Env val^","title":"Returns"},{"location":"builtin-Env/#public-fields","text":"","title":"Public fields"},{"location":"builtin-Env/#let-root-ambientauth-val-none-val","text":"[Source] The root capability. Can be None for artificially constructed Env instances.","title":"let root: (AmbientAuth val | None val)"},{"location":"builtin-Env/#let-input-inputstream-tag","text":"[Source] Stdin represented as an actor.","title":"let input: InputStream tag"},{"location":"builtin-Env/#let-out-outstream-tag","text":"[Source] Stdout","title":"let out: OutStream tag"},{"location":"builtin-Env/#let-err-outstream-tag","text":"[Source] Stderr","title":"let err: OutStream tag"},{"location":"builtin-Env/#let-args-arraystring-val-val","text":"[Source] The command line used to start the program.","title":"let args: Array[String val] val"},{"location":"builtin-Env/#let-vars-arraystring-val-val","text":"[Source] The program's environment variables.","title":"let vars: Array[String val] val"},{"location":"builtin-Env/#let-exitcode-i32-val","text":"[Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.","title":"let exitcode: {(I32)} val"},{"location":"builtin-Env/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Env/#_count_strings","text":"[Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val","title":"_count_strings"},{"location":"builtin-Env/#parameters_2","text":"data: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Env/#_strings_from_pointers","text":"[Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^","title":"_strings_from_pointers"},{"location":"builtin-Env/#parameters_3","text":"data: Pointer [ Pointer [ U8 val] ref] val len: USize val","title":"Parameters"},{"location":"builtin-Env/#returns_3","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-Equal/","text":"Equal \u00b6 [Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Equal val^ Returns \u00b6 Equal val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Equal"},{"location":"builtin-Equal/#equal","text":"[Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref","title":"Equal"},{"location":"builtin-Equal/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Equal/#constructors","text":"","title":"Constructors"},{"location":"builtin-Equal/#create","text":"[Source] new val create() : Equal val^","title":"create"},{"location":"builtin-Equal/#returns","text":"Equal val^","title":"Returns"},{"location":"builtin-Equal/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equal/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Equal/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Equal/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Equal/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Equal/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Equal/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/","text":"Equatable[A: Equatable [A] #read] \u00b6 [Source] interface ref Equatable[A: Equatable[A] #read] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface Equatable"},{"location":"builtin-Equatable/#equatablea-equatablea-read","text":"[Source] interface ref Equatable[A: Equatable[A] #read]","title":"Equatable[A: Equatable[A] #read]"},{"location":"builtin-Equatable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equatable/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-Equatable/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-Equatable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/#ne","text":"[Source] fun box ne( that: box->A) : Bool val","title":"ne"},{"location":"builtin-Equatable/#parameters_1","text":"that: box->A","title":"Parameters"},{"location":"builtin-Equatable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-F32/","text":"F32 \u00b6 [Source] primitive val F32 is FloatingPoint[F32 val] val Implements \u00b6 FloatingPoint [ F32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: F32 val = 0) : F32 val^ Parameters \u00b6 value: F32 val = 0 Returns \u00b6 F32 val^ pi \u00b6 [Source] new val pi() : F32 val^ Returns \u00b6 F32 val^ e \u00b6 [Source] new val e() : F32 val^ Returns \u00b6 F32 val^ _nan \u00b6 [Source] new val _nan() : F32 val^ Returns \u00b6 F32 val^ _inf \u00b6 [Source] new val _inf( negative: Bool val) : F32 val^ Parameters \u00b6 negative: Bool val Returns \u00b6 F32 val^ from_bits \u00b6 [Source] new val from_bits( i: U32 val) : F32 val^ Parameters \u00b6 i: U32 val Returns \u00b6 F32 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F32 val^ Parameters \u00b6 a: B Returns \u00b6 F32 val^ min_value \u00b6 [Source] Minimum negative value representable. new val min_value() : F32 val^ Returns \u00b6 F32 val^ max_value \u00b6 [Source] Maximum positive value representable. new val max_value() : F32 val^ Returns \u00b6 F32 val^ min_normalised \u00b6 [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^ Returns \u00b6 F32 val^ epsilon \u00b6 [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^ Returns \u00b6 F32 val^ Public Functions \u00b6 bits \u00b6 [Source] fun box bits() : U32 val Returns \u00b6 U32 val radix \u00b6 [Source] Exponent radix. fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns \u00b6 I16 val abs \u00b6 [Source] fun box abs() : F32 val Returns \u00b6 F32 val ceil \u00b6 [Source] fun box ceil() : F32 val Returns \u00b6 F32 val floor \u00b6 [Source] fun box floor() : F32 val Returns \u00b6 F32 val round \u00b6 [Source] fun box round() : F32 val Returns \u00b6 F32 val trunc \u00b6 [Source] fun box trunc() : F32 val Returns \u00b6 F32 val min \u00b6 [Source] fun box min( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val max \u00b6 [Source] fun box max( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val fld \u00b6 [Source] fun box fld( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mod \u00b6 [Source] fun box mod( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val finite \u00b6 [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] Check whether this number is NaN. fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val Parameters \u00b6 x: F32 val exponent: I32 val Returns \u00b6 F32 val frexp \u00b6 [Source] fun box frexp() : (F32 val , U32 val) Returns \u00b6 ( F32 val , U32 val) log \u00b6 [Source] fun box log() : F32 val Returns \u00b6 F32 val log2 \u00b6 [Source] fun box log2() : F32 val Returns \u00b6 F32 val log10 \u00b6 [Source] fun box log10() : F32 val Returns \u00b6 F32 val logb \u00b6 [Source] fun box logb() : F32 val Returns \u00b6 F32 val pow \u00b6 [Source] fun box pow( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val powi \u00b6 [Source] fun box powi( y: I32 val) : F32 val Parameters \u00b6 y: I32 val Returns \u00b6 F32 val sqrt \u00b6 [Source] fun box sqrt() : F32 val Returns \u00b6 F32 val sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val Returns \u00b6 F32 val cbrt \u00b6 [Source] fun box cbrt() : F32 val Returns \u00b6 F32 val exp \u00b6 [Source] fun box exp() : F32 val Returns \u00b6 F32 val exp2 \u00b6 [Source] fun box exp2() : F32 val Returns \u00b6 F32 val cos \u00b6 [Source] fun box cos() : F32 val Returns \u00b6 F32 val sin \u00b6 [Source] fun box sin() : F32 val Returns \u00b6 F32 val tan \u00b6 [Source] fun box tan() : F32 val Returns \u00b6 F32 val cosh \u00b6 [Source] fun box cosh() : F32 val Returns \u00b6 F32 val sinh \u00b6 [Source] fun box sinh() : F32 val Returns \u00b6 F32 val tanh \u00b6 [Source] fun box tanh() : F32 val Returns \u00b6 F32 val acos \u00b6 [Source] fun box acos() : F32 val Returns \u00b6 F32 val asin \u00b6 [Source] fun box asin() : F32 val Returns \u00b6 F32 val atan \u00b6 [Source] fun box atan() : F32 val Returns \u00b6 F32 val atan2 \u00b6 [Source] fun box atan2( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val acosh \u00b6 [Source] fun box acosh() : F32 val Returns \u00b6 F32 val asinh \u00b6 [Source] fun box asinh() : F32 val Returns \u00b6 F32 val atanh \u00b6 [Source] fun box atanh() : F32 val Returns \u00b6 F32 val copysign \u00b6 [Source] fun box copysign( sign: F32 val) : F32 val Parameters \u00b6 sign: F32 val Returns \u00b6 F32 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val add_unsafe \u00b6 [Source] fun box add_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val div_unsafe \u00b6 [Source] fun box div_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val) Parameters \u00b6 y: F32 val Returns \u00b6 ( F32 val , F32 val) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val neg_unsafe \u00b6 [Source] fun box neg_unsafe() : F32 val Returns \u00b6 F32 val eq_unsafe \u00b6 [Source] fun box eq_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] fun box ne_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] fun box lt_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val le_unsafe \u00b6 [Source] fun box le_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] fun box ge_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] fun box gt_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val sub \u00b6 [Source] fun box sub( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mul \u00b6 [Source] fun box mul( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val div \u00b6 [Source] fun box div( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val divrem \u00b6 [Source] fun box divrem( y: F32 val) : (F32 val , F32 val) Parameters \u00b6 y: F32 val Returns \u00b6 ( F32 val , F32 val) rem \u00b6 [Source] fun box rem( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val neg \u00b6 [Source] fun box neg() : F32 val Returns \u00b6 F32 val eq \u00b6 [Source] fun box eq( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: F32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: F32 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : F32 val Returns \u00b6 F32 val","title":"primitive F32"},{"location":"builtin-F32/#f32","text":"[Source] primitive val F32 is FloatingPoint[F32 val] val","title":"F32"},{"location":"builtin-F32/#implements","text":"FloatingPoint [ F32 val] val","title":"Implements"},{"location":"builtin-F32/#constructors","text":"","title":"Constructors"},{"location":"builtin-F32/#create","text":"[Source] new val create( value: F32 val = 0) : F32 val^","title":"create"},{"location":"builtin-F32/#parameters","text":"value: F32 val = 0","title":"Parameters"},{"location":"builtin-F32/#returns","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#pi","text":"[Source] new val pi() : F32 val^","title":"pi"},{"location":"builtin-F32/#returns_1","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#e","text":"[Source] new val e() : F32 val^","title":"e"},{"location":"builtin-F32/#returns_2","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_nan","text":"[Source] new val _nan() : F32 val^","title":"_nan"},{"location":"builtin-F32/#returns_3","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_inf","text":"[Source] new val _inf( negative: Bool val) : F32 val^","title":"_inf"},{"location":"builtin-F32/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F32/#returns_4","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from_bits","text":"[Source] new val from_bits( i: U32 val) : F32 val^","title":"from_bits"},{"location":"builtin-F32/#parameters_2","text":"i: U32 val","title":"Parameters"},{"location":"builtin-F32/#returns_5","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F32 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F32/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F32/#returns_6","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F32 val^","title":"min_value"},{"location":"builtin-F32/#returns_7","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F32 val^","title":"max_value"},{"location":"builtin-F32/#returns_8","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^","title":"min_normalised"},{"location":"builtin-F32/#returns_9","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^","title":"epsilon"},{"location":"builtin-F32/#returns_10","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F32/#bits","text":"[Source] fun box bits() : U32 val","title":"bits"},{"location":"builtin-F32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F32/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F32/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F32/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F32/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F32/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F32/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F32/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#abs","text":"[Source] fun box abs() : F32 val","title":"abs"},{"location":"builtin-F32/#returns_19","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#ceil","text":"[Source] fun box ceil() : F32 val","title":"ceil"},{"location":"builtin-F32/#returns_20","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#floor","text":"[Source] fun box floor() : F32 val","title":"floor"},{"location":"builtin-F32/#returns_21","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#round","text":"[Source] fun box round() : F32 val","title":"round"},{"location":"builtin-F32/#returns_22","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#trunc","text":"[Source] fun box trunc() : F32 val","title":"trunc"},{"location":"builtin-F32/#returns_23","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#min","text":"[Source] fun box min( y: F32 val) : F32 val","title":"min"},{"location":"builtin-F32/#parameters_4","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_24","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#max","text":"[Source] fun box max( y: F32 val) : F32 val","title":"max"},{"location":"builtin-F32/#parameters_5","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_25","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#fld","text":"[Source] fun box fld( y: F32 val) : F32 val","title":"fld"},{"location":"builtin-F32/#parameters_6","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_26","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: F32 val) : F32 val","title":"fld_unsafe"},{"location":"builtin-F32/#parameters_7","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_27","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mod","text":"[Source] fun box mod( y: F32 val) : F32 val","title":"mod"},{"location":"builtin-F32/#parameters_8","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_28","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: F32 val) : F32 val","title":"mod_unsafe"},{"location":"builtin-F32/#parameters_9","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_29","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F32/#returns_30","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F32/#returns_31","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F32/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ldexp","text":"[Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val","title":"ldexp"},{"location":"builtin-F32/#parameters_10","text":"x: F32 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#frexp","text":"[Source] fun box frexp() : (F32 val , U32 val)","title":"frexp"},{"location":"builtin-F32/#returns_34","text":"( F32 val , U32 val)","title":"Returns"},{"location":"builtin-F32/#log","text":"[Source] fun box log() : F32 val","title":"log"},{"location":"builtin-F32/#returns_35","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log2","text":"[Source] fun box log2() : F32 val","title":"log2"},{"location":"builtin-F32/#returns_36","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log10","text":"[Source] fun box log10() : F32 val","title":"log10"},{"location":"builtin-F32/#returns_37","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#logb","text":"[Source] fun box logb() : F32 val","title":"logb"},{"location":"builtin-F32/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#pow","text":"[Source] fun box pow( y: F32 val) : F32 val","title":"pow"},{"location":"builtin-F32/#parameters_11","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_39","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#powi","text":"[Source] fun box powi( y: I32 val) : F32 val","title":"powi"},{"location":"builtin-F32/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_40","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt","text":"[Source] fun box sqrt() : F32 val","title":"sqrt"},{"location":"builtin-F32/#returns_41","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val","title":"sqrt_unsafe"},{"location":"builtin-F32/#returns_42","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cbrt","text":"[Source] fun box cbrt() : F32 val","title":"cbrt"},{"location":"builtin-F32/#returns_43","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp","text":"[Source] fun box exp() : F32 val","title":"exp"},{"location":"builtin-F32/#returns_44","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp2","text":"[Source] fun box exp2() : F32 val","title":"exp2"},{"location":"builtin-F32/#returns_45","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cos","text":"[Source] fun box cos() : F32 val","title":"cos"},{"location":"builtin-F32/#returns_46","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sin","text":"[Source] fun box sin() : F32 val","title":"sin"},{"location":"builtin-F32/#returns_47","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tan","text":"[Source] fun box tan() : F32 val","title":"tan"},{"location":"builtin-F32/#returns_48","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cosh","text":"[Source] fun box cosh() : F32 val","title":"cosh"},{"location":"builtin-F32/#returns_49","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sinh","text":"[Source] fun box sinh() : F32 val","title":"sinh"},{"location":"builtin-F32/#returns_50","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tanh","text":"[Source] fun box tanh() : F32 val","title":"tanh"},{"location":"builtin-F32/#returns_51","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acos","text":"[Source] fun box acos() : F32 val","title":"acos"},{"location":"builtin-F32/#returns_52","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asin","text":"[Source] fun box asin() : F32 val","title":"asin"},{"location":"builtin-F32/#returns_53","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan","text":"[Source] fun box atan() : F32 val","title":"atan"},{"location":"builtin-F32/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan2","text":"[Source] fun box atan2( y: F32 val) : F32 val","title":"atan2"},{"location":"builtin-F32/#parameters_13","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_55","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acosh","text":"[Source] fun box acosh() : F32 val","title":"acosh"},{"location":"builtin-F32/#returns_56","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asinh","text":"[Source] fun box asinh() : F32 val","title":"asinh"},{"location":"builtin-F32/#returns_57","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atanh","text":"[Source] fun box atanh() : F32 val","title":"atanh"},{"location":"builtin-F32/#returns_58","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#copysign","text":"[Source] fun box copysign( sign: F32 val) : F32 val","title":"copysign"},{"location":"builtin-F32/#parameters_14","text":"sign: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_59","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F32/#returns_60","text":"USize val","title":"Returns"},{"location":"builtin-F32/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F32/#returns_61","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F32/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F32/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F32/#returns_64","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F32/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#add_unsafe","text":"[Source] fun box add_unsafe( y: F32 val) : F32 val","title":"add_unsafe"},{"location":"builtin-F32/#parameters_15","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_66","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F32 val) : F32 val","title":"sub_unsafe"},{"location":"builtin-F32/#parameters_16","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_67","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F32 val) : F32 val","title":"mul_unsafe"},{"location":"builtin-F32/#parameters_17","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_68","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div_unsafe","text":"[Source] fun box div_unsafe( y: F32 val) : F32 val","title":"div_unsafe"},{"location":"builtin-F32/#parameters_18","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_69","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val)","title":"divrem_unsafe"},{"location":"builtin-F32/#parameters_19","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_70","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F32 val) : F32 val","title":"rem_unsafe"},{"location":"builtin-F32/#parameters_20","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_71","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F32 val","title":"neg_unsafe"},{"location":"builtin-F32/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F32 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F32/#parameters_21","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F32 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F32/#parameters_22","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F32 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F32/#parameters_23","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le_unsafe","text":"[Source] fun box le_unsafe( y: F32 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F32/#parameters_24","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F32 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F32/#parameters_25","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_77","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F32 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F32/#parameters_26","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_78","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F32/#returns_79","text":"String iso^","title":"Returns"},{"location":"builtin-F32/#add","text":"[Source] fun box add( y: F32 val) : F32 val","title":"add"},{"location":"builtin-F32/#parameters_27","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub","text":"[Source] fun box sub( y: F32 val) : F32 val","title":"sub"},{"location":"builtin-F32/#parameters_28","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_81","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul","text":"[Source] fun box mul( y: F32 val) : F32 val","title":"mul"},{"location":"builtin-F32/#parameters_29","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_82","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div","text":"[Source] fun box div( y: F32 val) : F32 val","title":"div"},{"location":"builtin-F32/#parameters_30","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem","text":"[Source] fun box divrem( y: F32 val) : (F32 val , F32 val)","title":"divrem"},{"location":"builtin-F32/#parameters_31","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_84","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem","text":"[Source] fun box rem( y: F32 val) : F32 val","title":"rem"},{"location":"builtin-F32/#parameters_32","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_85","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg","text":"[Source] fun box neg() : F32 val","title":"neg"},{"location":"builtin-F32/#returns_86","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq","text":"[Source] fun box eq( y: F32 val) : Bool val","title":"eq"},{"location":"builtin-F32/#parameters_33","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne","text":"[Source] fun box ne( y: F32 val) : Bool val","title":"ne"},{"location":"builtin-F32/#parameters_34","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt","text":"[Source] fun box lt( y: F32 val) : Bool val","title":"lt"},{"location":"builtin-F32/#parameters_35","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_89","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le","text":"[Source] fun box le( y: F32 val) : Bool val","title":"le"},{"location":"builtin-F32/#parameters_36","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_90","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge","text":"[Source] fun box ge( y: F32 val) : Bool val","title":"ge"},{"location":"builtin-F32/#parameters_37","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_91","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt","text":"[Source] fun box gt( y: F32 val) : Bool val","title":"gt"},{"location":"builtin-F32/#parameters_38","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_92","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F32/#returns_93","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F32/#returns_94","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F32/#returns_95","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F32/#returns_96","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F32/#returns_97","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F32/#returns_98","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F32/#returns_99","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F32/#returns_100","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F32/#returns_101","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F32/#returns_102","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F32/#returns_103","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F32/#returns_104","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_1","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F32/#returns_105","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F32/#returns_106","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F32/#returns_107","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F32/#returns_108","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F32/#returns_109","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F32/#returns_110","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F32/#returns_111","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F32/#returns_112","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F32/#returns_113","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F32/#returns_114","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F32/#returns_115","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F32/#returns_116","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F32/#returns_117","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F32/#returns_118","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F32/#returns_119","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F32/#returns_120","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#compare","text":"fun box compare( that: F32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F32/#parameters_39","text":"that: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_121","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F32/#_value","text":"[Source] fun box _value() : F32 val","title":"_value"},{"location":"builtin-F32/#returns_122","text":"F32 val","title":"Returns"},{"location":"builtin-F64/","text":"F64 \u00b6 [Source] primitive val F64 is FloatingPoint[F64 val] val Implements \u00b6 FloatingPoint [ F64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: F64 val = 0) : F64 val^ Parameters \u00b6 value: F64 val = 0 Returns \u00b6 F64 val^ pi \u00b6 [Source] new val pi() : F64 val^ Returns \u00b6 F64 val^ e \u00b6 [Source] new val e() : F64 val^ Returns \u00b6 F64 val^ _nan \u00b6 [Source] new val _nan() : F64 val^ Returns \u00b6 F64 val^ _inf \u00b6 [Source] new val _inf( negative: Bool val) : F64 val^ Parameters \u00b6 negative: Bool val Returns \u00b6 F64 val^ from_bits \u00b6 [Source] new val from_bits( i: U64 val) : F64 val^ Parameters \u00b6 i: U64 val Returns \u00b6 F64 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F64 val^ Parameters \u00b6 a: B Returns \u00b6 F64 val^ min_value \u00b6 [Source] Minimum negative value representable. new val min_value() : F64 val^ Returns \u00b6 F64 val^ max_value \u00b6 [Source] Maximum positive value representable. new val max_value() : F64 val^ Returns \u00b6 F64 val^ min_normalised \u00b6 [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^ Returns \u00b6 F64 val^ epsilon \u00b6 [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^ Returns \u00b6 F64 val^ Public Functions \u00b6 bits \u00b6 [Source] fun box bits() : U64 val Returns \u00b6 U64 val radix \u00b6 [Source] Exponent radix. fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns \u00b6 I16 val abs \u00b6 [Source] fun box abs() : F64 val Returns \u00b6 F64 val ceil \u00b6 [Source] fun box ceil() : F64 val Returns \u00b6 F64 val floor \u00b6 [Source] fun box floor() : F64 val Returns \u00b6 F64 val round \u00b6 [Source] fun box round() : F64 val Returns \u00b6 F64 val trunc \u00b6 [Source] fun box trunc() : F64 val Returns \u00b6 F64 val min \u00b6 [Source] fun box min( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val max \u00b6 [Source] fun box max( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val fld \u00b6 [Source] fun box fld( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mod \u00b6 [Source] fun box mod( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val finite \u00b6 [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] Check whether this number is NaN. fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val Parameters \u00b6 x: F64 val exponent: I32 val Returns \u00b6 F64 val frexp \u00b6 [Source] fun box frexp() : (F64 val , U32 val) Returns \u00b6 ( F64 val , U32 val) log \u00b6 [Source] fun box log() : F64 val Returns \u00b6 F64 val log2 \u00b6 [Source] fun box log2() : F64 val Returns \u00b6 F64 val log10 \u00b6 [Source] fun box log10() : F64 val Returns \u00b6 F64 val logb \u00b6 [Source] fun box logb() : F64 val Returns \u00b6 F64 val pow \u00b6 [Source] fun box pow( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val powi \u00b6 [Source] fun box powi( y: I32 val) : F64 val Parameters \u00b6 y: I32 val Returns \u00b6 F64 val sqrt \u00b6 [Source] fun box sqrt() : F64 val Returns \u00b6 F64 val sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val Returns \u00b6 F64 val cbrt \u00b6 [Source] fun box cbrt() : F64 val Returns \u00b6 F64 val exp \u00b6 [Source] fun box exp() : F64 val Returns \u00b6 F64 val exp2 \u00b6 [Source] fun box exp2() : F64 val Returns \u00b6 F64 val cos \u00b6 [Source] fun box cos() : F64 val Returns \u00b6 F64 val sin \u00b6 [Source] fun box sin() : F64 val Returns \u00b6 F64 val tan \u00b6 [Source] fun box tan() : F64 val Returns \u00b6 F64 val cosh \u00b6 [Source] fun box cosh() : F64 val Returns \u00b6 F64 val sinh \u00b6 [Source] fun box sinh() : F64 val Returns \u00b6 F64 val tanh \u00b6 [Source] fun box tanh() : F64 val Returns \u00b6 F64 val acos \u00b6 [Source] fun box acos() : F64 val Returns \u00b6 F64 val asin \u00b6 [Source] fun box asin() : F64 val Returns \u00b6 F64 val atan \u00b6 [Source] fun box atan() : F64 val Returns \u00b6 F64 val atan2 \u00b6 [Source] fun box atan2( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val acosh \u00b6 [Source] fun box acosh() : F64 val Returns \u00b6 F64 val asinh \u00b6 [Source] fun box asinh() : F64 val Returns \u00b6 F64 val atanh \u00b6 [Source] fun box atanh() : F64 val Returns \u00b6 F64 val copysign \u00b6 [Source] fun box copysign( sign: F64 val) : F64 val Parameters \u00b6 sign: F64 val Returns \u00b6 F64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val add_unsafe \u00b6 [Source] fun box add_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val div_unsafe \u00b6 [Source] fun box div_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val) Parameters \u00b6 y: F64 val Returns \u00b6 ( F64 val , F64 val) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val neg_unsafe \u00b6 [Source] fun box neg_unsafe() : F64 val Returns \u00b6 F64 val eq_unsafe \u00b6 [Source] fun box eq_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] fun box ne_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] fun box lt_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val le_unsafe \u00b6 [Source] fun box le_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] fun box ge_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] fun box gt_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val sub \u00b6 [Source] fun box sub( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mul \u00b6 [Source] fun box mul( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val div \u00b6 [Source] fun box div( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val divrem \u00b6 [Source] fun box divrem( y: F64 val) : (F64 val , F64 val) Parameters \u00b6 y: F64 val Returns \u00b6 ( F64 val , F64 val) rem \u00b6 [Source] fun box rem( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val neg \u00b6 [Source] fun box neg() : F64 val Returns \u00b6 F64 val eq \u00b6 [Source] fun box eq( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: F64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: F64 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : F64 val Returns \u00b6 F64 val","title":"primitive F64"},{"location":"builtin-F64/#f64","text":"[Source] primitive val F64 is FloatingPoint[F64 val] val","title":"F64"},{"location":"builtin-F64/#implements","text":"FloatingPoint [ F64 val] val","title":"Implements"},{"location":"builtin-F64/#constructors","text":"","title":"Constructors"},{"location":"builtin-F64/#create","text":"[Source] new val create( value: F64 val = 0) : F64 val^","title":"create"},{"location":"builtin-F64/#parameters","text":"value: F64 val = 0","title":"Parameters"},{"location":"builtin-F64/#returns","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#pi","text":"[Source] new val pi() : F64 val^","title":"pi"},{"location":"builtin-F64/#returns_1","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#e","text":"[Source] new val e() : F64 val^","title":"e"},{"location":"builtin-F64/#returns_2","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_nan","text":"[Source] new val _nan() : F64 val^","title":"_nan"},{"location":"builtin-F64/#returns_3","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_inf","text":"[Source] new val _inf( negative: Bool val) : F64 val^","title":"_inf"},{"location":"builtin-F64/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F64/#returns_4","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from_bits","text":"[Source] new val from_bits( i: U64 val) : F64 val^","title":"from_bits"},{"location":"builtin-F64/#parameters_2","text":"i: U64 val","title":"Parameters"},{"location":"builtin-F64/#returns_5","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F64 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F64/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F64/#returns_6","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F64 val^","title":"min_value"},{"location":"builtin-F64/#returns_7","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F64 val^","title":"max_value"},{"location":"builtin-F64/#returns_8","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^","title":"min_normalised"},{"location":"builtin-F64/#returns_9","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^","title":"epsilon"},{"location":"builtin-F64/#returns_10","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F64/#bits","text":"[Source] fun box bits() : U64 val","title":"bits"},{"location":"builtin-F64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F64/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F64/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F64/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F64/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F64/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F64/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F64/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#abs","text":"[Source] fun box abs() : F64 val","title":"abs"},{"location":"builtin-F64/#returns_19","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#ceil","text":"[Source] fun box ceil() : F64 val","title":"ceil"},{"location":"builtin-F64/#returns_20","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#floor","text":"[Source] fun box floor() : F64 val","title":"floor"},{"location":"builtin-F64/#returns_21","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#round","text":"[Source] fun box round() : F64 val","title":"round"},{"location":"builtin-F64/#returns_22","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#trunc","text":"[Source] fun box trunc() : F64 val","title":"trunc"},{"location":"builtin-F64/#returns_23","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#min","text":"[Source] fun box min( y: F64 val) : F64 val","title":"min"},{"location":"builtin-F64/#parameters_4","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_24","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#max","text":"[Source] fun box max( y: F64 val) : F64 val","title":"max"},{"location":"builtin-F64/#parameters_5","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_25","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#fld","text":"[Source] fun box fld( y: F64 val) : F64 val","title":"fld"},{"location":"builtin-F64/#parameters_6","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_26","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: F64 val) : F64 val","title":"fld_unsafe"},{"location":"builtin-F64/#parameters_7","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_27","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mod","text":"[Source] fun box mod( y: F64 val) : F64 val","title":"mod"},{"location":"builtin-F64/#parameters_8","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_28","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: F64 val) : F64 val","title":"mod_unsafe"},{"location":"builtin-F64/#parameters_9","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F64/#returns_30","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F64/#returns_31","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F64/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ldexp","text":"[Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val","title":"ldexp"},{"location":"builtin-F64/#parameters_10","text":"x: F64 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_33","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#frexp","text":"[Source] fun box frexp() : (F64 val , U32 val)","title":"frexp"},{"location":"builtin-F64/#returns_34","text":"( F64 val , U32 val)","title":"Returns"},{"location":"builtin-F64/#log","text":"[Source] fun box log() : F64 val","title":"log"},{"location":"builtin-F64/#returns_35","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log2","text":"[Source] fun box log2() : F64 val","title":"log2"},{"location":"builtin-F64/#returns_36","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log10","text":"[Source] fun box log10() : F64 val","title":"log10"},{"location":"builtin-F64/#returns_37","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#logb","text":"[Source] fun box logb() : F64 val","title":"logb"},{"location":"builtin-F64/#returns_38","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#pow","text":"[Source] fun box pow( y: F64 val) : F64 val","title":"pow"},{"location":"builtin-F64/#parameters_11","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#powi","text":"[Source] fun box powi( y: I32 val) : F64 val","title":"powi"},{"location":"builtin-F64/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_40","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt","text":"[Source] fun box sqrt() : F64 val","title":"sqrt"},{"location":"builtin-F64/#returns_41","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val","title":"sqrt_unsafe"},{"location":"builtin-F64/#returns_42","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cbrt","text":"[Source] fun box cbrt() : F64 val","title":"cbrt"},{"location":"builtin-F64/#returns_43","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp","text":"[Source] fun box exp() : F64 val","title":"exp"},{"location":"builtin-F64/#returns_44","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp2","text":"[Source] fun box exp2() : F64 val","title":"exp2"},{"location":"builtin-F64/#returns_45","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cos","text":"[Source] fun box cos() : F64 val","title":"cos"},{"location":"builtin-F64/#returns_46","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sin","text":"[Source] fun box sin() : F64 val","title":"sin"},{"location":"builtin-F64/#returns_47","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tan","text":"[Source] fun box tan() : F64 val","title":"tan"},{"location":"builtin-F64/#returns_48","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cosh","text":"[Source] fun box cosh() : F64 val","title":"cosh"},{"location":"builtin-F64/#returns_49","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sinh","text":"[Source] fun box sinh() : F64 val","title":"sinh"},{"location":"builtin-F64/#returns_50","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tanh","text":"[Source] fun box tanh() : F64 val","title":"tanh"},{"location":"builtin-F64/#returns_51","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acos","text":"[Source] fun box acos() : F64 val","title":"acos"},{"location":"builtin-F64/#returns_52","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asin","text":"[Source] fun box asin() : F64 val","title":"asin"},{"location":"builtin-F64/#returns_53","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan","text":"[Source] fun box atan() : F64 val","title":"atan"},{"location":"builtin-F64/#returns_54","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan2","text":"[Source] fun box atan2( y: F64 val) : F64 val","title":"atan2"},{"location":"builtin-F64/#parameters_13","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acosh","text":"[Source] fun box acosh() : F64 val","title":"acosh"},{"location":"builtin-F64/#returns_56","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asinh","text":"[Source] fun box asinh() : F64 val","title":"asinh"},{"location":"builtin-F64/#returns_57","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atanh","text":"[Source] fun box atanh() : F64 val","title":"atanh"},{"location":"builtin-F64/#returns_58","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#copysign","text":"[Source] fun box copysign( sign: F64 val) : F64 val","title":"copysign"},{"location":"builtin-F64/#parameters_14","text":"sign: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_59","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F64/#returns_60","text":"USize val","title":"Returns"},{"location":"builtin-F64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F64/#returns_61","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F64/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F64/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F64/#returns_64","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F64/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#add_unsafe","text":"[Source] fun box add_unsafe( y: F64 val) : F64 val","title":"add_unsafe"},{"location":"builtin-F64/#parameters_15","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_66","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F64 val) : F64 val","title":"sub_unsafe"},{"location":"builtin-F64/#parameters_16","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_67","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F64 val) : F64 val","title":"mul_unsafe"},{"location":"builtin-F64/#parameters_17","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_68","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div_unsafe","text":"[Source] fun box div_unsafe( y: F64 val) : F64 val","title":"div_unsafe"},{"location":"builtin-F64/#parameters_18","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_69","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val)","title":"divrem_unsafe"},{"location":"builtin-F64/#parameters_19","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_70","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F64 val) : F64 val","title":"rem_unsafe"},{"location":"builtin-F64/#parameters_20","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_71","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F64 val","title":"neg_unsafe"},{"location":"builtin-F64/#returns_72","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F64 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F64/#parameters_21","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F64 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F64/#parameters_22","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F64 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F64/#parameters_23","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le_unsafe","text":"[Source] fun box le_unsafe( y: F64 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F64/#parameters_24","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F64 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F64/#parameters_25","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_77","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F64 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F64/#parameters_26","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_78","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F64/#returns_79","text":"String iso^","title":"Returns"},{"location":"builtin-F64/#add","text":"[Source] fun box add( y: F64 val) : F64 val","title":"add"},{"location":"builtin-F64/#parameters_27","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_80","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub","text":"[Source] fun box sub( y: F64 val) : F64 val","title":"sub"},{"location":"builtin-F64/#parameters_28","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul","text":"[Source] fun box mul( y: F64 val) : F64 val","title":"mul"},{"location":"builtin-F64/#parameters_29","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_82","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div","text":"[Source] fun box div( y: F64 val) : F64 val","title":"div"},{"location":"builtin-F64/#parameters_30","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_83","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem","text":"[Source] fun box divrem( y: F64 val) : (F64 val , F64 val)","title":"divrem"},{"location":"builtin-F64/#parameters_31","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_84","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem","text":"[Source] fun box rem( y: F64 val) : F64 val","title":"rem"},{"location":"builtin-F64/#parameters_32","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_85","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg","text":"[Source] fun box neg() : F64 val","title":"neg"},{"location":"builtin-F64/#returns_86","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq","text":"[Source] fun box eq( y: F64 val) : Bool val","title":"eq"},{"location":"builtin-F64/#parameters_33","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne","text":"[Source] fun box ne( y: F64 val) : Bool val","title":"ne"},{"location":"builtin-F64/#parameters_34","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt","text":"[Source] fun box lt( y: F64 val) : Bool val","title":"lt"},{"location":"builtin-F64/#parameters_35","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_89","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le","text":"[Source] fun box le( y: F64 val) : Bool val","title":"le"},{"location":"builtin-F64/#parameters_36","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_90","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge","text":"[Source] fun box ge( y: F64 val) : Bool val","title":"ge"},{"location":"builtin-F64/#parameters_37","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_91","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt","text":"[Source] fun box gt( y: F64 val) : Bool val","title":"gt"},{"location":"builtin-F64/#parameters_38","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_92","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F64/#returns_93","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F64/#returns_94","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F64/#returns_95","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F64/#returns_96","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F64/#returns_97","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F64/#returns_98","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F64/#returns_99","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F64/#returns_100","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F64/#returns_101","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F64/#returns_102","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F64/#returns_103","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F64/#returns_104","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F64/#returns_105","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_1","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F64/#returns_106","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F64/#returns_107","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F64/#returns_108","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F64/#returns_109","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F64/#returns_110","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F64/#returns_111","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F64/#returns_112","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F64/#returns_113","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F64/#returns_114","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F64/#returns_115","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F64/#returns_116","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F64/#returns_117","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F64/#returns_118","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F64/#returns_119","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F64/#returns_120","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#compare","text":"fun box compare( that: F64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F64/#parameters_39","text":"that: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_121","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F64/#_value","text":"[Source] fun box _value() : F64 val","title":"_value"},{"location":"builtin-F64/#returns_122","text":"F64 val","title":"Returns"},{"location":"builtin-Float/","text":"Float \u00b6 [Source] type Float is (F32 val | F64 val) Type Alias For \u00b6 ( F32 val | F64 val)","title":"type Float"},{"location":"builtin-Float/#float","text":"[Source] type Float is (F32 val | F64 val)","title":"Float"},{"location":"builtin-Float/#type-alias-for","text":"( F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-FloatingPoint/","text":"FloatingPoint[A: FloatingPoint [A] val] \u00b6 [Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val Implements \u00b6 Real [A] val Constructors \u00b6 min_normalised \u00b6 [Source] new val min_normalised() : FloatingPoint[A] val^ Returns \u00b6 FloatingPoint [A] val^ epsilon \u00b6 [Source] new val epsilon() : FloatingPoint[A] val^ Returns \u00b6 FloatingPoint [A] val^ create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 radix \u00b6 [Source] fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] fun tag max_exp10() : I16 val Returns \u00b6 I16 val add_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A Returns \u00b6 A eq_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val abs \u00b6 [Source] fun box abs() : A Returns \u00b6 A ceil \u00b6 [Source] fun box ceil() : A Returns \u00b6 A floor \u00b6 [Source] fun box floor() : A Returns \u00b6 A round \u00b6 [Source] fun box round() : A Returns \u00b6 A trunc \u00b6 [Source] fun box trunc() : A Returns \u00b6 A finite \u00b6 [Source] fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: A, exponent: I32 val) : A Parameters \u00b6 x: A exponent: I32 val Returns \u00b6 A frexp \u00b6 [Source] fun box frexp() : (A , U32 val) Returns \u00b6 (A , U32 val) log \u00b6 [Source] fun box log() : A Returns \u00b6 A log2 \u00b6 [Source] fun box log2() : A Returns \u00b6 A log10 \u00b6 [Source] fun box log10() : A Returns \u00b6 A logb \u00b6 [Source] fun box logb() : A Returns \u00b6 A pow \u00b6 [Source] fun box pow( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A powi \u00b6 [Source] fun box powi( y: I32 val) : A Parameters \u00b6 y: I32 val Returns \u00b6 A sqrt \u00b6 [Source] fun box sqrt() : A Returns \u00b6 A sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A Returns \u00b6 A cbrt \u00b6 [Source] fun box cbrt() : A Returns \u00b6 A exp \u00b6 [Source] fun box exp() : A Returns \u00b6 A exp2 \u00b6 [Source] fun box exp2() : A Returns \u00b6 A cos \u00b6 [Source] fun box cos() : A Returns \u00b6 A sin \u00b6 [Source] fun box sin() : A Returns \u00b6 A tan \u00b6 [Source] fun box tan() : A Returns \u00b6 A cosh \u00b6 [Source] fun box cosh() : A Returns \u00b6 A sinh \u00b6 [Source] fun box sinh() : A Returns \u00b6 A tanh \u00b6 [Source] fun box tanh() : A Returns \u00b6 A acos \u00b6 [Source] fun box acos() : A Returns \u00b6 A asin \u00b6 [Source] fun box asin() : A Returns \u00b6 A atan \u00b6 [Source] fun box atan() : A Returns \u00b6 A atan2 \u00b6 [Source] fun box atan2( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A acosh \u00b6 [Source] fun box acosh() : A Returns \u00b6 A asinh \u00b6 [Source] fun box asinh() : A Returns \u00b6 A atanh \u00b6 [Source] fun box atanh() : A Returns \u00b6 A copysign \u00b6 [Source] fun box copysign( sign: A) : A Parameters \u00b6 sign: A Returns \u00b6 A string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait FloatingPoint"},{"location":"builtin-FloatingPoint/#floatingpointa-floatingpointa-val","text":"[Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val","title":"FloatingPoint[A: FloatingPoint[A] val]"},{"location":"builtin-FloatingPoint/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-FloatingPoint/#constructors","text":"","title":"Constructors"},{"location":"builtin-FloatingPoint/#min_normalised","text":"[Source] new val min_normalised() : FloatingPoint[A] val^","title":"min_normalised"},{"location":"builtin-FloatingPoint/#returns","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#epsilon","text":"[Source] new val epsilon() : FloatingPoint[A] val^","title":"epsilon"},{"location":"builtin-FloatingPoint/#returns_1","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-FloatingPoint/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-FloatingPoint/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-FloatingPoint/#returns_4","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-FloatingPoint/#returns_5","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-FloatingPoint/#radix","text":"[Source] fun tag radix() : U8 val","title":"radix"},{"location":"builtin-FloatingPoint/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision2","text":"[Source] fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-FloatingPoint/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision10","text":"[Source] fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-FloatingPoint/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp2","text":"[Source] fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-FloatingPoint/#returns_9","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp10","text":"[Source] fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-FloatingPoint/#returns_10","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp2","text":"[Source] fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-FloatingPoint/#returns_11","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp10","text":"[Source] fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-FloatingPoint/#returns_12","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#add_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-FloatingPoint/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_13","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-FloatingPoint/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_14","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-FloatingPoint/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_15","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-FloatingPoint/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_16","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#fld_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-FloatingPoint/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_17","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_18","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_19","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mod_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-FloatingPoint/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_20","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-FloatingPoint/#returns_21","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box->A) : Bool val","title":"eq_unsafe"},{"location":"builtin-FloatingPoint/#parameters_10","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_22","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box->A) : Bool val","title":"ne_unsafe"},{"location":"builtin-FloatingPoint/#parameters_11","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_23","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box->A) : Bool val","title":"lt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_12","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box->A) : Bool val","title":"le_unsafe"},{"location":"builtin-FloatingPoint/#parameters_13","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_25","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box->A) : Bool val","title":"ge_unsafe"},{"location":"builtin-FloatingPoint/#parameters_14","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_26","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box->A) : Bool val","title":"gt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_15","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_27","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-FloatingPoint/#returns_28","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#ceil","text":"[Source] fun box ceil() : A","title":"ceil"},{"location":"builtin-FloatingPoint/#returns_29","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#floor","text":"[Source] fun box floor() : A","title":"floor"},{"location":"builtin-FloatingPoint/#returns_30","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#round","text":"[Source] fun box round() : A","title":"round"},{"location":"builtin-FloatingPoint/#returns_31","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#trunc","text":"[Source] fun box trunc() : A","title":"trunc"},{"location":"builtin-FloatingPoint/#returns_32","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#finite","text":"[Source] fun box finite() : Bool val","title":"finite"},{"location":"builtin-FloatingPoint/#returns_33","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#infinite","text":"[Source] fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-FloatingPoint/#returns_34","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#nan","text":"[Source] fun box nan() : Bool val","title":"nan"},{"location":"builtin-FloatingPoint/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ldexp","text":"[Source] fun box ldexp( x: A, exponent: I32 val) : A","title":"ldexp"},{"location":"builtin-FloatingPoint/#parameters_16","text":"x: A exponent: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_36","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#frexp","text":"[Source] fun box frexp() : (A , U32 val)","title":"frexp"},{"location":"builtin-FloatingPoint/#returns_37","text":"(A , U32 val)","title":"Returns"},{"location":"builtin-FloatingPoint/#log","text":"[Source] fun box log() : A","title":"log"},{"location":"builtin-FloatingPoint/#returns_38","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log2","text":"[Source] fun box log2() : A","title":"log2"},{"location":"builtin-FloatingPoint/#returns_39","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log10","text":"[Source] fun box log10() : A","title":"log10"},{"location":"builtin-FloatingPoint/#returns_40","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#logb","text":"[Source] fun box logb() : A","title":"logb"},{"location":"builtin-FloatingPoint/#returns_41","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#pow","text":"[Source] fun box pow( y: A) : A","title":"pow"},{"location":"builtin-FloatingPoint/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_42","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#powi","text":"[Source] fun box powi( y: I32 val) : A","title":"powi"},{"location":"builtin-FloatingPoint/#parameters_18","text":"y: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_43","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt","text":"[Source] fun box sqrt() : A","title":"sqrt"},{"location":"builtin-FloatingPoint/#returns_44","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A","title":"sqrt_unsafe"},{"location":"builtin-FloatingPoint/#returns_45","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cbrt","text":"[Source] fun box cbrt() : A","title":"cbrt"},{"location":"builtin-FloatingPoint/#returns_46","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp","text":"[Source] fun box exp() : A","title":"exp"},{"location":"builtin-FloatingPoint/#returns_47","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp2","text":"[Source] fun box exp2() : A","title":"exp2"},{"location":"builtin-FloatingPoint/#returns_48","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cos","text":"[Source] fun box cos() : A","title":"cos"},{"location":"builtin-FloatingPoint/#returns_49","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sin","text":"[Source] fun box sin() : A","title":"sin"},{"location":"builtin-FloatingPoint/#returns_50","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tan","text":"[Source] fun box tan() : A","title":"tan"},{"location":"builtin-FloatingPoint/#returns_51","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cosh","text":"[Source] fun box cosh() : A","title":"cosh"},{"location":"builtin-FloatingPoint/#returns_52","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sinh","text":"[Source] fun box sinh() : A","title":"sinh"},{"location":"builtin-FloatingPoint/#returns_53","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tanh","text":"[Source] fun box tanh() : A","title":"tanh"},{"location":"builtin-FloatingPoint/#returns_54","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acos","text":"[Source] fun box acos() : A","title":"acos"},{"location":"builtin-FloatingPoint/#returns_55","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asin","text":"[Source] fun box asin() : A","title":"asin"},{"location":"builtin-FloatingPoint/#returns_56","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan","text":"[Source] fun box atan() : A","title":"atan"},{"location":"builtin-FloatingPoint/#returns_57","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan2","text":"[Source] fun box atan2( y: A) : A","title":"atan2"},{"location":"builtin-FloatingPoint/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_58","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acosh","text":"[Source] fun box acosh() : A","title":"acosh"},{"location":"builtin-FloatingPoint/#returns_59","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asinh","text":"[Source] fun box asinh() : A","title":"asinh"},{"location":"builtin-FloatingPoint/#returns_60","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atanh","text":"[Source] fun box atanh() : A","title":"atanh"},{"location":"builtin-FloatingPoint/#returns_61","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#copysign","text":"[Source] fun box copysign( sign: A) : A","title":"copysign"},{"location":"builtin-FloatingPoint/#parameters_20","text":"sign: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_62","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-FloatingPoint/#returns_63","text":"String iso^","title":"Returns"},{"location":"builtin-FloatingPoint/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-FloatingPoint/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_64","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-FloatingPoint/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_65","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-FloatingPoint/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_66","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-FloatingPoint/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_67","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-FloatingPoint/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_68","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-FloatingPoint/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_69","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-FloatingPoint/#returns_70","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-FloatingPoint/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_71","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-FloatingPoint/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_72","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-FloatingPoint/#parameters_29","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-FloatingPoint/#parameters_30","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-FloatingPoint/#parameters_31","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-FloatingPoint/#parameters_32","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-FloatingPoint/#parameters_33","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_77","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-FloatingPoint/#parameters_34","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_78","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-FloatingPoint/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_79","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-FloatingPoint/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_80","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-FloatingPoint/#returns_81","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-FloatingPoint/#returns_82","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-FloatingPoint/#returns_83","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-FloatingPoint/#returns_84","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-FloatingPoint/#returns_85","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-FloatingPoint/#returns_86","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-FloatingPoint/#returns_87","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-FloatingPoint/#returns_88","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-FloatingPoint/#returns_89","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-FloatingPoint/#returns_90","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-FloatingPoint/#returns_91","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-FloatingPoint/#returns_92","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-FloatingPoint/#returns_93","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-FloatingPoint/#returns_94","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-FloatingPoint/#returns_95","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-FloatingPoint/#returns_96","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-FloatingPoint/#returns_97","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-FloatingPoint/#returns_98","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-FloatingPoint/#returns_99","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-FloatingPoint/#returns_100","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-FloatingPoint/#returns_101","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-FloatingPoint/#returns_102","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-FloatingPoint/#returns_103","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-FloatingPoint/#returns_104","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-FloatingPoint/#returns_105","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-FloatingPoint/#returns_106","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-FloatingPoint/#returns_107","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-FloatingPoint/#returns_108","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-FloatingPoint/#returns_109","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-FloatingPoint/#returns_110","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-FloatingPoint/#returns_111","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-FloatingPoint/#returns_112","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-FloatingPoint/#returns_113","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-FloatingPoint/#returns_114","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-FloatingPoint/#parameters_37","text":"that: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_115","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-FloatingPoint/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-FloatingPoint/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-FloatingPoint/#returns_116","text":"A","title":"Returns"},{"location":"builtin-Greater/","text":"Greater \u00b6 [Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Greater val^ Returns \u00b6 Greater val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Greater"},{"location":"builtin-Greater/#greater","text":"[Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref","title":"Greater"},{"location":"builtin-Greater/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Greater/#constructors","text":"","title":"Constructors"},{"location":"builtin-Greater/#create","text":"[Source] new val create() : Greater val^","title":"create"},{"location":"builtin-Greater/#returns","text":"Greater val^","title":"Returns"},{"location":"builtin-Greater/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Greater/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Greater/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Greater/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Greater/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Greater/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Greater/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-HasEq/","text":"HasEq[A: A] \u00b6 [Source] interface ref HasEq[A: A] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface HasEq"},{"location":"builtin-HasEq/#haseqa-a","text":"[Source] interface ref HasEq[A: A]","title":"HasEq[A: A]"},{"location":"builtin-HasEq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-HasEq/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-HasEq/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-HasEq/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-I128/","text":"I128 \u00b6 [Source] primitive val I128 is SignedInteger[I128 val, U128 val] val Implements \u00b6 SignedInteger [ I128 val, U128 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I128 val) : I128 val^ Parameters \u00b6 value: I128 val Returns \u00b6 I128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I128 val^ Parameters \u00b6 a: A Returns \u00b6 I128 val^ min_value \u00b6 [Source] new val min_value() : I128 val^ Returns \u00b6 I128 val^ max_value \u00b6 [Source] new val max_value() : I128 val^ Returns \u00b6 I128 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U128 val Returns \u00b6 U128 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I128 val Returns \u00b6 I128 val bswap \u00b6 [Source] fun box bswap() : I128 val Returns \u00b6 I128 val popcount \u00b6 [Source] fun box popcount() : U128 val Returns \u00b6 U128 val clz \u00b6 [Source] fun box clz() : U128 val Returns \u00b6 U128 val ctz \u00b6 [Source] fun box ctz() : U128 val Returns \u00b6 U128 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns \u00b6 U128 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns \u00b6 U128 val bitwidth \u00b6 [Source] fun box bitwidth() : U128 val Returns \u00b6 U128 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val max \u00b6 [Source] fun box max( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val fld \u00b6 [Source] fun box fld( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mod \u00b6 [Source] fun box mod( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ mul \u00b6 [Source] fun box mul( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val divrem \u00b6 [Source] fun box divrem( y: I128 val) : (I128 val , I128 val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) div \u00b6 [Source] fun box div( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val rem \u00b6 [Source] fun box rem( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val divrem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) div_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val rem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val addc \u00b6 [Source] fun box addc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) subc \u00b6 [Source] fun box subc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) divc \u00b6 [Source] fun box divc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) remc \u00b6 [Source] fun box remc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) modc \u00b6 [Source] fun box modc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? div_partial \u00b6 [Source] fun box div_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ? Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? shl \u00b6 fun box shl( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shr \u00b6 fun box shr( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shl_unsafe \u00b6 fun box shl_unsafe( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shr_unsafe \u00b6 fun box shr_unsafe( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val add_unsafe \u00b6 fun box add_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val sub_unsafe \u00b6 fun box sub_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val neg_unsafe \u00b6 fun box neg_unsafe() : I128 val Returns \u00b6 I128 val op_and \u00b6 fun box op_and( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_or \u00b6 fun box op_or( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_xor \u00b6 fun box op_xor( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_not \u00b6 fun box op_not() : I128 val Returns \u00b6 I128 val add \u00b6 fun box add( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val sub \u00b6 fun box sub( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val neg \u00b6 fun box neg() : I128 val Returns \u00b6 I128 val eq \u00b6 fun box eq( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val compare \u00b6 fun box compare( that: I128 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I128 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I128 val Returns \u00b6 I128 val","title":"primitive I128"},{"location":"builtin-I128/#i128","text":"[Source] primitive val I128 is SignedInteger[I128 val, U128 val] val","title":"I128"},{"location":"builtin-I128/#implements","text":"SignedInteger [ I128 val, U128 val] val","title":"Implements"},{"location":"builtin-I128/#constructors","text":"","title":"Constructors"},{"location":"builtin-I128/#create","text":"[Source] new val create( value: I128 val) : I128 val^","title":"create"},{"location":"builtin-I128/#parameters","text":"value: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I128/#returns_1","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#min_value","text":"[Source] new val min_value() : I128 val^","title":"min_value"},{"location":"builtin-I128/#returns_2","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#max_value","text":"[Source] new val max_value() : I128 val^","title":"max_value"},{"location":"builtin-I128/#returns_3","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-I128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bit_reverse","text":"[Source] fun box bit_reverse() : I128 val","title":"bit_reverse"},{"location":"builtin-I128/#returns_5","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#bswap","text":"[Source] fun box bswap() : I128 val","title":"bswap"},{"location":"builtin-I128/#returns_6","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-I128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-I128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-I128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-I128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-I128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-I128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I128/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I128/#min","text":"[Source] fun box min( y: I128 val) : I128 val","title":"min"},{"location":"builtin-I128/#parameters_2","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_14","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#max","text":"[Source] fun box max( y: I128 val) : I128 val","title":"max"},{"location":"builtin-I128/#parameters_3","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_15","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#fld","text":"[Source] fun box fld( y: I128 val) : I128 val","title":"fld"},{"location":"builtin-I128/#parameters_4","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_16","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I128 val) : I128 val","title":"fld_unsafe"},{"location":"builtin-I128/#parameters_5","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_17","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mod","text":"[Source] fun box mod( y: I128 val) : I128 val","title":"mod"},{"location":"builtin-I128/#parameters_6","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_18","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I128 val) : I128 val","title":"mod_unsafe"},{"location":"builtin-I128/#parameters_7","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_19","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I128/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-I128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I128/#returns_21","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-I128/#returns_22","text":"String iso^","title":"Returns"},{"location":"builtin-I128/#mul","text":"[Source] fun box mul( y: I128 val) : I128 val","title":"mul"},{"location":"builtin-I128/#parameters_8","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_23","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem","text":"[Source] fun box divrem( y: I128 val) : (I128 val , I128 val)","title":"divrem"},{"location":"builtin-I128/#parameters_9","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_24","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div","text":"[Source] fun box div( y: I128 val) : I128 val","title":"div"},{"location":"builtin-I128/#parameters_10","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_25","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem","text":"[Source] fun box rem( y: I128 val) : I128 val","title":"rem"},{"location":"builtin-I128/#parameters_11","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_26","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val","title":"mul_unsafe"},{"location":"builtin-I128/#parameters_12","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_27","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val)","title":"divrem_unsafe"},{"location":"builtin-I128/#parameters_13","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_28","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val","title":"div_unsafe"},{"location":"builtin-I128/#parameters_14","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_29","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val","title":"rem_unsafe"},{"location":"builtin-I128/#parameters_15","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_30","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-I128/#returns_31","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-I128/#returns_32","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I128/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I128/#returns_34","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#addc","text":"[Source] fun box addc( y: I128 val) : (I128 val , Bool val)","title":"addc"},{"location":"builtin-I128/#parameters_16","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_35","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#subc","text":"[Source] fun box subc( y: I128 val) : (I128 val , Bool val)","title":"subc"},{"location":"builtin-I128/#parameters_17","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_36","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#mulc","text":"[Source] fun box mulc( y: I128 val) : (I128 val , Bool val)","title":"mulc"},{"location":"builtin-I128/#parameters_18","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_37","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#divc","text":"[Source] fun box divc( y: I128 val) : (I128 val , Bool val)","title":"divc"},{"location":"builtin-I128/#parameters_19","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_38","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#remc","text":"[Source] fun box remc( y: I128 val) : (I128 val , Bool val)","title":"remc"},{"location":"builtin-I128/#parameters_20","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_39","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#fldc","text":"[Source] fun box fldc( y: I128 val) : (I128 val , Bool val)","title":"fldc"},{"location":"builtin-I128/#parameters_21","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_40","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#modc","text":"[Source] fun box modc( y: I128 val) : (I128 val , Bool val)","title":"modc"},{"location":"builtin-I128/#parameters_22","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_41","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#add_partial","text":"[Source] fun box add_partial( y: I128 val) : I128 val ?","title":"add_partial"},{"location":"builtin-I128/#parameters_23","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_42","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#sub_partial","text":"[Source] fun box sub_partial( y: I128 val) : I128 val ?","title":"sub_partial"},{"location":"builtin-I128/#parameters_24","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_43","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mul_partial","text":"[Source] fun box mul_partial( y: I128 val) : I128 val ?","title":"mul_partial"},{"location":"builtin-I128/#parameters_25","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_44","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#div_partial","text":"[Source] fun box div_partial( y: I128 val) : I128 val ?","title":"div_partial"},{"location":"builtin-I128/#parameters_26","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_45","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#rem_partial","text":"[Source] fun box rem_partial( y: I128 val) : I128 val ?","title":"rem_partial"},{"location":"builtin-I128/#parameters_27","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_46","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#divrem_partial","text":"[Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ?","title":"divrem_partial"},{"location":"builtin-I128/#parameters_28","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_47","text":"( I128 val , I128 val) ?","title":"Returns"},{"location":"builtin-I128/#fld_partial","text":"[Source] fun box fld_partial( y: I128 val) : I128 val ?","title":"fld_partial"},{"location":"builtin-I128/#parameters_29","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_48","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mod_partial","text":"[Source] fun box mod_partial( y: I128 val) : I128 val ?","title":"mod_partial"},{"location":"builtin-I128/#parameters_30","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_49","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#shl","text":"fun box shl( y: U128 val) : I128 val","title":"shl"},{"location":"builtin-I128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_50","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr","text":"fun box shr( y: U128 val) : I128 val","title":"shr"},{"location":"builtin-I128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_51","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : I128 val","title":"shl_unsafe"},{"location":"builtin-I128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_52","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : I128 val","title":"shr_unsafe"},{"location":"builtin-I128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_53","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add_unsafe","text":"fun box add_unsafe( y: I128 val) : I128 val","title":"add_unsafe"},{"location":"builtin-I128/#parameters_35","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_54","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub_unsafe","text":"fun box sub_unsafe( y: I128 val) : I128 val","title":"sub_unsafe"},{"location":"builtin-I128/#parameters_36","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_55","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg_unsafe","text":"fun box neg_unsafe() : I128 val","title":"neg_unsafe"},{"location":"builtin-I128/#returns_56","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_and","text":"fun box op_and( y: I128 val) : I128 val","title":"op_and"},{"location":"builtin-I128/#parameters_37","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_57","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_or","text":"fun box op_or( y: I128 val) : I128 val","title":"op_or"},{"location":"builtin-I128/#parameters_38","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_xor","text":"fun box op_xor( y: I128 val) : I128 val","title":"op_xor"},{"location":"builtin-I128/#parameters_39","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_59","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_not","text":"fun box op_not() : I128 val","title":"op_not"},{"location":"builtin-I128/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add","text":"fun box add( y: I128 val) : I128 val","title":"add"},{"location":"builtin-I128/#parameters_40","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_61","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub","text":"fun box sub( y: I128 val) : I128 val","title":"sub"},{"location":"builtin-I128/#parameters_41","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg","text":"fun box neg() : I128 val","title":"neg"},{"location":"builtin-I128/#returns_63","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#eq","text":"fun box eq( y: I128 val) : Bool val","title":"eq"},{"location":"builtin-I128/#parameters_42","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ne","text":"fun box ne( y: I128 val) : Bool val","title":"ne"},{"location":"builtin-I128/#parameters_43","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#lt","text":"fun box lt( y: I128 val) : Bool val","title":"lt"},{"location":"builtin-I128/#parameters_44","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#le","text":"fun box le( y: I128 val) : Bool val","title":"le"},{"location":"builtin-I128/#parameters_45","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ge","text":"fun box ge( y: I128 val) : Bool val","title":"ge"},{"location":"builtin-I128/#parameters_46","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#gt","text":"fun box gt( y: I128 val) : Bool val","title":"gt"},{"location":"builtin-I128/#parameters_47","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I128/#returns_70","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I128/#returns_71","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I128/#returns_72","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I128/#returns_73","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_1","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I128/#returns_74","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I128/#returns_75","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I128/#returns_76","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I128/#returns_77","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I128/#returns_78","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I128/#returns_79","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I128/#returns_80","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I128/#returns_81","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I128/#returns_82","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I128/#returns_83","text":"USize val","title":"Returns"},{"location":"builtin-I128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I128/#returns_84","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I128/#returns_85","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I128/#returns_86","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I128/#returns_87","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I128/#returns_88","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I128/#returns_89","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I128/#returns_90","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I128/#returns_91","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I128/#returns_92","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I128/#returns_93","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I128/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I128/#returns_95","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I128/#returns_96","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I128/#returns_97","text":"USize val","title":"Returns"},{"location":"builtin-I128/#compare","text":"fun box compare( that: I128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I128/#parameters_48","text":"that: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I128/#_value","text":"fun box _value() : I128 val","title":"_value"},{"location":"builtin-I128/#returns_99","text":"I128 val","title":"Returns"},{"location":"builtin-I16/","text":"I16 \u00b6 [Source] primitive val I16 is SignedInteger[I16 val, U16 val] val Implements \u00b6 SignedInteger [ I16 val, U16 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I16 val) : I16 val^ Parameters \u00b6 value: I16 val Returns \u00b6 I16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I16 val^ Parameters \u00b6 a: A Returns \u00b6 I16 val^ min_value \u00b6 [Source] new val min_value() : I16 val^ Returns \u00b6 I16 val^ max_value \u00b6 [Source] new val max_value() : I16 val^ Returns \u00b6 I16 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U16 val Returns \u00b6 U16 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I16 val Returns \u00b6 I16 val bswap \u00b6 [Source] fun box bswap() : I16 val Returns \u00b6 I16 val popcount \u00b6 [Source] fun box popcount() : U16 val Returns \u00b6 U16 val clz \u00b6 [Source] fun box clz() : U16 val Returns \u00b6 U16 val ctz \u00b6 [Source] fun box ctz() : U16 val Returns \u00b6 U16 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns \u00b6 U16 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns \u00b6 U16 val bitwidth \u00b6 [Source] fun box bitwidth() : U16 val Returns \u00b6 U16 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val max \u00b6 [Source] fun box max( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val fld \u00b6 [Source] fun box fld( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mod \u00b6 [Source] fun box mod( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val addc \u00b6 [Source] fun box addc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) subc \u00b6 [Source] fun box subc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) divc \u00b6 [Source] fun box divc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) remc \u00b6 [Source] fun box remc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) modc \u00b6 [Source] fun box modc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? div_partial \u00b6 [Source] fun box div_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ? Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? shl \u00b6 fun box shl( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shr \u00b6 fun box shr( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shl_unsafe \u00b6 fun box shl_unsafe( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shr_unsafe \u00b6 fun box shr_unsafe( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val sub_unsafe \u00b6 fun box sub_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mul_unsafe \u00b6 fun box mul_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val div_unsafe \u00b6 fun box div_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val neg_unsafe \u00b6 fun box neg_unsafe() : I16 val Returns \u00b6 I16 val op_and \u00b6 fun box op_and( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_or \u00b6 fun box op_or( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_xor \u00b6 fun box op_xor( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_not \u00b6 fun box op_not() : I16 val Returns \u00b6 I16 val add \u00b6 fun box add( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val sub \u00b6 fun box sub( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mul \u00b6 fun box mul( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val div \u00b6 fun box div( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val divrem \u00b6 fun box divrem( y: I16 val) : (I16 val , I16 val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) rem \u00b6 fun box rem( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val neg \u00b6 fun box neg() : I16 val Returns \u00b6 I16 val eq \u00b6 fun box eq( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I16 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I16 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I16 val Returns \u00b6 I16 val","title":"primitive I16"},{"location":"builtin-I16/#i16","text":"[Source] primitive val I16 is SignedInteger[I16 val, U16 val] val","title":"I16"},{"location":"builtin-I16/#implements","text":"SignedInteger [ I16 val, U16 val] val","title":"Implements"},{"location":"builtin-I16/#constructors","text":"","title":"Constructors"},{"location":"builtin-I16/#create","text":"[Source] new val create( value: I16 val) : I16 val^","title":"create"},{"location":"builtin-I16/#parameters","text":"value: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I16/#returns_1","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#min_value","text":"[Source] new val min_value() : I16 val^","title":"min_value"},{"location":"builtin-I16/#returns_2","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#max_value","text":"[Source] new val max_value() : I16 val^","title":"max_value"},{"location":"builtin-I16/#returns_3","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-I16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bit_reverse","text":"[Source] fun box bit_reverse() : I16 val","title":"bit_reverse"},{"location":"builtin-I16/#returns_5","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#bswap","text":"[Source] fun box bswap() : I16 val","title":"bswap"},{"location":"builtin-I16/#returns_6","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-I16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-I16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-I16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-I16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-I16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-I16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I16/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I16/#min","text":"[Source] fun box min( y: I16 val) : I16 val","title":"min"},{"location":"builtin-I16/#parameters_2","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_14","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#max","text":"[Source] fun box max( y: I16 val) : I16 val","title":"max"},{"location":"builtin-I16/#parameters_3","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#fld","text":"[Source] fun box fld( y: I16 val) : I16 val","title":"fld"},{"location":"builtin-I16/#parameters_4","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I16 val) : I16 val","title":"fld_unsafe"},{"location":"builtin-I16/#parameters_5","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mod","text":"[Source] fun box mod( y: I16 val) : I16 val","title":"mod"},{"location":"builtin-I16/#parameters_6","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I16 val) : I16 val","title":"mod_unsafe"},{"location":"builtin-I16/#parameters_7","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_19","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#addc","text":"[Source] fun box addc( y: I16 val) : (I16 val , Bool val)","title":"addc"},{"location":"builtin-I16/#parameters_8","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_20","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#subc","text":"[Source] fun box subc( y: I16 val) : (I16 val , Bool val)","title":"subc"},{"location":"builtin-I16/#parameters_9","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_21","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#mulc","text":"[Source] fun box mulc( y: I16 val) : (I16 val , Bool val)","title":"mulc"},{"location":"builtin-I16/#parameters_10","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_22","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#divc","text":"[Source] fun box divc( y: I16 val) : (I16 val , Bool val)","title":"divc"},{"location":"builtin-I16/#parameters_11","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_23","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#remc","text":"[Source] fun box remc( y: I16 val) : (I16 val , Bool val)","title":"remc"},{"location":"builtin-I16/#parameters_12","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_24","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#fldc","text":"[Source] fun box fldc( y: I16 val) : (I16 val , Bool val)","title":"fldc"},{"location":"builtin-I16/#parameters_13","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_25","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#modc","text":"[Source] fun box modc( y: I16 val) : (I16 val , Bool val)","title":"modc"},{"location":"builtin-I16/#parameters_14","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_26","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#add_partial","text":"[Source] fun box add_partial( y: I16 val) : I16 val ?","title":"add_partial"},{"location":"builtin-I16/#parameters_15","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_27","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#sub_partial","text":"[Source] fun box sub_partial( y: I16 val) : I16 val ?","title":"sub_partial"},{"location":"builtin-I16/#parameters_16","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_28","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mul_partial","text":"[Source] fun box mul_partial( y: I16 val) : I16 val ?","title":"mul_partial"},{"location":"builtin-I16/#parameters_17","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_29","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#div_partial","text":"[Source] fun box div_partial( y: I16 val) : I16 val ?","title":"div_partial"},{"location":"builtin-I16/#parameters_18","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_30","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#rem_partial","text":"[Source] fun box rem_partial( y: I16 val) : I16 val ?","title":"rem_partial"},{"location":"builtin-I16/#parameters_19","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_31","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#divrem_partial","text":"[Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ?","title":"divrem_partial"},{"location":"builtin-I16/#parameters_20","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_32","text":"( I16 val , I16 val) ?","title":"Returns"},{"location":"builtin-I16/#fld_partial","text":"[Source] fun box fld_partial( y: I16 val) : I16 val ?","title":"fld_partial"},{"location":"builtin-I16/#parameters_21","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_33","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mod_partial","text":"[Source] fun box mod_partial( y: I16 val) : I16 val ?","title":"mod_partial"},{"location":"builtin-I16/#parameters_22","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_34","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#shl","text":"fun box shl( y: U16 val) : I16 val","title":"shl"},{"location":"builtin-I16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_35","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr","text":"fun box shr( y: U16 val) : I16 val","title":"shr"},{"location":"builtin-I16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_36","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : I16 val","title":"shl_unsafe"},{"location":"builtin-I16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_37","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : I16 val","title":"shr_unsafe"},{"location":"builtin-I16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_38","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I16/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I16/#add_unsafe","text":"fun box add_unsafe( y: I16 val) : I16 val","title":"add_unsafe"},{"location":"builtin-I16/#parameters_27","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_40","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub_unsafe","text":"fun box sub_unsafe( y: I16 val) : I16 val","title":"sub_unsafe"},{"location":"builtin-I16/#parameters_28","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul_unsafe","text":"fun box mul_unsafe( y: I16 val) : I16 val","title":"mul_unsafe"},{"location":"builtin-I16/#parameters_29","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_42","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div_unsafe","text":"fun box div_unsafe( y: I16 val) : I16 val","title":"div_unsafe"},{"location":"builtin-I16/#parameters_30","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_43","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem_unsafe","text":"fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val)","title":"divrem_unsafe"},{"location":"builtin-I16/#parameters_31","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_44","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem_unsafe","text":"fun box rem_unsafe( y: I16 val) : I16 val","title":"rem_unsafe"},{"location":"builtin-I16/#parameters_32","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_45","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg_unsafe","text":"fun box neg_unsafe() : I16 val","title":"neg_unsafe"},{"location":"builtin-I16/#returns_46","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_and","text":"fun box op_and( y: I16 val) : I16 val","title":"op_and"},{"location":"builtin-I16/#parameters_33","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_47","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_or","text":"fun box op_or( y: I16 val) : I16 val","title":"op_or"},{"location":"builtin-I16/#parameters_34","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_48","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_xor","text":"fun box op_xor( y: I16 val) : I16 val","title":"op_xor"},{"location":"builtin-I16/#parameters_35","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_49","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_not","text":"fun box op_not() : I16 val","title":"op_not"},{"location":"builtin-I16/#returns_50","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#add","text":"fun box add( y: I16 val) : I16 val","title":"add"},{"location":"builtin-I16/#parameters_36","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_51","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub","text":"fun box sub( y: I16 val) : I16 val","title":"sub"},{"location":"builtin-I16/#parameters_37","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_52","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul","text":"fun box mul( y: I16 val) : I16 val","title":"mul"},{"location":"builtin-I16/#parameters_38","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_53","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div","text":"fun box div( y: I16 val) : I16 val","title":"div"},{"location":"builtin-I16/#parameters_39","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_54","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem","text":"fun box divrem( y: I16 val) : (I16 val , I16 val)","title":"divrem"},{"location":"builtin-I16/#parameters_40","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_55","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem","text":"fun box rem( y: I16 val) : I16 val","title":"rem"},{"location":"builtin-I16/#parameters_41","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_56","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg","text":"fun box neg() : I16 val","title":"neg"},{"location":"builtin-I16/#returns_57","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#eq","text":"fun box eq( y: I16 val) : Bool val","title":"eq"},{"location":"builtin-I16/#parameters_42","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ne","text":"fun box ne( y: I16 val) : Bool val","title":"ne"},{"location":"builtin-I16/#parameters_43","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#lt","text":"fun box lt( y: I16 val) : Bool val","title":"lt"},{"location":"builtin-I16/#parameters_44","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#le","text":"fun box le( y: I16 val) : Bool val","title":"le"},{"location":"builtin-I16/#parameters_45","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ge","text":"fun box ge( y: I16 val) : Bool val","title":"ge"},{"location":"builtin-I16/#parameters_46","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#gt","text":"fun box gt( y: I16 val) : Bool val","title":"gt"},{"location":"builtin-I16/#parameters_47","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I16/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I16/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I16/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_1","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I16/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I16/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I16/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I16/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I16/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I16/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I16/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I16/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I16/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I16/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I16/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I16/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I16/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I16/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I16/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I16/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I16/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I16/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I16/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I16/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I16/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I16/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I16/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I16/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I16/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I16/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I16/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I16/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I16/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I16/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I16/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#compare","text":"fun box compare( that: I16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I16/#parameters_48","text":"that: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I16/#_value","text":"fun box _value() : I16 val","title":"_value"},{"location":"builtin-I16/#returns_99","text":"I16 val","title":"Returns"},{"location":"builtin-I32/","text":"I32 \u00b6 [Source] primitive val I32 is SignedInteger[I32 val, U32 val] val Implements \u00b6 SignedInteger [ I32 val, U32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I32 val) : I32 val^ Parameters \u00b6 value: I32 val Returns \u00b6 I32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I32 val^ Parameters \u00b6 a: A Returns \u00b6 I32 val^ min_value \u00b6 [Source] new val min_value() : I32 val^ Returns \u00b6 I32 val^ max_value \u00b6 [Source] new val max_value() : I32 val^ Returns \u00b6 I32 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U32 val Returns \u00b6 U32 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I32 val Returns \u00b6 I32 val bswap \u00b6 [Source] fun box bswap() : I32 val Returns \u00b6 I32 val popcount \u00b6 [Source] fun box popcount() : U32 val Returns \u00b6 U32 val clz \u00b6 [Source] fun box clz() : U32 val Returns \u00b6 U32 val ctz \u00b6 [Source] fun box ctz() : U32 val Returns \u00b6 U32 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns \u00b6 U32 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns \u00b6 U32 val bitwidth \u00b6 [Source] fun box bitwidth() : U32 val Returns \u00b6 U32 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val max \u00b6 [Source] fun box max( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val fld \u00b6 [Source] fun box fld( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mod \u00b6 [Source] fun box mod( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val addc \u00b6 [Source] fun box addc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) subc \u00b6 [Source] fun box subc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) divc \u00b6 [Source] fun box divc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) remc \u00b6 [Source] fun box remc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) modc \u00b6 [Source] fun box modc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? div_partial \u00b6 [Source] fun box div_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ? Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? shl \u00b6 fun box shl( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shr \u00b6 fun box shr( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shl_unsafe \u00b6 fun box shl_unsafe( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shr_unsafe \u00b6 fun box shr_unsafe( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val sub_unsafe \u00b6 fun box sub_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mul_unsafe \u00b6 fun box mul_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val div_unsafe \u00b6 fun box div_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val neg_unsafe \u00b6 fun box neg_unsafe() : I32 val Returns \u00b6 I32 val op_and \u00b6 fun box op_and( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_or \u00b6 fun box op_or( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_xor \u00b6 fun box op_xor( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_not \u00b6 fun box op_not() : I32 val Returns \u00b6 I32 val add \u00b6 fun box add( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val sub \u00b6 fun box sub( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mul \u00b6 fun box mul( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val div \u00b6 fun box div( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val divrem \u00b6 fun box divrem( y: I32 val) : (I32 val , I32 val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) rem \u00b6 fun box rem( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val neg \u00b6 fun box neg() : I32 val Returns \u00b6 I32 val eq \u00b6 fun box eq( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I32 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I32 val Returns \u00b6 I32 val","title":"primitive I32"},{"location":"builtin-I32/#i32","text":"[Source] primitive val I32 is SignedInteger[I32 val, U32 val] val","title":"I32"},{"location":"builtin-I32/#implements","text":"SignedInteger [ I32 val, U32 val] val","title":"Implements"},{"location":"builtin-I32/#constructors","text":"","title":"Constructors"},{"location":"builtin-I32/#create","text":"[Source] new val create( value: I32 val) : I32 val^","title":"create"},{"location":"builtin-I32/#parameters","text":"value: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I32/#returns_1","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#min_value","text":"[Source] new val min_value() : I32 val^","title":"min_value"},{"location":"builtin-I32/#returns_2","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#max_value","text":"[Source] new val max_value() : I32 val^","title":"max_value"},{"location":"builtin-I32/#returns_3","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-I32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bit_reverse","text":"[Source] fun box bit_reverse() : I32 val","title":"bit_reverse"},{"location":"builtin-I32/#returns_5","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#bswap","text":"[Source] fun box bswap() : I32 val","title":"bswap"},{"location":"builtin-I32/#returns_6","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-I32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-I32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-I32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-I32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-I32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-I32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I32/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I32/#min","text":"[Source] fun box min( y: I32 val) : I32 val","title":"min"},{"location":"builtin-I32/#parameters_2","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_14","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#max","text":"[Source] fun box max( y: I32 val) : I32 val","title":"max"},{"location":"builtin-I32/#parameters_3","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_15","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#fld","text":"[Source] fun box fld( y: I32 val) : I32 val","title":"fld"},{"location":"builtin-I32/#parameters_4","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_16","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I32 val) : I32 val","title":"fld_unsafe"},{"location":"builtin-I32/#parameters_5","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_17","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mod","text":"[Source] fun box mod( y: I32 val) : I32 val","title":"mod"},{"location":"builtin-I32/#parameters_6","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_18","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I32 val) : I32 val","title":"mod_unsafe"},{"location":"builtin-I32/#parameters_7","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_19","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#addc","text":"[Source] fun box addc( y: I32 val) : (I32 val , Bool val)","title":"addc"},{"location":"builtin-I32/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_20","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#subc","text":"[Source] fun box subc( y: I32 val) : (I32 val , Bool val)","title":"subc"},{"location":"builtin-I32/#parameters_9","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_21","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#mulc","text":"[Source] fun box mulc( y: I32 val) : (I32 val , Bool val)","title":"mulc"},{"location":"builtin-I32/#parameters_10","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_22","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#divc","text":"[Source] fun box divc( y: I32 val) : (I32 val , Bool val)","title":"divc"},{"location":"builtin-I32/#parameters_11","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_23","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#remc","text":"[Source] fun box remc( y: I32 val) : (I32 val , Bool val)","title":"remc"},{"location":"builtin-I32/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_24","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#fldc","text":"[Source] fun box fldc( y: I32 val) : (I32 val , Bool val)","title":"fldc"},{"location":"builtin-I32/#parameters_13","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_25","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#modc","text":"[Source] fun box modc( y: I32 val) : (I32 val , Bool val)","title":"modc"},{"location":"builtin-I32/#parameters_14","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_26","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#add_partial","text":"[Source] fun box add_partial( y: I32 val) : I32 val ?","title":"add_partial"},{"location":"builtin-I32/#parameters_15","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_27","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#sub_partial","text":"[Source] fun box sub_partial( y: I32 val) : I32 val ?","title":"sub_partial"},{"location":"builtin-I32/#parameters_16","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_28","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mul_partial","text":"[Source] fun box mul_partial( y: I32 val) : I32 val ?","title":"mul_partial"},{"location":"builtin-I32/#parameters_17","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_29","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#div_partial","text":"[Source] fun box div_partial( y: I32 val) : I32 val ?","title":"div_partial"},{"location":"builtin-I32/#parameters_18","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_30","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#rem_partial","text":"[Source] fun box rem_partial( y: I32 val) : I32 val ?","title":"rem_partial"},{"location":"builtin-I32/#parameters_19","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_31","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#divrem_partial","text":"[Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ?","title":"divrem_partial"},{"location":"builtin-I32/#parameters_20","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_32","text":"( I32 val , I32 val) ?","title":"Returns"},{"location":"builtin-I32/#fld_partial","text":"[Source] fun box fld_partial( y: I32 val) : I32 val ?","title":"fld_partial"},{"location":"builtin-I32/#parameters_21","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_33","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mod_partial","text":"[Source] fun box mod_partial( y: I32 val) : I32 val ?","title":"mod_partial"},{"location":"builtin-I32/#parameters_22","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_34","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#shl","text":"fun box shl( y: U32 val) : I32 val","title":"shl"},{"location":"builtin-I32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_35","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr","text":"fun box shr( y: U32 val) : I32 val","title":"shr"},{"location":"builtin-I32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_36","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : I32 val","title":"shl_unsafe"},{"location":"builtin-I32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_37","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : I32 val","title":"shr_unsafe"},{"location":"builtin-I32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_38","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I32/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I32/#add_unsafe","text":"fun box add_unsafe( y: I32 val) : I32 val","title":"add_unsafe"},{"location":"builtin-I32/#parameters_27","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_40","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub_unsafe","text":"fun box sub_unsafe( y: I32 val) : I32 val","title":"sub_unsafe"},{"location":"builtin-I32/#parameters_28","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_41","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul_unsafe","text":"fun box mul_unsafe( y: I32 val) : I32 val","title":"mul_unsafe"},{"location":"builtin-I32/#parameters_29","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div_unsafe","text":"fun box div_unsafe( y: I32 val) : I32 val","title":"div_unsafe"},{"location":"builtin-I32/#parameters_30","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_43","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem_unsafe","text":"fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val)","title":"divrem_unsafe"},{"location":"builtin-I32/#parameters_31","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_44","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem_unsafe","text":"fun box rem_unsafe( y: I32 val) : I32 val","title":"rem_unsafe"},{"location":"builtin-I32/#parameters_32","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_45","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg_unsafe","text":"fun box neg_unsafe() : I32 val","title":"neg_unsafe"},{"location":"builtin-I32/#returns_46","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_and","text":"fun box op_and( y: I32 val) : I32 val","title":"op_and"},{"location":"builtin-I32/#parameters_33","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_47","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_or","text":"fun box op_or( y: I32 val) : I32 val","title":"op_or"},{"location":"builtin-I32/#parameters_34","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_48","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_xor","text":"fun box op_xor( y: I32 val) : I32 val","title":"op_xor"},{"location":"builtin-I32/#parameters_35","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_49","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_not","text":"fun box op_not() : I32 val","title":"op_not"},{"location":"builtin-I32/#returns_50","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#add","text":"fun box add( y: I32 val) : I32 val","title":"add"},{"location":"builtin-I32/#parameters_36","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_51","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub","text":"fun box sub( y: I32 val) : I32 val","title":"sub"},{"location":"builtin-I32/#parameters_37","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_52","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul","text":"fun box mul( y: I32 val) : I32 val","title":"mul"},{"location":"builtin-I32/#parameters_38","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_53","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div","text":"fun box div( y: I32 val) : I32 val","title":"div"},{"location":"builtin-I32/#parameters_39","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_54","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem","text":"fun box divrem( y: I32 val) : (I32 val , I32 val)","title":"divrem"},{"location":"builtin-I32/#parameters_40","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_55","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem","text":"fun box rem( y: I32 val) : I32 val","title":"rem"},{"location":"builtin-I32/#parameters_41","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_56","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg","text":"fun box neg() : I32 val","title":"neg"},{"location":"builtin-I32/#returns_57","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#eq","text":"fun box eq( y: I32 val) : Bool val","title":"eq"},{"location":"builtin-I32/#parameters_42","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ne","text":"fun box ne( y: I32 val) : Bool val","title":"ne"},{"location":"builtin-I32/#parameters_43","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#lt","text":"fun box lt( y: I32 val) : Bool val","title":"lt"},{"location":"builtin-I32/#parameters_44","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#le","text":"fun box le( y: I32 val) : Bool val","title":"le"},{"location":"builtin-I32/#parameters_45","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ge","text":"fun box ge( y: I32 val) : Bool val","title":"ge"},{"location":"builtin-I32/#parameters_46","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#gt","text":"fun box gt( y: I32 val) : Bool val","title":"gt"},{"location":"builtin-I32/#parameters_47","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I32/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I32/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I32/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I32/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_1","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I32/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I32/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I32/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I32/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I32/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I32/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I32/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I32/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I32/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I32/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I32/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I32/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I32/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I32/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I32/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I32/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I32/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I32/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I32/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I32/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I32/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I32/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I32/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I32/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I32/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I32/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I32/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I32/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I32/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I32/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#compare","text":"fun box compare( that: I32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I32/#parameters_48","text":"that: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I32/#_value","text":"fun box _value() : I32 val","title":"_value"},{"location":"builtin-I32/#returns_99","text":"I32 val","title":"Returns"},{"location":"builtin-I64/","text":"I64 \u00b6 [Source] primitive val I64 is SignedInteger[I64 val, U64 val] val Implements \u00b6 SignedInteger [ I64 val, U64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I64 val) : I64 val^ Parameters \u00b6 value: I64 val Returns \u00b6 I64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I64 val^ Parameters \u00b6 a: A Returns \u00b6 I64 val^ min_value \u00b6 [Source] new val min_value() : I64 val^ Returns \u00b6 I64 val^ max_value \u00b6 [Source] new val max_value() : I64 val^ Returns \u00b6 I64 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U64 val Returns \u00b6 U64 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I64 val Returns \u00b6 I64 val bswap \u00b6 [Source] fun box bswap() : I64 val Returns \u00b6 I64 val popcount \u00b6 [Source] fun box popcount() : U64 val Returns \u00b6 U64 val clz \u00b6 [Source] fun box clz() : U64 val Returns \u00b6 U64 val ctz \u00b6 [Source] fun box ctz() : U64 val Returns \u00b6 U64 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns \u00b6 U64 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns \u00b6 U64 val bitwidth \u00b6 [Source] fun box bitwidth() : U64 val Returns \u00b6 U64 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val max \u00b6 [Source] fun box max( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val fld \u00b6 [Source] fun box fld( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mod \u00b6 [Source] fun box mod( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) subc \u00b6 [Source] fun box subc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) divc \u00b6 [Source] fun box divc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) remc \u00b6 [Source] fun box remc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) modc \u00b6 [Source] fun box modc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? div_partial \u00b6 [Source] fun box div_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ? Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? shl \u00b6 fun box shl( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shr \u00b6 fun box shr( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shl_unsafe \u00b6 fun box shl_unsafe( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shr_unsafe \u00b6 fun box shr_unsafe( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val sub_unsafe \u00b6 fun box sub_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mul_unsafe \u00b6 fun box mul_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val div_unsafe \u00b6 fun box div_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val neg_unsafe \u00b6 fun box neg_unsafe() : I64 val Returns \u00b6 I64 val op_and \u00b6 fun box op_and( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_or \u00b6 fun box op_or( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_xor \u00b6 fun box op_xor( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_not \u00b6 fun box op_not() : I64 val Returns \u00b6 I64 val add \u00b6 fun box add( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val sub \u00b6 fun box sub( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mul \u00b6 fun box mul( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val div \u00b6 fun box div( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val divrem \u00b6 fun box divrem( y: I64 val) : (I64 val , I64 val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) rem \u00b6 fun box rem( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val neg \u00b6 fun box neg() : I64 val Returns \u00b6 I64 val eq \u00b6 fun box eq( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I64 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I64 val Returns \u00b6 I64 val","title":"primitive I64"},{"location":"builtin-I64/#i64","text":"[Source] primitive val I64 is SignedInteger[I64 val, U64 val] val","title":"I64"},{"location":"builtin-I64/#implements","text":"SignedInteger [ I64 val, U64 val] val","title":"Implements"},{"location":"builtin-I64/#constructors","text":"","title":"Constructors"},{"location":"builtin-I64/#create","text":"[Source] new val create( value: I64 val) : I64 val^","title":"create"},{"location":"builtin-I64/#parameters","text":"value: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I64/#returns_1","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#min_value","text":"[Source] new val min_value() : I64 val^","title":"min_value"},{"location":"builtin-I64/#returns_2","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#max_value","text":"[Source] new val max_value() : I64 val^","title":"max_value"},{"location":"builtin-I64/#returns_3","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-I64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bit_reverse","text":"[Source] fun box bit_reverse() : I64 val","title":"bit_reverse"},{"location":"builtin-I64/#returns_5","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#bswap","text":"[Source] fun box bswap() : I64 val","title":"bswap"},{"location":"builtin-I64/#returns_6","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-I64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-I64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-I64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-I64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-I64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-I64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I64/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I64/#min","text":"[Source] fun box min( y: I64 val) : I64 val","title":"min"},{"location":"builtin-I64/#parameters_2","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_14","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#max","text":"[Source] fun box max( y: I64 val) : I64 val","title":"max"},{"location":"builtin-I64/#parameters_3","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_15","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#fld","text":"[Source] fun box fld( y: I64 val) : I64 val","title":"fld"},{"location":"builtin-I64/#parameters_4","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_16","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I64 val) : I64 val","title":"fld_unsafe"},{"location":"builtin-I64/#parameters_5","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_17","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mod","text":"[Source] fun box mod( y: I64 val) : I64 val","title":"mod"},{"location":"builtin-I64/#parameters_6","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_18","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I64 val) : I64 val","title":"mod_unsafe"},{"location":"builtin-I64/#parameters_7","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_19","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I64/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-I64/#addc","text":"[Source] fun box addc( y: I64 val) : (I64 val , Bool val)","title":"addc"},{"location":"builtin-I64/#parameters_8","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_21","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#subc","text":"[Source] fun box subc( y: I64 val) : (I64 val , Bool val)","title":"subc"},{"location":"builtin-I64/#parameters_9","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_22","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#mulc","text":"[Source] fun box mulc( y: I64 val) : (I64 val , Bool val)","title":"mulc"},{"location":"builtin-I64/#parameters_10","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_23","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#divc","text":"[Source] fun box divc( y: I64 val) : (I64 val , Bool val)","title":"divc"},{"location":"builtin-I64/#parameters_11","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_24","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#remc","text":"[Source] fun box remc( y: I64 val) : (I64 val , Bool val)","title":"remc"},{"location":"builtin-I64/#parameters_12","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_25","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#fldc","text":"[Source] fun box fldc( y: I64 val) : (I64 val , Bool val)","title":"fldc"},{"location":"builtin-I64/#parameters_13","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_26","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#modc","text":"[Source] fun box modc( y: I64 val) : (I64 val , Bool val)","title":"modc"},{"location":"builtin-I64/#parameters_14","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_27","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#add_partial","text":"[Source] fun box add_partial( y: I64 val) : I64 val ?","title":"add_partial"},{"location":"builtin-I64/#parameters_15","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_28","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#sub_partial","text":"[Source] fun box sub_partial( y: I64 val) : I64 val ?","title":"sub_partial"},{"location":"builtin-I64/#parameters_16","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_29","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mul_partial","text":"[Source] fun box mul_partial( y: I64 val) : I64 val ?","title":"mul_partial"},{"location":"builtin-I64/#parameters_17","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_30","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#div_partial","text":"[Source] fun box div_partial( y: I64 val) : I64 val ?","title":"div_partial"},{"location":"builtin-I64/#parameters_18","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_31","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#rem_partial","text":"[Source] fun box rem_partial( y: I64 val) : I64 val ?","title":"rem_partial"},{"location":"builtin-I64/#parameters_19","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_32","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#divrem_partial","text":"[Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ?","title":"divrem_partial"},{"location":"builtin-I64/#parameters_20","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_33","text":"( I64 val , I64 val) ?","title":"Returns"},{"location":"builtin-I64/#fld_partial","text":"[Source] fun box fld_partial( y: I64 val) : I64 val ?","title":"fld_partial"},{"location":"builtin-I64/#parameters_21","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_34","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mod_partial","text":"[Source] fun box mod_partial( y: I64 val) : I64 val ?","title":"mod_partial"},{"location":"builtin-I64/#parameters_22","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_35","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#shl","text":"fun box shl( y: U64 val) : I64 val","title":"shl"},{"location":"builtin-I64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_36","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr","text":"fun box shr( y: U64 val) : I64 val","title":"shr"},{"location":"builtin-I64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_37","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : I64 val","title":"shl_unsafe"},{"location":"builtin-I64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_38","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : I64 val","title":"shr_unsafe"},{"location":"builtin-I64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_39","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I64/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-I64/#add_unsafe","text":"fun box add_unsafe( y: I64 val) : I64 val","title":"add_unsafe"},{"location":"builtin-I64/#parameters_27","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_41","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub_unsafe","text":"fun box sub_unsafe( y: I64 val) : I64 val","title":"sub_unsafe"},{"location":"builtin-I64/#parameters_28","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_42","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul_unsafe","text":"fun box mul_unsafe( y: I64 val) : I64 val","title":"mul_unsafe"},{"location":"builtin-I64/#parameters_29","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div_unsafe","text":"fun box div_unsafe( y: I64 val) : I64 val","title":"div_unsafe"},{"location":"builtin-I64/#parameters_30","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_44","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem_unsafe","text":"fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val)","title":"divrem_unsafe"},{"location":"builtin-I64/#parameters_31","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_45","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem_unsafe","text":"fun box rem_unsafe( y: I64 val) : I64 val","title":"rem_unsafe"},{"location":"builtin-I64/#parameters_32","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_46","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg_unsafe","text":"fun box neg_unsafe() : I64 val","title":"neg_unsafe"},{"location":"builtin-I64/#returns_47","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_and","text":"fun box op_and( y: I64 val) : I64 val","title":"op_and"},{"location":"builtin-I64/#parameters_33","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_48","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_or","text":"fun box op_or( y: I64 val) : I64 val","title":"op_or"},{"location":"builtin-I64/#parameters_34","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_49","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_xor","text":"fun box op_xor( y: I64 val) : I64 val","title":"op_xor"},{"location":"builtin-I64/#parameters_35","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_50","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_not","text":"fun box op_not() : I64 val","title":"op_not"},{"location":"builtin-I64/#returns_51","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#add","text":"fun box add( y: I64 val) : I64 val","title":"add"},{"location":"builtin-I64/#parameters_36","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_52","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub","text":"fun box sub( y: I64 val) : I64 val","title":"sub"},{"location":"builtin-I64/#parameters_37","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_53","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul","text":"fun box mul( y: I64 val) : I64 val","title":"mul"},{"location":"builtin-I64/#parameters_38","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_54","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div","text":"fun box div( y: I64 val) : I64 val","title":"div"},{"location":"builtin-I64/#parameters_39","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_55","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem","text":"fun box divrem( y: I64 val) : (I64 val , I64 val)","title":"divrem"},{"location":"builtin-I64/#parameters_40","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_56","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem","text":"fun box rem( y: I64 val) : I64 val","title":"rem"},{"location":"builtin-I64/#parameters_41","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_57","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg","text":"fun box neg() : I64 val","title":"neg"},{"location":"builtin-I64/#returns_58","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#eq","text":"fun box eq( y: I64 val) : Bool val","title":"eq"},{"location":"builtin-I64/#parameters_42","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ne","text":"fun box ne( y: I64 val) : Bool val","title":"ne"},{"location":"builtin-I64/#parameters_43","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#lt","text":"fun box lt( y: I64 val) : Bool val","title":"lt"},{"location":"builtin-I64/#parameters_44","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#le","text":"fun box le( y: I64 val) : Bool val","title":"le"},{"location":"builtin-I64/#parameters_45","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ge","text":"fun box ge( y: I64 val) : Bool val","title":"ge"},{"location":"builtin-I64/#parameters_46","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#gt","text":"fun box gt( y: I64 val) : Bool val","title":"gt"},{"location":"builtin-I64/#parameters_47","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I64/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I64/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I64/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I64/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_1","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I64/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I64/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I64/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I64/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I64/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I64/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I64/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I64/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I64/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I64/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I64/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I64/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I64/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I64/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I64/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I64/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I64/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I64/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I64/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I64/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I64/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I64/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I64/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I64/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I64/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I64/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I64/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I64/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#compare","text":"fun box compare( that: I64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I64/#parameters_48","text":"that: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I64/#_value","text":"fun box _value() : I64 val","title":"_value"},{"location":"builtin-I64/#returns_99","text":"I64 val","title":"Returns"},{"location":"builtin-I8/","text":"I8 \u00b6 [Source] primitive val I8 is SignedInteger[I8 val, U8 val] val Implements \u00b6 SignedInteger [ I8 val, U8 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I8 val) : I8 val^ Parameters \u00b6 value: I8 val Returns \u00b6 I8 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I8 val^ Parameters \u00b6 a: A Returns \u00b6 I8 val^ min_value \u00b6 [Source] new val min_value() : I8 val^ Returns \u00b6 I8 val^ max_value \u00b6 [Source] new val max_value() : I8 val^ Returns \u00b6 I8 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U8 val Returns \u00b6 U8 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I8 val Returns \u00b6 I8 val bswap \u00b6 [Source] fun box bswap() : I8 val Returns \u00b6 I8 val popcount \u00b6 [Source] fun box popcount() : U8 val Returns \u00b6 U8 val clz \u00b6 [Source] fun box clz() : U8 val Returns \u00b6 U8 val ctz \u00b6 [Source] fun box ctz() : U8 val Returns \u00b6 U8 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns \u00b6 U8 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns \u00b6 U8 val bitwidth \u00b6 [Source] fun box bitwidth() : U8 val Returns \u00b6 U8 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val max \u00b6 [Source] fun box max( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val fld \u00b6 [Source] fun box fld( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mod \u00b6 [Source] fun box mod( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val addc \u00b6 [Source] fun box addc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) subc \u00b6 [Source] fun box subc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) divc \u00b6 [Source] fun box divc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) remc \u00b6 [Source] fun box remc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) modc \u00b6 [Source] fun box modc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? div_partial \u00b6 [Source] fun box div_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ? Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? shl \u00b6 fun box shl( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shr \u00b6 fun box shr( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shl_unsafe \u00b6 fun box shl_unsafe( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shr_unsafe \u00b6 fun box shr_unsafe( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val sub_unsafe \u00b6 fun box sub_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mul_unsafe \u00b6 fun box mul_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val div_unsafe \u00b6 fun box div_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val neg_unsafe \u00b6 fun box neg_unsafe() : I8 val Returns \u00b6 I8 val op_and \u00b6 fun box op_and( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_or \u00b6 fun box op_or( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_xor \u00b6 fun box op_xor( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_not \u00b6 fun box op_not() : I8 val Returns \u00b6 I8 val add \u00b6 fun box add( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val sub \u00b6 fun box sub( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mul \u00b6 fun box mul( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val div \u00b6 fun box div( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val divrem \u00b6 fun box divrem( y: I8 val) : (I8 val , I8 val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) rem \u00b6 fun box rem( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val neg \u00b6 fun box neg() : I8 val Returns \u00b6 I8 val eq \u00b6 fun box eq( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I8 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I8 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I8 val Returns \u00b6 I8 val","title":"primitive I8"},{"location":"builtin-I8/#i8","text":"[Source] primitive val I8 is SignedInteger[I8 val, U8 val] val","title":"I8"},{"location":"builtin-I8/#implements","text":"SignedInteger [ I8 val, U8 val] val","title":"Implements"},{"location":"builtin-I8/#constructors","text":"","title":"Constructors"},{"location":"builtin-I8/#create","text":"[Source] new val create( value: I8 val) : I8 val^","title":"create"},{"location":"builtin-I8/#parameters","text":"value: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I8 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I8/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I8/#returns_1","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#min_value","text":"[Source] new val min_value() : I8 val^","title":"min_value"},{"location":"builtin-I8/#returns_2","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#max_value","text":"[Source] new val max_value() : I8 val^","title":"max_value"},{"location":"builtin-I8/#returns_3","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-I8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bit_reverse","text":"[Source] fun box bit_reverse() : I8 val","title":"bit_reverse"},{"location":"builtin-I8/#returns_5","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#bswap","text":"[Source] fun box bswap() : I8 val","title":"bswap"},{"location":"builtin-I8/#returns_6","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-I8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-I8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-I8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-I8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-I8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-I8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I8/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I8/#min","text":"[Source] fun box min( y: I8 val) : I8 val","title":"min"},{"location":"builtin-I8/#parameters_2","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_14","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#max","text":"[Source] fun box max( y: I8 val) : I8 val","title":"max"},{"location":"builtin-I8/#parameters_3","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_15","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#fld","text":"[Source] fun box fld( y: I8 val) : I8 val","title":"fld"},{"location":"builtin-I8/#parameters_4","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_16","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I8 val) : I8 val","title":"fld_unsafe"},{"location":"builtin-I8/#parameters_5","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_17","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mod","text":"[Source] fun box mod( y: I8 val) : I8 val","title":"mod"},{"location":"builtin-I8/#parameters_6","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_18","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I8 val) : I8 val","title":"mod_unsafe"},{"location":"builtin-I8/#parameters_7","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_19","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#addc","text":"[Source] fun box addc( y: I8 val) : (I8 val , Bool val)","title":"addc"},{"location":"builtin-I8/#parameters_8","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_20","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#subc","text":"[Source] fun box subc( y: I8 val) : (I8 val , Bool val)","title":"subc"},{"location":"builtin-I8/#parameters_9","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_21","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#mulc","text":"[Source] fun box mulc( y: I8 val) : (I8 val , Bool val)","title":"mulc"},{"location":"builtin-I8/#parameters_10","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_22","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#divc","text":"[Source] fun box divc( y: I8 val) : (I8 val , Bool val)","title":"divc"},{"location":"builtin-I8/#parameters_11","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_23","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#remc","text":"[Source] fun box remc( y: I8 val) : (I8 val , Bool val)","title":"remc"},{"location":"builtin-I8/#parameters_12","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_24","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#fldc","text":"[Source] fun box fldc( y: I8 val) : (I8 val , Bool val)","title":"fldc"},{"location":"builtin-I8/#parameters_13","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_25","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#modc","text":"[Source] fun box modc( y: I8 val) : (I8 val , Bool val)","title":"modc"},{"location":"builtin-I8/#parameters_14","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_26","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#add_partial","text":"[Source] fun box add_partial( y: I8 val) : I8 val ?","title":"add_partial"},{"location":"builtin-I8/#parameters_15","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_27","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#sub_partial","text":"[Source] fun box sub_partial( y: I8 val) : I8 val ?","title":"sub_partial"},{"location":"builtin-I8/#parameters_16","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_28","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mul_partial","text":"[Source] fun box mul_partial( y: I8 val) : I8 val ?","title":"mul_partial"},{"location":"builtin-I8/#parameters_17","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_29","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#div_partial","text":"[Source] fun box div_partial( y: I8 val) : I8 val ?","title":"div_partial"},{"location":"builtin-I8/#parameters_18","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_30","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#rem_partial","text":"[Source] fun box rem_partial( y: I8 val) : I8 val ?","title":"rem_partial"},{"location":"builtin-I8/#parameters_19","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_31","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#divrem_partial","text":"[Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ?","title":"divrem_partial"},{"location":"builtin-I8/#parameters_20","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_32","text":"( I8 val , I8 val) ?","title":"Returns"},{"location":"builtin-I8/#fld_partial","text":"[Source] fun box fld_partial( y: I8 val) : I8 val ?","title":"fld_partial"},{"location":"builtin-I8/#parameters_21","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_33","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mod_partial","text":"[Source] fun box mod_partial( y: I8 val) : I8 val ?","title":"mod_partial"},{"location":"builtin-I8/#parameters_22","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_34","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#shl","text":"fun box shl( y: U8 val) : I8 val","title":"shl"},{"location":"builtin-I8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_35","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr","text":"fun box shr( y: U8 val) : I8 val","title":"shr"},{"location":"builtin-I8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_36","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : I8 val","title":"shl_unsafe"},{"location":"builtin-I8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_37","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : I8 val","title":"shr_unsafe"},{"location":"builtin-I8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_38","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I8/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I8/#add_unsafe","text":"fun box add_unsafe( y: I8 val) : I8 val","title":"add_unsafe"},{"location":"builtin-I8/#parameters_27","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub_unsafe","text":"fun box sub_unsafe( y: I8 val) : I8 val","title":"sub_unsafe"},{"location":"builtin-I8/#parameters_28","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_41","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul_unsafe","text":"fun box mul_unsafe( y: I8 val) : I8 val","title":"mul_unsafe"},{"location":"builtin-I8/#parameters_29","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_42","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div_unsafe","text":"fun box div_unsafe( y: I8 val) : I8 val","title":"div_unsafe"},{"location":"builtin-I8/#parameters_30","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_43","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem_unsafe","text":"fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val)","title":"divrem_unsafe"},{"location":"builtin-I8/#parameters_31","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_44","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem_unsafe","text":"fun box rem_unsafe( y: I8 val) : I8 val","title":"rem_unsafe"},{"location":"builtin-I8/#parameters_32","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_45","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg_unsafe","text":"fun box neg_unsafe() : I8 val","title":"neg_unsafe"},{"location":"builtin-I8/#returns_46","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_and","text":"fun box op_and( y: I8 val) : I8 val","title":"op_and"},{"location":"builtin-I8/#parameters_33","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_47","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_or","text":"fun box op_or( y: I8 val) : I8 val","title":"op_or"},{"location":"builtin-I8/#parameters_34","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_48","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_xor","text":"fun box op_xor( y: I8 val) : I8 val","title":"op_xor"},{"location":"builtin-I8/#parameters_35","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_49","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_not","text":"fun box op_not() : I8 val","title":"op_not"},{"location":"builtin-I8/#returns_50","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#add","text":"fun box add( y: I8 val) : I8 val","title":"add"},{"location":"builtin-I8/#parameters_36","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_51","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub","text":"fun box sub( y: I8 val) : I8 val","title":"sub"},{"location":"builtin-I8/#parameters_37","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_52","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul","text":"fun box mul( y: I8 val) : I8 val","title":"mul"},{"location":"builtin-I8/#parameters_38","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_53","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div","text":"fun box div( y: I8 val) : I8 val","title":"div"},{"location":"builtin-I8/#parameters_39","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_54","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem","text":"fun box divrem( y: I8 val) : (I8 val , I8 val)","title":"divrem"},{"location":"builtin-I8/#parameters_40","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_55","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem","text":"fun box rem( y: I8 val) : I8 val","title":"rem"},{"location":"builtin-I8/#parameters_41","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_56","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg","text":"fun box neg() : I8 val","title":"neg"},{"location":"builtin-I8/#returns_57","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#eq","text":"fun box eq( y: I8 val) : Bool val","title":"eq"},{"location":"builtin-I8/#parameters_42","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ne","text":"fun box ne( y: I8 val) : Bool val","title":"ne"},{"location":"builtin-I8/#parameters_43","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#lt","text":"fun box lt( y: I8 val) : Bool val","title":"lt"},{"location":"builtin-I8/#parameters_44","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#le","text":"fun box le( y: I8 val) : Bool val","title":"le"},{"location":"builtin-I8/#parameters_45","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ge","text":"fun box ge( y: I8 val) : Bool val","title":"ge"},{"location":"builtin-I8/#parameters_46","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#gt","text":"fun box gt( y: I8 val) : Bool val","title":"gt"},{"location":"builtin-I8/#parameters_47","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I8/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I8/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#i8_1","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I8/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I8/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I8/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I8/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I8/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I8/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I8/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I8/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I8/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I8/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I8/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I8/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I8/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I8/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I8/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I8/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I8/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I8/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I8/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I8/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I8/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I8/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I8/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I8/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I8/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I8/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I8/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I8/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I8/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I8/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I8/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I8/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#compare","text":"fun box compare( that: I8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I8/#parameters_48","text":"that: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I8/#_value","text":"fun box _value() : I8 val","title":"_value"},{"location":"builtin-I8/#returns_99","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/","text":"ILong \u00b6 [Source] primitive val ILong is SignedInteger[ILong val, ULong val] val Implements \u00b6 SignedInteger [ ILong val, ULong val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ILong val) : ILong val^ Parameters \u00b6 value: ILong val Returns \u00b6 ILong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ILong val^ Parameters \u00b6 a: A Returns \u00b6 ILong val^ min_value \u00b6 [Source] new val min_value() : ILong val^ Returns \u00b6 ILong val^ max_value \u00b6 [Source] new val max_value() : ILong val^ Returns \u00b6 ILong val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : ULong val Returns \u00b6 ULong val bit_reverse \u00b6 [Source] fun box bit_reverse() : ILong val Returns \u00b6 ILong val bswap \u00b6 [Source] fun box bswap() : ILong val Returns \u00b6 ILong val popcount \u00b6 [Source] fun box popcount() : ULong val Returns \u00b6 ULong val clz \u00b6 [Source] fun box clz() : ULong val Returns \u00b6 ULong val ctz \u00b6 [Source] fun box ctz() : ULong val Returns \u00b6 ULong val clz_unsafe \u00b6 [Source] fun box clz_unsafe() : ULong val Returns \u00b6 ULong val ctz_unsafe \u00b6 [Source] fun box ctz_unsafe() : ULong val Returns \u00b6 ULong val bitwidth \u00b6 [Source] fun box bitwidth() : ULong val Returns \u00b6 ULong val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val max \u00b6 [Source] fun box max( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val fld \u00b6 [Source] fun box fld( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mod \u00b6 [Source] fun box mod( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) subc \u00b6 [Source] fun box subc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) divc \u00b6 [Source] fun box divc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) remc \u00b6 [Source] fun box remc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) fldc \u00b6 [Source] fun box fldc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) modc \u00b6 [Source] fun box modc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? div_partial \u00b6 [Source] fun box div_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ? Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? mod_partial \u00b6 [Source] fun box mod_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? shl \u00b6 fun box shl( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shr \u00b6 fun box shr( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shl_unsafe \u00b6 fun box shl_unsafe( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shr_unsafe \u00b6 fun box shr_unsafe( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val sub_unsafe \u00b6 fun box sub_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mul_unsafe \u00b6 fun box mul_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val div_unsafe \u00b6 fun box div_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) rem_unsafe \u00b6 fun box rem_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val neg_unsafe \u00b6 fun box neg_unsafe() : ILong val Returns \u00b6 ILong val op_and \u00b6 fun box op_and( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_or \u00b6 fun box op_or( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_xor \u00b6 fun box op_xor( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_not \u00b6 fun box op_not() : ILong val Returns \u00b6 ILong val add \u00b6 fun box add( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val sub \u00b6 fun box sub( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mul \u00b6 fun box mul( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val div \u00b6 fun box div( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val divrem \u00b6 fun box divrem( y: ILong val) : (ILong val , ILong val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) rem \u00b6 fun box rem( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val neg \u00b6 fun box neg() : ILong val Returns \u00b6 ILong val eq \u00b6 fun box eq( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val le \u00b6 fun box le( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ILong val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ILong val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : ILong val Returns \u00b6 ILong val","title":"primitive ILong"},{"location":"builtin-ILong/#ilong","text":"[Source] primitive val ILong is SignedInteger[ILong val, ULong val] val","title":"ILong"},{"location":"builtin-ILong/#implements","text":"SignedInteger [ ILong val, ULong val] val","title":"Implements"},{"location":"builtin-ILong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ILong/#create","text":"[Source] new val create( value: ILong val) : ILong val^","title":"create"},{"location":"builtin-ILong/#parameters","text":"value: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ILong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ILong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ILong/#returns_1","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#min_value","text":"[Source] new val min_value() : ILong val^","title":"min_value"},{"location":"builtin-ILong/#returns_2","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#max_value","text":"[Source] new val max_value() : ILong val^","title":"max_value"},{"location":"builtin-ILong/#returns_3","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ILong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ILong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bit_reverse","text":"[Source] fun box bit_reverse() : ILong val","title":"bit_reverse"},{"location":"builtin-ILong/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#bswap","text":"[Source] fun box bswap() : ILong val","title":"bswap"},{"location":"builtin-ILong/#returns_6","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ILong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ILong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ILong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz_unsafe","text":"[Source] fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ILong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ILong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ILong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ILong/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#min","text":"[Source] fun box min( y: ILong val) : ILong val","title":"min"},{"location":"builtin-ILong/#parameters_2","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_14","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#max","text":"[Source] fun box max( y: ILong val) : ILong val","title":"max"},{"location":"builtin-ILong/#parameters_3","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_15","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#fld","text":"[Source] fun box fld( y: ILong val) : ILong val","title":"fld"},{"location":"builtin-ILong/#parameters_4","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_16","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: ILong val) : ILong val","title":"fld_unsafe"},{"location":"builtin-ILong/#parameters_5","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_17","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mod","text":"[Source] fun box mod( y: ILong val) : ILong val","title":"mod"},{"location":"builtin-ILong/#parameters_6","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_18","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: ILong val) : ILong val","title":"mod_unsafe"},{"location":"builtin-ILong/#parameters_7","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_19","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ILong/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#addc","text":"[Source] fun box addc( y: ILong val) : (ILong val , Bool val)","title":"addc"},{"location":"builtin-ILong/#parameters_8","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_21","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#subc","text":"[Source] fun box subc( y: ILong val) : (ILong val , Bool val)","title":"subc"},{"location":"builtin-ILong/#parameters_9","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_22","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#mulc","text":"[Source] fun box mulc( y: ILong val) : (ILong val , Bool val)","title":"mulc"},{"location":"builtin-ILong/#parameters_10","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_23","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#divc","text":"[Source] fun box divc( y: ILong val) : (ILong val , Bool val)","title":"divc"},{"location":"builtin-ILong/#parameters_11","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_24","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#remc","text":"[Source] fun box remc( y: ILong val) : (ILong val , Bool val)","title":"remc"},{"location":"builtin-ILong/#parameters_12","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_25","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#fldc","text":"[Source] fun box fldc( y: ILong val) : (ILong val , Bool val)","title":"fldc"},{"location":"builtin-ILong/#parameters_13","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_26","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#modc","text":"[Source] fun box modc( y: ILong val) : (ILong val , Bool val)","title":"modc"},{"location":"builtin-ILong/#parameters_14","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_27","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#add_partial","text":"[Source] fun box add_partial( y: ILong val) : ILong val ?","title":"add_partial"},{"location":"builtin-ILong/#parameters_15","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_28","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#sub_partial","text":"[Source] fun box sub_partial( y: ILong val) : ILong val ?","title":"sub_partial"},{"location":"builtin-ILong/#parameters_16","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_29","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mul_partial","text":"[Source] fun box mul_partial( y: ILong val) : ILong val ?","title":"mul_partial"},{"location":"builtin-ILong/#parameters_17","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_30","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#div_partial","text":"[Source] fun box div_partial( y: ILong val) : ILong val ?","title":"div_partial"},{"location":"builtin-ILong/#parameters_18","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_31","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#rem_partial","text":"[Source] fun box rem_partial( y: ILong val) : ILong val ?","title":"rem_partial"},{"location":"builtin-ILong/#parameters_19","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_32","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ?","title":"divrem_partial"},{"location":"builtin-ILong/#parameters_20","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_33","text":"( ILong val , ILong val) ?","title":"Returns"},{"location":"builtin-ILong/#fld_partial","text":"[Source] fun box fld_partial( y: ILong val) : ILong val ?","title":"fld_partial"},{"location":"builtin-ILong/#parameters_21","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_34","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mod_partial","text":"[Source] fun box mod_partial( y: ILong val) : ILong val ?","title":"mod_partial"},{"location":"builtin-ILong/#parameters_22","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_35","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#shl","text":"fun box shl( y: ULong val) : ILong val","title":"shl"},{"location":"builtin-ILong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_36","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr","text":"fun box shr( y: ULong val) : ILong val","title":"shr"},{"location":"builtin-ILong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_37","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ILong val","title":"shl_unsafe"},{"location":"builtin-ILong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_38","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ILong val","title":"shr_unsafe"},{"location":"builtin-ILong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_39","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ILong/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-ILong/#add_unsafe","text":"fun box add_unsafe( y: ILong val) : ILong val","title":"add_unsafe"},{"location":"builtin-ILong/#parameters_27","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_41","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub_unsafe","text":"fun box sub_unsafe( y: ILong val) : ILong val","title":"sub_unsafe"},{"location":"builtin-ILong/#parameters_28","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_42","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul_unsafe","text":"fun box mul_unsafe( y: ILong val) : ILong val","title":"mul_unsafe"},{"location":"builtin-ILong/#parameters_29","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_43","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div_unsafe","text":"fun box div_unsafe( y: ILong val) : ILong val","title":"div_unsafe"},{"location":"builtin-ILong/#parameters_30","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_44","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val)","title":"divrem_unsafe"},{"location":"builtin-ILong/#parameters_31","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_45","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem_unsafe","text":"fun box rem_unsafe( y: ILong val) : ILong val","title":"rem_unsafe"},{"location":"builtin-ILong/#parameters_32","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_46","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg_unsafe","text":"fun box neg_unsafe() : ILong val","title":"neg_unsafe"},{"location":"builtin-ILong/#returns_47","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_and","text":"fun box op_and( y: ILong val) : ILong val","title":"op_and"},{"location":"builtin-ILong/#parameters_33","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_48","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_or","text":"fun box op_or( y: ILong val) : ILong val","title":"op_or"},{"location":"builtin-ILong/#parameters_34","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_49","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_xor","text":"fun box op_xor( y: ILong val) : ILong val","title":"op_xor"},{"location":"builtin-ILong/#parameters_35","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_50","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_not","text":"fun box op_not() : ILong val","title":"op_not"},{"location":"builtin-ILong/#returns_51","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#add","text":"fun box add( y: ILong val) : ILong val","title":"add"},{"location":"builtin-ILong/#parameters_36","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_52","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub","text":"fun box sub( y: ILong val) : ILong val","title":"sub"},{"location":"builtin-ILong/#parameters_37","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_53","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul","text":"fun box mul( y: ILong val) : ILong val","title":"mul"},{"location":"builtin-ILong/#parameters_38","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_54","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div","text":"fun box div( y: ILong val) : ILong val","title":"div"},{"location":"builtin-ILong/#parameters_39","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_55","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem","text":"fun box divrem( y: ILong val) : (ILong val , ILong val)","title":"divrem"},{"location":"builtin-ILong/#parameters_40","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_56","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem","text":"fun box rem( y: ILong val) : ILong val","title":"rem"},{"location":"builtin-ILong/#parameters_41","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_57","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg","text":"fun box neg() : ILong val","title":"neg"},{"location":"builtin-ILong/#returns_58","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#eq","text":"fun box eq( y: ILong val) : Bool val","title":"eq"},{"location":"builtin-ILong/#parameters_42","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ne","text":"fun box ne( y: ILong val) : Bool val","title":"ne"},{"location":"builtin-ILong/#parameters_43","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#lt","text":"fun box lt( y: ILong val) : Bool val","title":"lt"},{"location":"builtin-ILong/#parameters_44","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#le","text":"fun box le( y: ILong val) : Bool val","title":"le"},{"location":"builtin-ILong/#parameters_45","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ge","text":"fun box ge( y: ILong val) : Bool val","title":"ge"},{"location":"builtin-ILong/#parameters_46","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#gt","text":"fun box gt( y: ILong val) : Bool val","title":"gt"},{"location":"builtin-ILong/#parameters_47","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ILong/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ILong/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ILong/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ILong/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ILong/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ILong/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_1","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ILong/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ILong/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ILong/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ILong/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ILong/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ILong/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ILong/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ILong/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ILong/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ILong/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ILong/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ILong/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ILong/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ILong/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ILong/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ILong/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ILong/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ILong/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ILong/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ILong/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ILong/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ILong/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ILong/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ILong/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ILong/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ILong/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ILong/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#compare","text":"fun box compare( that: ILong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ILong/#parameters_48","text":"that: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ILong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ILong/#_value","text":"fun box _value() : ILong val","title":"_value"},{"location":"builtin-ILong/#returns_99","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/","text":"ISize \u00b6 [Source] primitive val ISize is SignedInteger[ISize val, USize val] val Implements \u00b6 SignedInteger [ ISize val, USize val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ISize val) : ISize val^ Parameters \u00b6 value: ISize val Returns \u00b6 ISize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ISize val^ Parameters \u00b6 a: A Returns \u00b6 ISize val^ min_value \u00b6 [Source] new val min_value() : ISize val^ Returns \u00b6 ISize val^ max_value \u00b6 [Source] new val max_value() : ISize val^ Returns \u00b6 ISize val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : USize val Returns \u00b6 USize val bit_reverse \u00b6 [Source] fun box bit_reverse() : ISize val Returns \u00b6 ISize val bswap \u00b6 [Source] fun box bswap() : ISize val Returns \u00b6 ISize val popcount \u00b6 [Source] fun box popcount() : USize val Returns \u00b6 USize val clz \u00b6 [Source] fun box clz() : USize val Returns \u00b6 USize val ctz \u00b6 [Source] fun box ctz() : USize val Returns \u00b6 USize val clz_unsafe \u00b6 [Source] fun box clz_unsafe() : USize val Returns \u00b6 USize val ctz_unsafe \u00b6 [Source] fun box ctz_unsafe() : USize val Returns \u00b6 USize val bitwidth \u00b6 [Source] fun box bitwidth() : USize val Returns \u00b6 USize val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val max \u00b6 [Source] fun box max( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val fld \u00b6 [Source] fun box fld( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mod \u00b6 [Source] fun box mod( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val addc \u00b6 [Source] fun box addc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) subc \u00b6 [Source] fun box subc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) divc \u00b6 [Source] fun box divc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) remc \u00b6 [Source] fun box remc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) fldc \u00b6 [Source] fun box fldc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) modc \u00b6 [Source] fun box modc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? div_partial \u00b6 [Source] fun box div_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ? Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? mod_partial \u00b6 [Source] fun box mod_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? shl \u00b6 fun box shl( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shr \u00b6 fun box shr( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shl_unsafe \u00b6 fun box shl_unsafe( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shr_unsafe \u00b6 fun box shr_unsafe( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val sub_unsafe \u00b6 fun box sub_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mul_unsafe \u00b6 fun box mul_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val div_unsafe \u00b6 fun box div_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) rem_unsafe \u00b6 fun box rem_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val neg_unsafe \u00b6 fun box neg_unsafe() : ISize val Returns \u00b6 ISize val op_and \u00b6 fun box op_and( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_or \u00b6 fun box op_or( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_xor \u00b6 fun box op_xor( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_not \u00b6 fun box op_not() : ISize val Returns \u00b6 ISize val add \u00b6 fun box add( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val sub \u00b6 fun box sub( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mul \u00b6 fun box mul( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val div \u00b6 fun box div( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val divrem \u00b6 fun box divrem( y: ISize val) : (ISize val , ISize val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) rem \u00b6 fun box rem( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val neg \u00b6 fun box neg() : ISize val Returns \u00b6 ISize val eq \u00b6 fun box eq( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val le \u00b6 fun box le( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ISize val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ISize val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : ISize val Returns \u00b6 ISize val","title":"primitive ISize"},{"location":"builtin-ISize/#isize","text":"[Source] primitive val ISize is SignedInteger[ISize val, USize val] val","title":"ISize"},{"location":"builtin-ISize/#implements","text":"SignedInteger [ ISize val, USize val] val","title":"Implements"},{"location":"builtin-ISize/#constructors","text":"","title":"Constructors"},{"location":"builtin-ISize/#create","text":"[Source] new val create( value: ISize val) : ISize val^","title":"create"},{"location":"builtin-ISize/#parameters","text":"value: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ISize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ISize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ISize/#returns_1","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#min_value","text":"[Source] new val min_value() : ISize val^","title":"min_value"},{"location":"builtin-ISize/#returns_2","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#max_value","text":"[Source] new val max_value() : ISize val^","title":"max_value"},{"location":"builtin-ISize/#returns_3","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ISize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-ISize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bit_reverse","text":"[Source] fun box bit_reverse() : ISize val","title":"bit_reverse"},{"location":"builtin-ISize/#returns_5","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#bswap","text":"[Source] fun box bswap() : ISize val","title":"bswap"},{"location":"builtin-ISize/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-ISize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-ISize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-ISize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz_unsafe","text":"[Source] fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-ISize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-ISize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-ISize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ISize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#min","text":"[Source] fun box min( y: ISize val) : ISize val","title":"min"},{"location":"builtin-ISize/#parameters_2","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_14","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#max","text":"[Source] fun box max( y: ISize val) : ISize val","title":"max"},{"location":"builtin-ISize/#parameters_3","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_15","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#fld","text":"[Source] fun box fld( y: ISize val) : ISize val","title":"fld"},{"location":"builtin-ISize/#parameters_4","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_16","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: ISize val) : ISize val","title":"fld_unsafe"},{"location":"builtin-ISize/#parameters_5","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_17","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mod","text":"[Source] fun box mod( y: ISize val) : ISize val","title":"mod"},{"location":"builtin-ISize/#parameters_6","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_18","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: ISize val) : ISize val","title":"mod_unsafe"},{"location":"builtin-ISize/#parameters_7","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_19","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#addc","text":"[Source] fun box addc( y: ISize val) : (ISize val , Bool val)","title":"addc"},{"location":"builtin-ISize/#parameters_8","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_20","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#subc","text":"[Source] fun box subc( y: ISize val) : (ISize val , Bool val)","title":"subc"},{"location":"builtin-ISize/#parameters_9","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_21","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#mulc","text":"[Source] fun box mulc( y: ISize val) : (ISize val , Bool val)","title":"mulc"},{"location":"builtin-ISize/#parameters_10","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_22","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#divc","text":"[Source] fun box divc( y: ISize val) : (ISize val , Bool val)","title":"divc"},{"location":"builtin-ISize/#parameters_11","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_23","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#remc","text":"[Source] fun box remc( y: ISize val) : (ISize val , Bool val)","title":"remc"},{"location":"builtin-ISize/#parameters_12","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_24","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#fldc","text":"[Source] fun box fldc( y: ISize val) : (ISize val , Bool val)","title":"fldc"},{"location":"builtin-ISize/#parameters_13","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_25","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#modc","text":"[Source] fun box modc( y: ISize val) : (ISize val , Bool val)","title":"modc"},{"location":"builtin-ISize/#parameters_14","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_26","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#add_partial","text":"[Source] fun box add_partial( y: ISize val) : ISize val ?","title":"add_partial"},{"location":"builtin-ISize/#parameters_15","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_27","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#sub_partial","text":"[Source] fun box sub_partial( y: ISize val) : ISize val ?","title":"sub_partial"},{"location":"builtin-ISize/#parameters_16","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_28","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mul_partial","text":"[Source] fun box mul_partial( y: ISize val) : ISize val ?","title":"mul_partial"},{"location":"builtin-ISize/#parameters_17","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_29","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#div_partial","text":"[Source] fun box div_partial( y: ISize val) : ISize val ?","title":"div_partial"},{"location":"builtin-ISize/#parameters_18","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_30","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#rem_partial","text":"[Source] fun box rem_partial( y: ISize val) : ISize val ?","title":"rem_partial"},{"location":"builtin-ISize/#parameters_19","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_31","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#divrem_partial","text":"[Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ?","title":"divrem_partial"},{"location":"builtin-ISize/#parameters_20","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_32","text":"( ISize val , ISize val) ?","title":"Returns"},{"location":"builtin-ISize/#fld_partial","text":"[Source] fun box fld_partial( y: ISize val) : ISize val ?","title":"fld_partial"},{"location":"builtin-ISize/#parameters_21","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_33","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mod_partial","text":"[Source] fun box mod_partial( y: ISize val) : ISize val ?","title":"mod_partial"},{"location":"builtin-ISize/#parameters_22","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_34","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#shl","text":"fun box shl( y: USize val) : ISize val","title":"shl"},{"location":"builtin-ISize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_35","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr","text":"fun box shr( y: USize val) : ISize val","title":"shr"},{"location":"builtin-ISize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_36","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : ISize val","title":"shl_unsafe"},{"location":"builtin-ISize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_37","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : ISize val","title":"shr_unsafe"},{"location":"builtin-ISize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_38","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ISize/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-ISize/#add_unsafe","text":"fun box add_unsafe( y: ISize val) : ISize val","title":"add_unsafe"},{"location":"builtin-ISize/#parameters_27","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_40","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub_unsafe","text":"fun box sub_unsafe( y: ISize val) : ISize val","title":"sub_unsafe"},{"location":"builtin-ISize/#parameters_28","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_41","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul_unsafe","text":"fun box mul_unsafe( y: ISize val) : ISize val","title":"mul_unsafe"},{"location":"builtin-ISize/#parameters_29","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_42","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div_unsafe","text":"fun box div_unsafe( y: ISize val) : ISize val","title":"div_unsafe"},{"location":"builtin-ISize/#parameters_30","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_43","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem_unsafe","text":"fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val)","title":"divrem_unsafe"},{"location":"builtin-ISize/#parameters_31","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_44","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem_unsafe","text":"fun box rem_unsafe( y: ISize val) : ISize val","title":"rem_unsafe"},{"location":"builtin-ISize/#parameters_32","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_45","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg_unsafe","text":"fun box neg_unsafe() : ISize val","title":"neg_unsafe"},{"location":"builtin-ISize/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_and","text":"fun box op_and( y: ISize val) : ISize val","title":"op_and"},{"location":"builtin-ISize/#parameters_33","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_47","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_or","text":"fun box op_or( y: ISize val) : ISize val","title":"op_or"},{"location":"builtin-ISize/#parameters_34","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_48","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_xor","text":"fun box op_xor( y: ISize val) : ISize val","title":"op_xor"},{"location":"builtin-ISize/#parameters_35","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_49","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_not","text":"fun box op_not() : ISize val","title":"op_not"},{"location":"builtin-ISize/#returns_50","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#add","text":"fun box add( y: ISize val) : ISize val","title":"add"},{"location":"builtin-ISize/#parameters_36","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_51","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub","text":"fun box sub( y: ISize val) : ISize val","title":"sub"},{"location":"builtin-ISize/#parameters_37","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_52","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul","text":"fun box mul( y: ISize val) : ISize val","title":"mul"},{"location":"builtin-ISize/#parameters_38","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_53","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div","text":"fun box div( y: ISize val) : ISize val","title":"div"},{"location":"builtin-ISize/#parameters_39","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_54","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem","text":"fun box divrem( y: ISize val) : (ISize val , ISize val)","title":"divrem"},{"location":"builtin-ISize/#parameters_40","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_55","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem","text":"fun box rem( y: ISize val) : ISize val","title":"rem"},{"location":"builtin-ISize/#parameters_41","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_56","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg","text":"fun box neg() : ISize val","title":"neg"},{"location":"builtin-ISize/#returns_57","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#eq","text":"fun box eq( y: ISize val) : Bool val","title":"eq"},{"location":"builtin-ISize/#parameters_42","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ne","text":"fun box ne( y: ISize val) : Bool val","title":"ne"},{"location":"builtin-ISize/#parameters_43","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#lt","text":"fun box lt( y: ISize val) : Bool val","title":"lt"},{"location":"builtin-ISize/#parameters_44","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#le","text":"fun box le( y: ISize val) : Bool val","title":"le"},{"location":"builtin-ISize/#parameters_45","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ge","text":"fun box ge( y: ISize val) : Bool val","title":"ge"},{"location":"builtin-ISize/#parameters_46","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#gt","text":"fun box gt( y: ISize val) : Bool val","title":"gt"},{"location":"builtin-ISize/#parameters_47","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-ISize/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ISize/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ISize/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ISize/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ISize/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ISize/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ISize/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ISize/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_1","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ISize/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ISize/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ISize/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ISize/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ISize/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ISize/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ISize/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ISize/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ISize/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ISize/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ISize/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ISize/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ISize/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ISize/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ISize/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ISize/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ISize/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ISize/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ISize/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ISize/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ISize/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ISize/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ISize/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ISize/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ISize/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ISize/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#compare","text":"fun box compare( that: ISize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ISize/#parameters_48","text":"that: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ISize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ISize/#_value","text":"fun box _value() : ISize val","title":"_value"},{"location":"builtin-ISize/#returns_99","text":"ISize val","title":"Returns"},{"location":"builtin-InputNotify/","text":"InputNotify \u00b6 [Source] Notification for data arriving via an input stream. interface ref InputNotify Public Functions \u00b6 apply \u00b6 [Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val Parameters \u00b6 data: Array [ U8 val] iso Returns \u00b6 None val dispose \u00b6 [Source] Called when no more data will arrive on the stream. fun ref dispose() : None val Returns \u00b6 None val","title":"interface InputNotify"},{"location":"builtin-InputNotify/#inputnotify","text":"[Source] Notification for data arriving via an input stream. interface ref InputNotify","title":"InputNotify"},{"location":"builtin-InputNotify/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-InputNotify/#apply","text":"[Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val","title":"apply"},{"location":"builtin-InputNotify/#parameters","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-InputNotify/#returns","text":"None val","title":"Returns"},{"location":"builtin-InputNotify/#dispose","text":"[Source] Called when no more data will arrive on the stream. fun ref dispose() : None val","title":"dispose"},{"location":"builtin-InputNotify/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-InputStream/","text":"InputStream \u00b6 [Source] Asynchronous access to some input stream. interface tag InputStream Public Behaviours \u00b6 apply \u00b6 [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32) Parameters \u00b6 notify: ( InputNotify iso | None val) chunk_size: USize val = 32 dispose \u00b6 [Source] Clear the notifier in order to shut down input. be dispose()","title":"interface InputStream"},{"location":"builtin-InputStream/#inputstream","text":"[Source] Asynchronous access to some input stream. interface tag InputStream","title":"InputStream"},{"location":"builtin-InputStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-InputStream/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32)","title":"apply"},{"location":"builtin-InputStream/#parameters","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = 32","title":"Parameters"},{"location":"builtin-InputStream/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Int/","text":"Int \u00b6 [Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Int"},{"location":"builtin-Int/#int","text":"[Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Int"},{"location":"builtin-Int/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-Integer/","text":"Integer[A: Integer [A] val] \u00b6 [Source] trait val Integer[A: Integer[A] val] is Real[A] val Implements \u00b6 Real [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 add_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] Floored division, rounded towards negative infinity, as opposed to div which rounds towards zero. Unsafe Operation If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] Calculates the modulo of this number after floored division by y . Unsafe Operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] Divides this number by y , rounds the result towards zero. If y is 0 or the operation overflows, this function errors. fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is 0 or the operation overflows, this function errors. fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] Divides this number by y and calculates the remainder of the operation. If y is 0 or the operation overflows, this function errors. fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? fld_partial \u00b6 [Source] Floored integer division, rounded towards negative infinity. If y is 0 or the operation overflows, this function errors fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_partial \u00b6 [Source] Calculates the modulo of this number and y after floored division ( fld ). The result has the sign of the divisor. If y is 0 or the operation overflows, this function errors. fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? neg_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] Calculate the remainder of this number divided by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fldc \u00b6 [Source] Divide this integer by y and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) modc \u00b6 [Source] Calculate the modulo of this number after floored division by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait Integer"},{"location":"builtin-Integer/#integera-integera-val","text":"[Source] trait val Integer[A: Integer[A] val] is Real[A] val","title":"Integer[A: Integer[A] val]"},{"location":"builtin-Integer/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-Integer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Integer/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Integer/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Integer/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Integer/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Integer/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Integer/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Integer/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Integer/#add_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-Integer/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-Integer/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-Integer/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Integer/#div_unsafe","text":"[Source] Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-Integer/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem_unsafe","text":"[Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-Integer/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem_unsafe","text":"[Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-Integer/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Integer/#fld_unsafe","text":"[Source] Floored division, rounded towards negative infinity, as opposed to div which rounds towards zero. Unsafe Operation If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-Integer/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Integer/#mod_unsafe","text":"[Source] Calculates the modulo of this number after floored division by y . Unsafe Operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-Integer/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_11","text":"A","title":"Returns"},{"location":"builtin-Integer/#add_partial","text":"[Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-Integer/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_12","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#sub_partial","text":"[Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-Integer/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mul_partial","text":"[Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-Integer/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_14","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#div_partial","text":"[Source] Divides this number by y , rounds the result towards zero. If y is 0 or the operation overflows, this function errors. fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-Integer/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_15","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#rem_partial","text":"[Source] Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is 0 or the operation overflows, this function errors. fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-Integer/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_16","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#divrem_partial","text":"[Source] Divides this number by y and calculates the remainder of the operation. If y is 0 or the operation overflows, this function errors. fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-Integer/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_17","text":"(A , A) ?","title":"Returns"},{"location":"builtin-Integer/#fld_partial","text":"[Source] Floored integer division, rounded towards negative infinity. If y is 0 or the operation overflows, this function errors fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-Integer/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_18","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mod_partial","text":"[Source] Calculates the modulo of this number and y after floored division ( fld ). The result has the sign of the divisor. If y is 0 or the operation overflows, this function errors. fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-Integer/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_19","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#neg_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-Integer/#returns_20","text":"A","title":"Returns"},{"location":"builtin-Integer/#addc","text":"[Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-Integer/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_21","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#subc","text":"[Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-Integer/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_22","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#mulc","text":"[Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-Integer/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_23","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#divc","text":"[Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-Integer/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_24","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#remc","text":"[Source] Calculate the remainder of this number divided by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-Integer/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_25","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#fldc","text":"[Source] Divide this integer by y and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-Integer/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_26","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#modc","text":"[Source] Calculate the modulo of this number after floored division by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-Integer/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_27","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-Integer/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_28","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-Integer/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_29","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-Integer/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_30","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-Integer/#returns_31","text":"A","title":"Returns"},{"location":"builtin-Integer/#bit_reverse","text":"[Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-Integer/#returns_32","text":"A","title":"Returns"},{"location":"builtin-Integer/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-Integer/#returns_33","text":"A","title":"Returns"},{"location":"builtin-Integer/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Integer/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_34","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Integer/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_35","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Integer/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_36","text":"A","title":"Returns"},{"location":"builtin-Integer/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-Integer/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_37","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Integer/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_38","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Integer/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_39","text":"A","title":"Returns"},{"location":"builtin-Integer/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Integer/#returns_40","text":"A","title":"Returns"},{"location":"builtin-Integer/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-Integer/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_41","text":"A","title":"Returns"},{"location":"builtin-Integer/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-Integer/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_42","text":"A","title":"Returns"},{"location":"builtin-Integer/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-Integer/#parameters_36","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_43","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-Integer/#parameters_37","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_44","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-Integer/#parameters_38","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_45","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-Integer/#parameters_39","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_46","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-Integer/#parameters_40","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_47","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-Integer/#parameters_41","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_48","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Integer/#parameters_42","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_49","text":"A","title":"Returns"},{"location":"builtin-Integer/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Integer/#parameters_43","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_50","text":"A","title":"Returns"},{"location":"builtin-Integer/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Integer/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Integer/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Integer/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-Integer/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Integer/#returns_54","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Integer/#returns_55","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Integer/#returns_56","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Integer/#returns_57","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Integer/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Integer/#returns_59","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Integer/#returns_60","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Integer/#returns_61","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Integer/#returns_62","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Integer/#returns_63","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Integer/#returns_64","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Integer/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Integer/#returns_66","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Integer/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Integer/#returns_68","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Integer/#returns_69","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Integer/#returns_70","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Integer/#returns_71","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Integer/#returns_72","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Integer/#returns_73","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Integer/#returns_74","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Integer/#returns_75","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Integer/#returns_76","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Integer/#returns_77","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Integer/#returns_78","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Integer/#returns_79","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Integer/#returns_80","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Integer/#returns_81","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Integer/#returns_82","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Integer/#returns_83","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Integer/#returns_84","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Integer/#returns_85","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Integer/#parameters_44","text":"that: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_86","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Integer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Integer/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Integer/#returns_87","text":"A","title":"Returns"},{"location":"builtin-Iterator/","text":"Iterator[A: A] \u00b6 [Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness. Usage \u00b6 Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this. Implementing Iterators \u00b6 Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness. Example \u00b6 // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A] Public Functions \u00b6 has_next \u00b6 [Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ? Returns \u00b6 A ?","title":"interface Iterator"},{"location":"builtin-Iterator/#iteratora-a","text":"[Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness.","title":"Iterator[A: A]"},{"location":"builtin-Iterator/#usage","text":"Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this.","title":"Usage"},{"location":"builtin-Iterator/#implementing-iterators","text":"Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness.","title":"Implementing Iterators"},{"location":"builtin-Iterator/#example","text":"// Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A]","title":"Example"},{"location":"builtin-Iterator/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Iterator/#has_next","text":"[Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val","title":"has_next"},{"location":"builtin-Iterator/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Iterator/#next","text":"[Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ?","title":"next"},{"location":"builtin-Iterator/#returns_1","text":"A ?","title":"Returns"},{"location":"builtin-Less/","text":"Less \u00b6 [Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Less val^ Returns \u00b6 Less val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Less"},{"location":"builtin-Less/#less","text":"[Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref","title":"Less"},{"location":"builtin-Less/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Less/#constructors","text":"","title":"Constructors"},{"location":"builtin-Less/#create","text":"[Source] new val create() : Less val^","title":"create"},{"location":"builtin-Less/#returns","text":"Less val^","title":"Returns"},{"location":"builtin-Less/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Less/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Less/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Less/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Less/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Less/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Less/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-None/","text":"None \u00b6 [Source] primitive val None is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create() : None val^ Returns \u00b6 None val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: None val) : Bool val Parameters \u00b6 that: None val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: None val) : Bool val Parameters \u00b6 that: None val Returns \u00b6 Bool val","title":"primitive None"},{"location":"builtin-None/#none","text":"[Source] primitive val None is Stringable box","title":"None"},{"location":"builtin-None/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-None/#constructors","text":"","title":"Constructors"},{"location":"builtin-None/#create","text":"[Source] new val create() : None val^","title":"create"},{"location":"builtin-None/#returns","text":"None val^","title":"Returns"},{"location":"builtin-None/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-None/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-None/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-None/#eq","text":"[Source] fun box eq( that: None val) : Bool val","title":"eq"},{"location":"builtin-None/#parameters","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-None/#ne","text":"[Source] fun box ne( that: None val) : Bool val","title":"ne"},{"location":"builtin-None/#parameters_1","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-NullablePointer/","text":"NullablePointer[A: A] \u00b6 [Source] A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref NullablePointer[A: A] Constructors \u00b6 create \u00b6 [Source] This re-encodes the type of that from A to NullablePointer[A], allowing that to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : NullablePointer[A] ref^ Parameters \u00b6 that: A Returns \u00b6 NullablePointer [A] ref^ none \u00b6 [Source] This returns a null pointer typed as a NullablePointer[A]. new ref none() : NullablePointer[A] ref^ Returns \u00b6 NullablePointer [A] ref^ Public Functions \u00b6 apply \u00b6 [Source] This re-encodes the type of this from NullablePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this->A ? Returns \u00b6 this->A ? is_none \u00b6 [Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val Returns \u00b6 Bool val","title":"struct NullablePointer"},{"location":"builtin-NullablePointer/#nullablepointera-a","text":"[Source] A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref NullablePointer[A: A]","title":"NullablePointer[A: A]"},{"location":"builtin-NullablePointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-NullablePointer/#create","text":"[Source] This re-encodes the type of that from A to NullablePointer[A], allowing that to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : NullablePointer[A] ref^","title":"create"},{"location":"builtin-NullablePointer/#parameters","text":"that: A","title":"Parameters"},{"location":"builtin-NullablePointer/#returns","text":"NullablePointer [A] ref^","title":"Returns"},{"location":"builtin-NullablePointer/#none","text":"[Source] This returns a null pointer typed as a NullablePointer[A]. new ref none() : NullablePointer[A] ref^","title":"none"},{"location":"builtin-NullablePointer/#returns_1","text":"NullablePointer [A] ref^","title":"Returns"},{"location":"builtin-NullablePointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-NullablePointer/#apply","text":"[Source] This re-encodes the type of this from NullablePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this->A ?","title":"apply"},{"location":"builtin-NullablePointer/#returns_2","text":"this->A ?","title":"Returns"},{"location":"builtin-NullablePointer/#is_none","text":"[Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val","title":"is_none"},{"location":"builtin-NullablePointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Number/","text":"Number \u00b6 [Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"type Number"},{"location":"builtin-Number/#number","text":"[Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Number"},{"location":"builtin-Number/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-OutStream/","text":"OutStream \u00b6 [Source] Asnychronous access to some output stream. interface tag OutStream Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val flush \u00b6 [Source] Flush the stream. be flush()","title":"interface OutStream"},{"location":"builtin-OutStream/#outstream","text":"[Source] Asnychronous access to some output stream. interface tag OutStream","title":"OutStream"},{"location":"builtin-OutStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-OutStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-OutStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-OutStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-OutStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-OutStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#flush","text":"[Source] Flush the stream. be flush()","title":"flush"},{"location":"builtin-Platform/","text":"Platform \u00b6 [Source] primitive val Platform Constructors \u00b6 create \u00b6 [Source] new val create() : Platform val^ Returns \u00b6 Platform val^ Public Functions \u00b6 bsd \u00b6 [Source] fun box bsd() : Bool val Returns \u00b6 Bool val freebsd \u00b6 [Source] fun box freebsd() : Bool val Returns \u00b6 Bool val dragonfly \u00b6 [Source] fun box dragonfly() : Bool val Returns \u00b6 Bool val openbsd \u00b6 [Source] fun box openbsd() : Bool val Returns \u00b6 Bool val linux \u00b6 [Source] fun box linux() : Bool val Returns \u00b6 Bool val osx \u00b6 [Source] fun box osx() : Bool val Returns \u00b6 Bool val posix \u00b6 [Source] fun box posix() : Bool val Returns \u00b6 Bool val windows \u00b6 [Source] fun box windows() : Bool val Returns \u00b6 Bool val x86 \u00b6 [Source] fun box x86() : Bool val Returns \u00b6 Bool val arm \u00b6 [Source] fun box arm() : Bool val Returns \u00b6 Bool val lp64 \u00b6 [Source] fun box lp64() : Bool val Returns \u00b6 Bool val llp64 \u00b6 [Source] fun box llp64() : Bool val Returns \u00b6 Bool val ilp32 \u00b6 [Source] fun box ilp32() : Bool val Returns \u00b6 Bool val bigendian \u00b6 [Source] fun box bigendian() : Bool val Returns \u00b6 Bool val littleendian \u00b6 [Source] fun box littleendian() : Bool val Returns \u00b6 Bool val native128 \u00b6 [Source] fun box native128() : Bool val Returns \u00b6 Bool val debug \u00b6 [Source] fun box debug() : Bool val Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Platform val) : Bool val Parameters \u00b6 that: Platform val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Platform val) : Bool val Parameters \u00b6 that: Platform val Returns \u00b6 Bool val","title":"primitive Platform"},{"location":"builtin-Platform/#platform","text":"[Source] primitive val Platform","title":"Platform"},{"location":"builtin-Platform/#constructors","text":"","title":"Constructors"},{"location":"builtin-Platform/#create","text":"[Source] new val create() : Platform val^","title":"create"},{"location":"builtin-Platform/#returns","text":"Platform val^","title":"Returns"},{"location":"builtin-Platform/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Platform/#bsd","text":"[Source] fun box bsd() : Bool val","title":"bsd"},{"location":"builtin-Platform/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#freebsd","text":"[Source] fun box freebsd() : Bool val","title":"freebsd"},{"location":"builtin-Platform/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#dragonfly","text":"[Source] fun box dragonfly() : Bool val","title":"dragonfly"},{"location":"builtin-Platform/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#openbsd","text":"[Source] fun box openbsd() : Bool val","title":"openbsd"},{"location":"builtin-Platform/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#linux","text":"[Source] fun box linux() : Bool val","title":"linux"},{"location":"builtin-Platform/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#osx","text":"[Source] fun box osx() : Bool val","title":"osx"},{"location":"builtin-Platform/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#posix","text":"[Source] fun box posix() : Bool val","title":"posix"},{"location":"builtin-Platform/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#windows","text":"[Source] fun box windows() : Bool val","title":"windows"},{"location":"builtin-Platform/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#x86","text":"[Source] fun box x86() : Bool val","title":"x86"},{"location":"builtin-Platform/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#arm","text":"[Source] fun box arm() : Bool val","title":"arm"},{"location":"builtin-Platform/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#lp64","text":"[Source] fun box lp64() : Bool val","title":"lp64"},{"location":"builtin-Platform/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#llp64","text":"[Source] fun box llp64() : Bool val","title":"llp64"},{"location":"builtin-Platform/#returns_12","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ilp32","text":"[Source] fun box ilp32() : Bool val","title":"ilp32"},{"location":"builtin-Platform/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#bigendian","text":"[Source] fun box bigendian() : Bool val","title":"bigendian"},{"location":"builtin-Platform/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#littleendian","text":"[Source] fun box littleendian() : Bool val","title":"littleendian"},{"location":"builtin-Platform/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#native128","text":"[Source] fun box native128() : Bool val","title":"native128"},{"location":"builtin-Platform/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#debug","text":"[Source] fun box debug() : Bool val","title":"debug"},{"location":"builtin-Platform/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#eq","text":"[Source] fun box eq( that: Platform val) : Bool val","title":"eq"},{"location":"builtin-Platform/#parameters","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ne","text":"[Source] fun box ne( that: Platform val) : Bool val","title":"ne"},{"location":"builtin-Platform/#parameters_1","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_19","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/","text":"Pointer[A: A] \u00b6 [Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A] Constructors \u00b6 create \u00b6 [Source] A null pointer. new ref create() : Pointer[A] ref^ Returns \u00b6 Pointer [A] ref^ _alloc \u00b6 [Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^ Parameters \u00b6 len: USize val Returns \u00b6 Pointer [A] ref^ Public Functions \u00b6 offset \u00b6 [Source] Return a tag pointer to the n-th element. fun tag offset( n: USize val) : Pointer[A] tag Parameters \u00b6 n: USize val Returns \u00b6 Pointer [A] tag usize \u00b6 [Source] Convert the pointer into an integer. fun tag usize() : USize val Returns \u00b6 USize val is_null \u00b6 [Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val Returns \u00b6 Bool val eq \u00b6 [Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val lt \u00b6 [Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val ne \u00b6 [Source] fun tag ne( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val le \u00b6 [Source] fun tag le( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val ge \u00b6 [Source] fun tag ge( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val gt \u00b6 [Source] fun tag gt( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val hash \u00b6 [Source] Returns a hash of the address. fun tag hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val Returns \u00b6 U64 val Private Functions \u00b6 _realloc \u00b6 [Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref Parameters \u00b6 len: USize val Returns \u00b6 Pointer [A] ref _unsafe \u00b6 [Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref Returns \u00b6 Pointer [A] ref _convert[B: B] \u00b6 [Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this->Pointer[B] ref Returns \u00b6 this-> Pointer [B] ref _apply \u00b6 [Source] Retrieve index i. fun box _apply( i: USize val) : this->A Parameters \u00b6 i: USize val Returns \u00b6 this->A _update \u00b6 [Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^ Parameters \u00b6 i: USize val value: A! Returns \u00b6 A^ _offset \u00b6 [Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this->Pointer[A] ref Parameters \u00b6 n: USize val Returns \u00b6 this-> Pointer [A] ref _element_size \u00b6 [Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val Returns \u00b6 USize val _insert \u00b6 [Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref Parameters \u00b6 n: USize val len: USize val Returns \u00b6 Pointer [A] ref _delete \u00b6 [Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^ Parameters \u00b6 n: USize val len: USize val Returns \u00b6 A^ _copy_to \u00b6 [Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this->A!] ref, n: USize val) : this->Pointer[A] ref Parameters \u00b6 that: Pointer [this->A!] ref n: USize val Returns \u00b6 this-> Pointer [A] ref","title":"struct Pointer"},{"location":"builtin-Pointer/#pointera-a","text":"[Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A]","title":"Pointer[A: A]"},{"location":"builtin-Pointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Pointer/#create","text":"[Source] A null pointer. new ref create() : Pointer[A] ref^","title":"create"},{"location":"builtin-Pointer/#returns","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#_alloc","text":"[Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^","title":"_alloc"},{"location":"builtin-Pointer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_1","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Pointer/#offset","text":"[Source] Return a tag pointer to the n-th element. fun tag offset( n: USize val) : Pointer[A] tag","title":"offset"},{"location":"builtin-Pointer/#parameters_1","text":"n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_2","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Pointer/#usize","text":"[Source] Convert the pointer into an integer. fun tag usize() : USize val","title":"usize"},{"location":"builtin-Pointer/#returns_3","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#is_null","text":"[Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val","title":"is_null"},{"location":"builtin-Pointer/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#eq","text":"[Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val","title":"eq"},{"location":"builtin-Pointer/#parameters_2","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#lt","text":"[Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val","title":"lt"},{"location":"builtin-Pointer/#parameters_3","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ne","text":"[Source] fun tag ne( that: Pointer[A] tag) : Bool val","title":"ne"},{"location":"builtin-Pointer/#parameters_4","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#le","text":"[Source] fun tag le( that: Pointer[A] tag) : Bool val","title":"le"},{"location":"builtin-Pointer/#parameters_5","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ge","text":"[Source] fun tag ge( that: Pointer[A] tag) : Bool val","title":"ge"},{"location":"builtin-Pointer/#parameters_6","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#gt","text":"[Source] fun tag gt( that: Pointer[A] tag) : Bool val","title":"gt"},{"location":"builtin-Pointer/#parameters_7","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#hash","text":"[Source] Returns a hash of the address. fun tag hash() : USize val","title":"hash"},{"location":"builtin-Pointer/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#hash64","text":"[Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val","title":"hash64"},{"location":"builtin-Pointer/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-Pointer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Pointer/#_realloc","text":"[Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref","title":"_realloc"},{"location":"builtin-Pointer/#parameters_8","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_13","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_unsafe","text":"[Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref","title":"_unsafe"},{"location":"builtin-Pointer/#returns_14","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_convertb-b","text":"[Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this->Pointer[B] ref","title":"_convert[B: B]"},{"location":"builtin-Pointer/#returns_15","text":"this-> Pointer [B] ref","title":"Returns"},{"location":"builtin-Pointer/#_apply","text":"[Source] Retrieve index i. fun box _apply( i: USize val) : this->A","title":"_apply"},{"location":"builtin-Pointer/#parameters_9","text":"i: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_16","text":"this->A","title":"Returns"},{"location":"builtin-Pointer/#_update","text":"[Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^","title":"_update"},{"location":"builtin-Pointer/#parameters_10","text":"i: USize val value: A!","title":"Parameters"},{"location":"builtin-Pointer/#returns_17","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_offset","text":"[Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this->Pointer[A] ref","title":"_offset"},{"location":"builtin-Pointer/#parameters_11","text":"n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_18","text":"this-> Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_element_size","text":"[Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val","title":"_element_size"},{"location":"builtin-Pointer/#returns_19","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#_insert","text":"[Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref","title":"_insert"},{"location":"builtin-Pointer/#parameters_12","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_20","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_delete","text":"[Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^","title":"_delete"},{"location":"builtin-Pointer/#parameters_13","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_21","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_copy_to","text":"[Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this->A!] ref, n: USize val) : this->Pointer[A] ref","title":"_copy_to"},{"location":"builtin-Pointer/#parameters_14","text":"that: Pointer [this->A!] ref n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_22","text":"this-> Pointer [A] ref","title":"Returns"},{"location":"builtin-ReadElement/","text":"ReadElement[A: A] \u00b6 [Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A] Public Functions \u00b6 apply \u00b6 [Source] fun box apply( i: USize val) : A ? Parameters \u00b6 i: USize val Returns \u00b6 A ?","title":"interface ReadElement"},{"location":"builtin-ReadElement/#readelementa-a","text":"[Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A]","title":"ReadElement[A: A]"},{"location":"builtin-ReadElement/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadElement/#apply","text":"[Source] fun box apply( i: USize val) : A ?","title":"apply"},{"location":"builtin-ReadElement/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadElement/#returns","text":"A ?","title":"Returns"},{"location":"builtin-ReadSeq/","text":"ReadSeq[A: A] \u00b6 [Source] The readable interface of a sequence. interface box ReadSeq[A: A] Public Functions \u00b6 size \u00b6 [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? values \u00b6 [Source] Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. fun box values() : Iterator[this->A] ref^ Returns \u00b6 Iterator [this->A] ref^","title":"interface ReadSeq"},{"location":"builtin-ReadSeq/#readseqa-a","text":"[Source] The readable interface of a sequence. interface box ReadSeq[A: A]","title":"ReadSeq[A: A]"},{"location":"builtin-ReadSeq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadSeq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-ReadSeq/#returns","text":"USize val","title":"Returns"},{"location":"builtin-ReadSeq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-ReadSeq/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadSeq/#returns_1","text":"this->A ?","title":"Returns"},{"location":"builtin-ReadSeq/#values","text":"[Source] Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. fun box values() : Iterator[this->A] ref^","title":"values"},{"location":"builtin-ReadSeq/#returns_2","text":"Iterator [this->A] ref^","title":"Returns"},{"location":"builtin-Real/","text":"Real[A: Real [A] val] \u00b6 [Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref Implements \u00b6 Stringable box _ArithmeticConvertible val Comparable [A] ref Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] Integer division, rounded towards zero. fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] Calculate the remainder after integer division, rounded towards zero ( div ). The result has the sign of the dividend. fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] Floored integer division, rounded towards negative infinity. fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] Calculate the modulo after floored integer division, rounded towards negative infinity ( fld ). The result has the sign of the divisor. fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait Real"},{"location":"builtin-Real/#reala-reala-val","text":"[Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref","title":"Real[A: Real[A] val]"},{"location":"builtin-Real/#implements","text":"Stringable box _ArithmeticConvertible val Comparable [A] ref","title":"Implements"},{"location":"builtin-Real/#constructors","text":"","title":"Constructors"},{"location":"builtin-Real/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Real/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Real/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Real/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Real/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Real/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Real/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Real/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Real/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Real/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Real/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Real/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Real/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Real/#div","text":"[Source] Integer division, rounded towards zero. fun box div( y: A) : A","title":"div"},{"location":"builtin-Real/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Real/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Real/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Real/#rem","text":"[Source] Calculate the remainder after integer division, rounded towards zero ( div ). The result has the sign of the dividend. fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Real/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Real/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Real/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Real/#fld","text":"[Source] Floored integer division, rounded towards negative infinity. fun box fld( y: A) : A","title":"fld"},{"location":"builtin-Real/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_11","text":"A","title":"Returns"},{"location":"builtin-Real/#mod","text":"[Source] Calculate the modulo after floored integer division, rounded towards negative infinity ( fld ). The result has the sign of the divisor. fun box mod( y: A) : A","title":"mod"},{"location":"builtin-Real/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_12","text":"A","title":"Returns"},{"location":"builtin-Real/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-Real/#parameters_10","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-Real/#parameters_11","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-Real/#parameters_12","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-Real/#parameters_13","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-Real/#parameters_14","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-Real/#parameters_15","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Real/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_19","text":"A","title":"Returns"},{"location":"builtin-Real/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Real/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_20","text":"A","title":"Returns"},{"location":"builtin-Real/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Real/#returns_21","text":"USize val","title":"Returns"},{"location":"builtin-Real/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Real/#returns_22","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Real/#returns_23","text":"String iso^","title":"Returns"},{"location":"builtin-Real/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Real/#returns_24","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Real/#returns_25","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Real/#returns_26","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Real/#returns_27","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Real/#returns_28","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Real/#returns_29","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Real/#returns_30","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Real/#returns_31","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Real/#returns_32","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Real/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Real/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Real/#returns_35","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Real/#returns_36","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Real/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Real/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Real/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Real/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Real/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Real/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Real/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Real/#returns_44","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Real/#returns_45","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Real/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Real/#returns_47","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Real/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Real/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Real/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Real/#returns_51","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Real/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Real/#returns_53","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Real/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Real/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Real/#parameters_18","text":"that: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_56","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Real/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Real/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Real/#returns_57","text":"A","title":"Returns"},{"location":"builtin-RuntimeOptions/","text":"RuntimeOptions \u00b6 [Source] Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program. The way this is done is by adding the following function to your Main actor: fun @runtime_override_defaults(rto: RuntimeOptions) => and then overriding the fields of rto (the RuntimeOptions instance) as needed. NOTE: Command line arguments still any values set via @runtime_override_defaults . The following example overrides the --ponyhelp argument to default it to true instead of false causing the compiled program to always display the Pony runtime help: actor Main new create(env: Env) => env.out.print(\"Hello, world.\") fun @runtime_override_defaults(rto: RuntimeOptions) => rto.ponyhelp = true struct ref RuntimeOptions Constructors \u00b6 create \u00b6 [Source] new iso create() : RuntimeOptions iso^ Returns \u00b6 RuntimeOptions iso^ Public fields \u00b6 var ponymaxthreads: U32 val \u00b6 [Source] Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available. var ponyminthreads: U32 val \u00b6 [Source] Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available. var ponynoscale: Bool val \u00b6 [Source] Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads. var ponysuspendthreshold: U32 val \u00b6 [Source] Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms. var ponycdinterval: U32 val \u00b6 [Source] Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms. var ponygcinitial: USize val \u00b6 [Source] Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14. var ponygcfactor: F64 val \u00b6 [Source] After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0. var ponynoyield: Bool val \u00b6 [Source] Do not yield the CPU when no work is available. var ponynoblock: Bool val \u00b6 [Source] Do not send block messages to the cycle detector. var ponypin: Bool val \u00b6 [Source] Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if --ponypinasio is set. var ponypinasio: Bool val \u00b6 [Source] Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires --ponypin to be set to have any effect. var ponyversion: Bool val \u00b6 [Source] Print the version of the compiler and exit. var ponyhelp: Bool val \u00b6 [Source] Print the runtime usage options and exit.","title":"struct RuntimeOptions"},{"location":"builtin-RuntimeOptions/#runtimeoptions","text":"[Source] Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program. The way this is done is by adding the following function to your Main actor: fun @runtime_override_defaults(rto: RuntimeOptions) => and then overriding the fields of rto (the RuntimeOptions instance) as needed. NOTE: Command line arguments still any values set via @runtime_override_defaults . The following example overrides the --ponyhelp argument to default it to true instead of false causing the compiled program to always display the Pony runtime help: actor Main new create(env: Env) => env.out.print(\"Hello, world.\") fun @runtime_override_defaults(rto: RuntimeOptions) => rto.ponyhelp = true struct ref RuntimeOptions","title":"RuntimeOptions"},{"location":"builtin-RuntimeOptions/#constructors","text":"","title":"Constructors"},{"location":"builtin-RuntimeOptions/#create","text":"[Source] new iso create() : RuntimeOptions iso^","title":"create"},{"location":"builtin-RuntimeOptions/#returns","text":"RuntimeOptions iso^","title":"Returns"},{"location":"builtin-RuntimeOptions/#public-fields","text":"","title":"Public fields"},{"location":"builtin-RuntimeOptions/#var-ponymaxthreads-u32-val","text":"[Source] Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available.","title":"var ponymaxthreads: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponyminthreads-u32-val","text":"[Source] Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available.","title":"var ponyminthreads: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponynoscale-bool-val","text":"[Source] Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads.","title":"var ponynoscale: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponysuspendthreshold-u32-val","text":"[Source] Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms.","title":"var ponysuspendthreshold: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponycdinterval-u32-val","text":"[Source] Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms.","title":"var ponycdinterval: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponygcinitial-usize-val","text":"[Source] Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14.","title":"var ponygcinitial: USize val"},{"location":"builtin-RuntimeOptions/#var-ponygcfactor-f64-val","text":"[Source] After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0.","title":"var ponygcfactor: F64 val"},{"location":"builtin-RuntimeOptions/#var-ponynoyield-bool-val","text":"[Source] Do not yield the CPU when no work is available.","title":"var ponynoyield: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponynoblock-bool-val","text":"[Source] Do not send block messages to the cycle detector.","title":"var ponynoblock: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponypin-bool-val","text":"[Source] Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if --ponypinasio is set.","title":"var ponypin: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponypinasio-bool-val","text":"[Source] Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires --ponypin to be set to have any effect.","title":"var ponypinasio: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponyversion-bool-val","text":"[Source] Print the version of the compiler and exit.","title":"var ponyversion: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponyhelp-bool-val","text":"[Source] Print the runtime usage options and exit.","title":"var ponyhelp: Bool val"},{"location":"builtin-Seq/","text":"Seq[A: A] \u00b6 [Source] A sequence of elements. interface ref Seq[A: A] Constructors \u00b6 create \u00b6 [Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = 0) : Seq[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 Seq [A] ref^ Public Functions \u00b6 reserve \u00b6 [Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val size \u00b6 [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? update \u00b6 [Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? clear \u00b6 [Source] Removes all elements from the sequence. fun ref clear() : None val Returns \u00b6 None val push \u00b6 [Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Removes an element from the end of the sequence. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val shift \u00b6 [Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val truncate \u00b6 [Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val values \u00b6 [Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this->A] ref^ Returns \u00b6 Iterator [this->A] ref^","title":"interface Seq"},{"location":"builtin-Seq/#seqa-a","text":"[Source] A sequence of elements. interface ref Seq[A: A]","title":"Seq[A: A]"},{"location":"builtin-Seq/#constructors","text":"","title":"Constructors"},{"location":"builtin-Seq/#create","text":"[Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = 0) : Seq[A] ref^","title":"create"},{"location":"builtin-Seq/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-Seq/#returns","text":"Seq [A] ref^","title":"Returns"},{"location":"builtin-Seq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Seq/#reserve","text":"[Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Seq/#parameters_1","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Seq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-Seq/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Seq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-Seq/#parameters_2","text":"i: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_3","text":"this->A ?","title":"Returns"},{"location":"builtin-Seq/#update","text":"[Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Seq/#parameters_3","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_4","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#clear","text":"[Source] Removes all elements from the sequence. fun ref clear() : None val","title":"clear"},{"location":"builtin-Seq/#returns_5","text":"None val","title":"Returns"},{"location":"builtin-Seq/#push","text":"[Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Seq/#parameters_4","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Seq/#pop","text":"[Source] Removes an element from the end of the sequence. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Seq/#returns_7","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#unshift","text":"[Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Seq/#parameters_5","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Seq/#shift","text":"[Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Seq/#returns_9","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#append","text":"[Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-Seq/#parameters_6","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Seq/#returns_10","text":"None val","title":"Returns"},{"location":"builtin-Seq/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-Seq/#parameters_7","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Seq/#returns_11","text":"None val","title":"Returns"},{"location":"builtin-Seq/#truncate","text":"[Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Seq/#parameters_8","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_12","text":"None val","title":"Returns"},{"location":"builtin-Seq/#values","text":"[Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this->A] ref^","title":"values"},{"location":"builtin-Seq/#returns_13","text":"Iterator [this->A] ref^","title":"Returns"},{"location":"builtin-Signed/","text":"Signed \u00b6 [Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"type Signed"},{"location":"builtin-Signed/#signed","text":"[Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Signed"},{"location":"builtin-Signed/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Type Alias For"},{"location":"builtin-SignedInteger/","text":"SignedInteger[A: SignedInteger [A, B] val, B: UnsignedInteger [B] val] \u00b6 [Source] trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] val Implements \u00b6 Integer [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : B Returns \u00b6 B shl \u00b6 [Source] fun box shl( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shr \u00b6 [Source] fun box shr( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shl_unsafe \u00b6 [Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shr_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A popcount \u00b6 [Source] fun box popcount() : B Returns \u00b6 B clz \u00b6 [Source] fun box clz() : B Returns \u00b6 B ctz \u00b6 [Source] fun box ctz() : B Returns \u00b6 B clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B Returns \u00b6 B ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B Returns \u00b6 B bitwidth \u00b6 [Source] fun box bitwidth() : B Returns \u00b6 B bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 [Source] fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? fld_partial \u00b6 [Source] fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_partial \u00b6 [Source] fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? neg_unsafe \u00b6 [Source] fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fldc \u00b6 [Source] fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) modc \u00b6 [Source] fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait SignedInteger"},{"location":"builtin-SignedInteger/#signedintegera-signedintegera-b-val-b-unsignedintegerb-val","text":"[Source] trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] val","title":"SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val]"},{"location":"builtin-SignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-SignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-SignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-SignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-SignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-SignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-SignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SignedInteger/#abs","text":"[Source] fun box abs() : B","title":"abs"},{"location":"builtin-SignedInteger/#returns_4","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#shl","text":"[Source] fun box shl( y: B) : A","title":"shl"},{"location":"builtin-SignedInteger/#parameters_2","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shr","text":"[Source] fun box shr( y: B) : A","title":"shr"},{"location":"builtin-SignedInteger/#parameters_3","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A","title":"shl_unsafe"},{"location":"builtin-SignedInteger/#parameters_4","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A","title":"shr_unsafe"},{"location":"builtin-SignedInteger/#parameters_5","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_8","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#popcount","text":"[Source] fun box popcount() : B","title":"popcount"},{"location":"builtin-SignedInteger/#returns_9","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#clz","text":"[Source] fun box clz() : B","title":"clz"},{"location":"builtin-SignedInteger/#returns_10","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#ctz","text":"[Source] fun box ctz() : B","title":"ctz"},{"location":"builtin-SignedInteger/#returns_11","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B","title":"clz_unsafe"},{"location":"builtin-SignedInteger/#returns_12","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B","title":"ctz_unsafe"},{"location":"builtin-SignedInteger/#returns_13","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : B","title":"bitwidth"},{"location":"builtin-SignedInteger/#returns_14","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-SignedInteger/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-SignedInteger/#returns_16","text":"String iso^","title":"Returns"},{"location":"builtin-SignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-SignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-SignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-SignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-SignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-SignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_21","text":"(A , A)","title":"Returns"},{"location":"builtin-SignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-SignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-SignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_23","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-SignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-SignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_25","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-SignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_26","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-SignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_27","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-SignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_28","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-SignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_29","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-SignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_30","text":"(A , A) ?","title":"Returns"},{"location":"builtin-SignedInteger/#fld_partial","text":"[Source] fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-SignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_31","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#mod_partial","text":"[Source] fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-SignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_32","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-SignedInteger/#returns_33","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-SignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_34","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-SignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_35","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-SignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_36","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-SignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_37","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-SignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_38","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#fldc","text":"[Source] fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-SignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_39","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#modc","text":"[Source] fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-SignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_40","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-SignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_41","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-SignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_42","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-SignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_43","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-SignedInteger/#returns_44","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-SignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-SignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-SignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-SignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-SignedInteger/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-SignedInteger/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_50","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-SignedInteger/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_51","text":"(A , A)","title":"Returns"},{"location":"builtin-SignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-SignedInteger/#parameters_37","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_52","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-SignedInteger/#returns_53","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-SignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-SignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_55","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-SignedInteger/#parameters_40","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-SignedInteger/#parameters_41","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-SignedInteger/#parameters_42","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-SignedInteger/#parameters_43","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-SignedInteger/#parameters_44","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-SignedInteger/#parameters_45","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-SignedInteger/#parameters_46","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_62","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-SignedInteger/#parameters_47","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_63","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-SignedInteger/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-SignedInteger/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-SignedInteger/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-SignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-SignedInteger/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-SignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-SignedInteger/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-SignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-SignedInteger/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-SignedInteger/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-SignedInteger/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-SignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-SignedInteger/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-SignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-SignedInteger/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-SignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-SignedInteger/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-SignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-SignedInteger/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-SignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-SignedInteger/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-SignedInteger/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-SignedInteger/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-SignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-SignedInteger/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-SignedInteger/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-SignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-SignedInteger/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-SignedInteger/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-SignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-SignedInteger/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-SignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-SignedInteger/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-SignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-SignedInteger/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-SignedInteger/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-SignedInteger/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-SignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-SignedInteger/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-SignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-SignedInteger/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-SignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-SignedInteger/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-SignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-SignedInteger/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-SignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-SignedInteger/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-SignedInteger/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-SignedInteger/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-SignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-SignedInteger/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-SignedInteger/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-SignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-SignedInteger/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-SignedInteger/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-SignedInteger/#parameters_48","text":"that: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-SignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-SignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-SignedInteger/#returns_99","text":"A","title":"Returns"},{"location":"builtin-SourceLoc/","text":"SourceLoc \u00b6 [Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc Public Functions \u00b6 file \u00b6 [Source] Name and path of source file. fun box file() : String val Returns \u00b6 String val type_name \u00b6 [Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val Returns \u00b6 String val method_name \u00b6 [Source] Name of containing method. fun box method_name() : String val Returns \u00b6 String val line \u00b6 [Source] Line number within file. Line numbers start at 1. fun box line() : USize val Returns \u00b6 USize val pos \u00b6 [Source] Character position on line. Character positions start at 1. fun box pos() : USize val Returns \u00b6 USize val","title":"interface SourceLoc"},{"location":"builtin-SourceLoc/#sourceloc","text":"[Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc","title":"SourceLoc"},{"location":"builtin-SourceLoc/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SourceLoc/#file","text":"[Source] Name and path of source file. fun box file() : String val","title":"file"},{"location":"builtin-SourceLoc/#returns","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#type_name","text":"[Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val","title":"type_name"},{"location":"builtin-SourceLoc/#returns_1","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#method_name","text":"[Source] Name of containing method. fun box method_name() : String val","title":"method_name"},{"location":"builtin-SourceLoc/#returns_2","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#line","text":"[Source] Line number within file. Line numbers start at 1. fun box line() : USize val","title":"line"},{"location":"builtin-SourceLoc/#returns_3","text":"USize val","title":"Returns"},{"location":"builtin-SourceLoc/#pos","text":"[Source] Character position on line. Character positions start at 1. fun box pos() : USize val","title":"pos"},{"location":"builtin-SourceLoc/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-StdStream/","text":"StdStream \u00b6 [Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream Constructors \u00b6 _out \u00b6 [Source] Create an async stream for stdout. new tag _out() : StdStream tag^ Returns \u00b6 StdStream tag^ _err \u00b6 [Source] Create an async stream for stderr. new tag _err() : StdStream tag^ Returns \u00b6 StdStream tag^ Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val flush \u00b6 [Source] Flush any data out to the os (ignoring failures). be flush() Private Functions \u00b6 _write \u00b6 [Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val _print \u00b6 [Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val","title":"actor StdStream"},{"location":"builtin-StdStream/#stdstream","text":"[Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream","title":"StdStream"},{"location":"builtin-StdStream/#constructors","text":"","title":"Constructors"},{"location":"builtin-StdStream/#_out","text":"[Source] Create an async stream for stdout. new tag _out() : StdStream tag^","title":"_out"},{"location":"builtin-StdStream/#returns","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#_err","text":"[Source] Create an async stream for stderr. new tag _err() : StdStream tag^","title":"_err"},{"location":"builtin-StdStream/#returns_1","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-StdStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-StdStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-StdStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-StdStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-StdStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#flush","text":"[Source] Flush any data out to the os (ignoring failures). be flush()","title":"flush"},{"location":"builtin-StdStream/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-StdStream/#_write","text":"[Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val","title":"_write"},{"location":"builtin-StdStream/#parameters_4","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-StdStream/#_print","text":"[Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val","title":"_print"},{"location":"builtin-StdStream/#parameters_5","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-Stdin/","text":"Stdin \u00b6 [Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin Constructors \u00b6 _create \u00b6 [Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^ Parameters \u00b6 use_event: Bool val Returns \u00b6 Stdin tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32) Parameters \u00b6 notify: ( InputNotify iso | None val) chunk_size: USize val = 32 dispose \u00b6 [Source] Clear the notifier in order to shut down input. be dispose() Private Behaviours \u00b6 _loop_read \u00b6 [Source] If we are able to read from stdin, schedule another read. be _loop_read() _event_notify \u00b6 [Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again \u00b6 [Source] Resume reading. be _read_again() Private Functions \u00b6 _set_notify \u00b6 [Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val Parameters \u00b6 notify: ( InputNotify iso | None val) Returns \u00b6 None val _read \u00b6 [Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val Returns \u00b6 Bool val _close_event \u00b6 [Source] Close the event. fun ref _close_event() : None val Returns \u00b6 None val","title":"actor Stdin"},{"location":"builtin-Stdin/#stdin","text":"[Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin","title":"Stdin"},{"location":"builtin-Stdin/#constructors","text":"","title":"Constructors"},{"location":"builtin-Stdin/#_create","text":"[Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^","title":"_create"},{"location":"builtin-Stdin/#parameters","text":"use_event: Bool val","title":"Parameters"},{"location":"builtin-Stdin/#returns","text":"Stdin tag^","title":"Returns"},{"location":"builtin-Stdin/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-Stdin/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32)","title":"apply"},{"location":"builtin-Stdin/#parameters_1","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = 32","title":"Parameters"},{"location":"builtin-Stdin/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Stdin/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-Stdin/#_loop_read","text":"[Source] If we are able to read from stdin, schedule another read. be _loop_read()","title":"_loop_read"},{"location":"builtin-Stdin/#_event_notify","text":"[Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-Stdin/#parameters_2","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Stdin/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"builtin-Stdin/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Stdin/#_set_notify","text":"[Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val","title":"_set_notify"},{"location":"builtin-Stdin/#parameters_3","text":"notify: ( InputNotify iso | None val)","title":"Parameters"},{"location":"builtin-Stdin/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Stdin/#_read","text":"[Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val","title":"_read"},{"location":"builtin-Stdin/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Stdin/#_close_event","text":"[Source] Close the event. fun ref _close_event() : None val","title":"_close_event"},{"location":"builtin-Stdin/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-String/","text":"String \u00b6 [Source] A String is an ordered collection of bytes. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box Implements \u00b6 Seq [ U8 val] ref Comparable [ String box] ref Stringable box Constructors \u00b6 create \u00b6 [Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = 0) : String ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 String ref^ from_array \u00b6 [Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^ Parameters \u00b6 data: Array [ U8 val] val Returns \u00b6 String val^ from_iso_array \u00b6 [Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^ Parameters \u00b6 data: Array [ U8 val] iso Returns \u00b6 String iso^ from_cpointer \u00b6 [Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = 0) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] ref len: USize val alloc: USize val = 0 Returns \u00b6 String ref^ from_cstring \u00b6 [Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] ref Returns \u00b6 String ref^ copy_cpointer \u00b6 [Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] box len: USize val Returns \u00b6 String ref^ copy_cstring \u00b6 [Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] box Returns \u00b6 String ref^ from_utf32 \u00b6 [Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^ Parameters \u00b6 value: U32 val Returns \u00b6 String ref^ Public Functions \u00b6 push_utf32 \u00b6 [Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val Parameters \u00b6 value: U32 val Returns \u00b6 None val cpointer \u00b6 [Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = 0) : Pointer[U8 val] tag Parameters \u00b6 offset: USize val = 0 Returns \u00b6 Pointer [ U8 val] tag cstring \u00b6 [Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag Returns \u00b6 Pointer [ U8 val] tag array \u00b6 [Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val iso_array \u00b6 [Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^ Returns \u00b6 Array [ U8 val] iso^ size \u00b6 [Source] Returns the length of the string data in bytes. fun box size() : USize val Returns \u00b6 USize val codepoints \u00b6 [Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = 0, to: ISize val = call) : USize val Parameters \u00b6 from: ISize val = 0 to: ISize val = call Returns \u00b6 USize val space \u00b6 [Source] Returns the space available for data, not including the null terminator. fun box space() : USize val Returns \u00b6 USize val reserve \u00b6 [Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val compact \u00b6 [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val Returns \u00b6 None val recalc \u00b6 [Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val Returns \u00b6 None val truncate \u00b6 [Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val trim_in_place \u00b6 [Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 None val trim \u00b6 [Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : String val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 String val chop \u00b6 [Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^) Parameters \u00b6 split_point: USize val Returns \u00b6 ( String iso^ , String iso^) unchop \u00b6 [Source] Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. fun iso unchop( b: String iso) : ((String iso^ , String iso^) | String iso^) Parameters \u00b6 b: String iso Returns \u00b6 (( String iso^ , String iso^) | String iso^) is_null_terminated \u00b6 [Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val Returns \u00b6 Bool val utf32 \u00b6 [Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ? Parameters \u00b6 offset: ISize val Returns \u00b6 ( U32 val , U8 val) ? apply \u00b6 [Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ? Parameters \u00b6 i: USize val Returns \u00b6 U8 val ? update \u00b6 [Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ? Parameters \u00b6 i: USize val value: U8 val Returns \u00b6 U8 val ? at_offset \u00b6 [Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ? Parameters \u00b6 offset: ISize val Returns \u00b6 U8 val ? update_offset \u00b6 [Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ? Parameters \u00b6 offset: ISize val value: U8 val Returns \u00b6 U8 val ? clone \u00b6 [Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^ Returns \u00b6 String iso^ repeat_str \u00b6 [Source] Returns a copy of the string repeated num times with an optional separator added inbetween repeats. fun box repeat_str( num: USize val = 1, sep: String val = \"\") : String iso^ Parameters \u00b6 num: USize val = 1 sep: String val = \"\" Returns \u00b6 String iso^ mul \u00b6 [Source] Returns a copy of the string repeated num times. fun box mul( num: USize val) : String iso^ Parameters \u00b6 num: USize val Returns \u00b6 String iso^ find \u00b6 [Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = 0, nth: USize val = 0) : ISize val ? Parameters \u00b6 s: String box offset: ISize val = 0 nth: USize val = 0 Returns \u00b6 ISize val ? rfind \u00b6 [Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = call, nth: USize val = 0) : ISize val ? Parameters \u00b6 s: String box offset: ISize val = call nth: USize val = 0 Returns \u00b6 ISize val ? contains \u00b6 [Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = 0, nth: USize val = 0) : Bool val Parameters \u00b6 s: String box offset: ISize val = 0 nth: USize val = 0 Returns \u00b6 Bool val count \u00b6 [Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = 0) : USize val Parameters \u00b6 s: String box offset: ISize val = 0 Returns \u00b6 USize val at \u00b6 [Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = 0) : Bool val Parameters \u00b6 s: String box offset: ISize val = 0 Returns \u00b6 Bool val delete \u00b6 [Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = 1) : None val Parameters \u00b6 offset: ISize val len: USize val = 1 Returns \u00b6 None val substring \u00b6 [Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = call) : String iso^ Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 String iso^ lower \u00b6 [Source] Returns a lower case version of the string. fun box lower() : String iso^ Returns \u00b6 String iso^ lower_in_place \u00b6 [Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val Returns \u00b6 None val upper \u00b6 [Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^ Returns \u00b6 String iso^ upper_in_place \u00b6 [Source] Transforms the string to upper case. fun ref upper_in_place() : None val Returns \u00b6 None val reverse \u00b6 [Source] Returns a reversed version of the string. fun box reverse() : String iso^ Returns \u00b6 String iso^ reverse_in_place \u00b6 [Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val Returns \u00b6 None val push \u00b6 [Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val pop \u00b6 [Source] Remove a byte from the end of the string. fun ref pop() : U8 val ? Returns \u00b6 U8 val ? unshift \u00b6 [Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val shift \u00b6 [Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ? Returns \u00b6 U8 val ? append \u00b6 [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ReadSeq [ U8 val] box offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [ U8 val] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val clear \u00b6 [Source] Truncate the string to zero length. fun ref clear() : None val Returns \u00b6 None val insert \u00b6 [Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^ Parameters \u00b6 offset: ISize val that: String val Returns \u00b6 String iso^ insert_in_place \u00b6 [Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val Parameters \u00b6 offset: ISize val that: String box Returns \u00b6 None val insert_byte \u00b6 [Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val Parameters \u00b6 offset: ISize val value: U8 val Returns \u00b6 None val cut \u00b6 [Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = call) : String iso^ Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 String iso^ cut_in_place \u00b6 [Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = call) : None val Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 None val remove \u00b6 [Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val Parameters \u00b6 s: String box Returns \u00b6 USize val replace \u00b6 [Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = 0) : USize val Parameters \u00b6 from: String box to: String box n: USize val = 0 Returns \u00b6 USize val split_by \u00b6 [Source] Split the string into an array of strings that are delimited by delim in the original string. If n > 0 , then the split count is limited to n. Example: let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> Adjacent delimiters result in a zero length entry in the array. For example, \"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of delim , use split . fun box split_by( delim: String val, n: USize val = call) : Array[String val] iso^ Parameters \u00b6 delim: String val n: USize val = call Returns \u00b6 Array [ String val] iso^ split \u00b6 [Source] Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If n > 0 , then the split count is limited to n. Example: let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] . If you want to split the string with the entire delimiter string delim , use split_by . fun box split( delim: String val = \" \", n: USize val = 0) : Array[String val] iso^ Parameters \u00b6 delim: String val = \" \" n: USize val = 0 Returns \u00b6 Array [ String val] iso^ strip \u00b6 [Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val rstrip \u00b6 [Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val lstrip \u00b6 [Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val add \u00b6 [Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val Parameters \u00b6 that: String box Returns \u00b6 String val join \u00b6 [Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^ Parameters \u00b6 data: Iterator [ Stringable box] ref Returns \u00b6 String iso^ compare \u00b6 [Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: String box Returns \u00b6 ( Less val | Equal val | Greater val) compare_sub \u00b6 [Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = 0, that_offset: ISize val = 0, ignore_case: Bool val = false) : (Less val | Equal val | Greater val) Parameters \u00b6 that: String box n: USize val offset: ISize val = 0 that_offset: ISize val = 0 ignore_case: Bool val = false Returns \u00b6 ( Less val | Equal val | Greater val) eq \u00b6 [Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val lt \u00b6 [Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val le \u00b6 [Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val offset_to_index \u00b6 [Source] fun box offset_to_index( i: ISize val) : USize val Parameters \u00b6 i: ISize val Returns \u00b6 USize val bool \u00b6 [Source] fun box bool() : Bool val ? Returns \u00b6 Bool val ? i8 \u00b6 [Source] fun box i8( base: U8 val = 0) : I8 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I8 val ? i16 \u00b6 [Source] fun box i16( base: U8 val = 0) : I16 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I16 val ? i32 \u00b6 [Source] fun box i32( base: U8 val = 0) : I32 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I32 val ? i64 \u00b6 [Source] fun box i64( base: U8 val = 0) : I64 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I64 val ? i128 \u00b6 [Source] fun box i128( base: U8 val = 0) : I128 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I128 val ? ilong \u00b6 [Source] fun box ilong( base: U8 val = 0) : ILong val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ILong val ? isize \u00b6 [Source] fun box isize( base: U8 val = 0) : ISize val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ISize val ? u8 \u00b6 [Source] fun box u8( base: U8 val = 0) : U8 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U8 val ? u16 \u00b6 [Source] fun box u16( base: U8 val = 0) : U16 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U16 val ? u32 \u00b6 [Source] fun box u32( base: U8 val = 0) : U32 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U32 val ? u64 \u00b6 [Source] fun box u64( base: U8 val = 0) : U64 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U64 val ? u128 \u00b6 [Source] fun box u128( base: U8 val = 0) : U128 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U128 val ? ulong \u00b6 [Source] fun box ulong( base: U8 val = 0) : ULong val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ULong val ? usize \u00b6 [Source] fun box usize( base: U8 val = 0) : USize val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 USize val ? read_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( offset: ISize val = 0, base: U8 val = 0) : (A , USize val) ? Parameters \u00b6 offset: ISize val = 0 base: U8 val = 0 Returns \u00b6 (A , USize val) ? f32 \u00b6 [Source] Convert this string starting at the given offset to a 32-bit floating point number ( F32 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true fun box f32( offset: ISize val = 0) : F32 val ? Parameters \u00b6 offset: ISize val = 0 Returns \u00b6 F32 val ? f64 \u00b6 [Source] Convert this string starting at the given offset to a 64-bit floating point number ( F64 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true fun box f64( offset: ISize val = 0) : F64 val ? Parameters \u00b6 offset: ISize val = 0 Returns \u00b6 F64 val ? hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ values \u00b6 [Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^ Returns \u00b6 StringBytes ref^ runes \u00b6 [Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^ Returns \u00b6 StringRunes ref^ ge \u00b6 fun box ge( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val gt \u00b6 fun box gt( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val ne \u00b6 fun box ne( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val Private Functions \u00b6 _copy_to \u00b6 [Source] Copy copy_len bytes from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val Parameters \u00b6 ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0 Returns \u00b6 None val _append \u00b6 [Source] fun iso _append( s: String box) : String iso^ Parameters \u00b6 s: String box Returns \u00b6 String iso^ _to_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val) : A ? Parameters \u00b6 base: U8 val Returns \u00b6 A ? _read_int_base[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of single-byte characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val) Parameters \u00b6 base: U8 val index: USize val Returns \u00b6 (A , USize val) _set \u00b6 [Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val Parameters \u00b6 i: USize val value: U8 val Returns \u00b6 U8 val","title":"class String"},{"location":"builtin-String/#string","text":"[Source] A String is an ordered collection of bytes. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box","title":"String"},{"location":"builtin-String/#implements","text":"Seq [ U8 val] ref Comparable [ String box] ref Stringable box","title":"Implements"},{"location":"builtin-String/#constructors","text":"","title":"Constructors"},{"location":"builtin-String/#create","text":"[Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = 0) : String ref^","title":"create"},{"location":"builtin-String/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_array","text":"[Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^","title":"from_array"},{"location":"builtin-String/#parameters_1","text":"data: Array [ U8 val] val","title":"Parameters"},{"location":"builtin-String/#returns_1","text":"String val^","title":"Returns"},{"location":"builtin-String/#from_iso_array","text":"[Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^","title":"from_iso_array"},{"location":"builtin-String/#parameters_2","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-String/#returns_2","text":"String iso^","title":"Returns"},{"location":"builtin-String/#from_cpointer","text":"[Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = 0) : String ref^","title":"from_cpointer"},{"location":"builtin-String/#parameters_3","text":"str: Pointer [ U8 val] ref len: USize val alloc: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_3","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_cstring","text":"[Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^","title":"from_cstring"},{"location":"builtin-String/#parameters_4","text":"str: Pointer [ U8 val] ref","title":"Parameters"},{"location":"builtin-String/#returns_4","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cpointer","text":"[Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^","title":"copy_cpointer"},{"location":"builtin-String/#parameters_5","text":"str: Pointer [ U8 val] box len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_5","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cstring","text":"[Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^","title":"copy_cstring"},{"location":"builtin-String/#parameters_6","text":"str: Pointer [ U8 val] box","title":"Parameters"},{"location":"builtin-String/#returns_6","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_utf32","text":"[Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^","title":"from_utf32"},{"location":"builtin-String/#parameters_7","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_7","text":"String ref^","title":"Returns"},{"location":"builtin-String/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-String/#push_utf32","text":"[Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val","title":"push_utf32"},{"location":"builtin-String/#parameters_8","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-String/#cpointer","text":"[Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = 0) : Pointer[U8 val] tag","title":"cpointer"},{"location":"builtin-String/#parameters_9","text":"offset: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_9","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#cstring","text":"[Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag","title":"cstring"},{"location":"builtin-String/#returns_10","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#array","text":"[Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val","title":"array"},{"location":"builtin-String/#returns_11","text":"Array [ U8 val] val","title":"Returns"},{"location":"builtin-String/#iso_array","text":"[Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^","title":"iso_array"},{"location":"builtin-String/#returns_12","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"builtin-String/#size","text":"[Source] Returns the length of the string data in bytes. fun box size() : USize val","title":"size"},{"location":"builtin-String/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-String/#codepoints","text":"[Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = 0, to: ISize val = call) : USize val","title":"codepoints"},{"location":"builtin-String/#parameters_10","text":"from: ISize val = 0 to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-String/#space","text":"[Source] Returns the space available for data, not including the null terminator. fun box space() : USize val","title":"space"},{"location":"builtin-String/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-String/#reserve","text":"[Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-String/#parameters_11","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_16","text":"None val","title":"Returns"},{"location":"builtin-String/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val","title":"compact"},{"location":"builtin-String/#returns_17","text":"None val","title":"Returns"},{"location":"builtin-String/#recalc","text":"[Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val","title":"recalc"},{"location":"builtin-String/#returns_18","text":"None val","title":"Returns"},{"location":"builtin-String/#truncate","text":"[Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-String/#parameters_12","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_19","text":"None val","title":"Returns"},{"location":"builtin-String/#trim_in_place","text":"[Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val","title":"trim_in_place"},{"location":"builtin-String/#parameters_13","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_20","text":"None val","title":"Returns"},{"location":"builtin-String/#trim","text":"[Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : String val","title":"trim"},{"location":"builtin-String/#parameters_14","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_21","text":"String val","title":"Returns"},{"location":"builtin-String/#chop","text":"[Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^)","title":"chop"},{"location":"builtin-String/#parameters_15","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-String/#returns_22","text":"( String iso^ , String iso^)","title":"Returns"},{"location":"builtin-String/#unchop","text":"[Source] Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. fun iso unchop( b: String iso) : ((String iso^ , String iso^) | String iso^)","title":"unchop"},{"location":"builtin-String/#parameters_16","text":"b: String iso","title":"Parameters"},{"location":"builtin-String/#returns_23","text":"(( String iso^ , String iso^) | String iso^)","title":"Returns"},{"location":"builtin-String/#is_null_terminated","text":"[Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val","title":"is_null_terminated"},{"location":"builtin-String/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-String/#utf32","text":"[Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ?","title":"utf32"},{"location":"builtin-String/#parameters_17","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_25","text":"( U32 val , U8 val) ?","title":"Returns"},{"location":"builtin-String/#apply","text":"[Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ?","title":"apply"},{"location":"builtin-String/#parameters_18","text":"i: USize val","title":"Parameters"},{"location":"builtin-String/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update","text":"[Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ?","title":"update"},{"location":"builtin-String/#parameters_19","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_27","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#at_offset","text":"[Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ?","title":"at_offset"},{"location":"builtin-String/#parameters_20","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_28","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update_offset","text":"[Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ?","title":"update_offset"},{"location":"builtin-String/#parameters_21","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_29","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#clone","text":"[Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^","title":"clone"},{"location":"builtin-String/#returns_30","text":"String iso^","title":"Returns"},{"location":"builtin-String/#repeat_str","text":"[Source] Returns a copy of the string repeated num times with an optional separator added inbetween repeats. fun box repeat_str( num: USize val = 1, sep: String val = \"\") : String iso^","title":"repeat_str"},{"location":"builtin-String/#parameters_22","text":"num: USize val = 1 sep: String val = \"\"","title":"Parameters"},{"location":"builtin-String/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-String/#mul","text":"[Source] Returns a copy of the string repeated num times. fun box mul( num: USize val) : String iso^","title":"mul"},{"location":"builtin-String/#parameters_23","text":"num: USize val","title":"Parameters"},{"location":"builtin-String/#returns_32","text":"String iso^","title":"Returns"},{"location":"builtin-String/#find","text":"[Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = 0, nth: USize val = 0) : ISize val ?","title":"find"},{"location":"builtin-String/#parameters_24","text":"s: String box offset: ISize val = 0 nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_33","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#rfind","text":"[Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = call, nth: USize val = 0) : ISize val ?","title":"rfind"},{"location":"builtin-String/#parameters_25","text":"s: String box offset: ISize val = call nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_34","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#contains","text":"[Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = 0, nth: USize val = 0) : Bool val","title":"contains"},{"location":"builtin-String/#parameters_26","text":"s: String box offset: ISize val = 0 nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-String/#count","text":"[Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = 0) : USize val","title":"count"},{"location":"builtin-String/#parameters_27","text":"s: String box offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_36","text":"USize val","title":"Returns"},{"location":"builtin-String/#at","text":"[Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = 0) : Bool val","title":"at"},{"location":"builtin-String/#parameters_28","text":"s: String box offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_37","text":"Bool val","title":"Returns"},{"location":"builtin-String/#delete","text":"[Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = 1) : None val","title":"delete"},{"location":"builtin-String/#parameters_29","text":"offset: ISize val len: USize val = 1","title":"Parameters"},{"location":"builtin-String/#returns_38","text":"None val","title":"Returns"},{"location":"builtin-String/#substring","text":"[Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = call) : String iso^","title":"substring"},{"location":"builtin-String/#parameters_30","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower","text":"[Source] Returns a lower case version of the string. fun box lower() : String iso^","title":"lower"},{"location":"builtin-String/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower_in_place","text":"[Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val","title":"lower_in_place"},{"location":"builtin-String/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-String/#upper","text":"[Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^","title":"upper"},{"location":"builtin-String/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-String/#upper_in_place","text":"[Source] Transforms the string to upper case. fun ref upper_in_place() : None val","title":"upper_in_place"},{"location":"builtin-String/#returns_43","text":"None val","title":"Returns"},{"location":"builtin-String/#reverse","text":"[Source] Returns a reversed version of the string. fun box reverse() : String iso^","title":"reverse"},{"location":"builtin-String/#returns_44","text":"String iso^","title":"Returns"},{"location":"builtin-String/#reverse_in_place","text":"[Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-String/#returns_45","text":"None val","title":"Returns"},{"location":"builtin-String/#push","text":"[Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val","title":"push"},{"location":"builtin-String/#parameters_31","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_46","text":"None val","title":"Returns"},{"location":"builtin-String/#pop","text":"[Source] Remove a byte from the end of the string. fun ref pop() : U8 val ?","title":"pop"},{"location":"builtin-String/#returns_47","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#unshift","text":"[Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val","title":"unshift"},{"location":"builtin-String/#parameters_32","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_48","text":"None val","title":"Returns"},{"location":"builtin-String/#shift","text":"[Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ?","title":"shift"},{"location":"builtin-String/#returns_49","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-String/#parameters_33","text":"seq: ReadSeq [ U8 val] box offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_50","text":"None val","title":"Returns"},{"location":"builtin-String/#concat","text":"[Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-String/#parameters_34","text":"iter: Iterator [ U8 val] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_51","text":"None val","title":"Returns"},{"location":"builtin-String/#clear","text":"[Source] Truncate the string to zero length. fun ref clear() : None val","title":"clear"},{"location":"builtin-String/#returns_52","text":"None val","title":"Returns"},{"location":"builtin-String/#insert","text":"[Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^","title":"insert"},{"location":"builtin-String/#parameters_35","text":"offset: ISize val that: String val","title":"Parameters"},{"location":"builtin-String/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-String/#insert_in_place","text":"[Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val","title":"insert_in_place"},{"location":"builtin-String/#parameters_36","text":"offset: ISize val that: String box","title":"Parameters"},{"location":"builtin-String/#returns_54","text":"None val","title":"Returns"},{"location":"builtin-String/#insert_byte","text":"[Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val","title":"insert_byte"},{"location":"builtin-String/#parameters_37","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_55","text":"None val","title":"Returns"},{"location":"builtin-String/#cut","text":"[Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = call) : String iso^","title":"cut"},{"location":"builtin-String/#parameters_38","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_56","text":"String iso^","title":"Returns"},{"location":"builtin-String/#cut_in_place","text":"[Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = call) : None val","title":"cut_in_place"},{"location":"builtin-String/#parameters_39","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_57","text":"None val","title":"Returns"},{"location":"builtin-String/#remove","text":"[Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val","title":"remove"},{"location":"builtin-String/#parameters_40","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_58","text":"USize val","title":"Returns"},{"location":"builtin-String/#replace","text":"[Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = 0) : USize val","title":"replace"},{"location":"builtin-String/#parameters_41","text":"from: String box to: String box n: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-String/#split_by","text":"[Source] Split the string into an array of strings that are delimited by delim in the original string. If n > 0 , then the split count is limited to n. Example: let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> Adjacent delimiters result in a zero length entry in the array. For example, \"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of delim , use split . fun box split_by( delim: String val, n: USize val = call) : Array[String val] iso^","title":"split_by"},{"location":"builtin-String/#parameters_42","text":"delim: String val n: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_60","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#split","text":"[Source] Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If n > 0 , then the split count is limited to n. Example: let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] . If you want to split the string with the entire delimiter string delim , use split_by . fun box split( delim: String val = \" \", n: USize val = 0) : Array[String val] iso^","title":"split"},{"location":"builtin-String/#parameters_43","text":"delim: String val = \" \" n: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_61","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#strip","text":"[Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = \" \") : None val","title":"strip"},{"location":"builtin-String/#parameters_44","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_62","text":"None val","title":"Returns"},{"location":"builtin-String/#rstrip","text":"[Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = \" \") : None val","title":"rstrip"},{"location":"builtin-String/#parameters_45","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_63","text":"None val","title":"Returns"},{"location":"builtin-String/#lstrip","text":"[Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = \" \") : None val","title":"lstrip"},{"location":"builtin-String/#parameters_46","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_64","text":"None val","title":"Returns"},{"location":"builtin-String/#add","text":"[Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val","title":"add"},{"location":"builtin-String/#parameters_47","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_65","text":"String val","title":"Returns"},{"location":"builtin-String/#join","text":"[Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^","title":"join"},{"location":"builtin-String/#parameters_48","text":"data: Iterator [ Stringable box] ref","title":"Parameters"},{"location":"builtin-String/#returns_66","text":"String iso^","title":"Returns"},{"location":"builtin-String/#compare","text":"[Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-String/#parameters_49","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_67","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#compare_sub","text":"[Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = 0, that_offset: ISize val = 0, ignore_case: Bool val = false) : (Less val | Equal val | Greater val)","title":"compare_sub"},{"location":"builtin-String/#parameters_50","text":"that: String box n: USize val offset: ISize val = 0 that_offset: ISize val = 0 ignore_case: Bool val = false","title":"Parameters"},{"location":"builtin-String/#returns_68","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#eq","text":"[Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val","title":"eq"},{"location":"builtin-String/#parameters_51","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-String/#lt","text":"[Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val","title":"lt"},{"location":"builtin-String/#parameters_52","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-String/#le","text":"[Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val","title":"le"},{"location":"builtin-String/#parameters_53","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-String/#offset_to_index","text":"[Source] fun box offset_to_index( i: ISize val) : USize val","title":"offset_to_index"},{"location":"builtin-String/#parameters_54","text":"i: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_72","text":"USize val","title":"Returns"},{"location":"builtin-String/#bool","text":"[Source] fun box bool() : Bool val ?","title":"bool"},{"location":"builtin-String/#returns_73","text":"Bool val ?","title":"Returns"},{"location":"builtin-String/#i8","text":"[Source] fun box i8( base: U8 val = 0) : I8 val ?","title":"i8"},{"location":"builtin-String/#parameters_55","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_74","text":"I8 val ?","title":"Returns"},{"location":"builtin-String/#i16","text":"[Source] fun box i16( base: U8 val = 0) : I16 val ?","title":"i16"},{"location":"builtin-String/#parameters_56","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_75","text":"I16 val ?","title":"Returns"},{"location":"builtin-String/#i32","text":"[Source] fun box i32( base: U8 val = 0) : I32 val ?","title":"i32"},{"location":"builtin-String/#parameters_57","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_76","text":"I32 val ?","title":"Returns"},{"location":"builtin-String/#i64","text":"[Source] fun box i64( base: U8 val = 0) : I64 val ?","title":"i64"},{"location":"builtin-String/#parameters_58","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_77","text":"I64 val ?","title":"Returns"},{"location":"builtin-String/#i128","text":"[Source] fun box i128( base: U8 val = 0) : I128 val ?","title":"i128"},{"location":"builtin-String/#parameters_59","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_78","text":"I128 val ?","title":"Returns"},{"location":"builtin-String/#ilong","text":"[Source] fun box ilong( base: U8 val = 0) : ILong val ?","title":"ilong"},{"location":"builtin-String/#parameters_60","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_79","text":"ILong val ?","title":"Returns"},{"location":"builtin-String/#isize","text":"[Source] fun box isize( base: U8 val = 0) : ISize val ?","title":"isize"},{"location":"builtin-String/#parameters_61","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_80","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#u8","text":"[Source] fun box u8( base: U8 val = 0) : U8 val ?","title":"u8"},{"location":"builtin-String/#parameters_62","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_81","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#u16","text":"[Source] fun box u16( base: U8 val = 0) : U16 val ?","title":"u16"},{"location":"builtin-String/#parameters_63","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_82","text":"U16 val ?","title":"Returns"},{"location":"builtin-String/#u32","text":"[Source] fun box u32( base: U8 val = 0) : U32 val ?","title":"u32"},{"location":"builtin-String/#parameters_64","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_83","text":"U32 val ?","title":"Returns"},{"location":"builtin-String/#u64","text":"[Source] fun box u64( base: U8 val = 0) : U64 val ?","title":"u64"},{"location":"builtin-String/#parameters_65","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_84","text":"U64 val ?","title":"Returns"},{"location":"builtin-String/#u128","text":"[Source] fun box u128( base: U8 val = 0) : U128 val ?","title":"u128"},{"location":"builtin-String/#parameters_66","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_85","text":"U128 val ?","title":"Returns"},{"location":"builtin-String/#ulong","text":"[Source] fun box ulong( base: U8 val = 0) : ULong val ?","title":"ulong"},{"location":"builtin-String/#parameters_67","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_86","text":"ULong val ?","title":"Returns"},{"location":"builtin-String/#usize","text":"[Source] fun box usize( base: U8 val = 0) : USize val ?","title":"usize"},{"location":"builtin-String/#parameters_68","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_87","text":"USize val ?","title":"Returns"},{"location":"builtin-String/#read_inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","text":"[Source] Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( offset: ISize val = 0, base: U8 val = 0) : (A , USize val) ?","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_69","text":"offset: ISize val = 0 base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_88","text":"(A , USize val) ?","title":"Returns"},{"location":"builtin-String/#f32","text":"[Source] Convert this string starting at the given offset to a 32-bit floating point number ( F32 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true fun box f32( offset: ISize val = 0) : F32 val ?","title":"f32"},{"location":"builtin-String/#parameters_70","text":"offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_89","text":"F32 val ?","title":"Returns"},{"location":"builtin-String/#f64","text":"[Source] Convert this string starting at the given offset to a 64-bit floating point number ( F64 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true fun box f64( offset: ISize val = 0) : F64 val ?","title":"f64"},{"location":"builtin-String/#parameters_71","text":"offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_90","text":"F64 val ?","title":"Returns"},{"location":"builtin-String/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-String/#returns_91","text":"USize val","title":"Returns"},{"location":"builtin-String/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-String/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-String/#string_1","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-String/#returns_93","text":"String iso^","title":"Returns"},{"location":"builtin-String/#values","text":"[Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^","title":"values"},{"location":"builtin-String/#returns_94","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-String/#runes","text":"[Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^","title":"runes"},{"location":"builtin-String/#returns_95","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-String/#ge","text":"fun box ge( that: String box) : Bool val","title":"ge"},{"location":"builtin-String/#parameters_72","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_96","text":"Bool val","title":"Returns"},{"location":"builtin-String/#gt","text":"fun box gt( that: String box) : Bool val","title":"gt"},{"location":"builtin-String/#parameters_73","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_97","text":"Bool val","title":"Returns"},{"location":"builtin-String/#ne","text":"fun box ne( that: String box) : Bool val","title":"ne"},{"location":"builtin-String/#parameters_74","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_98","text":"Bool val","title":"Returns"},{"location":"builtin-String/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-String/#_copy_to","text":"[Source] Copy copy_len bytes from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val","title":"_copy_to"},{"location":"builtin-String/#parameters_75","text":"ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_99","text":"None val","title":"Returns"},{"location":"builtin-String/#_append","text":"[Source] fun iso _append( s: String box) : String iso^","title":"_append"},{"location":"builtin-String/#parameters_76","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_100","text":"String iso^","title":"Returns"},{"location":"builtin-String/#_to_inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","text":"[Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val) : A ?","title":"_to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_77","text":"base: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_101","text":"A ?","title":"Returns"},{"location":"builtin-String/#_read_int_basea-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","text":"[Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of single-byte characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val)","title":"_read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_78","text":"base: U8 val index: USize val","title":"Parameters"},{"location":"builtin-String/#returns_102","text":"(A , USize val)","title":"Returns"},{"location":"builtin-String/#_set","text":"[Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val","title":"_set"},{"location":"builtin-String/#parameters_79","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_103","text":"U8 val","title":"Returns"},{"location":"builtin-StringBytes/","text":"StringBytes \u00b6 [Source] class ref StringBytes is Iterator[U8 val] ref Implements \u00b6 Iterator [ U8 val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( string: String box) : StringBytes ref^ Parameters \u00b6 string: String box Returns \u00b6 StringBytes ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : U8 val ? Returns \u00b6 U8 val ?","title":"class StringBytes"},{"location":"builtin-StringBytes/#stringbytes","text":"[Source] class ref StringBytes is Iterator[U8 val] ref","title":"StringBytes"},{"location":"builtin-StringBytes/#implements","text":"Iterator [ U8 val] ref","title":"Implements"},{"location":"builtin-StringBytes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringBytes/#create","text":"[Source] new ref create( string: String box) : StringBytes ref^","title":"create"},{"location":"builtin-StringBytes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringBytes/#returns","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-StringBytes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringBytes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringBytes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringBytes/#next","text":"[Source] fun ref next() : U8 val ?","title":"next"},{"location":"builtin-StringBytes/#returns_2","text":"U8 val ?","title":"Returns"},{"location":"builtin-StringRunes/","text":"StringRunes \u00b6 [Source] class ref StringRunes is Iterator[U32 val] ref Implements \u00b6 Iterator [ U32 val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( string: String box) : StringRunes ref^ Parameters \u00b6 string: String box Returns \u00b6 StringRunes ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : U32 val ? Returns \u00b6 U32 val ?","title":"class StringRunes"},{"location":"builtin-StringRunes/#stringrunes","text":"[Source] class ref StringRunes is Iterator[U32 val] ref","title":"StringRunes"},{"location":"builtin-StringRunes/#implements","text":"Iterator [ U32 val] ref","title":"Implements"},{"location":"builtin-StringRunes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringRunes/#create","text":"[Source] new ref create( string: String box) : StringRunes ref^","title":"create"},{"location":"builtin-StringRunes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringRunes/#returns","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-StringRunes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringRunes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringRunes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringRunes/#next","text":"[Source] fun ref next() : U32 val ?","title":"next"},{"location":"builtin-StringRunes/#returns_2","text":"U32 val ?","title":"Returns"},{"location":"builtin-Stringable/","text":"Stringable \u00b6 [Source] Things that can be turned into a String. interface box Stringable Public Functions \u00b6 string \u00b6 [Source] Generate a string representation of this object. fun box string() : String iso^ Returns \u00b6 String iso^","title":"interface Stringable"},{"location":"builtin-Stringable/#stringable","text":"[Source] Things that can be turned into a String. interface box Stringable","title":"Stringable"},{"location":"builtin-Stringable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Stringable/#string","text":"[Source] Generate a string representation of this object. fun box string() : String iso^","title":"string"},{"location":"builtin-Stringable/#returns","text":"String iso^","title":"Returns"},{"location":"builtin-U128/","text":"U128 \u00b6 [Source] primitive val U128 is UnsignedInteger[U128 val] val Implements \u00b6 UnsignedInteger [ U128 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U128 val) : U128 val^ Parameters \u00b6 value: U128 val Returns \u00b6 U128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U128 val^ Parameters \u00b6 a: A Returns \u00b6 U128 val^ min_value \u00b6 [Source] new val min_value() : U128 val^ Returns \u00b6 U128 val^ max_value \u00b6 [Source] new val max_value() : U128 val^ Returns \u00b6 U128 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U128 val Returns \u00b6 U128 val abs \u00b6 [Source] fun box abs() : U128 val Returns \u00b6 U128 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U128 val Returns \u00b6 U128 val bswap \u00b6 [Source] fun box bswap() : U128 val Returns \u00b6 U128 val popcount \u00b6 [Source] fun box popcount() : U128 val Returns \u00b6 U128 val clz \u00b6 [Source] fun box clz() : U128 val Returns \u00b6 U128 val ctz \u00b6 [Source] fun box ctz() : U128 val Returns \u00b6 U128 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns \u00b6 U128 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns \u00b6 U128 val bitwidth \u00b6 [Source] fun box bitwidth() : U128 val Returns \u00b6 U128 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val max \u00b6 [Source] fun box max( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ mul \u00b6 [Source] fun box mul( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val divrem \u00b6 [Source] fun box divrem( y: U128 val) : (U128 val , U128 val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) div \u00b6 [Source] fun box div( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rem \u00b6 [Source] fun box rem( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val divrem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) div_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val addc \u00b6 [Source] fun box addc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) subc \u00b6 [Source] fun box subc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) divc \u00b6 [Source] fun box divc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) remc \u00b6 [Source] fun box remc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? div_partial \u00b6 [Source] fun box div_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ? Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) ? shl \u00b6 fun box shl( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shr \u00b6 fun box shr( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val fld \u00b6 fun box fld( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val fldc \u00b6 fun box fldc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val mod \u00b6 fun box mod( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val modc \u00b6 fun box modc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shl_unsafe \u00b6 fun box shl_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shr_unsafe \u00b6 fun box shr_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rotl \u00b6 fun box rotl( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rotr \u00b6 fun box rotr( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val add_unsafe \u00b6 fun box add_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val sub_unsafe \u00b6 fun box sub_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val neg_unsafe \u00b6 fun box neg_unsafe() : U128 val Returns \u00b6 U128 val op_and \u00b6 fun box op_and( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_or \u00b6 fun box op_or( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_xor \u00b6 fun box op_xor( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_not \u00b6 fun box op_not() : U128 val Returns \u00b6 U128 val add \u00b6 fun box add( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val sub \u00b6 fun box sub( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val neg \u00b6 fun box neg() : U128 val Returns \u00b6 U128 val eq \u00b6 fun box eq( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val compare \u00b6 fun box compare( that: U128 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U128 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U128 val Returns \u00b6 U128 val","title":"primitive U128"},{"location":"builtin-U128/#u128","text":"[Source] primitive val U128 is UnsignedInteger[U128 val] val","title":"U128"},{"location":"builtin-U128/#implements","text":"UnsignedInteger [ U128 val] val","title":"Implements"},{"location":"builtin-U128/#constructors","text":"","title":"Constructors"},{"location":"builtin-U128/#create","text":"[Source] new val create( value: U128 val) : U128 val^","title":"create"},{"location":"builtin-U128/#parameters","text":"value: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U128/#returns_1","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#min_value","text":"[Source] new val min_value() : U128 val^","title":"min_value"},{"location":"builtin-U128/#returns_2","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#max_value","text":"[Source] new val max_value() : U128 val^","title":"max_value"},{"location":"builtin-U128/#returns_3","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U128/#next_pow2","text":"[Source] fun box next_pow2() : U128 val","title":"next_pow2"},{"location":"builtin-U128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-U128/#returns_5","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bit_reverse","text":"[Source] fun box bit_reverse() : U128 val","title":"bit_reverse"},{"location":"builtin-U128/#returns_6","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bswap","text":"[Source] fun box bswap() : U128 val","title":"bswap"},{"location":"builtin-U128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-U128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-U128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-U128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-U128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-U128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-U128/#returns_13","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U128/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U128/#min","text":"[Source] fun box min( y: U128 val) : U128 val","title":"min"},{"location":"builtin-U128/#parameters_2","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_15","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#max","text":"[Source] fun box max( y: U128 val) : U128 val","title":"max"},{"location":"builtin-U128/#parameters_3","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_16","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U128/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U128/#returns_18","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-U128/#returns_19","text":"String iso^","title":"Returns"},{"location":"builtin-U128/#mul","text":"[Source] fun box mul( y: U128 val) : U128 val","title":"mul"},{"location":"builtin-U128/#parameters_4","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_20","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem","text":"[Source] fun box divrem( y: U128 val) : (U128 val , U128 val)","title":"divrem"},{"location":"builtin-U128/#parameters_5","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_21","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div","text":"[Source] fun box div( y: U128 val) : U128 val","title":"div"},{"location":"builtin-U128/#parameters_6","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_22","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem","text":"[Source] fun box rem( y: U128 val) : U128 val","title":"rem"},{"location":"builtin-U128/#parameters_7","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_23","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val","title":"mul_unsafe"},{"location":"builtin-U128/#parameters_8","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_24","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val)","title":"divrem_unsafe"},{"location":"builtin-U128/#parameters_9","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_25","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val","title":"div_unsafe"},{"location":"builtin-U128/#parameters_10","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_26","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val","title":"rem_unsafe"},{"location":"builtin-U128/#parameters_11","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-U128/#returns_28","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-U128/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U128/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U128/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#addc","text":"[Source] fun box addc( y: U128 val) : (U128 val , Bool val)","title":"addc"},{"location":"builtin-U128/#parameters_12","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_32","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#subc","text":"[Source] fun box subc( y: U128 val) : (U128 val , Bool val)","title":"subc"},{"location":"builtin-U128/#parameters_13","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_33","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mulc","text":"[Source] fun box mulc( y: U128 val) : (U128 val , Bool val)","title":"mulc"},{"location":"builtin-U128/#parameters_14","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_34","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#divc","text":"[Source] fun box divc( y: U128 val) : (U128 val , Bool val)","title":"divc"},{"location":"builtin-U128/#parameters_15","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_35","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#remc","text":"[Source] fun box remc( y: U128 val) : (U128 val , Bool val)","title":"remc"},{"location":"builtin-U128/#parameters_16","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_36","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#add_partial","text":"[Source] fun box add_partial( y: U128 val) : U128 val ?","title":"add_partial"},{"location":"builtin-U128/#parameters_17","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_37","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#sub_partial","text":"[Source] fun box sub_partial( y: U128 val) : U128 val ?","title":"sub_partial"},{"location":"builtin-U128/#parameters_18","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_38","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mul_partial","text":"[Source] fun box mul_partial( y: U128 val) : U128 val ?","title":"mul_partial"},{"location":"builtin-U128/#parameters_19","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_39","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#div_partial","text":"[Source] fun box div_partial( y: U128 val) : U128 val ?","title":"div_partial"},{"location":"builtin-U128/#parameters_20","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_40","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#rem_partial","text":"[Source] fun box rem_partial( y: U128 val) : U128 val ?","title":"rem_partial"},{"location":"builtin-U128/#parameters_21","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_41","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#divrem_partial","text":"[Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ?","title":"divrem_partial"},{"location":"builtin-U128/#parameters_22","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_42","text":"( U128 val , U128 val) ?","title":"Returns"},{"location":"builtin-U128/#shl","text":"fun box shl( y: U128 val) : U128 val","title":"shl"},{"location":"builtin-U128/#parameters_23","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_43","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr","text":"fun box shr( y: U128 val) : U128 val","title":"shr"},{"location":"builtin-U128/#parameters_24","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_44","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#fld","text":"fun box fld( y: U128 val) : U128 val","title":"fld"},{"location":"builtin-U128/#parameters_25","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_45","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#fldc","text":"fun box fldc( y: U128 val) : (U128 val , Bool val)","title":"fldc"},{"location":"builtin-U128/#parameters_26","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_46","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#fld_partial","text":"fun box fld_partial( y: U128 val) : U128 val ?","title":"fld_partial"},{"location":"builtin-U128/#parameters_27","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_47","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#fld_unsafe","text":"fun box fld_unsafe( y: U128 val) : U128 val","title":"fld_unsafe"},{"location":"builtin-U128/#parameters_28","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_48","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mod","text":"fun box mod( y: U128 val) : U128 val","title":"mod"},{"location":"builtin-U128/#parameters_29","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_49","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#modc","text":"fun box modc( y: U128 val) : (U128 val , Bool val)","title":"modc"},{"location":"builtin-U128/#parameters_30","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_50","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mod_partial","text":"fun box mod_partial( y: U128 val) : U128 val ?","title":"mod_partial"},{"location":"builtin-U128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_51","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mod_unsafe","text":"fun box mod_unsafe( y: U128 val) : U128 val","title":"mod_unsafe"},{"location":"builtin-U128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_52","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : U128 val","title":"shl_unsafe"},{"location":"builtin-U128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_53","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : U128 val","title":"shr_unsafe"},{"location":"builtin-U128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_54","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotl","text":"fun box rotl( y: U128 val) : U128 val","title":"rotl"},{"location":"builtin-U128/#parameters_35","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_55","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotr","text":"fun box rotr( y: U128 val) : U128 val","title":"rotr"},{"location":"builtin-U128/#parameters_36","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_56","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add_unsafe","text":"fun box add_unsafe( y: U128 val) : U128 val","title":"add_unsafe"},{"location":"builtin-U128/#parameters_37","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_57","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub_unsafe","text":"fun box sub_unsafe( y: U128 val) : U128 val","title":"sub_unsafe"},{"location":"builtin-U128/#parameters_38","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_58","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg_unsafe","text":"fun box neg_unsafe() : U128 val","title":"neg_unsafe"},{"location":"builtin-U128/#returns_59","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_and","text":"fun box op_and( y: U128 val) : U128 val","title":"op_and"},{"location":"builtin-U128/#parameters_39","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_60","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_or","text":"fun box op_or( y: U128 val) : U128 val","title":"op_or"},{"location":"builtin-U128/#parameters_40","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_xor","text":"fun box op_xor( y: U128 val) : U128 val","title":"op_xor"},{"location":"builtin-U128/#parameters_41","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_62","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_not","text":"fun box op_not() : U128 val","title":"op_not"},{"location":"builtin-U128/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add","text":"fun box add( y: U128 val) : U128 val","title":"add"},{"location":"builtin-U128/#parameters_42","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_64","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub","text":"fun box sub( y: U128 val) : U128 val","title":"sub"},{"location":"builtin-U128/#parameters_43","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg","text":"fun box neg() : U128 val","title":"neg"},{"location":"builtin-U128/#returns_66","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#eq","text":"fun box eq( y: U128 val) : Bool val","title":"eq"},{"location":"builtin-U128/#parameters_44","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ne","text":"fun box ne( y: U128 val) : Bool val","title":"ne"},{"location":"builtin-U128/#parameters_45","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#lt","text":"fun box lt( y: U128 val) : Bool val","title":"lt"},{"location":"builtin-U128/#parameters_46","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#le","text":"fun box le( y: U128 val) : Bool val","title":"le"},{"location":"builtin-U128/#parameters_47","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ge","text":"fun box ge( y: U128 val) : Bool val","title":"ge"},{"location":"builtin-U128/#parameters_48","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#gt","text":"fun box gt( y: U128 val) : Bool val","title":"gt"},{"location":"builtin-U128/#parameters_49","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U128/#returns_73","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U128/#returns_74","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U128/#returns_75","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U128/#returns_76","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U128/#returns_77","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U128/#returns_78","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U128/#returns_79","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U128/#returns_80","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U128/#returns_81","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U128/#returns_82","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U128/#returns_83","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_1","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U128/#returns_84","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U128/#returns_85","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U128/#returns_86","text":"USize val","title":"Returns"},{"location":"builtin-U128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U128/#returns_87","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U128/#returns_88","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U128/#returns_89","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U128/#returns_90","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U128/#returns_91","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U128/#returns_92","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U128/#returns_93","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U128/#returns_94","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U128/#returns_95","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U128/#returns_96","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U128/#returns_97","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U128/#returns_98","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U128/#returns_99","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U128/#returns_100","text":"USize val","title":"Returns"},{"location":"builtin-U128/#compare","text":"fun box compare( that: U128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U128/#parameters_50","text":"that: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U128/#_value","text":"fun box _value() : U128 val","title":"_value"},{"location":"builtin-U128/#returns_102","text":"U128 val","title":"Returns"},{"location":"builtin-U16/","text":"U16 \u00b6 [Source] primitive val U16 is UnsignedInteger[U16 val] val Implements \u00b6 UnsignedInteger [ U16 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U16 val) : U16 val^ Parameters \u00b6 value: U16 val Returns \u00b6 U16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U16 val^ Parameters \u00b6 a: A Returns \u00b6 U16 val^ min_value \u00b6 [Source] new val min_value() : U16 val^ Returns \u00b6 U16 val^ max_value \u00b6 [Source] new val max_value() : U16 val^ Returns \u00b6 U16 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U16 val Returns \u00b6 U16 val abs \u00b6 [Source] fun box abs() : U16 val Returns \u00b6 U16 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U16 val Returns \u00b6 U16 val bswap \u00b6 [Source] fun box bswap() : U16 val Returns \u00b6 U16 val popcount \u00b6 [Source] fun box popcount() : U16 val Returns \u00b6 U16 val clz \u00b6 [Source] fun box clz() : U16 val Returns \u00b6 U16 val ctz \u00b6 [Source] fun box ctz() : U16 val Returns \u00b6 U16 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns \u00b6 U16 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns \u00b6 U16 val bitwidth \u00b6 [Source] fun box bitwidth() : U16 val Returns \u00b6 U16 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val max \u00b6 [Source] fun box max( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val addc \u00b6 [Source] fun box addc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) subc \u00b6 [Source] fun box subc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) divc \u00b6 [Source] fun box divc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) remc \u00b6 [Source] fun box remc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? div_partial \u00b6 [Source] fun box div_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ? Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) ? shl \u00b6 fun box shl( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shr \u00b6 fun box shr( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val fld \u00b6 fun box fld( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val fldc \u00b6 fun box fldc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mod \u00b6 fun box mod( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val modc \u00b6 fun box modc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shl_unsafe \u00b6 fun box shl_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shr_unsafe \u00b6 fun box shr_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val rotl \u00b6 fun box rotl( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val rotr \u00b6 fun box rotr( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val sub_unsafe \u00b6 fun box sub_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mul_unsafe \u00b6 fun box mul_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val div_unsafe \u00b6 fun box div_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val neg_unsafe \u00b6 fun box neg_unsafe() : U16 val Returns \u00b6 U16 val op_and \u00b6 fun box op_and( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_or \u00b6 fun box op_or( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_xor \u00b6 fun box op_xor( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_not \u00b6 fun box op_not() : U16 val Returns \u00b6 U16 val add \u00b6 fun box add( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val sub \u00b6 fun box sub( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mul \u00b6 fun box mul( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val div \u00b6 fun box div( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val divrem \u00b6 fun box divrem( y: U16 val) : (U16 val , U16 val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) rem \u00b6 fun box rem( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val neg \u00b6 fun box neg() : U16 val Returns \u00b6 U16 val eq \u00b6 fun box eq( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U16 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U16 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U16 val Returns \u00b6 U16 val","title":"primitive U16"},{"location":"builtin-U16/#u16","text":"[Source] primitive val U16 is UnsignedInteger[U16 val] val","title":"U16"},{"location":"builtin-U16/#implements","text":"UnsignedInteger [ U16 val] val","title":"Implements"},{"location":"builtin-U16/#constructors","text":"","title":"Constructors"},{"location":"builtin-U16/#create","text":"[Source] new val create( value: U16 val) : U16 val^","title":"create"},{"location":"builtin-U16/#parameters","text":"value: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U16/#returns_1","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#min_value","text":"[Source] new val min_value() : U16 val^","title":"min_value"},{"location":"builtin-U16/#returns_2","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#max_value","text":"[Source] new val max_value() : U16 val^","title":"max_value"},{"location":"builtin-U16/#returns_3","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U16/#next_pow2","text":"[Source] fun box next_pow2() : U16 val","title":"next_pow2"},{"location":"builtin-U16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-U16/#returns_5","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bit_reverse","text":"[Source] fun box bit_reverse() : U16 val","title":"bit_reverse"},{"location":"builtin-U16/#returns_6","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bswap","text":"[Source] fun box bswap() : U16 val","title":"bswap"},{"location":"builtin-U16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-U16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-U16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-U16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-U16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-U16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-U16/#returns_13","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U16/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U16/#min","text":"[Source] fun box min( y: U16 val) : U16 val","title":"min"},{"location":"builtin-U16/#parameters_2","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_15","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#max","text":"[Source] fun box max( y: U16 val) : U16 val","title":"max"},{"location":"builtin-U16/#parameters_3","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_16","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#addc","text":"[Source] fun box addc( y: U16 val) : (U16 val , Bool val)","title":"addc"},{"location":"builtin-U16/#parameters_4","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_17","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#subc","text":"[Source] fun box subc( y: U16 val) : (U16 val , Bool val)","title":"subc"},{"location":"builtin-U16/#parameters_5","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_18","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mulc","text":"[Source] fun box mulc( y: U16 val) : (U16 val , Bool val)","title":"mulc"},{"location":"builtin-U16/#parameters_6","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_19","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#divc","text":"[Source] fun box divc( y: U16 val) : (U16 val , Bool val)","title":"divc"},{"location":"builtin-U16/#parameters_7","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_20","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#remc","text":"[Source] fun box remc( y: U16 val) : (U16 val , Bool val)","title":"remc"},{"location":"builtin-U16/#parameters_8","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_21","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#add_partial","text":"[Source] fun box add_partial( y: U16 val) : U16 val ?","title":"add_partial"},{"location":"builtin-U16/#parameters_9","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_22","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#sub_partial","text":"[Source] fun box sub_partial( y: U16 val) : U16 val ?","title":"sub_partial"},{"location":"builtin-U16/#parameters_10","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_23","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mul_partial","text":"[Source] fun box mul_partial( y: U16 val) : U16 val ?","title":"mul_partial"},{"location":"builtin-U16/#parameters_11","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_24","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#div_partial","text":"[Source] fun box div_partial( y: U16 val) : U16 val ?","title":"div_partial"},{"location":"builtin-U16/#parameters_12","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_25","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#rem_partial","text":"[Source] fun box rem_partial( y: U16 val) : U16 val ?","title":"rem_partial"},{"location":"builtin-U16/#parameters_13","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_26","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#divrem_partial","text":"[Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ?","title":"divrem_partial"},{"location":"builtin-U16/#parameters_14","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_27","text":"( U16 val , U16 val) ?","title":"Returns"},{"location":"builtin-U16/#shl","text":"fun box shl( y: U16 val) : U16 val","title":"shl"},{"location":"builtin-U16/#parameters_15","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_28","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr","text":"fun box shr( y: U16 val) : U16 val","title":"shr"},{"location":"builtin-U16/#parameters_16","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_29","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#fld","text":"fun box fld( y: U16 val) : U16 val","title":"fld"},{"location":"builtin-U16/#parameters_17","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_30","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#fldc","text":"fun box fldc( y: U16 val) : (U16 val , Bool val)","title":"fldc"},{"location":"builtin-U16/#parameters_18","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_31","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#fld_partial","text":"fun box fld_partial( y: U16 val) : U16 val ?","title":"fld_partial"},{"location":"builtin-U16/#parameters_19","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_32","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#fld_unsafe","text":"fun box fld_unsafe( y: U16 val) : U16 val","title":"fld_unsafe"},{"location":"builtin-U16/#parameters_20","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_33","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mod","text":"fun box mod( y: U16 val) : U16 val","title":"mod"},{"location":"builtin-U16/#parameters_21","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_34","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#modc","text":"fun box modc( y: U16 val) : (U16 val , Bool val)","title":"modc"},{"location":"builtin-U16/#parameters_22","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_35","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mod_partial","text":"fun box mod_partial( y: U16 val) : U16 val ?","title":"mod_partial"},{"location":"builtin-U16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_36","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mod_unsafe","text":"fun box mod_unsafe( y: U16 val) : U16 val","title":"mod_unsafe"},{"location":"builtin-U16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_37","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : U16 val","title":"shl_unsafe"},{"location":"builtin-U16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_38","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : U16 val","title":"shr_unsafe"},{"location":"builtin-U16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_39","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotl","text":"fun box rotl( y: U16 val) : U16 val","title":"rotl"},{"location":"builtin-U16/#parameters_27","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_40","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotr","text":"fun box rotr( y: U16 val) : U16 val","title":"rotr"},{"location":"builtin-U16/#parameters_28","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_41","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U16/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U16/#add_unsafe","text":"fun box add_unsafe( y: U16 val) : U16 val","title":"add_unsafe"},{"location":"builtin-U16/#parameters_29","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_43","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub_unsafe","text":"fun box sub_unsafe( y: U16 val) : U16 val","title":"sub_unsafe"},{"location":"builtin-U16/#parameters_30","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_44","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul_unsafe","text":"fun box mul_unsafe( y: U16 val) : U16 val","title":"mul_unsafe"},{"location":"builtin-U16/#parameters_31","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_45","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div_unsafe","text":"fun box div_unsafe( y: U16 val) : U16 val","title":"div_unsafe"},{"location":"builtin-U16/#parameters_32","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_46","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem_unsafe","text":"fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val)","title":"divrem_unsafe"},{"location":"builtin-U16/#parameters_33","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_47","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem_unsafe","text":"fun box rem_unsafe( y: U16 val) : U16 val","title":"rem_unsafe"},{"location":"builtin-U16/#parameters_34","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg_unsafe","text":"fun box neg_unsafe() : U16 val","title":"neg_unsafe"},{"location":"builtin-U16/#returns_49","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_and","text":"fun box op_and( y: U16 val) : U16 val","title":"op_and"},{"location":"builtin-U16/#parameters_35","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_50","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_or","text":"fun box op_or( y: U16 val) : U16 val","title":"op_or"},{"location":"builtin-U16/#parameters_36","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_51","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_xor","text":"fun box op_xor( y: U16 val) : U16 val","title":"op_xor"},{"location":"builtin-U16/#parameters_37","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_52","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_not","text":"fun box op_not() : U16 val","title":"op_not"},{"location":"builtin-U16/#returns_53","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#add","text":"fun box add( y: U16 val) : U16 val","title":"add"},{"location":"builtin-U16/#parameters_38","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_54","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub","text":"fun box sub( y: U16 val) : U16 val","title":"sub"},{"location":"builtin-U16/#parameters_39","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_55","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul","text":"fun box mul( y: U16 val) : U16 val","title":"mul"},{"location":"builtin-U16/#parameters_40","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_56","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div","text":"fun box div( y: U16 val) : U16 val","title":"div"},{"location":"builtin-U16/#parameters_41","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_57","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem","text":"fun box divrem( y: U16 val) : (U16 val , U16 val)","title":"divrem"},{"location":"builtin-U16/#parameters_42","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_58","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem","text":"fun box rem( y: U16 val) : U16 val","title":"rem"},{"location":"builtin-U16/#parameters_43","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_59","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg","text":"fun box neg() : U16 val","title":"neg"},{"location":"builtin-U16/#returns_60","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#eq","text":"fun box eq( y: U16 val) : Bool val","title":"eq"},{"location":"builtin-U16/#parameters_44","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ne","text":"fun box ne( y: U16 val) : Bool val","title":"ne"},{"location":"builtin-U16/#parameters_45","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#lt","text":"fun box lt( y: U16 val) : Bool val","title":"lt"},{"location":"builtin-U16/#parameters_46","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#le","text":"fun box le( y: U16 val) : Bool val","title":"le"},{"location":"builtin-U16/#parameters_47","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ge","text":"fun box ge( y: U16 val) : Bool val","title":"ge"},{"location":"builtin-U16/#parameters_48","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#gt","text":"fun box gt( y: U16 val) : Bool val","title":"gt"},{"location":"builtin-U16/#parameters_49","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U16/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U16/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U16/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U16/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U16/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U16/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U16/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U16/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U16/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U16/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_1","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U16/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U16/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U16/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U16/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U16/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U16/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U16/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U16/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U16/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U16/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U16/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U16/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U16/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U16/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U16/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U16/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U16/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U16/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U16/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U16/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U16/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U16/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U16/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U16/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#compare","text":"fun box compare( that: U16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U16/#parameters_50","text":"that: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U16/#_value","text":"fun box _value() : U16 val","title":"_value"},{"location":"builtin-U16/#returns_102","text":"U16 val","title":"Returns"},{"location":"builtin-U32/","text":"U32 \u00b6 [Source] primitive val U32 is UnsignedInteger[U32 val] val Implements \u00b6 UnsignedInteger [ U32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U32 val) : U32 val^ Parameters \u00b6 value: U32 val Returns \u00b6 U32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U32 val^ Parameters \u00b6 a: A Returns \u00b6 U32 val^ min_value \u00b6 [Source] new val min_value() : U32 val^ Returns \u00b6 U32 val^ max_value \u00b6 [Source] new val max_value() : U32 val^ Returns \u00b6 U32 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U32 val Returns \u00b6 U32 val abs \u00b6 [Source] fun box abs() : U32 val Returns \u00b6 U32 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U32 val Returns \u00b6 U32 val bswap \u00b6 [Source] fun box bswap() : U32 val Returns \u00b6 U32 val popcount \u00b6 [Source] fun box popcount() : U32 val Returns \u00b6 U32 val clz \u00b6 [Source] fun box clz() : U32 val Returns \u00b6 U32 val ctz \u00b6 [Source] fun box ctz() : U32 val Returns \u00b6 U32 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns \u00b6 U32 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns \u00b6 U32 val bitwidth \u00b6 [Source] fun box bitwidth() : U32 val Returns \u00b6 U32 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val max \u00b6 [Source] fun box max( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val addc \u00b6 [Source] fun box addc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) subc \u00b6 [Source] fun box subc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) divc \u00b6 [Source] fun box divc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) remc \u00b6 [Source] fun box remc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? div_partial \u00b6 [Source] fun box div_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ? Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) ? shl \u00b6 fun box shl( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shr \u00b6 fun box shr( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val fld \u00b6 fun box fld( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val fldc \u00b6 fun box fldc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mod \u00b6 fun box mod( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val modc \u00b6 fun box modc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shl_unsafe \u00b6 fun box shl_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shr_unsafe \u00b6 fun box shr_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val rotl \u00b6 fun box rotl( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val rotr \u00b6 fun box rotr( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val sub_unsafe \u00b6 fun box sub_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mul_unsafe \u00b6 fun box mul_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val div_unsafe \u00b6 fun box div_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val neg_unsafe \u00b6 fun box neg_unsafe() : U32 val Returns \u00b6 U32 val op_and \u00b6 fun box op_and( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_or \u00b6 fun box op_or( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_xor \u00b6 fun box op_xor( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_not \u00b6 fun box op_not() : U32 val Returns \u00b6 U32 val add \u00b6 fun box add( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val sub \u00b6 fun box sub( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mul \u00b6 fun box mul( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val div \u00b6 fun box div( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val divrem \u00b6 fun box divrem( y: U32 val) : (U32 val , U32 val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) rem \u00b6 fun box rem( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val neg \u00b6 fun box neg() : U32 val Returns \u00b6 U32 val eq \u00b6 fun box eq( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U32 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U32 val Returns \u00b6 U32 val","title":"primitive U32"},{"location":"builtin-U32/#u32","text":"[Source] primitive val U32 is UnsignedInteger[U32 val] val","title":"U32"},{"location":"builtin-U32/#implements","text":"UnsignedInteger [ U32 val] val","title":"Implements"},{"location":"builtin-U32/#constructors","text":"","title":"Constructors"},{"location":"builtin-U32/#create","text":"[Source] new val create( value: U32 val) : U32 val^","title":"create"},{"location":"builtin-U32/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U32/#returns_1","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#min_value","text":"[Source] new val min_value() : U32 val^","title":"min_value"},{"location":"builtin-U32/#returns_2","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#max_value","text":"[Source] new val max_value() : U32 val^","title":"max_value"},{"location":"builtin-U32/#returns_3","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U32/#next_pow2","text":"[Source] fun box next_pow2() : U32 val","title":"next_pow2"},{"location":"builtin-U32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-U32/#returns_5","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bit_reverse","text":"[Source] fun box bit_reverse() : U32 val","title":"bit_reverse"},{"location":"builtin-U32/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bswap","text":"[Source] fun box bswap() : U32 val","title":"bswap"},{"location":"builtin-U32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-U32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-U32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-U32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-U32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-U32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-U32/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U32/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U32/#min","text":"[Source] fun box min( y: U32 val) : U32 val","title":"min"},{"location":"builtin-U32/#parameters_2","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_15","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#max","text":"[Source] fun box max( y: U32 val) : U32 val","title":"max"},{"location":"builtin-U32/#parameters_3","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_16","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#addc","text":"[Source] fun box addc( y: U32 val) : (U32 val , Bool val)","title":"addc"},{"location":"builtin-U32/#parameters_4","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_17","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#subc","text":"[Source] fun box subc( y: U32 val) : (U32 val , Bool val)","title":"subc"},{"location":"builtin-U32/#parameters_5","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_18","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mulc","text":"[Source] fun box mulc( y: U32 val) : (U32 val , Bool val)","title":"mulc"},{"location":"builtin-U32/#parameters_6","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_19","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#divc","text":"[Source] fun box divc( y: U32 val) : (U32 val , Bool val)","title":"divc"},{"location":"builtin-U32/#parameters_7","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_20","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#remc","text":"[Source] fun box remc( y: U32 val) : (U32 val , Bool val)","title":"remc"},{"location":"builtin-U32/#parameters_8","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_21","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#add_partial","text":"[Source] fun box add_partial( y: U32 val) : U32 val ?","title":"add_partial"},{"location":"builtin-U32/#parameters_9","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_22","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#sub_partial","text":"[Source] fun box sub_partial( y: U32 val) : U32 val ?","title":"sub_partial"},{"location":"builtin-U32/#parameters_10","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_23","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mul_partial","text":"[Source] fun box mul_partial( y: U32 val) : U32 val ?","title":"mul_partial"},{"location":"builtin-U32/#parameters_11","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_24","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#div_partial","text":"[Source] fun box div_partial( y: U32 val) : U32 val ?","title":"div_partial"},{"location":"builtin-U32/#parameters_12","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_25","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#rem_partial","text":"[Source] fun box rem_partial( y: U32 val) : U32 val ?","title":"rem_partial"},{"location":"builtin-U32/#parameters_13","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_26","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#divrem_partial","text":"[Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ?","title":"divrem_partial"},{"location":"builtin-U32/#parameters_14","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_27","text":"( U32 val , U32 val) ?","title":"Returns"},{"location":"builtin-U32/#shl","text":"fun box shl( y: U32 val) : U32 val","title":"shl"},{"location":"builtin-U32/#parameters_15","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_28","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr","text":"fun box shr( y: U32 val) : U32 val","title":"shr"},{"location":"builtin-U32/#parameters_16","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_29","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#fld","text":"fun box fld( y: U32 val) : U32 val","title":"fld"},{"location":"builtin-U32/#parameters_17","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_30","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#fldc","text":"fun box fldc( y: U32 val) : (U32 val , Bool val)","title":"fldc"},{"location":"builtin-U32/#parameters_18","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_31","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#fld_partial","text":"fun box fld_partial( y: U32 val) : U32 val ?","title":"fld_partial"},{"location":"builtin-U32/#parameters_19","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_32","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#fld_unsafe","text":"fun box fld_unsafe( y: U32 val) : U32 val","title":"fld_unsafe"},{"location":"builtin-U32/#parameters_20","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mod","text":"fun box mod( y: U32 val) : U32 val","title":"mod"},{"location":"builtin-U32/#parameters_21","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_34","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#modc","text":"fun box modc( y: U32 val) : (U32 val , Bool val)","title":"modc"},{"location":"builtin-U32/#parameters_22","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_35","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mod_partial","text":"fun box mod_partial( y: U32 val) : U32 val ?","title":"mod_partial"},{"location":"builtin-U32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_36","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mod_unsafe","text":"fun box mod_unsafe( y: U32 val) : U32 val","title":"mod_unsafe"},{"location":"builtin-U32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_37","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : U32 val","title":"shl_unsafe"},{"location":"builtin-U32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_38","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : U32 val","title":"shr_unsafe"},{"location":"builtin-U32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_39","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotl","text":"fun box rotl( y: U32 val) : U32 val","title":"rotl"},{"location":"builtin-U32/#parameters_27","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_40","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotr","text":"fun box rotr( y: U32 val) : U32 val","title":"rotr"},{"location":"builtin-U32/#parameters_28","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_41","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U32/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U32/#add_unsafe","text":"fun box add_unsafe( y: U32 val) : U32 val","title":"add_unsafe"},{"location":"builtin-U32/#parameters_29","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_43","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub_unsafe","text":"fun box sub_unsafe( y: U32 val) : U32 val","title":"sub_unsafe"},{"location":"builtin-U32/#parameters_30","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_44","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul_unsafe","text":"fun box mul_unsafe( y: U32 val) : U32 val","title":"mul_unsafe"},{"location":"builtin-U32/#parameters_31","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_45","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div_unsafe","text":"fun box div_unsafe( y: U32 val) : U32 val","title":"div_unsafe"},{"location":"builtin-U32/#parameters_32","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_46","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem_unsafe","text":"fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val)","title":"divrem_unsafe"},{"location":"builtin-U32/#parameters_33","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_47","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem_unsafe","text":"fun box rem_unsafe( y: U32 val) : U32 val","title":"rem_unsafe"},{"location":"builtin-U32/#parameters_34","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_48","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg_unsafe","text":"fun box neg_unsafe() : U32 val","title":"neg_unsafe"},{"location":"builtin-U32/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_and","text":"fun box op_and( y: U32 val) : U32 val","title":"op_and"},{"location":"builtin-U32/#parameters_35","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_50","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_or","text":"fun box op_or( y: U32 val) : U32 val","title":"op_or"},{"location":"builtin-U32/#parameters_36","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_51","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_xor","text":"fun box op_xor( y: U32 val) : U32 val","title":"op_xor"},{"location":"builtin-U32/#parameters_37","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_52","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_not","text":"fun box op_not() : U32 val","title":"op_not"},{"location":"builtin-U32/#returns_53","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#add","text":"fun box add( y: U32 val) : U32 val","title":"add"},{"location":"builtin-U32/#parameters_38","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_54","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub","text":"fun box sub( y: U32 val) : U32 val","title":"sub"},{"location":"builtin-U32/#parameters_39","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_55","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul","text":"fun box mul( y: U32 val) : U32 val","title":"mul"},{"location":"builtin-U32/#parameters_40","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_56","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div","text":"fun box div( y: U32 val) : U32 val","title":"div"},{"location":"builtin-U32/#parameters_41","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_57","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem","text":"fun box divrem( y: U32 val) : (U32 val , U32 val)","title":"divrem"},{"location":"builtin-U32/#parameters_42","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_58","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem","text":"fun box rem( y: U32 val) : U32 val","title":"rem"},{"location":"builtin-U32/#parameters_43","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_59","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg","text":"fun box neg() : U32 val","title":"neg"},{"location":"builtin-U32/#returns_60","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#eq","text":"fun box eq( y: U32 val) : Bool val","title":"eq"},{"location":"builtin-U32/#parameters_44","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ne","text":"fun box ne( y: U32 val) : Bool val","title":"ne"},{"location":"builtin-U32/#parameters_45","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#lt","text":"fun box lt( y: U32 val) : Bool val","title":"lt"},{"location":"builtin-U32/#parameters_46","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#le","text":"fun box le( y: U32 val) : Bool val","title":"le"},{"location":"builtin-U32/#parameters_47","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ge","text":"fun box ge( y: U32 val) : Bool val","title":"ge"},{"location":"builtin-U32/#parameters_48","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#gt","text":"fun box gt( y: U32 val) : Bool val","title":"gt"},{"location":"builtin-U32/#parameters_49","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U32/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U32/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U32/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U32/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U32/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U32/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U32/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U32/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U32/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U32/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U32/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_1","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U32/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U32/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U32/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U32/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U32/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U32/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U32/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U32/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U32/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U32/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U32/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U32/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U32/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U32/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U32/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U32/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U32/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U32/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U32/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U32/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U32/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U32/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U32/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#compare","text":"fun box compare( that: U32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U32/#parameters_50","text":"that: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U32/#_value","text":"fun box _value() : U32 val","title":"_value"},{"location":"builtin-U32/#returns_102","text":"U32 val","title":"Returns"},{"location":"builtin-U64/","text":"U64 \u00b6 [Source] primitive val U64 is UnsignedInteger[U64 val] val Implements \u00b6 UnsignedInteger [ U64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U64 val) : U64 val^ Parameters \u00b6 value: U64 val Returns \u00b6 U64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U64 val^ Parameters \u00b6 a: A Returns \u00b6 U64 val^ min_value \u00b6 [Source] new val min_value() : U64 val^ Returns \u00b6 U64 val^ max_value \u00b6 [Source] new val max_value() : U64 val^ Returns \u00b6 U64 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U64 val Returns \u00b6 U64 val abs \u00b6 [Source] fun box abs() : U64 val Returns \u00b6 U64 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U64 val Returns \u00b6 U64 val bswap \u00b6 [Source] fun box bswap() : U64 val Returns \u00b6 U64 val popcount \u00b6 [Source] fun box popcount() : U64 val Returns \u00b6 U64 val clz \u00b6 [Source] fun box clz() : U64 val Returns \u00b6 U64 val ctz \u00b6 [Source] fun box ctz() : U64 val Returns \u00b6 U64 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns \u00b6 U64 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns \u00b6 U64 val bitwidth \u00b6 [Source] fun box bitwidth() : U64 val Returns \u00b6 U64 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val max \u00b6 [Source] fun box max( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) subc \u00b6 [Source] fun box subc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) divc \u00b6 [Source] fun box divc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) remc \u00b6 [Source] fun box remc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? div_partial \u00b6 [Source] fun box div_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ? Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) ? shl \u00b6 fun box shl( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shr \u00b6 fun box shr( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val fld \u00b6 fun box fld( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val fldc \u00b6 fun box fldc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mod \u00b6 fun box mod( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val modc \u00b6 fun box modc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shl_unsafe \u00b6 fun box shl_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shr_unsafe \u00b6 fun box shr_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val rotl \u00b6 fun box rotl( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val rotr \u00b6 fun box rotr( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val sub_unsafe \u00b6 fun box sub_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mul_unsafe \u00b6 fun box mul_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val div_unsafe \u00b6 fun box div_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val neg_unsafe \u00b6 fun box neg_unsafe() : U64 val Returns \u00b6 U64 val op_and \u00b6 fun box op_and( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_or \u00b6 fun box op_or( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_xor \u00b6 fun box op_xor( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_not \u00b6 fun box op_not() : U64 val Returns \u00b6 U64 val add \u00b6 fun box add( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val sub \u00b6 fun box sub( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mul \u00b6 fun box mul( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val div \u00b6 fun box div( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val divrem \u00b6 fun box divrem( y: U64 val) : (U64 val , U64 val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) rem \u00b6 fun box rem( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val neg \u00b6 fun box neg() : U64 val Returns \u00b6 U64 val eq \u00b6 fun box eq( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U64 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U64 val Returns \u00b6 U64 val","title":"primitive U64"},{"location":"builtin-U64/#u64","text":"[Source] primitive val U64 is UnsignedInteger[U64 val] val","title":"U64"},{"location":"builtin-U64/#implements","text":"UnsignedInteger [ U64 val] val","title":"Implements"},{"location":"builtin-U64/#constructors","text":"","title":"Constructors"},{"location":"builtin-U64/#create","text":"[Source] new val create( value: U64 val) : U64 val^","title":"create"},{"location":"builtin-U64/#parameters","text":"value: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U64/#returns_1","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#min_value","text":"[Source] new val min_value() : U64 val^","title":"min_value"},{"location":"builtin-U64/#returns_2","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#max_value","text":"[Source] new val max_value() : U64 val^","title":"max_value"},{"location":"builtin-U64/#returns_3","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U64/#next_pow2","text":"[Source] fun box next_pow2() : U64 val","title":"next_pow2"},{"location":"builtin-U64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-U64/#returns_5","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bit_reverse","text":"[Source] fun box bit_reverse() : U64 val","title":"bit_reverse"},{"location":"builtin-U64/#returns_6","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bswap","text":"[Source] fun box bswap() : U64 val","title":"bswap"},{"location":"builtin-U64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-U64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-U64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-U64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-U64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-U64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-U64/#returns_13","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U64/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U64/#min","text":"[Source] fun box min( y: U64 val) : U64 val","title":"min"},{"location":"builtin-U64/#parameters_2","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_15","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#max","text":"[Source] fun box max( y: U64 val) : U64 val","title":"max"},{"location":"builtin-U64/#parameters_3","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_16","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U64/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U64/#addc","text":"[Source] fun box addc( y: U64 val) : (U64 val , Bool val)","title":"addc"},{"location":"builtin-U64/#parameters_4","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_18","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#subc","text":"[Source] fun box subc( y: U64 val) : (U64 val , Bool val)","title":"subc"},{"location":"builtin-U64/#parameters_5","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_19","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mulc","text":"[Source] fun box mulc( y: U64 val) : (U64 val , Bool val)","title":"mulc"},{"location":"builtin-U64/#parameters_6","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_20","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#divc","text":"[Source] fun box divc( y: U64 val) : (U64 val , Bool val)","title":"divc"},{"location":"builtin-U64/#parameters_7","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_21","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#remc","text":"[Source] fun box remc( y: U64 val) : (U64 val , Bool val)","title":"remc"},{"location":"builtin-U64/#parameters_8","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_22","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#add_partial","text":"[Source] fun box add_partial( y: U64 val) : U64 val ?","title":"add_partial"},{"location":"builtin-U64/#parameters_9","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_23","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#sub_partial","text":"[Source] fun box sub_partial( y: U64 val) : U64 val ?","title":"sub_partial"},{"location":"builtin-U64/#parameters_10","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_24","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mul_partial","text":"[Source] fun box mul_partial( y: U64 val) : U64 val ?","title":"mul_partial"},{"location":"builtin-U64/#parameters_11","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_25","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#div_partial","text":"[Source] fun box div_partial( y: U64 val) : U64 val ?","title":"div_partial"},{"location":"builtin-U64/#parameters_12","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_26","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#rem_partial","text":"[Source] fun box rem_partial( y: U64 val) : U64 val ?","title":"rem_partial"},{"location":"builtin-U64/#parameters_13","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_27","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#divrem_partial","text":"[Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ?","title":"divrem_partial"},{"location":"builtin-U64/#parameters_14","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_28","text":"( U64 val , U64 val) ?","title":"Returns"},{"location":"builtin-U64/#shl","text":"fun box shl( y: U64 val) : U64 val","title":"shl"},{"location":"builtin-U64/#parameters_15","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_29","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr","text":"fun box shr( y: U64 val) : U64 val","title":"shr"},{"location":"builtin-U64/#parameters_16","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_30","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#fld","text":"fun box fld( y: U64 val) : U64 val","title":"fld"},{"location":"builtin-U64/#parameters_17","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_31","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#fldc","text":"fun box fldc( y: U64 val) : (U64 val , Bool val)","title":"fldc"},{"location":"builtin-U64/#parameters_18","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_32","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#fld_partial","text":"fun box fld_partial( y: U64 val) : U64 val ?","title":"fld_partial"},{"location":"builtin-U64/#parameters_19","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_33","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#fld_unsafe","text":"fun box fld_unsafe( y: U64 val) : U64 val","title":"fld_unsafe"},{"location":"builtin-U64/#parameters_20","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mod","text":"fun box mod( y: U64 val) : U64 val","title":"mod"},{"location":"builtin-U64/#parameters_21","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_35","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#modc","text":"fun box modc( y: U64 val) : (U64 val , Bool val)","title":"modc"},{"location":"builtin-U64/#parameters_22","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_36","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mod_partial","text":"fun box mod_partial( y: U64 val) : U64 val ?","title":"mod_partial"},{"location":"builtin-U64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_37","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mod_unsafe","text":"fun box mod_unsafe( y: U64 val) : U64 val","title":"mod_unsafe"},{"location":"builtin-U64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_38","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : U64 val","title":"shl_unsafe"},{"location":"builtin-U64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_39","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : U64 val","title":"shr_unsafe"},{"location":"builtin-U64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_40","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotl","text":"fun box rotl( y: U64 val) : U64 val","title":"rotl"},{"location":"builtin-U64/#parameters_27","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_41","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotr","text":"fun box rotr( y: U64 val) : U64 val","title":"rotr"},{"location":"builtin-U64/#parameters_28","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_42","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U64/#returns_43","text":"String iso^","title":"Returns"},{"location":"builtin-U64/#add_unsafe","text":"fun box add_unsafe( y: U64 val) : U64 val","title":"add_unsafe"},{"location":"builtin-U64/#parameters_29","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_44","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub_unsafe","text":"fun box sub_unsafe( y: U64 val) : U64 val","title":"sub_unsafe"},{"location":"builtin-U64/#parameters_30","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_45","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul_unsafe","text":"fun box mul_unsafe( y: U64 val) : U64 val","title":"mul_unsafe"},{"location":"builtin-U64/#parameters_31","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_46","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div_unsafe","text":"fun box div_unsafe( y: U64 val) : U64 val","title":"div_unsafe"},{"location":"builtin-U64/#parameters_32","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_47","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem_unsafe","text":"fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val)","title":"divrem_unsafe"},{"location":"builtin-U64/#parameters_33","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_48","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem_unsafe","text":"fun box rem_unsafe( y: U64 val) : U64 val","title":"rem_unsafe"},{"location":"builtin-U64/#parameters_34","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_49","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg_unsafe","text":"fun box neg_unsafe() : U64 val","title":"neg_unsafe"},{"location":"builtin-U64/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_and","text":"fun box op_and( y: U64 val) : U64 val","title":"op_and"},{"location":"builtin-U64/#parameters_35","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_51","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_or","text":"fun box op_or( y: U64 val) : U64 val","title":"op_or"},{"location":"builtin-U64/#parameters_36","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_xor","text":"fun box op_xor( y: U64 val) : U64 val","title":"op_xor"},{"location":"builtin-U64/#parameters_37","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_53","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_not","text":"fun box op_not() : U64 val","title":"op_not"},{"location":"builtin-U64/#returns_54","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#add","text":"fun box add( y: U64 val) : U64 val","title":"add"},{"location":"builtin-U64/#parameters_38","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_55","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub","text":"fun box sub( y: U64 val) : U64 val","title":"sub"},{"location":"builtin-U64/#parameters_39","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_56","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul","text":"fun box mul( y: U64 val) : U64 val","title":"mul"},{"location":"builtin-U64/#parameters_40","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div","text":"fun box div( y: U64 val) : U64 val","title":"div"},{"location":"builtin-U64/#parameters_41","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_58","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem","text":"fun box divrem( y: U64 val) : (U64 val , U64 val)","title":"divrem"},{"location":"builtin-U64/#parameters_42","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_59","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem","text":"fun box rem( y: U64 val) : U64 val","title":"rem"},{"location":"builtin-U64/#parameters_43","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg","text":"fun box neg() : U64 val","title":"neg"},{"location":"builtin-U64/#returns_61","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#eq","text":"fun box eq( y: U64 val) : Bool val","title":"eq"},{"location":"builtin-U64/#parameters_44","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ne","text":"fun box ne( y: U64 val) : Bool val","title":"ne"},{"location":"builtin-U64/#parameters_45","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#lt","text":"fun box lt( y: U64 val) : Bool val","title":"lt"},{"location":"builtin-U64/#parameters_46","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#le","text":"fun box le( y: U64 val) : Bool val","title":"le"},{"location":"builtin-U64/#parameters_47","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ge","text":"fun box ge( y: U64 val) : Bool val","title":"ge"},{"location":"builtin-U64/#parameters_48","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#gt","text":"fun box gt( y: U64 val) : Bool val","title":"gt"},{"location":"builtin-U64/#parameters_49","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U64/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U64/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U64/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U64/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U64/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U64/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U64/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U64/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U64/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U64/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U64/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_1","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U64/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U64/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U64/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U64/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U64/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U64/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U64/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U64/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U64/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U64/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U64/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U64/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U64/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U64/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U64/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U64/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U64/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U64/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U64/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U64/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U64/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U64/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#compare","text":"fun box compare( that: U64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U64/#parameters_50","text":"that: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U64/#_value","text":"fun box _value() : U64 val","title":"_value"},{"location":"builtin-U64/#returns_102","text":"U64 val","title":"Returns"},{"location":"builtin-U8/","text":"U8 \u00b6 [Source] primitive val U8 is UnsignedInteger[U8 val] val Implements \u00b6 UnsignedInteger [ U8 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U8 val) : U8 val^ Parameters \u00b6 value: U8 val Returns \u00b6 U8 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : U8 val^ Parameters \u00b6 a: B Returns \u00b6 U8 val^ min_value \u00b6 [Source] new val min_value() : U8 val^ Returns \u00b6 U8 val^ max_value \u00b6 [Source] new val max_value() : U8 val^ Returns \u00b6 U8 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U8 val Returns \u00b6 U8 val abs \u00b6 [Source] fun box abs() : U8 val Returns \u00b6 U8 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U8 val Returns \u00b6 U8 val bswap \u00b6 [Source] fun box bswap() : U8 val Returns \u00b6 U8 val popcount \u00b6 [Source] fun box popcount() : U8 val Returns \u00b6 U8 val clz \u00b6 [Source] fun box clz() : U8 val Returns \u00b6 U8 val ctz \u00b6 [Source] fun box ctz() : U8 val Returns \u00b6 U8 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns \u00b6 U8 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns \u00b6 U8 val bitwidth \u00b6 [Source] fun box bitwidth() : U8 val Returns \u00b6 U8 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val max \u00b6 [Source] fun box max( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val addc \u00b6 [Source] fun box addc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) subc \u00b6 [Source] fun box subc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) divc \u00b6 [Source] fun box divc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) remc \u00b6 [Source] fun box remc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? div_partial \u00b6 [Source] fun box div_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ? Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) ? shl \u00b6 fun box shl( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shr \u00b6 fun box shr( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val fld \u00b6 fun box fld( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val fldc \u00b6 fun box fldc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mod \u00b6 fun box mod( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val modc \u00b6 fun box modc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shl_unsafe \u00b6 fun box shl_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shr_unsafe \u00b6 fun box shr_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val rotl \u00b6 fun box rotl( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val rotr \u00b6 fun box rotr( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val sub_unsafe \u00b6 fun box sub_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mul_unsafe \u00b6 fun box mul_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val div_unsafe \u00b6 fun box div_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val neg_unsafe \u00b6 fun box neg_unsafe() : U8 val Returns \u00b6 U8 val op_and \u00b6 fun box op_and( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_or \u00b6 fun box op_or( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_xor \u00b6 fun box op_xor( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_not \u00b6 fun box op_not() : U8 val Returns \u00b6 U8 val add \u00b6 fun box add( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val sub \u00b6 fun box sub( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mul \u00b6 fun box mul( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val div \u00b6 fun box div( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val divrem \u00b6 fun box divrem( y: U8 val) : (U8 val , U8 val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) rem \u00b6 fun box rem( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val neg \u00b6 fun box neg() : U8 val Returns \u00b6 U8 val eq \u00b6 fun box eq( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U8 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U8 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U8 val Returns \u00b6 U8 val","title":"primitive U8"},{"location":"builtin-U8/#u8","text":"[Source] primitive val U8 is UnsignedInteger[U8 val] val","title":"U8"},{"location":"builtin-U8/#implements","text":"UnsignedInteger [ U8 val] val","title":"Implements"},{"location":"builtin-U8/#constructors","text":"","title":"Constructors"},{"location":"builtin-U8/#create","text":"[Source] new val create( value: U8 val) : U8 val^","title":"create"},{"location":"builtin-U8/#parameters","text":"value: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : U8 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-U8/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-U8/#returns_1","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#min_value","text":"[Source] new val min_value() : U8 val^","title":"min_value"},{"location":"builtin-U8/#returns_2","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#max_value","text":"[Source] new val max_value() : U8 val^","title":"max_value"},{"location":"builtin-U8/#returns_3","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U8/#next_pow2","text":"[Source] fun box next_pow2() : U8 val","title":"next_pow2"},{"location":"builtin-U8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-U8/#returns_5","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bit_reverse","text":"[Source] fun box bit_reverse() : U8 val","title":"bit_reverse"},{"location":"builtin-U8/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bswap","text":"[Source] fun box bswap() : U8 val","title":"bswap"},{"location":"builtin-U8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-U8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-U8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-U8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-U8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-U8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-U8/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U8/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U8/#min","text":"[Source] fun box min( y: U8 val) : U8 val","title":"min"},{"location":"builtin-U8/#parameters_2","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_15","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#max","text":"[Source] fun box max( y: U8 val) : U8 val","title":"max"},{"location":"builtin-U8/#parameters_3","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_16","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#addc","text":"[Source] fun box addc( y: U8 val) : (U8 val , Bool val)","title":"addc"},{"location":"builtin-U8/#parameters_4","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_17","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#subc","text":"[Source] fun box subc( y: U8 val) : (U8 val , Bool val)","title":"subc"},{"location":"builtin-U8/#parameters_5","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_18","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mulc","text":"[Source] fun box mulc( y: U8 val) : (U8 val , Bool val)","title":"mulc"},{"location":"builtin-U8/#parameters_6","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_19","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#divc","text":"[Source] fun box divc( y: U8 val) : (U8 val , Bool val)","title":"divc"},{"location":"builtin-U8/#parameters_7","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_20","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#remc","text":"[Source] fun box remc( y: U8 val) : (U8 val , Bool val)","title":"remc"},{"location":"builtin-U8/#parameters_8","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_21","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#add_partial","text":"[Source] fun box add_partial( y: U8 val) : U8 val ?","title":"add_partial"},{"location":"builtin-U8/#parameters_9","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_22","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#sub_partial","text":"[Source] fun box sub_partial( y: U8 val) : U8 val ?","title":"sub_partial"},{"location":"builtin-U8/#parameters_10","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_23","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mul_partial","text":"[Source] fun box mul_partial( y: U8 val) : U8 val ?","title":"mul_partial"},{"location":"builtin-U8/#parameters_11","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_24","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#div_partial","text":"[Source] fun box div_partial( y: U8 val) : U8 val ?","title":"div_partial"},{"location":"builtin-U8/#parameters_12","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_25","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#rem_partial","text":"[Source] fun box rem_partial( y: U8 val) : U8 val ?","title":"rem_partial"},{"location":"builtin-U8/#parameters_13","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#divrem_partial","text":"[Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ?","title":"divrem_partial"},{"location":"builtin-U8/#parameters_14","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_27","text":"( U8 val , U8 val) ?","title":"Returns"},{"location":"builtin-U8/#shl","text":"fun box shl( y: U8 val) : U8 val","title":"shl"},{"location":"builtin-U8/#parameters_15","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_28","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr","text":"fun box shr( y: U8 val) : U8 val","title":"shr"},{"location":"builtin-U8/#parameters_16","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_29","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#fld","text":"fun box fld( y: U8 val) : U8 val","title":"fld"},{"location":"builtin-U8/#parameters_17","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_30","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#fldc","text":"fun box fldc( y: U8 val) : (U8 val , Bool val)","title":"fldc"},{"location":"builtin-U8/#parameters_18","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_31","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#fld_partial","text":"fun box fld_partial( y: U8 val) : U8 val ?","title":"fld_partial"},{"location":"builtin-U8/#parameters_19","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_32","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#fld_unsafe","text":"fun box fld_unsafe( y: U8 val) : U8 val","title":"fld_unsafe"},{"location":"builtin-U8/#parameters_20","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_33","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mod","text":"fun box mod( y: U8 val) : U8 val","title":"mod"},{"location":"builtin-U8/#parameters_21","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_34","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#modc","text":"fun box modc( y: U8 val) : (U8 val , Bool val)","title":"modc"},{"location":"builtin-U8/#parameters_22","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_35","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mod_partial","text":"fun box mod_partial( y: U8 val) : U8 val ?","title":"mod_partial"},{"location":"builtin-U8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_36","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mod_unsafe","text":"fun box mod_unsafe( y: U8 val) : U8 val","title":"mod_unsafe"},{"location":"builtin-U8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_37","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : U8 val","title":"shl_unsafe"},{"location":"builtin-U8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_38","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : U8 val","title":"shr_unsafe"},{"location":"builtin-U8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_39","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotl","text":"fun box rotl( y: U8 val) : U8 val","title":"rotl"},{"location":"builtin-U8/#parameters_27","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_40","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotr","text":"fun box rotr( y: U8 val) : U8 val","title":"rotr"},{"location":"builtin-U8/#parameters_28","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_41","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U8/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U8/#add_unsafe","text":"fun box add_unsafe( y: U8 val) : U8 val","title":"add_unsafe"},{"location":"builtin-U8/#parameters_29","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_43","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub_unsafe","text":"fun box sub_unsafe( y: U8 val) : U8 val","title":"sub_unsafe"},{"location":"builtin-U8/#parameters_30","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_44","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul_unsafe","text":"fun box mul_unsafe( y: U8 val) : U8 val","title":"mul_unsafe"},{"location":"builtin-U8/#parameters_31","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_45","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div_unsafe","text":"fun box div_unsafe( y: U8 val) : U8 val","title":"div_unsafe"},{"location":"builtin-U8/#parameters_32","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_46","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem_unsafe","text":"fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val)","title":"divrem_unsafe"},{"location":"builtin-U8/#parameters_33","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_47","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem_unsafe","text":"fun box rem_unsafe( y: U8 val) : U8 val","title":"rem_unsafe"},{"location":"builtin-U8/#parameters_34","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_48","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg_unsafe","text":"fun box neg_unsafe() : U8 val","title":"neg_unsafe"},{"location":"builtin-U8/#returns_49","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_and","text":"fun box op_and( y: U8 val) : U8 val","title":"op_and"},{"location":"builtin-U8/#parameters_35","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_50","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_or","text":"fun box op_or( y: U8 val) : U8 val","title":"op_or"},{"location":"builtin-U8/#parameters_36","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_51","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_xor","text":"fun box op_xor( y: U8 val) : U8 val","title":"op_xor"},{"location":"builtin-U8/#parameters_37","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_52","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_not","text":"fun box op_not() : U8 val","title":"op_not"},{"location":"builtin-U8/#returns_53","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#add","text":"fun box add( y: U8 val) : U8 val","title":"add"},{"location":"builtin-U8/#parameters_38","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_54","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub","text":"fun box sub( y: U8 val) : U8 val","title":"sub"},{"location":"builtin-U8/#parameters_39","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_55","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul","text":"fun box mul( y: U8 val) : U8 val","title":"mul"},{"location":"builtin-U8/#parameters_40","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_56","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div","text":"fun box div( y: U8 val) : U8 val","title":"div"},{"location":"builtin-U8/#parameters_41","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_57","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem","text":"fun box divrem( y: U8 val) : (U8 val , U8 val)","title":"divrem"},{"location":"builtin-U8/#parameters_42","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_58","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem","text":"fun box rem( y: U8 val) : U8 val","title":"rem"},{"location":"builtin-U8/#parameters_43","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_59","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg","text":"fun box neg() : U8 val","title":"neg"},{"location":"builtin-U8/#returns_60","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#eq","text":"fun box eq( y: U8 val) : Bool val","title":"eq"},{"location":"builtin-U8/#parameters_44","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ne","text":"fun box ne( y: U8 val) : Bool val","title":"ne"},{"location":"builtin-U8/#parameters_45","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#lt","text":"fun box lt( y: U8 val) : Bool val","title":"lt"},{"location":"builtin-U8/#parameters_46","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#le","text":"fun box le( y: U8 val) : Bool val","title":"le"},{"location":"builtin-U8/#parameters_47","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ge","text":"fun box ge( y: U8 val) : Bool val","title":"ge"},{"location":"builtin-U8/#parameters_48","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#gt","text":"fun box gt( y: U8 val) : Bool val","title":"gt"},{"location":"builtin-U8/#parameters_49","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U8/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U8/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U8/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U8/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U8/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U8/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U8/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U8/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U8/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_1","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U8/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U8/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U8/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U8/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U8/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U8/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U8/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U8/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U8/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U8/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U8/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U8/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U8/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U8/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U8/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U8/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U8/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U8/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U8/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U8/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U8/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U8/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U8/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U8/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U8/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#compare","text":"fun box compare( that: U8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U8/#parameters_50","text":"that: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U8/#_value","text":"fun box _value() : U8 val","title":"_value"},{"location":"builtin-U8/#returns_102","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/","text":"ULong \u00b6 [Source] primitive val ULong is UnsignedInteger[ULong val] val Implements \u00b6 UnsignedInteger [ ULong val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ULong val) : ULong val^ Parameters \u00b6 value: ULong val Returns \u00b6 ULong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ULong val^ Parameters \u00b6 a: A Returns \u00b6 ULong val^ min_value \u00b6 [Source] new val min_value() : ULong val^ Returns \u00b6 ULong val^ max_value \u00b6 [Source] new val max_value() : ULong val^ Returns \u00b6 ULong val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : ULong val Returns \u00b6 ULong val abs \u00b6 [Source] fun box abs() : ULong val Returns \u00b6 ULong val bit_reverse \u00b6 [Source] fun box bit_reverse() : ULong val Returns \u00b6 ULong val bswap \u00b6 [Source] fun box bswap() : ULong val Returns \u00b6 ULong val popcount \u00b6 [Source] fun box popcount() : ULong val Returns \u00b6 ULong val clz \u00b6 [Source] fun box clz() : ULong val Returns \u00b6 ULong val ctz \u00b6 [Source] fun box ctz() : ULong val Returns \u00b6 ULong val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val Returns \u00b6 ULong val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val Returns \u00b6 ULong val bitwidth \u00b6 [Source] fun box bitwidth() : ULong val Returns \u00b6 ULong val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val max \u00b6 [Source] fun box max( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) subc \u00b6 [Source] fun box subc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) divc \u00b6 [Source] fun box divc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) remc \u00b6 [Source] fun box remc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? div_partial \u00b6 [Source] fun box div_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ? Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) ? shl \u00b6 fun box shl( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shr \u00b6 fun box shr( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val fld \u00b6 fun box fld( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val fldc \u00b6 fun box fldc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) fld_partial \u00b6 fun box fld_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? fld_unsafe \u00b6 fun box fld_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mod \u00b6 fun box mod( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val modc \u00b6 fun box modc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) mod_partial \u00b6 fun box mod_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? mod_unsafe \u00b6 fun box mod_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shl_unsafe \u00b6 fun box shl_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shr_unsafe \u00b6 fun box shr_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val rotl \u00b6 fun box rotl( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val rotr \u00b6 fun box rotr( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val sub_unsafe \u00b6 fun box sub_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mul_unsafe \u00b6 fun box mul_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val div_unsafe \u00b6 fun box div_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) rem_unsafe \u00b6 fun box rem_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val neg_unsafe \u00b6 fun box neg_unsafe() : ULong val Returns \u00b6 ULong val op_and \u00b6 fun box op_and( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_or \u00b6 fun box op_or( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_xor \u00b6 fun box op_xor( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_not \u00b6 fun box op_not() : ULong val Returns \u00b6 ULong val add \u00b6 fun box add( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val sub \u00b6 fun box sub( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mul \u00b6 fun box mul( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val div \u00b6 fun box div( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val divrem \u00b6 fun box divrem( y: ULong val) : (ULong val , ULong val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) rem \u00b6 fun box rem( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val neg \u00b6 fun box neg() : ULong val Returns \u00b6 ULong val eq \u00b6 fun box eq( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val le \u00b6 fun box le( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ULong val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ULong val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : ULong val Returns \u00b6 ULong val","title":"primitive ULong"},{"location":"builtin-ULong/#ulong","text":"[Source] primitive val ULong is UnsignedInteger[ULong val] val","title":"ULong"},{"location":"builtin-ULong/#implements","text":"UnsignedInteger [ ULong val] val","title":"Implements"},{"location":"builtin-ULong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ULong/#create","text":"[Source] new val create( value: ULong val) : ULong val^","title":"create"},{"location":"builtin-ULong/#parameters","text":"value: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ULong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ULong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ULong/#returns_1","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#min_value","text":"[Source] new val min_value() : ULong val^","title":"min_value"},{"location":"builtin-ULong/#returns_2","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#max_value","text":"[Source] new val max_value() : ULong val^","title":"max_value"},{"location":"builtin-ULong/#returns_3","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ULong/#next_pow2","text":"[Source] fun box next_pow2() : ULong val","title":"next_pow2"},{"location":"builtin-ULong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ULong/#returns_5","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bit_reverse","text":"[Source] fun box bit_reverse() : ULong val","title":"bit_reverse"},{"location":"builtin-ULong/#returns_6","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bswap","text":"[Source] fun box bswap() : ULong val","title":"bswap"},{"location":"builtin-ULong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ULong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ULong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ULong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ULong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ULong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ULong/#returns_13","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ULong/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#min","text":"[Source] fun box min( y: ULong val) : ULong val","title":"min"},{"location":"builtin-ULong/#parameters_2","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_15","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#max","text":"[Source] fun box max( y: ULong val) : ULong val","title":"max"},{"location":"builtin-ULong/#parameters_3","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_16","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ULong/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#addc","text":"[Source] fun box addc( y: ULong val) : (ULong val , Bool val)","title":"addc"},{"location":"builtin-ULong/#parameters_4","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_18","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#subc","text":"[Source] fun box subc( y: ULong val) : (ULong val , Bool val)","title":"subc"},{"location":"builtin-ULong/#parameters_5","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_19","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mulc","text":"[Source] fun box mulc( y: ULong val) : (ULong val , Bool val)","title":"mulc"},{"location":"builtin-ULong/#parameters_6","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_20","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#divc","text":"[Source] fun box divc( y: ULong val) : (ULong val , Bool val)","title":"divc"},{"location":"builtin-ULong/#parameters_7","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_21","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#remc","text":"[Source] fun box remc( y: ULong val) : (ULong val , Bool val)","title":"remc"},{"location":"builtin-ULong/#parameters_8","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_22","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#add_partial","text":"[Source] fun box add_partial( y: ULong val) : ULong val ?","title":"add_partial"},{"location":"builtin-ULong/#parameters_9","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_23","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#sub_partial","text":"[Source] fun box sub_partial( y: ULong val) : ULong val ?","title":"sub_partial"},{"location":"builtin-ULong/#parameters_10","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_24","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mul_partial","text":"[Source] fun box mul_partial( y: ULong val) : ULong val ?","title":"mul_partial"},{"location":"builtin-ULong/#parameters_11","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_25","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#div_partial","text":"[Source] fun box div_partial( y: ULong val) : ULong val ?","title":"div_partial"},{"location":"builtin-ULong/#parameters_12","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_26","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#rem_partial","text":"[Source] fun box rem_partial( y: ULong val) : ULong val ?","title":"rem_partial"},{"location":"builtin-ULong/#parameters_13","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_27","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ?","title":"divrem_partial"},{"location":"builtin-ULong/#parameters_14","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_28","text":"( ULong val , ULong val) ?","title":"Returns"},{"location":"builtin-ULong/#shl","text":"fun box shl( y: ULong val) : ULong val","title":"shl"},{"location":"builtin-ULong/#parameters_15","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_29","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr","text":"fun box shr( y: ULong val) : ULong val","title":"shr"},{"location":"builtin-ULong/#parameters_16","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_30","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#fld","text":"fun box fld( y: ULong val) : ULong val","title":"fld"},{"location":"builtin-ULong/#parameters_17","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_31","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#fldc","text":"fun box fldc( y: ULong val) : (ULong val , Bool val)","title":"fldc"},{"location":"builtin-ULong/#parameters_18","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_32","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#fld_partial","text":"fun box fld_partial( y: ULong val) : ULong val ?","title":"fld_partial"},{"location":"builtin-ULong/#parameters_19","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_33","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#fld_unsafe","text":"fun box fld_unsafe( y: ULong val) : ULong val","title":"fld_unsafe"},{"location":"builtin-ULong/#parameters_20","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_34","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mod","text":"fun box mod( y: ULong val) : ULong val","title":"mod"},{"location":"builtin-ULong/#parameters_21","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_35","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#modc","text":"fun box modc( y: ULong val) : (ULong val , Bool val)","title":"modc"},{"location":"builtin-ULong/#parameters_22","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_36","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mod_partial","text":"fun box mod_partial( y: ULong val) : ULong val ?","title":"mod_partial"},{"location":"builtin-ULong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_37","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mod_unsafe","text":"fun box mod_unsafe( y: ULong val) : ULong val","title":"mod_unsafe"},{"location":"builtin-ULong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_38","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ULong val","title":"shl_unsafe"},{"location":"builtin-ULong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_39","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ULong val","title":"shr_unsafe"},{"location":"builtin-ULong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_40","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotl","text":"fun box rotl( y: ULong val) : ULong val","title":"rotl"},{"location":"builtin-ULong/#parameters_27","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_41","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotr","text":"fun box rotr( y: ULong val) : ULong val","title":"rotr"},{"location":"builtin-ULong/#parameters_28","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_42","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ULong/#returns_43","text":"String iso^","title":"Returns"},{"location":"builtin-ULong/#add_unsafe","text":"fun box add_unsafe( y: ULong val) : ULong val","title":"add_unsafe"},{"location":"builtin-ULong/#parameters_29","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_44","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub_unsafe","text":"fun box sub_unsafe( y: ULong val) : ULong val","title":"sub_unsafe"},{"location":"builtin-ULong/#parameters_30","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_45","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul_unsafe","text":"fun box mul_unsafe( y: ULong val) : ULong val","title":"mul_unsafe"},{"location":"builtin-ULong/#parameters_31","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_46","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div_unsafe","text":"fun box div_unsafe( y: ULong val) : ULong val","title":"div_unsafe"},{"location":"builtin-ULong/#parameters_32","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_47","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val)","title":"divrem_unsafe"},{"location":"builtin-ULong/#parameters_33","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_48","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem_unsafe","text":"fun box rem_unsafe( y: ULong val) : ULong val","title":"rem_unsafe"},{"location":"builtin-ULong/#parameters_34","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_49","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg_unsafe","text":"fun box neg_unsafe() : ULong val","title":"neg_unsafe"},{"location":"builtin-ULong/#returns_50","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_and","text":"fun box op_and( y: ULong val) : ULong val","title":"op_and"},{"location":"builtin-ULong/#parameters_35","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_51","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_or","text":"fun box op_or( y: ULong val) : ULong val","title":"op_or"},{"location":"builtin-ULong/#parameters_36","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_xor","text":"fun box op_xor( y: ULong val) : ULong val","title":"op_xor"},{"location":"builtin-ULong/#parameters_37","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_53","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_not","text":"fun box op_not() : ULong val","title":"op_not"},{"location":"builtin-ULong/#returns_54","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#add","text":"fun box add( y: ULong val) : ULong val","title":"add"},{"location":"builtin-ULong/#parameters_38","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_55","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub","text":"fun box sub( y: ULong val) : ULong val","title":"sub"},{"location":"builtin-ULong/#parameters_39","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_56","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul","text":"fun box mul( y: ULong val) : ULong val","title":"mul"},{"location":"builtin-ULong/#parameters_40","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_57","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div","text":"fun box div( y: ULong val) : ULong val","title":"div"},{"location":"builtin-ULong/#parameters_41","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_58","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem","text":"fun box divrem( y: ULong val) : (ULong val , ULong val)","title":"divrem"},{"location":"builtin-ULong/#parameters_42","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_59","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem","text":"fun box rem( y: ULong val) : ULong val","title":"rem"},{"location":"builtin-ULong/#parameters_43","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_60","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg","text":"fun box neg() : ULong val","title":"neg"},{"location":"builtin-ULong/#returns_61","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#eq","text":"fun box eq( y: ULong val) : Bool val","title":"eq"},{"location":"builtin-ULong/#parameters_44","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ne","text":"fun box ne( y: ULong val) : Bool val","title":"ne"},{"location":"builtin-ULong/#parameters_45","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#lt","text":"fun box lt( y: ULong val) : Bool val","title":"lt"},{"location":"builtin-ULong/#parameters_46","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#le","text":"fun box le( y: ULong val) : Bool val","title":"le"},{"location":"builtin-ULong/#parameters_47","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ge","text":"fun box ge( y: ULong val) : Bool val","title":"ge"},{"location":"builtin-ULong/#parameters_48","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#gt","text":"fun box gt( y: ULong val) : Bool val","title":"gt"},{"location":"builtin-ULong/#parameters_49","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ULong/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ULong/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ULong/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ULong/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ULong/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ULong/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ULong/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ULong/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ULong/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ULong/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ULong/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ULong/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ULong/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_1","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ULong/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ULong/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ULong/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ULong/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ULong/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ULong/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ULong/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ULong/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ULong/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ULong/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ULong/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ULong/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ULong/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ULong/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ULong/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ULong/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ULong/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ULong/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ULong/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ULong/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#compare","text":"fun box compare( that: ULong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ULong/#parameters_50","text":"that: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ULong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ULong/#_value","text":"fun box _value() : ULong val","title":"_value"},{"location":"builtin-ULong/#returns_102","text":"ULong val","title":"Returns"},{"location":"builtin-USize/","text":"USize \u00b6 [Source] primitive val USize is UnsignedInteger[USize val] val Implements \u00b6 UnsignedInteger [ USize val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: USize val) : USize val^ Parameters \u00b6 value: USize val Returns \u00b6 USize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : USize val^ Parameters \u00b6 a: A Returns \u00b6 USize val^ min_value \u00b6 [Source] new val min_value() : USize val^ Returns \u00b6 USize val^ max_value \u00b6 [Source] new val max_value() : USize val^ Returns \u00b6 USize val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : USize val Returns \u00b6 USize val abs \u00b6 [Source] fun box abs() : USize val Returns \u00b6 USize val bit_reverse \u00b6 [Source] fun box bit_reverse() : USize val Returns \u00b6 USize val bswap \u00b6 [Source] fun box bswap() : USize val Returns \u00b6 USize val popcount \u00b6 [Source] fun box popcount() : USize val Returns \u00b6 USize val clz \u00b6 [Source] fun box clz() : USize val Returns \u00b6 USize val ctz \u00b6 [Source] fun box ctz() : USize val Returns \u00b6 USize val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val Returns \u00b6 USize val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val Returns \u00b6 USize val bitwidth \u00b6 [Source] fun box bitwidth() : USize val Returns \u00b6 USize val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val max \u00b6 [Source] fun box max( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) subc \u00b6 [Source] fun box subc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) mulc \u00b6 [Source] fun box mulc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) divc \u00b6 [Source] fun box divc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) remc \u00b6 [Source] fun box remc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? sub_partial \u00b6 [Source] fun box sub_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? mul_partial \u00b6 [Source] fun box mul_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? div_partial \u00b6 [Source] fun box div_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? rem_partial \u00b6 [Source] fun box rem_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ? Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) ? shl \u00b6 fun box shl( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shr \u00b6 fun box shr( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val fld \u00b6 fun box fld( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val fldc \u00b6 fun box fldc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) fld_partial \u00b6 fun box fld_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? fld_unsafe \u00b6 fun box fld_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mod \u00b6 fun box mod( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val modc \u00b6 fun box modc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) mod_partial \u00b6 fun box mod_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? mod_unsafe \u00b6 fun box mod_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shl_unsafe \u00b6 fun box shl_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shr_unsafe \u00b6 fun box shr_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val rotl \u00b6 fun box rotl( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val rotr \u00b6 fun box rotr( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val sub_unsafe \u00b6 fun box sub_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mul_unsafe \u00b6 fun box mul_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val div_unsafe \u00b6 fun box div_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val divrem_unsafe \u00b6 fun box divrem_unsafe( y: USize val) : (USize val , USize val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) rem_unsafe \u00b6 fun box rem_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val neg_unsafe \u00b6 fun box neg_unsafe() : USize val Returns \u00b6 USize val op_and \u00b6 fun box op_and( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_or \u00b6 fun box op_or( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_xor \u00b6 fun box op_xor( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_not \u00b6 fun box op_not() : USize val Returns \u00b6 USize val add \u00b6 fun box add( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val sub \u00b6 fun box sub( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mul \u00b6 fun box mul( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val div \u00b6 fun box div( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val divrem \u00b6 fun box divrem( y: USize val) : (USize val , USize val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) rem \u00b6 fun box rem( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val neg \u00b6 fun box neg() : USize val Returns \u00b6 USize val eq \u00b6 fun box eq( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val le \u00b6 fun box le( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: USize val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: USize val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : USize val Returns \u00b6 USize val","title":"primitive USize"},{"location":"builtin-USize/#usize","text":"[Source] primitive val USize is UnsignedInteger[USize val] val","title":"USize"},{"location":"builtin-USize/#implements","text":"UnsignedInteger [ USize val] val","title":"Implements"},{"location":"builtin-USize/#constructors","text":"","title":"Constructors"},{"location":"builtin-USize/#create","text":"[Source] new val create( value: USize val) : USize val^","title":"create"},{"location":"builtin-USize/#parameters","text":"value: USize val","title":"Parameters"},{"location":"builtin-USize/#returns","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : USize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-USize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-USize/#returns_1","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#min_value","text":"[Source] new val min_value() : USize val^","title":"min_value"},{"location":"builtin-USize/#returns_2","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#max_value","text":"[Source] new val max_value() : USize val^","title":"max_value"},{"location":"builtin-USize/#returns_3","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-USize/#next_pow2","text":"[Source] fun box next_pow2() : USize val","title":"next_pow2"},{"location":"builtin-USize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-USize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-USize/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bit_reverse","text":"[Source] fun box bit_reverse() : USize val","title":"bit_reverse"},{"location":"builtin-USize/#returns_6","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bswap","text":"[Source] fun box bswap() : USize val","title":"bswap"},{"location":"builtin-USize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-USize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-USize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-USize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-USize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-USize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-USize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-USize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-USize/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-USize/#min","text":"[Source] fun box min( y: USize val) : USize val","title":"min"},{"location":"builtin-USize/#parameters_2","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-USize/#max","text":"[Source] fun box max( y: USize val) : USize val","title":"max"},{"location":"builtin-USize/#parameters_3","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-USize/#addc","text":"[Source] fun box addc( y: USize val) : (USize val , Bool val)","title":"addc"},{"location":"builtin-USize/#parameters_4","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_17","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#subc","text":"[Source] fun box subc( y: USize val) : (USize val , Bool val)","title":"subc"},{"location":"builtin-USize/#parameters_5","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_18","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mulc","text":"[Source] fun box mulc( y: USize val) : (USize val , Bool val)","title":"mulc"},{"location":"builtin-USize/#parameters_6","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_19","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#divc","text":"[Source] fun box divc( y: USize val) : (USize val , Bool val)","title":"divc"},{"location":"builtin-USize/#parameters_7","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_20","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#remc","text":"[Source] fun box remc( y: USize val) : (USize val , Bool val)","title":"remc"},{"location":"builtin-USize/#parameters_8","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_21","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#add_partial","text":"[Source] fun box add_partial( y: USize val) : USize val ?","title":"add_partial"},{"location":"builtin-USize/#parameters_9","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_22","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#sub_partial","text":"[Source] fun box sub_partial( y: USize val) : USize val ?","title":"sub_partial"},{"location":"builtin-USize/#parameters_10","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_23","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mul_partial","text":"[Source] fun box mul_partial( y: USize val) : USize val ?","title":"mul_partial"},{"location":"builtin-USize/#parameters_11","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_24","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#div_partial","text":"[Source] fun box div_partial( y: USize val) : USize val ?","title":"div_partial"},{"location":"builtin-USize/#parameters_12","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_25","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#rem_partial","text":"[Source] fun box rem_partial( y: USize val) : USize val ?","title":"rem_partial"},{"location":"builtin-USize/#parameters_13","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_26","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#divrem_partial","text":"[Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ?","title":"divrem_partial"},{"location":"builtin-USize/#parameters_14","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_27","text":"( USize val , USize val) ?","title":"Returns"},{"location":"builtin-USize/#shl","text":"fun box shl( y: USize val) : USize val","title":"shl"},{"location":"builtin-USize/#parameters_15","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_28","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr","text":"fun box shr( y: USize val) : USize val","title":"shr"},{"location":"builtin-USize/#parameters_16","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-USize/#fld","text":"fun box fld( y: USize val) : USize val","title":"fld"},{"location":"builtin-USize/#parameters_17","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_30","text":"USize val","title":"Returns"},{"location":"builtin-USize/#fldc","text":"fun box fldc( y: USize val) : (USize val , Bool val)","title":"fldc"},{"location":"builtin-USize/#parameters_18","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_31","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#fld_partial","text":"fun box fld_partial( y: USize val) : USize val ?","title":"fld_partial"},{"location":"builtin-USize/#parameters_19","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_32","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#fld_unsafe","text":"fun box fld_unsafe( y: USize val) : USize val","title":"fld_unsafe"},{"location":"builtin-USize/#parameters_20","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_33","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mod","text":"fun box mod( y: USize val) : USize val","title":"mod"},{"location":"builtin-USize/#parameters_21","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_34","text":"USize val","title":"Returns"},{"location":"builtin-USize/#modc","text":"fun box modc( y: USize val) : (USize val , Bool val)","title":"modc"},{"location":"builtin-USize/#parameters_22","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_35","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mod_partial","text":"fun box mod_partial( y: USize val) : USize val ?","title":"mod_partial"},{"location":"builtin-USize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_36","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mod_unsafe","text":"fun box mod_unsafe( y: USize val) : USize val","title":"mod_unsafe"},{"location":"builtin-USize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : USize val","title":"shl_unsafe"},{"location":"builtin-USize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_38","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : USize val","title":"shr_unsafe"},{"location":"builtin-USize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_39","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotl","text":"fun box rotl( y: USize val) : USize val","title":"rotl"},{"location":"builtin-USize/#parameters_27","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_40","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotr","text":"fun box rotr( y: USize val) : USize val","title":"rotr"},{"location":"builtin-USize/#parameters_28","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_41","text":"USize val","title":"Returns"},{"location":"builtin-USize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-USize/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-USize/#add_unsafe","text":"fun box add_unsafe( y: USize val) : USize val","title":"add_unsafe"},{"location":"builtin-USize/#parameters_29","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_43","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub_unsafe","text":"fun box sub_unsafe( y: USize val) : USize val","title":"sub_unsafe"},{"location":"builtin-USize/#parameters_30","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_44","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul_unsafe","text":"fun box mul_unsafe( y: USize val) : USize val","title":"mul_unsafe"},{"location":"builtin-USize/#parameters_31","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_45","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div_unsafe","text":"fun box div_unsafe( y: USize val) : USize val","title":"div_unsafe"},{"location":"builtin-USize/#parameters_32","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_46","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem_unsafe","text":"fun box divrem_unsafe( y: USize val) : (USize val , USize val)","title":"divrem_unsafe"},{"location":"builtin-USize/#parameters_33","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_47","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem_unsafe","text":"fun box rem_unsafe( y: USize val) : USize val","title":"rem_unsafe"},{"location":"builtin-USize/#parameters_34","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_48","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg_unsafe","text":"fun box neg_unsafe() : USize val","title":"neg_unsafe"},{"location":"builtin-USize/#returns_49","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_and","text":"fun box op_and( y: USize val) : USize val","title":"op_and"},{"location":"builtin-USize/#parameters_35","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_50","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_or","text":"fun box op_or( y: USize val) : USize val","title":"op_or"},{"location":"builtin-USize/#parameters_36","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_xor","text":"fun box op_xor( y: USize val) : USize val","title":"op_xor"},{"location":"builtin-USize/#parameters_37","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_52","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_not","text":"fun box op_not() : USize val","title":"op_not"},{"location":"builtin-USize/#returns_53","text":"USize val","title":"Returns"},{"location":"builtin-USize/#add","text":"fun box add( y: USize val) : USize val","title":"add"},{"location":"builtin-USize/#parameters_38","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_54","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub","text":"fun box sub( y: USize val) : USize val","title":"sub"},{"location":"builtin-USize/#parameters_39","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_55","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul","text":"fun box mul( y: USize val) : USize val","title":"mul"},{"location":"builtin-USize/#parameters_40","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div","text":"fun box div( y: USize val) : USize val","title":"div"},{"location":"builtin-USize/#parameters_41","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_57","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem","text":"fun box divrem( y: USize val) : (USize val , USize val)","title":"divrem"},{"location":"builtin-USize/#parameters_42","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_58","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem","text":"fun box rem( y: USize val) : USize val","title":"rem"},{"location":"builtin-USize/#parameters_43","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg","text":"fun box neg() : USize val","title":"neg"},{"location":"builtin-USize/#returns_60","text":"USize val","title":"Returns"},{"location":"builtin-USize/#eq","text":"fun box eq( y: USize val) : Bool val","title":"eq"},{"location":"builtin-USize/#parameters_44","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ne","text":"fun box ne( y: USize val) : Bool val","title":"ne"},{"location":"builtin-USize/#parameters_45","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#lt","text":"fun box lt( y: USize val) : Bool val","title":"lt"},{"location":"builtin-USize/#parameters_46","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#le","text":"fun box le( y: USize val) : Bool val","title":"le"},{"location":"builtin-USize/#parameters_47","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ge","text":"fun box ge( y: USize val) : Bool val","title":"ge"},{"location":"builtin-USize/#parameters_48","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#gt","text":"fun box gt( y: USize val) : Bool val","title":"gt"},{"location":"builtin-USize/#parameters_49","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-USize/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-USize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-USize/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-USize/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-USize/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-USize/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-USize/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-USize/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-USize/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-USize/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-USize/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-USize/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-USize/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-USize/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-USize/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-USize/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_1","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-USize/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-USize/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-USize/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-USize/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-USize/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-USize/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-USize/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-USize/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-USize/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-USize/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-USize/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-USize/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-USize/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-USize/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-USize/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-USize/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-USize/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-USize/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-USize/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#compare","text":"fun box compare( that: USize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-USize/#parameters_50","text":"that: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-USize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-USize/#_value","text":"fun box _value() : USize val","title":"_value"},{"location":"builtin-USize/#returns_102","text":"USize val","title":"Returns"},{"location":"builtin-Unsigned/","text":"Unsigned \u00b6 [Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For \u00b6 ( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Unsigned"},{"location":"builtin-Unsigned/#unsigned","text":"[Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Unsigned"},{"location":"builtin-Unsigned/#type-alias-for","text":"( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-UnsignedInteger/","text":"UnsignedInteger[A: UnsignedInteger [A] val] \u00b6 [Source] trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] val Implements \u00b6 Integer [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : A Returns \u00b6 A shl \u00b6 [Source] fun box shl( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shr \u00b6 [Source] fun box shr( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fldc \u00b6 [Source] fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fld_partial \u00b6 [Source] fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A modc \u00b6 [Source] fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mod_partial \u00b6 [Source] fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shl_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shr_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A rotl \u00b6 [Source] fun box rotl( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A rotr \u00b6 [Source] fun box rotr( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A popcount \u00b6 [Source] fun box popcount() : A Returns \u00b6 A clz \u00b6 [Source] fun box clz() : A Returns \u00b6 A ctz \u00b6 [Source] fun box ctz() : A Returns \u00b6 A clz_unsafe \u00b6 [Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A Returns \u00b6 A ctz_unsafe \u00b6 [Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A Returns \u00b6 A bitwidth \u00b6 [Source] fun box bitwidth() : A Returns \u00b6 A bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 [Source] fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? neg_unsafe \u00b6 [Source] fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait UnsignedInteger"},{"location":"builtin-UnsignedInteger/#unsignedintegera-unsignedintegera-val","text":"[Source] trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] val","title":"UnsignedInteger[A: UnsignedInteger[A] val]"},{"location":"builtin-UnsignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-UnsignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-UnsignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-UnsignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-UnsignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-UnsignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-UnsignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-UnsignedInteger/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-UnsignedInteger/#returns_4","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shl","text":"[Source] fun box shl( y: A) : A","title":"shl"},{"location":"builtin-UnsignedInteger/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shr","text":"[Source] fun box shr( y: A) : A","title":"shr"},{"location":"builtin-UnsignedInteger/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-UnsignedInteger/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#fldc","text":"[Source] fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-UnsignedInteger/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_8","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld_partial","text":"[Source] fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-UnsignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_9","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_10","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-UnsignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_11","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#modc","text":"[Source] fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-UnsignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_12","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod_partial","text":"[Source] fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-UnsignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_14","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A","title":"shl_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_15","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A","title":"shr_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_16","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#rotl","text":"[Source] fun box rotl( y: A) : A","title":"rotl"},{"location":"builtin-UnsignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#rotr","text":"[Source] fun box rotr( y: A) : A","title":"rotr"},{"location":"builtin-UnsignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#popcount","text":"[Source] fun box popcount() : A","title":"popcount"},{"location":"builtin-UnsignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#clz","text":"[Source] fun box clz() : A","title":"clz"},{"location":"builtin-UnsignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#ctz","text":"[Source] fun box ctz() : A","title":"ctz"},{"location":"builtin-UnsignedInteger/#returns_21","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#clz_unsafe","text":"[Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A","title":"clz_unsafe"},{"location":"builtin-UnsignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#ctz_unsafe","text":"[Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A","title":"ctz_unsafe"},{"location":"builtin-UnsignedInteger/#returns_23","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : A","title":"bitwidth"},{"location":"builtin-UnsignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-UnsignedInteger/#returns_25","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-UnsignedInteger/#returns_26","text":"String iso^","title":"Returns"},{"location":"builtin-UnsignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_27","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_28","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_29","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_30","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_31","text":"(A , A)","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_32","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-UnsignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_33","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-UnsignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_34","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-UnsignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_35","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-UnsignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_36","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-UnsignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_37","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-UnsignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_38","text":"(A , A) ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-UnsignedInteger/#returns_39","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-UnsignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_40","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-UnsignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_41","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-UnsignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_42","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-UnsignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_43","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-UnsignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_44","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-UnsignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-UnsignedInteger/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-UnsignedInteger/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-UnsignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-UnsignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-UnsignedInteger/#returns_50","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-UnsignedInteger/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_51","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-UnsignedInteger/#parameters_37","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_52","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-UnsignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_53","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-UnsignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-UnsignedInteger/#parameters_40","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_55","text":"(A , A)","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-UnsignedInteger/#parameters_41","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_56","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-UnsignedInteger/#returns_57","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-UnsignedInteger/#parameters_42","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-UnsignedInteger/#parameters_43","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-UnsignedInteger/#parameters_44","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-UnsignedInteger/#parameters_45","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-UnsignedInteger/#parameters_46","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-UnsignedInteger/#parameters_47","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-UnsignedInteger/#parameters_48","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_64","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-UnsignedInteger/#parameters_49","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_65","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-UnsignedInteger/#returns_66","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-UnsignedInteger/#returns_67","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-UnsignedInteger/#returns_68","text":"I8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-UnsignedInteger/#returns_69","text":"I16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-UnsignedInteger/#returns_70","text":"I32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-UnsignedInteger/#returns_71","text":"I64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-UnsignedInteger/#returns_72","text":"I128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-UnsignedInteger/#returns_73","text":"ILong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-UnsignedInteger/#returns_74","text":"ISize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-UnsignedInteger/#returns_75","text":"U8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-UnsignedInteger/#returns_76","text":"U16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-UnsignedInteger/#returns_77","text":"U32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-UnsignedInteger/#returns_78","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-UnsignedInteger/#returns_79","text":"U128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-UnsignedInteger/#returns_80","text":"ULong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-UnsignedInteger/#returns_81","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-UnsignedInteger/#returns_82","text":"F32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-UnsignedInteger/#returns_83","text":"F64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-UnsignedInteger/#returns_84","text":"I8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-UnsignedInteger/#returns_85","text":"I16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_86","text":"I32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_87","text":"I64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-UnsignedInteger/#returns_88","text":"I128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-UnsignedInteger/#returns_89","text":"ILong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-UnsignedInteger/#returns_90","text":"ISize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-UnsignedInteger/#returns_91","text":"U8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-UnsignedInteger/#returns_92","text":"U16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_93","text":"U32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-UnsignedInteger/#returns_95","text":"U128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-UnsignedInteger/#returns_96","text":"ULong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-UnsignedInteger/#returns_97","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_98","text":"F32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_99","text":"F64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-UnsignedInteger/#parameters_50","text":"that: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_100","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-UnsignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-UnsignedInteger/#returns_101","text":"A","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/","text":"_ArithmeticConvertible \u00b6 [Source] trait val _ArithmeticConvertible Public Functions \u00b6 i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val","title":"trait _ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#_arithmeticconvertible","text":"[Source] trait val _ArithmeticConvertible","title":"_ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ArithmeticConvertible/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_ArithmeticConvertible/#returns","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_ArithmeticConvertible/#returns_1","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_ArithmeticConvertible/#returns_2","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_ArithmeticConvertible/#returns_3","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_ArithmeticConvertible/#returns_4","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_ArithmeticConvertible/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_ArithmeticConvertible/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_ArithmeticConvertible/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_ArithmeticConvertible/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_ArithmeticConvertible/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_ArithmeticConvertible/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_ArithmeticConvertible/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_ArithmeticConvertible/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_ArithmeticConvertible/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_ArithmeticConvertible/#returns_14","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_ArithmeticConvertible/#returns_15","text":"F64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_16","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_18","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_19","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_20","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_21","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_22","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_23","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_24","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_25","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_26","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_28","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-_PartialArithmetic/","text":"_PartialArithmetic \u00b6 [Source] trait ref _PartialArithmetic Public Functions \u00b6 add_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? sub_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mul_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ?","title":"trait _PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#_partialarithmetic","text":"[Source] trait ref _PartialArithmetic","title":"_PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_PartialArithmetic/#add_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#sub_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#mul_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_SignedArithmetic/","text":"_SignedArithmetic \u00b6 [Source] primitive val _SignedArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedArithmetic val^ Returns \u00b6 _SignedArithmetic val^ Public Functions \u00b6 fld[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T mod[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T eq \u00b6 [Source] fun box eq( that: _SignedArithmetic val) : Bool val Parameters \u00b6 that: _SignedArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedArithmetic val) : Bool val Parameters \u00b6 that: _SignedArithmetic val Returns \u00b6 Bool val","title":"primitive _SignedArithmetic"},{"location":"builtin-_SignedArithmetic/#_signedarithmetic","text":"[Source] primitive val _SignedArithmetic","title":"_SignedArithmetic"},{"location":"builtin-_SignedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedArithmetic/#create","text":"[Source] new val create() : _SignedArithmetic val^","title":"create"},{"location":"builtin-_SignedArithmetic/#returns","text":"_SignedArithmetic val^","title":"Returns"},{"location":"builtin-_SignedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedArithmetic/#fldt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box fld[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"fld[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_1","text":"T","title":"Returns"},{"location":"builtin-_SignedArithmetic/#modt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box mod[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"mod[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_2","text":"T","title":"Returns"},{"location":"builtin-_SignedArithmetic/#eq","text":"[Source] fun box eq( that: _SignedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedArithmetic/#parameters_2","text":"that: _SignedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedArithmetic/#ne","text":"[Source] fun box ne( that: _SignedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedArithmetic/#parameters_3","text":"that: _SignedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/","text":"_SignedCheckedArithmetic \u00b6 [Source] primitive val _SignedCheckedArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedCheckedArithmetic val^ Returns \u00b6 _SignedCheckedArithmetic val^ Public Functions \u00b6 div_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box div_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) rem_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box rem_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) fld_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) mod_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) eq \u00b6 [Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _SignedCheckedArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _SignedCheckedArithmetic val Returns \u00b6 Bool val Private Functions \u00b6 _mul_checked[U: UnsignedInteger [U] val, T: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) & SignedInteger [T, U] val)] \u00b6 [Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) & SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val)","title":"primitive _SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#_signedcheckedarithmetic","text":"[Source] primitive val _SignedCheckedArithmetic","title":"_SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedCheckedArithmetic/#create","text":"[Source] new val create() : _SignedCheckedArithmetic val^","title":"create"},{"location":"builtin-_SignedCheckedArithmetic/#returns","text":"_SignedCheckedArithmetic val^","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedCheckedArithmetic/#div_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box div_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#rem_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box rem_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#fld_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box fld_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"fld_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_3","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#mod_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box mod_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"mod_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_4","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#eq","text":"[Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_4","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#ne","text":"[Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_5","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_SignedCheckedArithmetic/#_mul_checkedu-unsignedintegeru-val-t-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-signedintegert-u-val","text":"[Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) & SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val)","title":"_mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) &amp; SignedInteger[T, U] val)]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_7","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/","text":"_SignedPartialArithmetic \u00b6 [Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref Implements \u00b6 _PartialArithmetic ref Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedPartialArithmetic val^ Returns \u00b6 _SignedPartialArithmetic val^ Public Functions \u00b6 div_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box div_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? rem_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box rem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? divrem_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box divrem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , T) ? Parameters \u00b6 x: T y: T Returns \u00b6 (T , T) ? fld_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mod_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? neg_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box neg_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T) : T ? Parameters \u00b6 x: T Returns \u00b6 T ? add_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? sub_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mul_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? eq \u00b6 [Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _SignedPartialArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _SignedPartialArithmetic val Returns \u00b6 Bool val","title":"primitive _SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#_signedpartialarithmetic","text":"[Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref","title":"_SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_SignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedPartialArithmetic/#create","text":"[Source] new val create() : _SignedPartialArithmetic val^","title":"create"},{"location":"builtin-_SignedPartialArithmetic/#returns","text":"_SignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedPartialArithmetic/#div_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box div_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"div_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#rem_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box rem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"rem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#divrem_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box divrem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_3","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#fld_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box fld_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"fld_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#mod_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box mod_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"mod_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_5","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#neg_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box neg_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T) : T ?","title":"neg_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_5","text":"x: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#add_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#sub_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#mul_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_8","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_9","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedPartialArithmetic/#parameters_9","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedPartialArithmetic/#parameters_10","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/","text":"_SignedUnsafeArithmetic \u00b6 [Source] primitive val _SignedUnsafeArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedUnsafeArithmetic val^ Returns \u00b6 _SignedUnsafeArithmetic val^ Public Functions \u00b6 fld_unsafe[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T mod_unsafe[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T eq \u00b6 [Source] fun box eq( that: _SignedUnsafeArithmetic val) : Bool val Parameters \u00b6 that: _SignedUnsafeArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedUnsafeArithmetic val) : Bool val Parameters \u00b6 that: _SignedUnsafeArithmetic val Returns \u00b6 Bool val","title":"primitive _SignedUnsafeArithmetic"},{"location":"builtin-_SignedUnsafeArithmetic/#_signedunsafearithmetic","text":"[Source] primitive val _SignedUnsafeArithmetic","title":"_SignedUnsafeArithmetic"},{"location":"builtin-_SignedUnsafeArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedUnsafeArithmetic/#create","text":"[Source] new val create() : _SignedUnsafeArithmetic val^","title":"create"},{"location":"builtin-_SignedUnsafeArithmetic/#returns","text":"_SignedUnsafeArithmetic val^","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedUnsafeArithmetic/#fld_unsafet-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box fld_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"fld_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_1","text":"T","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#mod_unsafet-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","text":"[Source] fun box mod_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"mod_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_2","text":"T","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#eq","text":"[Source] fun box eq( that: _SignedUnsafeArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_2","text":"that: _SignedUnsafeArithmetic val","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#ne","text":"[Source] fun box ne( that: _SignedUnsafeArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_3","text":"that: _SignedUnsafeArithmetic val","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/","text":"_ToString \u00b6 [Source] Worker type providing simple to string conversions for numbers. primitive val _ToString Constructors \u00b6 create \u00b6 [Source] new val create() : _ToString val^ Returns \u00b6 _ToString val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _ToString val) : Bool val Parameters \u00b6 that: _ToString val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ToString val) : Bool val Parameters \u00b6 that: _ToString val Returns \u00b6 Bool val Private Functions \u00b6 _u64 \u00b6 [Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^ Parameters \u00b6 x: U64 val neg: Bool val Returns \u00b6 String iso^ _u128 \u00b6 [Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^ Parameters \u00b6 x: U128 val neg: Bool val Returns \u00b6 String iso^ _f64 \u00b6 [Source] fun box _f64( x: F64 val) : String iso^ Parameters \u00b6 x: F64 val Returns \u00b6 String iso^","title":"primitive _ToString"},{"location":"builtin-_ToString/#_tostring","text":"[Source] Worker type providing simple to string conversions for numbers. primitive val _ToString","title":"_ToString"},{"location":"builtin-_ToString/#constructors","text":"","title":"Constructors"},{"location":"builtin-_ToString/#create","text":"[Source] new val create() : _ToString val^","title":"create"},{"location":"builtin-_ToString/#returns","text":"_ToString val^","title":"Returns"},{"location":"builtin-_ToString/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ToString/#eq","text":"[Source] fun box eq( that: _ToString val) : Bool val","title":"eq"},{"location":"builtin-_ToString/#parameters","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#ne","text":"[Source] fun box ne( that: _ToString val) : Bool val","title":"ne"},{"location":"builtin-_ToString/#parameters_1","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_ToString/#_u64","text":"[Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^","title":"_u64"},{"location":"builtin-_ToString/#parameters_2","text":"x: U64 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_3","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_u128","text":"[Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^","title":"_u128"},{"location":"builtin-_ToString/#parameters_3","text":"x: U128 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_4","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_f64","text":"[Source] fun box _f64( x: F64 val) : String iso^","title":"_f64"},{"location":"builtin-_ToString/#parameters_4","text":"x: F64 val","title":"Parameters"},{"location":"builtin-_ToString/#returns_5","text":"String iso^","title":"Returns"},{"location":"builtin-_UTF32Encoder/","text":"_UTF32Encoder \u00b6 [Source] primitive val _UTF32Encoder Constructors \u00b6 create \u00b6 [Source] new val create() : _UTF32Encoder val^ Returns \u00b6 _UTF32Encoder val^ Public Functions \u00b6 encode \u00b6 [Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val) Parameters \u00b6 value: U32 val Returns \u00b6 ( USize val , U8 val , U8 val , U8 val , U8 val) eq \u00b6 [Source] fun box eq( that: _UTF32Encoder val) : Bool val Parameters \u00b6 that: _UTF32Encoder val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _UTF32Encoder val) : Bool val Parameters \u00b6 that: _UTF32Encoder val Returns \u00b6 Bool val","title":"primitive _UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#_utf32encoder","text":"[Source] primitive val _UTF32Encoder","title":"_UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UTF32Encoder/#create","text":"[Source] new val create() : _UTF32Encoder val^","title":"create"},{"location":"builtin-_UTF32Encoder/#returns","text":"_UTF32Encoder val^","title":"Returns"},{"location":"builtin-_UTF32Encoder/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UTF32Encoder/#encode","text":"[Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val)","title":"encode"},{"location":"builtin-_UTF32Encoder/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_1","text":"( USize val , U8 val , U8 val , U8 val , U8 val)","title":"Returns"},{"location":"builtin-_UTF32Encoder/#eq","text":"[Source] fun box eq( that: _UTF32Encoder val) : Bool val","title":"eq"},{"location":"builtin-_UTF32Encoder/#parameters_1","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_UTF32Encoder/#ne","text":"[Source] fun box ne( that: _UTF32Encoder val) : Bool val","title":"ne"},{"location":"builtin-_UTF32Encoder/#parameters_2","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/","text":"_UnsignedCheckedArithmetic \u00b6 [Source] primitive val _UnsignedCheckedArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _UnsignedCheckedArithmetic val^ Returns \u00b6 _UnsignedCheckedArithmetic val^ Public Functions \u00b6 div_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box div_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) rem_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box rem_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) fld_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box fld_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) mod_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box mod_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) eq \u00b6 [Source] fun box eq( that: _UnsignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedCheckedArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _UnsignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedCheckedArithmetic val Returns \u00b6 Bool val","title":"primitive _UnsignedCheckedArithmetic"},{"location":"builtin-_UnsignedCheckedArithmetic/#_unsignedcheckedarithmetic","text":"[Source] primitive val _UnsignedCheckedArithmetic","title":"_UnsignedCheckedArithmetic"},{"location":"builtin-_UnsignedCheckedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedCheckedArithmetic/#create","text":"[Source] new val create() : _UnsignedCheckedArithmetic val^","title":"create"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns","text":"_UnsignedCheckedArithmetic val^","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedCheckedArithmetic/#div_checkedt-unsignedintegert-val","text":"[Source] fun box div_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#rem_checkedt-unsignedintegert-val","text":"[Source] fun box rem_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#fld_checkedt-unsignedintegert-val","text":"[Source] fun box fld_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"fld_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_3","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#mod_checkedt-unsignedintegert-val","text":"[Source] fun box mod_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"mod_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_4","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#eq","text":"[Source] fun box eq( that: _UnsignedCheckedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_4","text":"that: _UnsignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#ne","text":"[Source] fun box ne( that: _UnsignedCheckedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_5","text":"that: _UnsignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/","text":"_UnsignedPartialArithmetic \u00b6 [Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref Implements \u00b6 _PartialArithmetic ref Constructors \u00b6 create \u00b6 [Source] new val create() : _UnsignedPartialArithmetic val^ Returns \u00b6 _UnsignedPartialArithmetic val^ Public Functions \u00b6 div_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box div_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? rem_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box rem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? divrem_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box divrem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : (T , T) ? Parameters \u00b6 x: T y: T Returns \u00b6 (T , T) ? fld_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box fld_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mod_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box mod_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? add_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? sub_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mul_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? eq \u00b6 [Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedPartialArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedPartialArithmetic val Returns \u00b6 Bool val","title":"primitive _UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#_unsignedpartialarithmetic","text":"[Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref","title":"_UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_UnsignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedPartialArithmetic/#create","text":"[Source] new val create() : _UnsignedPartialArithmetic val^","title":"create"},{"location":"builtin-_UnsignedPartialArithmetic/#returns","text":"_UnsignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedPartialArithmetic/#div_partialt-unsignedintegert-val","text":"[Source] fun box div_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"div_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#rem_partialt-unsignedintegert-val","text":"[Source] fun box rem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"rem_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#divrem_partialt-unsignedintegert-val","text":"[Source] fun box divrem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_3","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#fld_partialt-unsignedintegert-val","text":"[Source] fun box fld_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"fld_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#mod_partialt-unsignedintegert-val","text":"[Source] fun box mod_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"mod_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_5","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#add_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_5","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#sub_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#mul_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","text":"[Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_8","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_9","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"pony-libxml2--index/","text":"pony-libxml2 \u00b6 pony-libxml2 is a pony binding to the C-based libxml2 library. Its coverage and safety depends uon the API you choose to use. Status \u00b6 The module currently has two APIs exposed: A pony-based API (Xml2*). Designed to be safe from crashes. (If it crashes, it's a bug) < 10% of the most common API calls. (But still enough to get most work done) Pony ~~will~~endeavors to manage the memory on your behalf. Aims to be thread-safe like the C library. Both API and test suite is being actively extended. A direct 1:1 mapping with the C API (LibXML2). Maps directly to C-FFI (If it crashes, it's a feature) 95%+ coverage of the API. You're responsible for memory management. Changes to this API are extremely rare. Which should I use? \u00b6 If you can get all your work done in the pony-API I recommend using that. If you're missing functions / functionality please open an issue and I'll try and get it added (or submit a PR!). Right now it covers all my use-cases but I would like to extend it and knowing which functions other people want to use would be really useful for me. If you're stuck, you can fall-back to the C API from the Pony API by using the C Pointer stored in the ptr' field of the Pony Object. For example, if you need to call an as-yet unimplemented function which takes an xmlDocPtr as an argument, you can extract it like this: let xmldoc: Xml2Doc = Xml2Doc.parseFile(\"somefile.xml\")? let xmldocptr: NullablePointer[Xmldoc] = xmldoc.ptr' If you need to go from the C API back to the Pony API, if implemented you can reverse it as follows: let s: NullablePointer[Xmlnode] = LibXML2.(some API call) let xmlnode: Xml2node = Xml2node.fromPTR(s) How do I start? \u00b6 Take a look at the _tests directory at all of the pony files. Those tests provide examples. Documentation will follow in the appropriate section. Public Types \u00b6 class Xml2xpathcontext class Xml2pathobject class Xml2textreader class Xml2parserinputbuffer class Xml2node class Xml2Doc class Xml2attr primitive FUNCTIONPOINTER struct IoFile struct VaListTag struct Xmlparserinputbuffer struct Xmloutputbuffer struct Xmlbuffer struct Xmlbuf struct Xmlnotation struct Xmlenumeration struct Xmlattribute struct Xmlelementcontent struct Xmlelement struct Xmlns struct Xmldtd struct Xmlattr struct Xmlid struct Xmlref struct Xmlnode struct Xmldoc struct Xmldomwrapctxt struct Xmlparserinput struct Xmlparserctxt struct Xmlsaxlocator struct Xmlsaxhandler struct Xmlparsernodeinfo struct Xmlparsernodeinfoseq struct Xmlsaxhandlerv1 struct Xmlentity struct Xmlregexp struct Xmlregexecctxt struct Xmldict struct Xmlmutex struct Xmlrmutex struct Xmlhashtable struct Xmlerror struct Xmllink struct Xmllist struct Xmlautomata struct Xmlautomatastate struct Xmlvalidstate struct Xmlvalidctxt struct Xmlcharencodinghandler struct Xlinkhandler struct Xmlglobalstate struct Xmlcatalog struct Xmlchsrange struct Xmlchlrange struct Xmlchrangegroup struct Xmlxpathcontext struct Xmlxpathparsercontext struct Xmlnodeset struct Xmlxpathobject struct Xmlxpathtype struct Xmlxpathvariable struct Xmlxpathfunct struct Xmlxpathaxis struct Xmlxpathcompexpr struct Xmlshellctxt struct Htmlelemdesc struct Htmlentitydesc struct Xmlpattern struct Xmlstreamctxt struct Xmlrelaxng struct Xmlrelaxngparserctxt struct Xmlrelaxngvalidctxt struct Xmlschemaval struct Xmlschematype struct Xmlschemafacet struct Xmlschemaannot struct Xmlschemaattribute struct Xmlschemaattributelink struct Xmlschemawildcardns struct Xmlschemawildcard struct Xmlschemaattributegroup struct Xmlschematypelink struct Xmlschemafacetlink struct Xmlschemaelement struct Xmlschemanotation struct Xmlschema struct Xmlschematron struct Xmlschematronparserctxt struct Xmlschematronvalidctxt struct Xmluri struct Xmlxincludectxt struct Xmlmodule struct Xmlschemaparserctxt struct Xmlschemavalidctxt struct Xmlschemasaxplug struct Xmltextreader struct Xmlsavectxt struct Xmltextwriter struct Xmllocationset primitive LibXML2","title":"Package"},{"location":"pony-libxml2--index/#pony-libxml2","text":"pony-libxml2 is a pony binding to the C-based libxml2 library. Its coverage and safety depends uon the API you choose to use.","title":"pony-libxml2"},{"location":"pony-libxml2--index/#status","text":"The module currently has two APIs exposed: A pony-based API (Xml2*). Designed to be safe from crashes. (If it crashes, it's a bug) < 10% of the most common API calls. (But still enough to get most work done) Pony ~~will~~endeavors to manage the memory on your behalf. Aims to be thread-safe like the C library. Both API and test suite is being actively extended. A direct 1:1 mapping with the C API (LibXML2). Maps directly to C-FFI (If it crashes, it's a feature) 95%+ coverage of the API. You're responsible for memory management. Changes to this API are extremely rare.","title":"Status"},{"location":"pony-libxml2--index/#which-should-i-use","text":"If you can get all your work done in the pony-API I recommend using that. If you're missing functions / functionality please open an issue and I'll try and get it added (or submit a PR!). Right now it covers all my use-cases but I would like to extend it and knowing which functions other people want to use would be really useful for me. If you're stuck, you can fall-back to the C API from the Pony API by using the C Pointer stored in the ptr' field of the Pony Object. For example, if you need to call an as-yet unimplemented function which takes an xmlDocPtr as an argument, you can extract it like this: let xmldoc: Xml2Doc = Xml2Doc.parseFile(\"somefile.xml\")? let xmldocptr: NullablePointer[Xmldoc] = xmldoc.ptr' If you need to go from the C API back to the Pony API, if implemented you can reverse it as follows: let s: NullablePointer[Xmlnode] = LibXML2.(some API call) let xmlnode: Xml2node = Xml2node.fromPTR(s)","title":"Which should I use?"},{"location":"pony-libxml2--index/#how-do-i-start","text":"Take a look at the _tests directory at all of the pony files. Those tests provide examples. Documentation will follow in the appropriate section.","title":"How do I start?"},{"location":"pony-libxml2--index/#public-types","text":"class Xml2xpathcontext class Xml2pathobject class Xml2textreader class Xml2parserinputbuffer class Xml2node class Xml2Doc class Xml2attr primitive FUNCTIONPOINTER struct IoFile struct VaListTag struct Xmlparserinputbuffer struct Xmloutputbuffer struct Xmlbuffer struct Xmlbuf struct Xmlnotation struct Xmlenumeration struct Xmlattribute struct Xmlelementcontent struct Xmlelement struct Xmlns struct Xmldtd struct Xmlattr struct Xmlid struct Xmlref struct Xmlnode struct Xmldoc struct Xmldomwrapctxt struct Xmlparserinput struct Xmlparserctxt struct Xmlsaxlocator struct Xmlsaxhandler struct Xmlparsernodeinfo struct Xmlparsernodeinfoseq struct Xmlsaxhandlerv1 struct Xmlentity struct Xmlregexp struct Xmlregexecctxt struct Xmldict struct Xmlmutex struct Xmlrmutex struct Xmlhashtable struct Xmlerror struct Xmllink struct Xmllist struct Xmlautomata struct Xmlautomatastate struct Xmlvalidstate struct Xmlvalidctxt struct Xmlcharencodinghandler struct Xlinkhandler struct Xmlglobalstate struct Xmlcatalog struct Xmlchsrange struct Xmlchlrange struct Xmlchrangegroup struct Xmlxpathcontext struct Xmlxpathparsercontext struct Xmlnodeset struct Xmlxpathobject struct Xmlxpathtype struct Xmlxpathvariable struct Xmlxpathfunct struct Xmlxpathaxis struct Xmlxpathcompexpr struct Xmlshellctxt struct Htmlelemdesc struct Htmlentitydesc struct Xmlpattern struct Xmlstreamctxt struct Xmlrelaxng struct Xmlrelaxngparserctxt struct Xmlrelaxngvalidctxt struct Xmlschemaval struct Xmlschematype struct Xmlschemafacet struct Xmlschemaannot struct Xmlschemaattribute struct Xmlschemaattributelink struct Xmlschemawildcardns struct Xmlschemawildcard struct Xmlschemaattributegroup struct Xmlschematypelink struct Xmlschemafacetlink struct Xmlschemaelement struct Xmlschemanotation struct Xmlschema struct Xmlschematron struct Xmlschematronparserctxt struct Xmlschematronvalidctxt struct Xmluri struct Xmlxincludectxt struct Xmlmodule struct Xmlschemaparserctxt struct Xmlschemavalidctxt struct Xmlschemasaxplug struct Xmltextreader struct Xmlsavectxt struct Xmltextwriter struct Xmllocationset primitive LibXML2","title":"Public Types"},{"location":"pony-libxml2-FUNCTIONPOINTER/","text":"FUNCTIONPOINTER \u00b6 [Source] primitive val FUNCTIONPOINTER Constructors \u00b6 create \u00b6 [Source] new val create() : FUNCTIONPOINTER val^ Returns \u00b6 FUNCTIONPOINTER val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FUNCTIONPOINTER val) : Bool val Parameters \u00b6 that: FUNCTIONPOINTER val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FUNCTIONPOINTER val) : Bool val Parameters \u00b6 that: FUNCTIONPOINTER val Returns \u00b6 Bool val","title":"primitive FUNCTIONPOINTER"},{"location":"pony-libxml2-FUNCTIONPOINTER/#functionpointer","text":"[Source] primitive val FUNCTIONPOINTER","title":"FUNCTIONPOINTER"},{"location":"pony-libxml2-FUNCTIONPOINTER/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-FUNCTIONPOINTER/#create","text":"[Source] new val create() : FUNCTIONPOINTER val^","title":"create"},{"location":"pony-libxml2-FUNCTIONPOINTER/#returns","text":"FUNCTIONPOINTER val^","title":"Returns"},{"location":"pony-libxml2-FUNCTIONPOINTER/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-FUNCTIONPOINTER/#eq","text":"[Source] fun box eq( that: FUNCTIONPOINTER val) : Bool val","title":"eq"},{"location":"pony-libxml2-FUNCTIONPOINTER/#parameters","text":"that: FUNCTIONPOINTER val","title":"Parameters"},{"location":"pony-libxml2-FUNCTIONPOINTER/#returns_1","text":"Bool val","title":"Returns"},{"location":"pony-libxml2-FUNCTIONPOINTER/#ne","text":"[Source] fun box ne( that: FUNCTIONPOINTER val) : Bool val","title":"ne"},{"location":"pony-libxml2-FUNCTIONPOINTER/#parameters_1","text":"that: FUNCTIONPOINTER val","title":"Parameters"},{"location":"pony-libxml2-FUNCTIONPOINTER/#returns_2","text":"Bool val","title":"Returns"},{"location":"pony-libxml2-Htmlelemdesc/","text":"Htmlelemdesc \u00b6 [Source] struct ref Htmlelemdesc Constructors \u00b6 create \u00b6 [Source] new iso create() : Htmlelemdesc iso^ Returns \u00b6 Htmlelemdesc iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var pstartTag: I8 val \u00b6 [Source] var pendTag: I8 val \u00b6 [Source] var psaveEndTag: I8 val \u00b6 [Source] var pempty: I8 val \u00b6 [Source] var pdepr: I8 val \u00b6 [Source] var pdtd: I8 val \u00b6 [Source] var pisinline: I8 val \u00b6 [Source] var pdesc: Pointer [ U8 val] tag \u00b6 [Source] var psubelts: Pointer [ Pointer [ U8 val] tag] ref \u00b6 [Source] var pdefaultsubelt: Pointer [ U8 val] tag \u00b6 [Source] var pattrs_opt: Pointer [ Pointer [ U8 val] tag] ref \u00b6 [Source] var pattrs_depr: Pointer [ Pointer [ U8 val] tag] ref \u00b6 [Source] var pattrs_req: Pointer [ Pointer [ U8 val] tag] ref \u00b6 [Source]","title":"struct Htmlelemdesc"},{"location":"pony-libxml2-Htmlelemdesc/#htmlelemdesc","text":"[Source] struct ref Htmlelemdesc","title":"Htmlelemdesc"},{"location":"pony-libxml2-Htmlelemdesc/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Htmlelemdesc/#create","text":"[Source] new iso create() : Htmlelemdesc iso^","title":"create"},{"location":"pony-libxml2-Htmlelemdesc/#returns","text":"Htmlelemdesc iso^","title":"Returns"},{"location":"pony-libxml2-Htmlelemdesc/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Htmlelemdesc/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Htmlelemdesc/#var-pstarttag-i8-val","text":"[Source]","title":"var pstartTag: I8 val"},{"location":"pony-libxml2-Htmlelemdesc/#var-pendtag-i8-val","text":"[Source]","title":"var pendTag: I8 val"},{"location":"pony-libxml2-Htmlelemdesc/#var-psaveendtag-i8-val","text":"[Source]","title":"var psaveEndTag: I8 val"},{"location":"pony-libxml2-Htmlelemdesc/#var-pempty-i8-val","text":"[Source]","title":"var pempty: I8 val"},{"location":"pony-libxml2-Htmlelemdesc/#var-pdepr-i8-val","text":"[Source]","title":"var pdepr: I8 val"},{"location":"pony-libxml2-Htmlelemdesc/#var-pdtd-i8-val","text":"[Source]","title":"var pdtd: I8 val"},{"location":"pony-libxml2-Htmlelemdesc/#var-pisinline-i8-val","text":"[Source]","title":"var pisinline: I8 val"},{"location":"pony-libxml2-Htmlelemdesc/#var-pdesc-pointeru8-val-tag","text":"[Source]","title":"var pdesc: Pointer[U8 val] tag"},{"location":"pony-libxml2-Htmlelemdesc/#var-psubelts-pointerpointeru8-val-tag-ref","text":"[Source]","title":"var psubelts: Pointer[Pointer[U8 val] tag] ref"},{"location":"pony-libxml2-Htmlelemdesc/#var-pdefaultsubelt-pointeru8-val-tag","text":"[Source]","title":"var pdefaultsubelt: Pointer[U8 val] tag"},{"location":"pony-libxml2-Htmlelemdesc/#var-pattrs_opt-pointerpointeru8-val-tag-ref","text":"[Source]","title":"var pattrs_opt: Pointer[Pointer[U8 val] tag] ref"},{"location":"pony-libxml2-Htmlelemdesc/#var-pattrs_depr-pointerpointeru8-val-tag-ref","text":"[Source]","title":"var pattrs_depr: Pointer[Pointer[U8 val] tag] ref"},{"location":"pony-libxml2-Htmlelemdesc/#var-pattrs_req-pointerpointeru8-val-tag-ref","text":"[Source]","title":"var pattrs_req: Pointer[Pointer[U8 val] tag] ref"},{"location":"pony-libxml2-Htmlentitydesc/","text":"Htmlentitydesc \u00b6 [Source] struct ref Htmlentitydesc Constructors \u00b6 create \u00b6 [Source] new iso create() : Htmlentitydesc iso^ Returns \u00b6 Htmlentitydesc iso^ Public fields \u00b6 var pvalue: U32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pdesc: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Htmlentitydesc"},{"location":"pony-libxml2-Htmlentitydesc/#htmlentitydesc","text":"[Source] struct ref Htmlentitydesc","title":"Htmlentitydesc"},{"location":"pony-libxml2-Htmlentitydesc/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Htmlentitydesc/#create","text":"[Source] new iso create() : Htmlentitydesc iso^","title":"create"},{"location":"pony-libxml2-Htmlentitydesc/#returns","text":"Htmlentitydesc iso^","title":"Returns"},{"location":"pony-libxml2-Htmlentitydesc/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Htmlentitydesc/#var-pvalue-u32-val","text":"[Source]","title":"var pvalue: U32 val"},{"location":"pony-libxml2-Htmlentitydesc/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Htmlentitydesc/#var-pdesc-pointeru8-val-tag","text":"[Source]","title":"var pdesc: Pointer[U8 val] tag"},{"location":"pony-libxml2-IoFile/","text":"IoFile \u00b6 [Source] struct ref IoFile Constructors \u00b6 create \u00b6 [Source] new iso create() : IoFile iso^ Returns \u00b6 IoFile iso^","title":"struct IoFile"},{"location":"pony-libxml2-IoFile/#iofile","text":"[Source] struct ref IoFile","title":"IoFile"},{"location":"pony-libxml2-IoFile/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-IoFile/#create","text":"[Source] new iso create() : IoFile iso^","title":"create"},{"location":"pony-libxml2-IoFile/#returns","text":"IoFile iso^","title":"Returns"},{"location":"pony-libxml2-LibXML2/","text":"LibXML2 \u00b6 [Source] primitive val LibXML2 Constructors \u00b6 create \u00b6 [Source] new val create() : LibXML2 val^ Returns \u00b6 LibXML2 val^ Public Functions \u00b6 xmlCheckVersion \u00b6 [Source] fun box xmlCheckVersion( pversion: I32 val) : None val Parameters \u00b6 pversion: I32 val Returns \u00b6 None val xmlStrdup \u00b6 [Source] fun box xmlStrdup( pcur: String val) : String val Parameters \u00b6 pcur: String val Returns \u00b6 String val xmlStrndup \u00b6 [Source] fun box xmlStrndup( pcur: String val, plen: I32 val) : String val Parameters \u00b6 pcur: String val plen: I32 val Returns \u00b6 String val xmlCharStrndup \u00b6 [Source] fun box xmlCharStrndup( pcur: String val, plen: I32 val) : String val Parameters \u00b6 pcur: String val plen: I32 val Returns \u00b6 String val xmlCharStrdup \u00b6 [Source] fun box xmlCharStrdup( pcur: String val) : String val Parameters \u00b6 pcur: String val Returns \u00b6 String val xmlStrsub \u00b6 [Source] fun box xmlStrsub( pstr: String val, pstart: I32 val, plen: I32 val) : String val Parameters \u00b6 pstr: String val pstart: I32 val plen: I32 val Returns \u00b6 String val xmlStrchr \u00b6 [Source] fun box xmlStrchr( pstr: String val, pval: U8 val) : String val Parameters \u00b6 pstr: String val pval: U8 val Returns \u00b6 String val xmlStrstr \u00b6 [Source] fun box xmlStrstr( pstr: String val, pval: String val) : String val Parameters \u00b6 pstr: String val pval: String val Returns \u00b6 String val xmlStrcasestr \u00b6 [Source] fun box xmlStrcasestr( pstr: String val, pval: String val) : String val Parameters \u00b6 pstr: String val pval: String val Returns \u00b6 String val xmlStrcmp \u00b6 [Source] fun box xmlStrcmp( pstr1: String val, pstr2: String val) : I32 val Parameters \u00b6 pstr1: String val pstr2: String val Returns \u00b6 I32 val xmlStrncmp \u00b6 [Source] fun box xmlStrncmp( pstr1: String val, pstr2: String val, plen: I32 val) : I32 val Parameters \u00b6 pstr1: String val pstr2: String val plen: I32 val Returns \u00b6 I32 val xmlStrcasecmp \u00b6 [Source] fun box xmlStrcasecmp( pstr1: String val, pstr2: String val) : I32 val Parameters \u00b6 pstr1: String val pstr2: String val Returns \u00b6 I32 val xmlStrncasecmp \u00b6 [Source] fun box xmlStrncasecmp( pstr1: String val, pstr2: String val, plen: I32 val) : I32 val Parameters \u00b6 pstr1: String val pstr2: String val plen: I32 val Returns \u00b6 I32 val xmlStrEqual \u00b6 [Source] fun box xmlStrEqual( pstr1: String val, pstr2: String val) : I32 val Parameters \u00b6 pstr1: String val pstr2: String val Returns \u00b6 I32 val xmlStrQEqual \u00b6 [Source] fun box xmlStrQEqual( ppref: String val, pname: String val, pstr: String val) : I32 val Parameters \u00b6 ppref: String val pname: String val pstr: String val Returns \u00b6 I32 val xmlStrlen \u00b6 [Source] fun box xmlStrlen( pstr: String val) : I32 val Parameters \u00b6 pstr: String val Returns \u00b6 I32 val xmlStrcat \u00b6 [Source] fun box xmlStrcat( pcur: String val, padd: String val) : String val Parameters \u00b6 pcur: String val padd: String val Returns \u00b6 String val xmlStrncat \u00b6 [Source] fun box xmlStrncat( pcur: String val, padd: String val, plen: I32 val) : String val Parameters \u00b6 pcur: String val padd: String val plen: I32 val Returns \u00b6 String val xmlStrncatNew \u00b6 [Source] fun box xmlStrncatNew( pstr1: String val, pstr2: String val, plen: I32 val) : String val Parameters \u00b6 pstr1: String val pstr2: String val plen: I32 val Returns \u00b6 String val xmlStrPrintf \u00b6 [Source] fun box xmlStrPrintf( pbuf: String val, plen: I32 val, pmsg: String val) : I32 val Parameters \u00b6 pbuf: String val plen: I32 val pmsg: String val Returns \u00b6 I32 val xmlStrVPrintf \u00b6 [Source] fun box xmlStrVPrintf( pbuf: String val, plen: I32 val, pmsg: String val, pap: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pbuf: String val plen: I32 val pmsg: String val pap: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlGetUTF8Char \u00b6 [Source] fun box xmlGetUTF8Char( putf: String val, plen: Pointer[I32 val] ref) : I32 val Parameters \u00b6 putf: String val plen: Pointer [ I32 val] ref Returns \u00b6 I32 val xmlCheckUTF8 \u00b6 [Source] fun box xmlCheckUTF8( putf: String val) : I32 val Parameters \u00b6 putf: String val Returns \u00b6 I32 val xmlUTF8Strsize \u00b6 [Source] fun box xmlUTF8Strsize( putf: String val, plen: I32 val) : I32 val Parameters \u00b6 putf: String val plen: I32 val Returns \u00b6 I32 val xmlUTF8Strndup \u00b6 [Source] fun box xmlUTF8Strndup( putf: String val, plen: I32 val) : String val Parameters \u00b6 putf: String val plen: I32 val Returns \u00b6 String val xmlUTF8Strpos \u00b6 [Source] fun box xmlUTF8Strpos( putf: String val, ppos: I32 val) : String val Parameters \u00b6 putf: String val ppos: I32 val Returns \u00b6 String val xmlUTF8Strloc \u00b6 [Source] fun box xmlUTF8Strloc( putf: String val, putfchar: String val) : I32 val Parameters \u00b6 putf: String val putfchar: String val Returns \u00b6 I32 val xmlUTF8Strsub \u00b6 [Source] fun box xmlUTF8Strsub( putf: String val, pstart: I32 val, plen: I32 val) : String val Parameters \u00b6 putf: String val pstart: I32 val plen: I32 val Returns \u00b6 String val xmlUTF8Strlen \u00b6 [Source] fun box xmlUTF8Strlen( putf: String val) : I32 val Parameters \u00b6 putf: String val Returns \u00b6 I32 val xmlUTF8Size \u00b6 [Source] fun box xmlUTF8Size( putf: String val) : I32 val Parameters \u00b6 putf: String val Returns \u00b6 I32 val xmlUTF8Charcmp \u00b6 [Source] fun box xmlUTF8Charcmp( putf1: String val, putf2: String val) : I32 val Parameters \u00b6 putf1: String val putf2: String val Returns \u00b6 I32 val xmlCleanupInputCallbacks \u00b6 [Source] fun box xmlCleanupInputCallbacks() : None val Returns \u00b6 None val xmlPopInputCallbacks \u00b6 [Source] fun box xmlPopInputCallbacks() : I32 val Returns \u00b6 I32 val xmlRegisterDefaultInputCallbacks \u00b6 [Source] fun box xmlRegisterDefaultInputCallbacks() : None val Returns \u00b6 None val xmlAllocParserInputBuffer \u00b6 [Source] fun box xmlAllocParserInputBuffer( penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlParserInputBufferCreateFilename \u00b6 [Source] fun box xmlParserInputBufferCreateFilename( pURI: String val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 pURI: String val penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlParserInputBufferCreateFile \u00b6 [Source] fun box xmlParserInputBufferCreateFile( pfile: NullablePointer[IoFile ref] ref, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 pfile: NullablePointer [ IoFile ref] ref penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlParserInputBufferCreateFd \u00b6 [Source] fun box xmlParserInputBufferCreateFd( pfd: I32 val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 pfd: I32 val penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlParserInputBufferCreateMem \u00b6 [Source] fun box xmlParserInputBufferCreateMem( pmem: String val, psize: I32 val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 pmem: String val psize: I32 val penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlParserInputBufferCreateStatic \u00b6 [Source] fun box xmlParserInputBufferCreateStatic( pmem: String val, psize: I32 val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 pmem: String val psize: I32 val penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlParserInputBufferCreateIO \u00b6 [Source] fun box xmlParserInputBufferCreateIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlParserInputBufferRead \u00b6 [Source] fun box xmlParserInputBufferRead( pin: NullablePointer[Xmlparserinputbuffer ref] ref, plen: I32 val) : I32 val Parameters \u00b6 pin: NullablePointer [ Xmlparserinputbuffer ref] ref plen: I32 val Returns \u00b6 I32 val xmlParserInputBufferGrow \u00b6 [Source] fun box xmlParserInputBufferGrow( pin: NullablePointer[Xmlparserinputbuffer ref] ref, plen: I32 val) : I32 val Parameters \u00b6 pin: NullablePointer [ Xmlparserinputbuffer ref] ref plen: I32 val Returns \u00b6 I32 val xmlParserInputBufferPush \u00b6 [Source] fun box xmlParserInputBufferPush( pin: NullablePointer[Xmlparserinputbuffer ref] ref, plen: I32 val, pbuf: String val) : I32 val Parameters \u00b6 pin: NullablePointer [ Xmlparserinputbuffer ref] ref plen: I32 val pbuf: String val Returns \u00b6 I32 val xmlFreeParserInputBuffer \u00b6 [Source] fun box xmlFreeParserInputBuffer( pin: NullablePointer[Xmlparserinputbuffer ref] ref) : None val Parameters \u00b6 pin: NullablePointer [ Xmlparserinputbuffer ref] ref Returns \u00b6 None val xmlParserGetDirectory \u00b6 [Source] fun box xmlParserGetDirectory( pfilename: String val) : String val Parameters \u00b6 pfilename: String val Returns \u00b6 String val xmlRegisterInputCallbacks \u00b6 [Source] fun box xmlRegisterInputCallbacks( pmatchFunc: Pointer[FUNCTIONPOINTER val] ref, popenFunc: Pointer[FUNCTIONPOINTER val] ref, preadFunc: Pointer[FUNCTIONPOINTER val] ref, pcloseFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pmatchFunc: Pointer [ FUNCTIONPOINTER val] ref popenFunc: Pointer [ FUNCTIONPOINTER val] ref preadFunc: Pointer [ FUNCTIONPOINTER val] ref pcloseFunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlCleanupOutputCallbacks \u00b6 [Source] fun box xmlCleanupOutputCallbacks() : None val Returns \u00b6 None val xmlRegisterDefaultOutputCallbacks \u00b6 [Source] fun box xmlRegisterDefaultOutputCallbacks() : None val Returns \u00b6 None val xmlAllocOutputBuffer \u00b6 [Source] fun box xmlAllocOutputBuffer( pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref Parameters \u00b6 pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 NullablePointer [ Xmloutputbuffer ref] ref xmlOutputBufferCreateFilename \u00b6 [Source] fun box xmlOutputBufferCreateFilename( pURI: String val, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref, pcompression: I32 val) : NullablePointer[Xmloutputbuffer ref] ref Parameters \u00b6 pURI: String val pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref pcompression: I32 val Returns \u00b6 NullablePointer [ Xmloutputbuffer ref] ref xmlOutputBufferCreateFile \u00b6 [Source] fun box xmlOutputBufferCreateFile( pfile: NullablePointer[IoFile ref] ref, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref Parameters \u00b6 pfile: NullablePointer [ IoFile ref] ref pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 NullablePointer [ Xmloutputbuffer ref] ref xmlOutputBufferCreateBuffer \u00b6 [Source] fun box xmlOutputBufferCreateBuffer( pbuffer: NullablePointer[Xmlbuffer ref] ref, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref Parameters \u00b6 pbuffer: NullablePointer [ Xmlbuffer ref] ref pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 NullablePointer [ Xmloutputbuffer ref] ref xmlOutputBufferCreateFd \u00b6 [Source] fun box xmlOutputBufferCreateFd( pfd: I32 val, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref Parameters \u00b6 pfd: I32 val pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 NullablePointer [ Xmloutputbuffer ref] ref xmlOutputBufferCreateIO \u00b6 [Source] fun box xmlOutputBufferCreateIO( piowrite: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref Parameters \u00b6 piowrite: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 NullablePointer [ Xmloutputbuffer ref] ref xmlOutputBufferGetContent \u00b6 [Source] fun box xmlOutputBufferGetContent( pout: NullablePointer[Xmloutputbuffer ref] ref) : String val Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref Returns \u00b6 String val xmlOutputBufferGetSize \u00b6 [Source] fun box xmlOutputBufferGetSize( pout: NullablePointer[Xmloutputbuffer ref] ref) : U64 val Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref Returns \u00b6 U64 val xmlOutputBufferWrite \u00b6 [Source] fun box xmlOutputBufferWrite( pout: NullablePointer[Xmloutputbuffer ref] ref, plen: I32 val, pbuf: String val) : I32 val Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref plen: I32 val pbuf: String val Returns \u00b6 I32 val xmlOutputBufferWriteString \u00b6 [Source] fun box xmlOutputBufferWriteString( pout: NullablePointer[Xmloutputbuffer ref] ref, pstr: String val) : I32 val Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref pstr: String val Returns \u00b6 I32 val xmlOutputBufferWriteEscape \u00b6 [Source] fun box xmlOutputBufferWriteEscape( pout: NullablePointer[Xmloutputbuffer ref] ref, pstr: String val, pescaping: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref pstr: String val pescaping: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlOutputBufferFlush \u00b6 [Source] fun box xmlOutputBufferFlush( pout: NullablePointer[Xmloutputbuffer ref] ref) : I32 val Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref Returns \u00b6 I32 val xmlOutputBufferClose \u00b6 [Source] fun box xmlOutputBufferClose( pout: NullablePointer[Xmloutputbuffer ref] ref) : I32 val Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref Returns \u00b6 I32 val xmlRegisterOutputCallbacks \u00b6 [Source] fun box xmlRegisterOutputCallbacks( pmatchFunc: Pointer[FUNCTIONPOINTER val] ref, popenFunc: Pointer[FUNCTIONPOINTER val] ref, pwriteFunc: Pointer[FUNCTIONPOINTER val] ref, pcloseFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pmatchFunc: Pointer [ FUNCTIONPOINTER val] ref popenFunc: Pointer [ FUNCTIONPOINTER val] ref pwriteFunc: Pointer [ FUNCTIONPOINTER val] ref pcloseFunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlRegisterHTTPPostCallbacks \u00b6 [Source] fun box xmlRegisterHTTPPostCallbacks() : None val Returns \u00b6 None val xmlCheckHTTPInput \u00b6 [Source] fun box xmlCheckHTTPInput( pctxt: NullablePointer[Xmlparserctxt ref] ref, pret: NullablePointer[Xmlparserinput ref] ref) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pret: NullablePointer [ Xmlparserinput ref] ref Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlNoNetExternalEntityLoader \u00b6 [Source] fun box xmlNoNetExternalEntityLoader( pURL: String val, pID: String val, pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pURL: String val pID: String val pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlNormalizeWindowsPath \u00b6 [Source] fun box xmlNormalizeWindowsPath( ppath: String val) : String val Parameters \u00b6 ppath: String val Returns \u00b6 String val xmlCheckFilename \u00b6 [Source] fun box xmlCheckFilename( ppath: String val) : I32 val Parameters \u00b6 ppath: String val Returns \u00b6 I32 val xmlFileMatch \u00b6 [Source] fun box xmlFileMatch( pfilename: String val) : I32 val Parameters \u00b6 pfilename: String val Returns \u00b6 I32 val xmlFileOpen \u00b6 [Source] fun box xmlFileOpen( pfilename: String val) : String val Parameters \u00b6 pfilename: String val Returns \u00b6 String val xmlFileRead \u00b6 [Source] fun box xmlFileRead( pcontext: Pointer[U8 val] ref, pbuffer: String val, plen: I32 val) : I32 val Parameters \u00b6 pcontext: Pointer [ U8 val] ref pbuffer: String val plen: I32 val Returns \u00b6 I32 val xmlFileClose \u00b6 [Source] fun box xmlFileClose( pcontext: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pcontext: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlIOHTTPMatch \u00b6 [Source] fun box xmlIOHTTPMatch( pfilename: String val) : I32 val Parameters \u00b6 pfilename: String val Returns \u00b6 I32 val xmlIOHTTPOpen \u00b6 [Source] fun box xmlIOHTTPOpen( pfilename: String val) : String val Parameters \u00b6 pfilename: String val Returns \u00b6 String val xmlIOHTTPOpenW \u00b6 [Source] fun box xmlIOHTTPOpenW( ppost_uri: String val, pcompression: I32 val) : String val Parameters \u00b6 ppost_uri: String val pcompression: I32 val Returns \u00b6 String val xmlIOHTTPRead \u00b6 [Source] fun box xmlIOHTTPRead( pcontext: Pointer[U8 val] ref, pbuffer: String val, plen: I32 val) : I32 val Parameters \u00b6 pcontext: Pointer [ U8 val] ref pbuffer: String val plen: I32 val Returns \u00b6 I32 val xmlIOHTTPClose \u00b6 [Source] fun box xmlIOHTTPClose( pcontext: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pcontext: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlIOFTPMatch \u00b6 [Source] fun box xmlIOFTPMatch( pfilename: String val) : I32 val Parameters \u00b6 pfilename: String val Returns \u00b6 I32 val xmlIOFTPOpen \u00b6 [Source] fun box xmlIOFTPOpen( pfilename: String val) : String val Parameters \u00b6 pfilename: String val Returns \u00b6 String val xmlIOFTPRead \u00b6 [Source] fun box xmlIOFTPRead( pcontext: Pointer[U8 val] ref, pbuffer: String val, plen: I32 val) : I32 val Parameters \u00b6 pcontext: Pointer [ U8 val] ref pbuffer: String val plen: I32 val Returns \u00b6 I32 val xmlIOFTPClose \u00b6 [Source] fun box xmlIOFTPClose( pcontext: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pcontext: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlBufContent \u00b6 [Source] fun box xmlBufContent( pbuf: NullablePointer[Xmlbuf ref] ref) : String val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuf ref] ref Returns \u00b6 String val xmlBufEnd \u00b6 [Source] fun box xmlBufEnd( pbuf: NullablePointer[Xmlbuf ref] ref) : String val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuf ref] ref Returns \u00b6 String val xmlBufUse \u00b6 [Source] fun box xmlBufUse( pbuf: NullablePointer[Xmlbuf ref] ref) : U64 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuf ref] ref Returns \u00b6 U64 val xmlBufShrink \u00b6 [Source] fun box xmlBufShrink( pbuf: NullablePointer[Xmlbuf ref] ref, plen: U64 val) : U64 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuf ref] ref plen: U64 val Returns \u00b6 U64 val xmlValidateNCName \u00b6 [Source] fun box xmlValidateNCName( pvalue: String val, pspace: I32 val) : I32 val Parameters \u00b6 pvalue: String val pspace: I32 val Returns \u00b6 I32 val xmlValidateQName \u00b6 [Source] fun box xmlValidateQName( pvalue: String val, pspace: I32 val) : I32 val Parameters \u00b6 pvalue: String val pspace: I32 val Returns \u00b6 I32 val xmlValidateName \u00b6 [Source] fun box xmlValidateName( pvalue: String val, pspace: I32 val) : I32 val Parameters \u00b6 pvalue: String val pspace: I32 val Returns \u00b6 I32 val xmlValidateNMToken \u00b6 [Source] fun box xmlValidateNMToken( pvalue: String val, pspace: I32 val) : I32 val Parameters \u00b6 pvalue: String val pspace: I32 val Returns \u00b6 I32 val xmlBuildQName \u00b6 [Source] fun box xmlBuildQName( pncname: String val, pprefix: String val, pmemory: String val, plen: I32 val) : String val Parameters \u00b6 pncname: String val pprefix: String val pmemory: String val plen: I32 val Returns \u00b6 String val xmlSplitQName2 \u00b6 [Source] fun box xmlSplitQName2( pname: String val, pprefix: Pointer[Pointer[U8 val] tag] ref) : String val Parameters \u00b6 pname: String val pprefix: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 String val xmlSplitQName3 \u00b6 [Source] fun box xmlSplitQName3( pname: String val, plen: Pointer[I32 val] ref) : String val Parameters \u00b6 pname: String val plen: Pointer [ I32 val] ref Returns \u00b6 String val xmlSetBufferAllocationScheme \u00b6 [Source] fun box xmlSetBufferAllocationScheme( pscheme: I32 val) : None val Parameters \u00b6 pscheme: I32 val Returns \u00b6 None val xmlGetBufferAllocationScheme \u00b6 [Source] fun box xmlGetBufferAllocationScheme() : I32 val Returns \u00b6 I32 val xmlBufferCreate \u00b6 [Source] fun box xmlBufferCreate() : NullablePointer[Xmlbuffer ref] ref Returns \u00b6 NullablePointer [ Xmlbuffer ref] ref xmlBufferCreateSize \u00b6 [Source] fun box xmlBufferCreateSize( psize: U64 val) : NullablePointer[Xmlbuffer ref] ref Parameters \u00b6 psize: U64 val Returns \u00b6 NullablePointer [ Xmlbuffer ref] ref xmlBufferCreateStatic \u00b6 [Source] fun box xmlBufferCreateStatic( pmem: Pointer[U8 val] ref, psize: U64 val) : NullablePointer[Xmlbuffer ref] ref Parameters \u00b6 pmem: Pointer [ U8 val] ref psize: U64 val Returns \u00b6 NullablePointer [ Xmlbuffer ref] ref xmlBufferResize \u00b6 [Source] fun box xmlBufferResize( pbuf: NullablePointer[Xmlbuffer ref] ref, psize: U32 val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref psize: U32 val Returns \u00b6 I32 val xmlBufferFree \u00b6 [Source] fun box xmlBufferFree( pbuf: NullablePointer[Xmlbuffer ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 None val xmlBufferDump \u00b6 [Source] fun box xmlBufferDump( pfile: NullablePointer[IoFile ref] ref, pbuf: NullablePointer[Xmlbuffer ref] ref) : I32 val Parameters \u00b6 pfile: NullablePointer [ IoFile ref] ref pbuf: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 I32 val xmlBufferAdd \u00b6 [Source] fun box xmlBufferAdd( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val, plen: I32 val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val plen: I32 val Returns \u00b6 I32 val xmlBufferAddHead \u00b6 [Source] fun box xmlBufferAddHead( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val, plen: I32 val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val plen: I32 val Returns \u00b6 I32 val xmlBufferCat \u00b6 [Source] fun box xmlBufferCat( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val Returns \u00b6 I32 val xmlBufferCCat \u00b6 [Source] fun box xmlBufferCCat( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val Returns \u00b6 I32 val xmlBufferShrink \u00b6 [Source] fun box xmlBufferShrink( pbuf: NullablePointer[Xmlbuffer ref] ref, plen: U32 val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref plen: U32 val Returns \u00b6 I32 val xmlBufferGrow \u00b6 [Source] fun box xmlBufferGrow( pbuf: NullablePointer[Xmlbuffer ref] ref, plen: U32 val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref plen: U32 val Returns \u00b6 I32 val xmlBufferEmpty \u00b6 [Source] fun box xmlBufferEmpty( pbuf: NullablePointer[Xmlbuffer ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 None val xmlBufferContent \u00b6 [Source] fun box xmlBufferContent( pbuf: NullablePointer[Xmlbuffer ref] ref) : String val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 String val xmlBufferDetach \u00b6 [Source] fun box xmlBufferDetach( pbuf: NullablePointer[Xmlbuffer ref] ref) : String val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 String val xmlBufferSetAllocationScheme \u00b6 [Source] fun box xmlBufferSetAllocationScheme( pbuf: NullablePointer[Xmlbuffer ref] ref, pscheme: I32 val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pscheme: I32 val Returns \u00b6 None val xmlBufferLength \u00b6 [Source] fun box xmlBufferLength( pbuf: NullablePointer[Xmlbuffer ref] ref) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 I32 val xmlCreateIntSubset \u00b6 [Source] fun box xmlCreateIntSubset( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pExternalID: String val pSystemID: String val Returns \u00b6 NullablePointer [ Xmldtd ref] ref xmlNewDtd \u00b6 [Source] fun box xmlNewDtd( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pExternalID: String val pSystemID: String val Returns \u00b6 NullablePointer [ Xmldtd ref] ref xmlGetIntSubset \u00b6 [Source] fun box xmlGetIntSubset( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmldtd ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmldtd ref] ref xmlFreeDtd \u00b6 [Source] fun box xmlFreeDtd( pcur: NullablePointer[Xmldtd ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmldtd ref] ref Returns \u00b6 None val xmlNewGlobalNs \u00b6 [Source] fun box xmlNewGlobalNs( pdoc: NullablePointer[Xmldoc ref] tag, phref: String val, pprefix: String val) : NullablePointer[Xmlns ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag phref: String val pprefix: String val Returns \u00b6 NullablePointer [ Xmlns ref] ref xmlNewNs \u00b6 [Source] fun box xmlNewNs( pnode: NullablePointer[Xmlnode ref] ref, phref: String val, pprefix: String val) : NullablePointer[Xmlns ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref phref: String val pprefix: String val Returns \u00b6 NullablePointer [ Xmlns ref] ref xmlFreeNs \u00b6 [Source] fun box xmlFreeNs( pcur: NullablePointer[Xmlns ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlns ref] ref Returns \u00b6 None val xmlFreeNsList \u00b6 [Source] fun box xmlFreeNsList( pcur: NullablePointer[Xmlns ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlns ref] ref Returns \u00b6 None val xmlNewDoc \u00b6 [Source] fun box xmlNewDoc( pversion: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pversion: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlFreeDoc \u00b6 [Source] fun box xmlFreeDoc( pcur: NullablePointer[Xmldoc ref] tag) : None val Parameters \u00b6 pcur: NullablePointer [ Xmldoc ref] tag Returns \u00b6 None val xmlNewDocProp \u00b6 [Source] fun box xmlNewDocProp( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pvalue: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlNewProp \u00b6 [Source] fun box xmlNewProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlNewNsProp \u00b6 [Source] fun box xmlNewNsProp( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pvalue: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlNewNsPropEatName \u00b6 [Source] fun box xmlNewNsPropEatName( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pvalue: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlFreePropList \u00b6 [Source] fun box xmlFreePropList( pcur: NullablePointer[Xmlattr ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlattr ref] ref Returns \u00b6 None val xmlFreeProp \u00b6 [Source] fun box xmlFreeProp( pcur: NullablePointer[Xmlattr ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlattr ref] ref Returns \u00b6 None val xmlCopyProp \u00b6 [Source] fun box xmlCopyProp( ptarget: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 ptarget: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlattr ref] ref Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlCopyPropList \u00b6 [Source] fun box xmlCopyPropList( ptarget: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 ptarget: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlattr ref] ref Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlCopyDtd \u00b6 [Source] fun box xmlCopyDtd( pdtd: NullablePointer[Xmldtd ref] ref) : NullablePointer[Xmldtd ref] ref Parameters \u00b6 pdtd: NullablePointer [ Xmldtd ref] ref Returns \u00b6 NullablePointer [ Xmldtd ref] ref xmlCopyDoc \u00b6 [Source] fun box xmlCopyDoc( pdoc: NullablePointer[Xmldoc ref] tag, precursive: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag precursive: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlNewDocNode \u00b6 [Source] fun box xmlNewDocNode( pdoc: NullablePointer[Xmldoc ref] tag, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewDocNodeEatName \u00b6 [Source] fun box xmlNewDocNodeEatName( pdoc: NullablePointer[Xmldoc ref] tag, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewNode \u00b6 [Source] fun box xmlNewNode( pns: NullablePointer[Xmlns ref] ref, pname: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pns: NullablePointer [ Xmlns ref] ref pname: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewNodeEatName \u00b6 [Source] fun box xmlNewNodeEatName( pns: NullablePointer[Xmlns ref] ref, pname: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pns: NullablePointer [ Xmlns ref] ref pname: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewChild \u00b6 [Source] fun box xmlNewChild( pparent: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewDocText \u00b6 [Source] fun box xmlNewDocText( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewText \u00b6 [Source] fun box xmlNewText( pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewDocPI \u00b6 [Source] fun box xmlNewDocPI( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewPI \u00b6 [Source] fun box xmlNewPI( pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pname: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewDocTextLen \u00b6 [Source] fun box xmlNewDocTextLen( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val plen: I32 val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewTextLen \u00b6 [Source] fun box xmlNewTextLen( pcontent: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pcontent: String val plen: I32 val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewDocComment \u00b6 [Source] fun box xmlNewDocComment( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewComment \u00b6 [Source] fun box xmlNewComment( pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewCDataBlock \u00b6 [Source] fun box xmlNewCDataBlock( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val plen: I32 val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewCharRef \u00b6 [Source] fun box xmlNewCharRef( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewReference \u00b6 [Source] fun box xmlNewReference( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlCopyNode \u00b6 [Source] fun box xmlCopyNode( pnode: NullablePointer[Xmlnode ref] ref, precursive: I32 val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref precursive: I32 val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlDocCopyNode \u00b6 [Source] fun box xmlDocCopyNode( pnode: NullablePointer[Xmlnode ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, precursive: I32 val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pdoc: NullablePointer [ Xmldoc ref] tag precursive: I32 val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlDocCopyNodeList \u00b6 [Source] fun box xmlDocCopyNodeList( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlCopyNodeList \u00b6 [Source] fun box xmlCopyNodeList( pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewTextChild \u00b6 [Source] fun box xmlNewTextChild( pparent: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewDocRawNode \u00b6 [Source] fun box xmlNewDocRawNode( pdoc: NullablePointer[Xmldoc ref] tag, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNewDocFragment \u00b6 [Source] fun box xmlNewDocFragment( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlGetLineNo \u00b6 [Source] fun box xmlGetLineNo( pnode: NullablePointer[Xmlnode ref] ref) : I64 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I64 val xmlGetNodePath \u00b6 [Source] fun box xmlGetNodePath( pnode: NullablePointer[Xmlnode ref] ref) : String val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 String val xmlDocGetRootElement \u00b6 [Source] fun box xmlDocGetRootElement( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlGetLastChild \u00b6 [Source] fun box xmlGetLastChild( pparent: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNodeIsText \u00b6 [Source] fun box xmlNodeIsText( pnode: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlIsBlankNode \u00b6 [Source] fun box xmlIsBlankNode( pnode: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlDocSetRootElement \u00b6 [Source] fun box xmlDocSetRootElement( pdoc: NullablePointer[Xmldoc ref] tag, proot: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag proot: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNodeSetName \u00b6 [Source] fun box xmlNodeSetName( pcur: NullablePointer[Xmlnode ref] ref, pname: String val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pname: String val Returns \u00b6 None val xmlAddChild \u00b6 [Source] fun box xmlAddChild( pparent: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlAddChildList \u00b6 [Source] fun box xmlAddChildList( pparent: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlReplaceNode \u00b6 [Source] fun box xmlReplaceNode( pold: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pold: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlAddPrevSibling \u00b6 [Source] fun box xmlAddPrevSibling( pcur: NullablePointer[Xmlnode ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlAddSibling \u00b6 [Source] fun box xmlAddSibling( pcur: NullablePointer[Xmlnode ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlAddNextSibling \u00b6 [Source] fun box xmlAddNextSibling( pcur: NullablePointer[Xmlnode ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlUnlinkNode \u00b6 [Source] fun box xmlUnlinkNode( pcur: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val xmlTextMerge \u00b6 [Source] fun box xmlTextMerge( pfirst: NullablePointer[Xmlnode ref] ref, psecond: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pfirst: NullablePointer [ Xmlnode ref] ref psecond: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlTextConcat \u00b6 [Source] fun box xmlTextConcat( pnode: NullablePointer[Xmlnode ref] ref, pcontent: String val, plen: I32 val) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pcontent: String val plen: I32 val Returns \u00b6 I32 val xmlFreeNodeList \u00b6 [Source] fun box xmlFreeNodeList( pcur: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val xmlFreeNode \u00b6 [Source] fun box xmlFreeNode( pcur: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val xmlSetTreeDoc \u00b6 [Source] fun box xmlSetTreeDoc( ptree: NullablePointer[Xmlnode ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val Parameters \u00b6 ptree: NullablePointer [ Xmlnode ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 None val xmlSetListDoc \u00b6 [Source] fun box xmlSetListDoc( plist: NullablePointer[Xmlnode ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val Parameters \u00b6 plist: NullablePointer [ Xmlnode ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 None val xmlSearchNs \u00b6 [Source] fun box xmlSearchNs( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pnameSpace: String val) : NullablePointer[Xmlns ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pnameSpace: String val Returns \u00b6 NullablePointer [ Xmlns ref] ref xmlSearchNsByHref \u00b6 [Source] fun box xmlSearchNsByHref( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, phref: String val) : NullablePointer[Xmlns ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref phref: String val Returns \u00b6 NullablePointer [ Xmlns ref] ref xmlGetNsList \u00b6 [Source] fun box xmlGetNsList( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref) : Pointer[NullablePointer[Xmlns ref] ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 Pointer [ NullablePointer [ Xmlns ref] ref] ref xmlSetNs \u00b6 [Source] fun box xmlSetNs( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref) : None val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref Returns \u00b6 None val xmlCopyNamespace \u00b6 [Source] fun box xmlCopyNamespace( pcur: NullablePointer[Xmlns ref] ref) : NullablePointer[Xmlns ref] ref Parameters \u00b6 pcur: NullablePointer [ Xmlns ref] ref Returns \u00b6 NullablePointer [ Xmlns ref] ref xmlCopyNamespaceList \u00b6 [Source] fun box xmlCopyNamespaceList( pcur: NullablePointer[Xmlns ref] ref) : NullablePointer[Xmlns ref] ref Parameters \u00b6 pcur: NullablePointer [ Xmlns ref] ref Returns \u00b6 NullablePointer [ Xmlns ref] ref xmlSetProp \u00b6 [Source] fun box xmlSetProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlSetNsProp \u00b6 [Source] fun box xmlSetNsProp( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pvalue: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlGetNoNsProp \u00b6 [Source] fun box xmlGetNoNsProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : String val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val Returns \u00b6 String val xmlGetProp \u00b6 [Source] fun box xmlGetProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : String val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val Returns \u00b6 String val xmlHasProp \u00b6 [Source] fun box xmlHasProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlHasNsProp \u00b6 [Source] fun box xmlHasNsProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pnameSpace: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val pnameSpace: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlGetNsProp \u00b6 [Source] fun box xmlGetNsProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pnameSpace: String val) : String val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val pnameSpace: String val Returns \u00b6 String val xmlStringGetNodeList \u00b6 [Source] fun box xmlStringGetNodeList( pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlStringLenGetNodeList \u00b6 [Source] fun box xmlStringLenGetNodeList( pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val plen: I32 val Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlNodeListGetString \u00b6 [Source] fun box xmlNodeListGetString( pdoc: NullablePointer[Xmldoc ref] tag, plist: NullablePointer[Xmlnode ref] ref, pinLine: I32 val) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag plist: NullablePointer [ Xmlnode ref] ref pinLine: I32 val Returns \u00b6 String val xmlNodeListGetRawString \u00b6 [Source] fun box xmlNodeListGetRawString( pdoc: NullablePointer[Xmldoc ref] tag, plist: NullablePointer[Xmlnode ref] ref, pinLine: I32 val) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag plist: NullablePointer [ Xmlnode ref] ref pinLine: I32 val Returns \u00b6 String val xmlNodeSetContent \u00b6 [Source] fun box xmlNodeSetContent( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val Returns \u00b6 None val xmlNodeSetContentLen \u00b6 [Source] fun box xmlNodeSetContentLen( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val, plen: I32 val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val plen: I32 val Returns \u00b6 None val xmlNodeAddContent \u00b6 [Source] fun box xmlNodeAddContent( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val Returns \u00b6 None val xmlNodeAddContentLen \u00b6 [Source] fun box xmlNodeAddContentLen( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val, plen: I32 val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val plen: I32 val Returns \u00b6 None val xmlNodeGetContent \u00b6 [Source] fun box xmlNodeGetContent( pcur: NullablePointer[Xmlnode ref] ref) : String val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 String val xmlNodeBufGetContent \u00b6 [Source] fun box xmlNodeBufGetContent( pbuffer: NullablePointer[Xmlbuffer ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pbuffer: NullablePointer [ Xmlbuffer ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlBufGetNodeContent \u00b6 [Source] fun box xmlBufGetNodeContent( pbuf: NullablePointer[Xmlbuf ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuf ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlNodeGetLang \u00b6 [Source] fun box xmlNodeGetLang( pcur: NullablePointer[Xmlnode ref] ref) : String val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 String val xmlNodeGetSpacePreserve \u00b6 [Source] fun box xmlNodeGetSpacePreserve( pcur: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlNodeSetLang \u00b6 [Source] fun box xmlNodeSetLang( pcur: NullablePointer[Xmlnode ref] ref, plang: String val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref plang: String val Returns \u00b6 None val xmlNodeSetSpacePreserve \u00b6 [Source] fun box xmlNodeSetSpacePreserve( pcur: NullablePointer[Xmlnode ref] ref, pval: I32 val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref pval: I32 val Returns \u00b6 None val xmlNodeGetBase \u00b6 [Source] fun box xmlNodeGetBase( pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 String val xmlNodeSetBase \u00b6 [Source] fun box xmlNodeSetBase( pcur: NullablePointer[Xmlnode ref] ref, puri: String val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnode ref] ref puri: String val Returns \u00b6 None val xmlRemoveProp \u00b6 [Source] fun box xmlRemoveProp( pcur: NullablePointer[Xmlattr ref] ref) : I32 val Parameters \u00b6 pcur: NullablePointer [ Xmlattr ref] ref Returns \u00b6 I32 val xmlUnsetNsProp \u00b6 [Source] fun box xmlUnsetNsProp( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val Returns \u00b6 I32 val xmlUnsetProp \u00b6 [Source] fun box xmlUnsetProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pname: String val Returns \u00b6 I32 val xmlBufferWriteChar \u00b6 [Source] fun box xmlBufferWriteChar( pbuf: NullablePointer[Xmlbuffer ref] ref, pstring: String val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pstring: String val Returns \u00b6 None val xmlBufferWriteQuotedString \u00b6 [Source] fun box xmlBufferWriteQuotedString( pbuf: NullablePointer[Xmlbuffer ref] ref, pstring: String val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pstring: String val Returns \u00b6 None val xmlAttrSerializeTxtContent \u00b6 [Source] fun box xmlAttrSerializeTxtContent( pbuf: NullablePointer[Xmlbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattr ref] ref, pstring: String val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattr ref] ref pstring: String val Returns \u00b6 None val xmlReconciliateNs \u00b6 [Source] fun box xmlReconciliateNs( pdoc: NullablePointer[Xmldoc ref] tag, ptree: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag ptree: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlDocDumpFormatMemory \u00b6 [Source] fun box xmlDocDumpFormatMemory( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref, pformat: I32 val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref pformat: I32 val Returns \u00b6 None val xmlDocDumpMemory \u00b6 [Source] fun box xmlDocDumpMemory( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref Returns \u00b6 None val xmlDocDumpMemoryEnc \u00b6 [Source] fun box xmlDocDumpMemoryEnc( pout_doc: NullablePointer[Xmldoc ref] tag, pdoc_txt_ptr: Pointer[Pointer[U8 val] tag] ref, pdoc_txt_len: Pointer[I32 val] ref, ptxt_encoding: String val) : None val Parameters \u00b6 pout_doc: NullablePointer [ Xmldoc ref] tag pdoc_txt_ptr: Pointer [ Pointer [ U8 val] tag] ref pdoc_txt_len: Pointer [ I32 val] ref ptxt_encoding: String val Returns \u00b6 None val xmlDocDumpFormatMemoryEnc \u00b6 [Source] fun box xmlDocDumpFormatMemoryEnc( pout_doc: NullablePointer[Xmldoc ref] tag, pdoc_txt_ptr: Pointer[Pointer[U8 val] tag] ref, pdoc_txt_len: Pointer[I32 val] ref, ptxt_encoding: String val, pformat: I32 val) : None val Parameters \u00b6 pout_doc: NullablePointer [ Xmldoc ref] tag pdoc_txt_ptr: Pointer [ Pointer [ U8 val] tag] ref pdoc_txt_len: Pointer [ I32 val] ref ptxt_encoding: String val pformat: I32 val Returns \u00b6 None val xmlDocFormatDump \u00b6 [Source] fun box xmlDocFormatDump( pf: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pformat: I32 val) : I32 val Parameters \u00b6 pf: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmldoc ref] tag pformat: I32 val Returns \u00b6 I32 val xmlDocDump \u00b6 [Source] fun box xmlDocDump( pf: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pf: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlElemDump \u00b6 [Source] fun box xmlElemDump( pf: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 pf: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val xmlSaveFile \u00b6 [Source] fun box xmlSaveFile( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlSaveFormatFile \u00b6 [Source] fun box xmlSaveFormatFile( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pformat: I32 val) : I32 val Parameters \u00b6 pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pformat: I32 val Returns \u00b6 I32 val xmlBufNodeDump \u00b6 [Source] fun box xmlBufNodeDump( pbuf: NullablePointer[Xmlbuf ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, plevel: I32 val, pformat: I32 val) : U64 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuf ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref plevel: I32 val pformat: I32 val Returns \u00b6 U64 val xmlNodeDump \u00b6 [Source] fun box xmlNodeDump( pbuf: NullablePointer[Xmlbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, plevel: I32 val, pformat: I32 val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref plevel: I32 val pformat: I32 val Returns \u00b6 I32 val xmlSaveFileTo \u00b6 [Source] fun box xmlSaveFileTo( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val Returns \u00b6 I32 val xmlSaveFormatFileTo \u00b6 [Source] fun box xmlSaveFormatFileTo( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val Returns \u00b6 I32 val xmlNodeDumpOutput \u00b6 [Source] fun box xmlNodeDumpOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, plevel: I32 val, pformat: I32 val, pencoding: String val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmloutputbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref plevel: I32 val pformat: I32 val pencoding: String val Returns \u00b6 None val xmlSaveFormatFileEnc \u00b6 [Source] fun box xmlSaveFormatFileEnc( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : I32 val Parameters \u00b6 pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val Returns \u00b6 I32 val xmlSaveFileEnc \u00b6 [Source] fun box xmlSaveFileEnc( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val Parameters \u00b6 pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val Returns \u00b6 I32 val xmlIsXHTML \u00b6 [Source] fun box xmlIsXHTML( psystemID: String val, ppublicID: String val) : I32 val Parameters \u00b6 psystemID: String val ppublicID: String val Returns \u00b6 I32 val xmlGetDocCompressMode \u00b6 [Source] fun box xmlGetDocCompressMode( pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlSetDocCompressMode \u00b6 [Source] fun box xmlSetDocCompressMode( pdoc: NullablePointer[Xmldoc ref] tag, pmode: I32 val) : None val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pmode: I32 val Returns \u00b6 None val xmlGetCompressMode \u00b6 [Source] fun box xmlGetCompressMode() : I32 val Returns \u00b6 I32 val xmlSetCompressMode \u00b6 [Source] fun box xmlSetCompressMode( pmode: I32 val) : None val Parameters \u00b6 pmode: I32 val Returns \u00b6 None val xmlDOMWrapNewCtxt \u00b6 [Source] fun box xmlDOMWrapNewCtxt() : NullablePointer[Xmldomwrapctxt ref] ref Returns \u00b6 NullablePointer [ Xmldomwrapctxt ref] ref xmlDOMWrapFreeCtxt \u00b6 [Source] fun box xmlDOMWrapFreeCtxt( pctxt: NullablePointer[Xmldomwrapctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmldomwrapctxt ref] ref Returns \u00b6 None val xmlDOMWrapReconcileNamespaces \u00b6 [Source] fun box xmlDOMWrapReconcileNamespaces( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, pelem: NullablePointer[Xmlnode ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmldomwrapctxt ref] ref pelem: NullablePointer [ Xmlnode ref] ref poptions: I32 val Returns \u00b6 I32 val xmlDOMWrapAdoptNode \u00b6 [Source] fun box xmlDOMWrapAdoptNode( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, psourceDoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pdestDoc: NullablePointer[Xmldoc ref] tag, pdestParent: NullablePointer[Xmlnode ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmldomwrapctxt ref] ref psourceDoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pdestDoc: NullablePointer [ Xmldoc ref] tag pdestParent: NullablePointer [ Xmlnode ref] ref poptions: I32 val Returns \u00b6 I32 val xmlDOMWrapRemoveNode \u00b6 [Source] fun box xmlDOMWrapRemoveNode( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmldomwrapctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref poptions: I32 val Returns \u00b6 I32 val xmlDOMWrapCloneNode \u00b6 [Source] fun box xmlDOMWrapCloneNode( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, psourceDoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pclonedNode: Pointer[NullablePointer[Xmlnode ref] ref] ref, pdestDoc: NullablePointer[Xmldoc ref] tag, pdestParent: NullablePointer[Xmlnode ref] ref, pdeep: I32 val, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmldomwrapctxt ref] ref psourceDoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pclonedNode: Pointer [ NullablePointer [ Xmlnode ref] ref] ref pdestDoc: NullablePointer [ Xmldoc ref] tag pdestParent: NullablePointer [ Xmlnode ref] ref pdeep: I32 val poptions: I32 val Returns \u00b6 I32 val xmlChildElementCount \u00b6 [Source] fun box xmlChildElementCount( pparent: NullablePointer[Xmlnode ref] ref) : U64 val Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref Returns \u00b6 U64 val xmlNextElementSibling \u00b6 [Source] fun box xmlNextElementSibling( pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlFirstElementChild \u00b6 [Source] fun box xmlFirstElementChild( pparent: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlLastElementChild \u00b6 [Source] fun box xmlLastElementChild( pparent: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pparent: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlPreviousElementSibling \u00b6 [Source] fun box xmlPreviousElementSibling( pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlInitParser \u00b6 [Source] fun box xmlInitParser() : None val Returns \u00b6 None val xmlCleanupParser \u00b6 [Source] fun box xmlCleanupParser() : None val Returns \u00b6 None val xmlParserInputRead \u00b6 [Source] fun box xmlParserInputRead( pin: NullablePointer[Xmlparserinput ref] ref, plen: I32 val) : I32 val Parameters \u00b6 pin: NullablePointer [ Xmlparserinput ref] ref plen: I32 val Returns \u00b6 I32 val xmlParserInputGrow \u00b6 [Source] fun box xmlParserInputGrow( pin: NullablePointer[Xmlparserinput ref] ref, plen: I32 val) : I32 val Parameters \u00b6 pin: NullablePointer [ Xmlparserinput ref] ref plen: I32 val Returns \u00b6 I32 val xmlParseDoc \u00b6 [Source] fun box xmlParseDoc( pcur: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pcur: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlParseFile \u00b6 [Source] fun box xmlParseFile( pfilename: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfilename: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlParseMemory \u00b6 [Source] fun box xmlParseMemory( pbuffer: String val, psize: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlSubstituteEntitiesDefault \u00b6 [Source] fun box xmlSubstituteEntitiesDefault( pval: I32 val) : I32 val Parameters \u00b6 pval: I32 val Returns \u00b6 I32 val xmlKeepBlanksDefault \u00b6 [Source] fun box xmlKeepBlanksDefault( pval: I32 val) : I32 val Parameters \u00b6 pval: I32 val Returns \u00b6 I32 val xmlStopParser \u00b6 [Source] fun box xmlStopParser( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlPedanticParserDefault \u00b6 [Source] fun box xmlPedanticParserDefault( pval: I32 val) : I32 val Parameters \u00b6 pval: I32 val Returns \u00b6 I32 val xmlLineNumbersDefault \u00b6 [Source] fun box xmlLineNumbersDefault( pval: I32 val) : I32 val Parameters \u00b6 pval: I32 val Returns \u00b6 I32 val xmlRecoverDoc \u00b6 [Source] fun box xmlRecoverDoc( pcur: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pcur: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlRecoverMemory \u00b6 [Source] fun box xmlRecoverMemory( pbuffer: String val, psize: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlRecoverFile \u00b6 [Source] fun box xmlRecoverFile( pfilename: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfilename: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlParseDocument \u00b6 [Source] fun box xmlParseDocument( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val xmlParseExtParsedEnt \u00b6 [Source] fun box xmlParseExtParsedEnt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val xmlSAXUserParseFile \u00b6 [Source] fun box xmlSAXUserParseFile( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pfilename: String val) : I32 val Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pfilename: String val Returns \u00b6 I32 val xmlSAXUserParseMemory \u00b6 [Source] fun box xmlSAXUserParseMemory( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pbuffer: String val, psize: I32 val) : I32 val Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pbuffer: String val psize: I32 val Returns \u00b6 I32 val xmlSAXParseDoc \u00b6 [Source] fun box xmlSAXParseDoc( psax: NullablePointer[Xmlsaxhandler ref] ref, pcur: String val, precovery: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pcur: String val precovery: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlSAXParseMemory \u00b6 [Source] fun box xmlSAXParseMemory( psax: NullablePointer[Xmlsaxhandler ref] ref, pbuffer: String val, psize: I32 val, precovery: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pbuffer: String val psize: I32 val precovery: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlSAXParseMemoryWithData \u00b6 [Source] fun box xmlSAXParseMemoryWithData( psax: NullablePointer[Xmlsaxhandler ref] ref, pbuffer: String val, psize: I32 val, precovery: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pbuffer: String val psize: I32 val precovery: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlSAXParseFile \u00b6 [Source] fun box xmlSAXParseFile( psax: NullablePointer[Xmlsaxhandler ref] ref, pfilename: String val, precovery: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pfilename: String val precovery: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlSAXParseFileWithData \u00b6 [Source] fun box xmlSAXParseFileWithData( psax: NullablePointer[Xmlsaxhandler ref] ref, pfilename: String val, precovery: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pfilename: String val precovery: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlSAXParseEntity \u00b6 [Source] fun box xmlSAXParseEntity( psax: NullablePointer[Xmlsaxhandler ref] ref, pfilename: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pfilename: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlParseEntity \u00b6 [Source] fun box xmlParseEntity( pfilename: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfilename: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlSAXParseDTD \u00b6 [Source] fun box xmlSAXParseDTD( psax: NullablePointer[Xmlsaxhandler ref] ref, pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pExternalID: String val pSystemID: String val Returns \u00b6 NullablePointer [ Xmldtd ref] ref xmlParseDTD \u00b6 [Source] fun box xmlParseDTD( pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref Parameters \u00b6 pExternalID: String val pSystemID: String val Returns \u00b6 NullablePointer [ Xmldtd ref] ref xmlIOParseDTD \u00b6 [Source] fun box xmlIOParseDTD( psax: NullablePointer[Xmlsaxhandler ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, penc: I32 val) : NullablePointer[Xmldtd ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref penc: I32 val Returns \u00b6 NullablePointer [ Xmldtd ref] ref xmlParseBalancedChunkMemory \u00b6 [Source] fun box xmlParseBalancedChunkMemory( pdoc: NullablePointer[Xmldoc ref] tag, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pdepth: I32 val, pstring: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pdepth: I32 val pstring: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref Returns \u00b6 I32 val xmlParseInNodeContext \u00b6 [Source] fun box xmlParseInNodeContext( pnode: NullablePointer[Xmlnode ref] ref, pdata: String val, pdatalen: I32 val, poptions: I32 val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pdata: String val pdatalen: I32 val poptions: I32 val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref Returns \u00b6 I32 val xmlParseBalancedChunkMemoryRecover \u00b6 [Source] fun box xmlParseBalancedChunkMemoryRecover( pdoc: NullablePointer[Xmldoc ref] tag, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pdepth: I32 val, pstring: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref, precover: I32 val) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pdepth: I32 val pstring: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref precover: I32 val Returns \u00b6 I32 val xmlParseExternalEntity \u00b6 [Source] fun box xmlParseExternalEntity( pdoc: NullablePointer[Xmldoc ref] tag, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pdepth: I32 val, pURL: String val, pID: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pdepth: I32 val pURL: String val pID: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref Returns \u00b6 I32 val xmlParseCtxtExternalEntity \u00b6 [Source] fun box xmlParseCtxtExternalEntity( pctx: NullablePointer[Xmlparserctxt ref] ref, pURL: String val, pID: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val Parameters \u00b6 pctx: NullablePointer [ Xmlparserctxt ref] ref pURL: String val pID: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref Returns \u00b6 I32 val xmlNewParserCtxt \u00b6 [Source] fun box xmlNewParserCtxt() : NullablePointer[Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlInitParserCtxt \u00b6 [Source] fun box xmlInitParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val xmlClearParserCtxt \u00b6 [Source] fun box xmlClearParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlFreeParserCtxt \u00b6 [Source] fun box xmlFreeParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlSetupParserForBuffer \u00b6 [Source] fun box xmlSetupParserForBuffer( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val, pfilename: String val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val pfilename: String val Returns \u00b6 None val xmlCreateDocParserCtxt \u00b6 [Source] fun box xmlCreateDocParserCtxt( pcur: String val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pcur: String val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlGetFeaturesList \u00b6 [Source] fun box xmlGetFeaturesList( plen: Pointer[I32 val] ref, presult: Pointer[Pointer[U8 val] tag] ref) : I32 val Parameters \u00b6 plen: Pointer [ I32 val] ref presult: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 I32 val xmlGetFeature \u00b6 [Source] fun box xmlGetFeature( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, presult: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val presult: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlSetFeature \u00b6 [Source] fun box xmlSetFeature( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, pvalue: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val pvalue: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlCreatePushParserCtxt \u00b6 [Source] fun box xmlCreatePushParserCtxt( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pchunk: String val, psize: I32 val, pfilename: String val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pchunk: String val psize: I32 val pfilename: String val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlParseChunk \u00b6 [Source] fun box xmlParseChunk( pctxt: NullablePointer[Xmlparserctxt ref] ref, pchunk: String val, psize: I32 val, pterminate: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pchunk: String val psize: I32 val pterminate: I32 val Returns \u00b6 I32 val xmlCreateIOParserCtxt \u00b6 [Source] fun box xmlCreateIOParserCtxt( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, penc: I32 val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlNewIOInputStream \u00b6 [Source] fun box xmlNewIOInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, penc: I32 val) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlParserFindNodeInfo \u00b6 [Source] fun box xmlParserFindNodeInfo( pctxt: NullablePointer[Xmlparserctxt ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlparsernodeinfo ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlparsernodeinfo ref] ref xmlInitNodeInfoSeq \u00b6 [Source] fun box xmlInitNodeInfoSeq( pseq: NullablePointer[Xmlparsernodeinfoseq ref] ref) : None val Parameters \u00b6 pseq: NullablePointer [ Xmlparsernodeinfoseq ref] ref Returns \u00b6 None val xmlClearNodeInfoSeq \u00b6 [Source] fun box xmlClearNodeInfoSeq( pseq: NullablePointer[Xmlparsernodeinfoseq ref] ref) : None val Parameters \u00b6 pseq: NullablePointer [ Xmlparsernodeinfoseq ref] ref Returns \u00b6 None val xmlParserFindNodeInfoIndex \u00b6 [Source] fun box xmlParserFindNodeInfoIndex( pseq: NullablePointer[Xmlparsernodeinfoseq ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : U64 val Parameters \u00b6 pseq: NullablePointer [ Xmlparsernodeinfoseq ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 U64 val xmlParserAddNodeInfo \u00b6 [Source] fun box xmlParserAddNodeInfo( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinfo: NullablePointer[Xmlparsernodeinfo ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pinfo: NullablePointer [ Xmlparsernodeinfo ref] ref Returns \u00b6 None val xmlSetExternalEntityLoader \u00b6 [Source] fun box xmlSetExternalEntityLoader( pf: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val xmlGetExternalEntityLoader \u00b6 [Source] fun box xmlGetExternalEntityLoader() : Pointer[FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlLoadExternalEntity \u00b6 [Source] fun box xmlLoadExternalEntity( pURL: String val, pID: String val, pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pURL: String val pID: String val pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlByteConsumed \u00b6 [Source] fun box xmlByteConsumed( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I64 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I64 val xmlCtxtReset \u00b6 [Source] fun box xmlCtxtReset( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlCtxtResetPush \u00b6 [Source] fun box xmlCtxtResetPush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pchunk: String val, psize: I32 val, pfilename: String val, pencoding: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pchunk: String val psize: I32 val pfilename: String val pencoding: String val Returns \u00b6 I32 val xmlCtxtUseOptions \u00b6 [Source] fun box xmlCtxtUseOptions( pctxt: NullablePointer[Xmlparserctxt ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref poptions: I32 val Returns \u00b6 I32 val xmlReadDoc \u00b6 [Source] fun box xmlReadDoc( pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pcur: String val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlReadFile \u00b6 [Source] fun box xmlReadFile( pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlReadMemory \u00b6 [Source] fun box xmlReadMemory( pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlReadFd \u00b6 [Source] fun box xmlReadFd( pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfd: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlReadIO \u00b6 [Source] fun box xmlReadIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlCtxtReadDoc \u00b6 [Source] fun box xmlCtxtReadDoc( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pcur: String val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlCtxtReadFile \u00b6 [Source] fun box xmlCtxtReadFile( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pfilename: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlCtxtReadMemory \u00b6 [Source] fun box xmlCtxtReadMemory( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlCtxtReadFd \u00b6 [Source] fun box xmlCtxtReadFd( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pfd: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlCtxtReadIO \u00b6 [Source] fun box xmlCtxtReadIO( pctxt: NullablePointer[Xmlparserctxt ref] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlHasFeature \u00b6 [Source] fun box xmlHasFeature( pfeature: I32 val) : I32 val Parameters \u00b6 pfeature: I32 val Returns \u00b6 I32 val xmlInitializePredefinedEntities \u00b6 [Source] fun box xmlInitializePredefinedEntities() : None val Returns \u00b6 None val xmlNewEntity \u00b6 [Source] fun box xmlNewEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val, pExternalID: String val, pSystemID: String val, pcontent: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val pExternalID: String val pSystemID: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlAddDocEntity \u00b6 [Source] fun box xmlAddDocEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val, pExternalID: String val, pSystemID: String val, pcontent: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val pExternalID: String val pSystemID: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlAddDtdEntity \u00b6 [Source] fun box xmlAddDtdEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val, pExternalID: String val, pSystemID: String val, pcontent: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val pExternalID: String val pSystemID: String val pcontent: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlGetPredefinedEntity \u00b6 [Source] fun box xmlGetPredefinedEntity( pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlGetDocEntity \u00b6 [Source] fun box xmlGetDocEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlGetDtdEntity \u00b6 [Source] fun box xmlGetDtdEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlGetParameterEntity \u00b6 [Source] fun box xmlGetParameterEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlEncodeEntities \u00b6 [Source] fun box xmlEncodeEntities( pdoc: NullablePointer[Xmldoc ref] tag, pinput: String val) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pinput: String val Returns \u00b6 String val xmlEncodeEntitiesReentrant \u00b6 [Source] fun box xmlEncodeEntitiesReentrant( pdoc: NullablePointer[Xmldoc ref] tag, pinput: String val) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pinput: String val Returns \u00b6 String val xmlEncodeSpecialChars \u00b6 [Source] fun box xmlEncodeSpecialChars( pdoc: NullablePointer[Xmldoc ref] tag, pinput: String val) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pinput: String val Returns \u00b6 String val xmlCreateEntitiesTable \u00b6 [Source] fun box xmlCreateEntitiesTable() : NullablePointer[Xmlhashtable ref] ref Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlCopyEntitiesTable \u00b6 [Source] fun box xmlCopyEntitiesTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlFreeEntitiesTable \u00b6 [Source] fun box xmlFreeEntitiesTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlDumpEntitiesTable \u00b6 [Source] fun box xmlDumpEntitiesTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlDumpEntityDecl \u00b6 [Source] fun box xmlDumpEntityDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pent: NullablePointer[Xmlentity ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pent: NullablePointer [ Xmlentity ref] ref Returns \u00b6 None val xmlCleanupPredefinedEntities \u00b6 [Source] fun box xmlCleanupPredefinedEntities() : None val Returns \u00b6 None val xmlRegexpCompile \u00b6 [Source] fun box xmlRegexpCompile( pregexp: String val) : NullablePointer[Xmlregexp ref] ref Parameters \u00b6 pregexp: String val Returns \u00b6 NullablePointer [ Xmlregexp ref] ref xmlRegFreeRegexp \u00b6 [Source] fun box xmlRegFreeRegexp( pregexp: NullablePointer[Xmlregexp ref] ref) : None val Parameters \u00b6 pregexp: NullablePointer [ Xmlregexp ref] ref Returns \u00b6 None val xmlRegexpExec \u00b6 [Source] fun box xmlRegexpExec( pcomp: NullablePointer[Xmlregexp ref] ref, pvalue: String val) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlregexp ref] ref pvalue: String val Returns \u00b6 I32 val xmlRegexpPrint \u00b6 [Source] fun box xmlRegexpPrint( poutput: NullablePointer[IoFile ref] ref, pregexp: NullablePointer[Xmlregexp ref] ref) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pregexp: NullablePointer [ Xmlregexp ref] ref Returns \u00b6 None val xmlRegexpIsDeterminist \u00b6 [Source] fun box xmlRegexpIsDeterminist( pcomp: NullablePointer[Xmlregexp ref] ref) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlregexp ref] ref Returns \u00b6 I32 val xmlRegNewExecCtxt \u00b6 [Source] fun box xmlRegNewExecCtxt( pcomp: NullablePointer[Xmlregexp ref] ref, pcallback: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlregexecctxt ref] ref Parameters \u00b6 pcomp: NullablePointer [ Xmlregexp ref] ref pcallback: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlregexecctxt ref] ref xmlRegFreeExecCtxt \u00b6 [Source] fun box xmlRegFreeExecCtxt( pexec: NullablePointer[Xmlregexecctxt ref] ref) : None val Parameters \u00b6 pexec: NullablePointer [ Xmlregexecctxt ref] ref Returns \u00b6 None val xmlRegExecPushString \u00b6 [Source] fun box xmlRegExecPushString( pexec: NullablePointer[Xmlregexecctxt ref] ref, pvalue: String val, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pexec: NullablePointer [ Xmlregexecctxt ref] ref pvalue: String val pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlRegExecPushString2 \u00b6 [Source] fun box xmlRegExecPushString2( pexec: NullablePointer[Xmlregexecctxt ref] ref, pvalue: String val, pvalue2: String val, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pexec: NullablePointer [ Xmlregexecctxt ref] ref pvalue: String val pvalue2: String val pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlRegExecNextValues \u00b6 [Source] fun box xmlRegExecNextValues( pexec: NullablePointer[Xmlregexecctxt ref] ref, pnbval: Pointer[I32 val] ref, pnbneg: Pointer[I32 val] ref, pvalues: Pointer[Pointer[U8 val] tag] ref, pterminal: Pointer[I32 val] ref) : I32 val Parameters \u00b6 pexec: NullablePointer [ Xmlregexecctxt ref] ref pnbval: Pointer [ I32 val] ref pnbneg: Pointer [ I32 val] ref pvalues: Pointer [ Pointer [ U8 val] tag] ref pterminal: Pointer [ I32 val] ref Returns \u00b6 I32 val xmlRegExecErrInfo \u00b6 [Source] fun box xmlRegExecErrInfo( pexec: NullablePointer[Xmlregexecctxt ref] ref, pstring: Pointer[Pointer[U8 val] tag] ref, pnbval: Pointer[I32 val] ref, pnbneg: Pointer[I32 val] ref, pvalues: Pointer[Pointer[U8 val] tag] ref, pterminal: Pointer[I32 val] ref) : I32 val Parameters \u00b6 pexec: NullablePointer [ Xmlregexecctxt ref] ref pstring: Pointer [ Pointer [ U8 val] tag] ref pnbval: Pointer [ I32 val] ref pnbneg: Pointer [ I32 val] ref pvalues: Pointer [ Pointer [ U8 val] tag] ref pterminal: Pointer [ I32 val] ref Returns \u00b6 I32 val xmlInitializeDict \u00b6 [Source] fun box xmlInitializeDict() : I32 val Returns \u00b6 I32 val xmlDictCreate \u00b6 [Source] fun box xmlDictCreate() : NullablePointer[Xmldict ref] ref Returns \u00b6 NullablePointer [ Xmldict ref] ref xmlDictSetLimit \u00b6 [Source] fun box xmlDictSetLimit( pdict: NullablePointer[Xmldict ref] ref, plimit: U64 val) : U64 val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref plimit: U64 val Returns \u00b6 U64 val xmlDictGetUsage \u00b6 [Source] fun box xmlDictGetUsage( pdict: NullablePointer[Xmldict ref] ref) : U64 val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref Returns \u00b6 U64 val xmlDictCreateSub \u00b6 [Source] fun box xmlDictCreateSub( psub: NullablePointer[Xmldict ref] ref) : NullablePointer[Xmldict ref] ref Parameters \u00b6 psub: NullablePointer [ Xmldict ref] ref Returns \u00b6 NullablePointer [ Xmldict ref] ref xmlDictReference \u00b6 [Source] fun box xmlDictReference( pdict: NullablePointer[Xmldict ref] ref) : I32 val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref Returns \u00b6 I32 val xmlDictFree \u00b6 [Source] fun box xmlDictFree( pdict: NullablePointer[Xmldict ref] ref) : None val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref Returns \u00b6 None val xmlDictLookup \u00b6 [Source] fun box xmlDictLookup( pdict: NullablePointer[Xmldict ref] ref, pname: String val, plen: I32 val) : String val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref pname: String val plen: I32 val Returns \u00b6 String val xmlDictExists \u00b6 [Source] fun box xmlDictExists( pdict: NullablePointer[Xmldict ref] ref, pname: String val, plen: I32 val) : String val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref pname: String val plen: I32 val Returns \u00b6 String val xmlDictQLookup \u00b6 [Source] fun box xmlDictQLookup( pdict: NullablePointer[Xmldict ref] ref, pprefix: String val, pname: String val) : String val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref pprefix: String val pname: String val Returns \u00b6 String val xmlDictOwns \u00b6 [Source] fun box xmlDictOwns( pdict: NullablePointer[Xmldict ref] ref, pstr: String val) : I32 val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref pstr: String val Returns \u00b6 I32 val xmlDictSize \u00b6 [Source] fun box xmlDictSize( pdict: NullablePointer[Xmldict ref] ref) : I32 val Parameters \u00b6 pdict: NullablePointer [ Xmldict ref] ref Returns \u00b6 I32 val xmlDictCleanup \u00b6 [Source] fun box xmlDictCleanup() : None val Returns \u00b6 None val xmlMemSetup \u00b6 [Source] fun box xmlMemSetup( pfreeFunc: Pointer[FUNCTIONPOINTER val] ref, pmallocFunc: Pointer[FUNCTIONPOINTER val] ref, preallocFunc: Pointer[FUNCTIONPOINTER val] ref, pstrdupFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pfreeFunc: Pointer [ FUNCTIONPOINTER val] ref pmallocFunc: Pointer [ FUNCTIONPOINTER val] ref preallocFunc: Pointer [ FUNCTIONPOINTER val] ref pstrdupFunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlMemGet \u00b6 [Source] fun box xmlMemGet( pfreeFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pmallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, preallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pstrdupFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref) : I32 val Parameters \u00b6 pfreeFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pmallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref preallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pstrdupFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref Returns \u00b6 I32 val xmlGcMemSetup \u00b6 [Source] fun box xmlGcMemSetup( pfreeFunc: Pointer[FUNCTIONPOINTER val] ref, pmallocFunc: Pointer[FUNCTIONPOINTER val] ref, pmallocAtomicFunc: Pointer[FUNCTIONPOINTER val] ref, preallocFunc: Pointer[FUNCTIONPOINTER val] ref, pstrdupFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pfreeFunc: Pointer [ FUNCTIONPOINTER val] ref pmallocFunc: Pointer [ FUNCTIONPOINTER val] ref pmallocAtomicFunc: Pointer [ FUNCTIONPOINTER val] ref preallocFunc: Pointer [ FUNCTIONPOINTER val] ref pstrdupFunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlGcMemGet \u00b6 [Source] fun box xmlGcMemGet( pfreeFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pmallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pmallocAtomicFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, preallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pstrdupFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref) : I32 val Parameters \u00b6 pfreeFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pmallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pmallocAtomicFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref preallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pstrdupFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref Returns \u00b6 I32 val xmlInitMemory \u00b6 [Source] fun box xmlInitMemory() : I32 val Returns \u00b6 I32 val xmlCleanupMemory \u00b6 [Source] fun box xmlCleanupMemory() : None val Returns \u00b6 None val xmlMemUsed \u00b6 [Source] fun box xmlMemUsed() : I32 val Returns \u00b6 I32 val xmlMemBlocks \u00b6 [Source] fun box xmlMemBlocks() : I32 val Returns \u00b6 I32 val xmlMemDisplay \u00b6 [Source] fun box xmlMemDisplay( pfp: NullablePointer[IoFile ref] ref) : None val Parameters \u00b6 pfp: NullablePointer [ IoFile ref] ref Returns \u00b6 None val xmlMemDisplayLast \u00b6 [Source] fun box xmlMemDisplayLast( pfp: NullablePointer[IoFile ref] ref, pnbBytes: I64 val) : None val Parameters \u00b6 pfp: NullablePointer [ IoFile ref] ref pnbBytes: I64 val Returns \u00b6 None val xmlMemShow \u00b6 [Source] fun box xmlMemShow( pfp: NullablePointer[IoFile ref] ref, pnr: I32 val) : None val Parameters \u00b6 pfp: NullablePointer [ IoFile ref] ref pnr: I32 val Returns \u00b6 None val xmlMemoryDump \u00b6 [Source] fun box xmlMemoryDump() : None val Returns \u00b6 None val xmlMemMalloc \u00b6 [Source] fun box xmlMemMalloc( psize: U64 val) : String val Parameters \u00b6 psize: U64 val Returns \u00b6 String val xmlMemRealloc \u00b6 [Source] fun box xmlMemRealloc( pptr: Pointer[U8 val] ref, psize: U64 val) : String val Parameters \u00b6 pptr: Pointer [ U8 val] ref psize: U64 val Returns \u00b6 String val xmlMemFree \u00b6 [Source] fun box xmlMemFree( pptr: Pointer[U8 val] ref) : None val Parameters \u00b6 pptr: Pointer [ U8 val] ref Returns \u00b6 None val xmlMemoryStrdup \u00b6 [Source] fun box xmlMemoryStrdup( pstr: String val) : String val Parameters \u00b6 pstr: String val Returns \u00b6 String val xmlMallocLoc \u00b6 [Source] fun box xmlMallocLoc( psize: U64 val, pfile: String val, pline: I32 val) : String val Parameters \u00b6 psize: U64 val pfile: String val pline: I32 val Returns \u00b6 String val xmlReallocLoc \u00b6 [Source] fun box xmlReallocLoc( pptr: Pointer[U8 val] ref, psize: U64 val, pfile: String val, pline: I32 val) : String val Parameters \u00b6 pptr: Pointer [ U8 val] ref psize: U64 val pfile: String val pline: I32 val Returns \u00b6 String val xmlMallocAtomicLoc \u00b6 [Source] fun box xmlMallocAtomicLoc( psize: U64 val, pfile: String val, pline: I32 val) : String val Parameters \u00b6 psize: U64 val pfile: String val pline: I32 val Returns \u00b6 String val xmlMemStrdupLoc \u00b6 [Source] fun box xmlMemStrdupLoc( pstr: String val, pfile: String val, pline: I32 val) : String val Parameters \u00b6 pstr: String val pfile: String val pline: I32 val Returns \u00b6 String val xmlNewMutex \u00b6 [Source] fun box xmlNewMutex() : NullablePointer[Xmlmutex ref] ref Returns \u00b6 NullablePointer [ Xmlmutex ref] ref xmlMutexLock \u00b6 [Source] fun box xmlMutexLock( ptok: NullablePointer[Xmlmutex ref] ref) : None val Parameters \u00b6 ptok: NullablePointer [ Xmlmutex ref] ref Returns \u00b6 None val xmlMutexUnlock \u00b6 [Source] fun box xmlMutexUnlock( ptok: NullablePointer[Xmlmutex ref] ref) : None val Parameters \u00b6 ptok: NullablePointer [ Xmlmutex ref] ref Returns \u00b6 None val xmlFreeMutex \u00b6 [Source] fun box xmlFreeMutex( ptok: NullablePointer[Xmlmutex ref] ref) : None val Parameters \u00b6 ptok: NullablePointer [ Xmlmutex ref] ref Returns \u00b6 None val xmlNewRMutex \u00b6 [Source] fun box xmlNewRMutex() : NullablePointer[Xmlrmutex ref] ref Returns \u00b6 NullablePointer [ Xmlrmutex ref] ref xmlRMutexLock \u00b6 [Source] fun box xmlRMutexLock( ptok: NullablePointer[Xmlrmutex ref] ref) : None val Parameters \u00b6 ptok: NullablePointer [ Xmlrmutex ref] ref Returns \u00b6 None val xmlRMutexUnlock \u00b6 [Source] fun box xmlRMutexUnlock( ptok: NullablePointer[Xmlrmutex ref] ref) : None val Parameters \u00b6 ptok: NullablePointer [ Xmlrmutex ref] ref Returns \u00b6 None val xmlFreeRMutex \u00b6 [Source] fun box xmlFreeRMutex( ptok: NullablePointer[Xmlrmutex ref] ref) : None val Parameters \u00b6 ptok: NullablePointer [ Xmlrmutex ref] ref Returns \u00b6 None val xmlInitThreads \u00b6 [Source] fun box xmlInitThreads() : None val Returns \u00b6 None val xmlLockLibrary \u00b6 [Source] fun box xmlLockLibrary() : None val Returns \u00b6 None val xmlUnlockLibrary \u00b6 [Source] fun box xmlUnlockLibrary() : None val Returns \u00b6 None val xmlGetThreadId \u00b6 [Source] fun box xmlGetThreadId() : I32 val Returns \u00b6 I32 val xmlIsMainThread \u00b6 [Source] fun box xmlIsMainThread() : I32 val Returns \u00b6 I32 val xmlCleanupThreads \u00b6 [Source] fun box xmlCleanupThreads() : None val Returns \u00b6 None val xmlGetGlobalState \u00b6 [Source] fun box xmlGetGlobalState() : NullablePointer[Xmlglobalstate ref] ref Returns \u00b6 NullablePointer [ Xmlglobalstate ref] ref xmlHashCreate \u00b6 [Source] fun box xmlHashCreate( psize: I32 val) : NullablePointer[Xmlhashtable ref] ref Parameters \u00b6 psize: I32 val Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlHashCreateDict \u00b6 [Source] fun box xmlHashCreateDict( psize: I32 val, pdict: NullablePointer[Xmldict ref] ref) : NullablePointer[Xmlhashtable ref] ref Parameters \u00b6 psize: I32 val pdict: NullablePointer [ Xmldict ref] ref Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlHashFree \u00b6 [Source] fun box xmlHashFree( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val xmlHashDefaultDeallocator \u00b6 [Source] fun box xmlHashDefaultDeallocator( pentry: Pointer[U8 val] ref, pname: String val) : None val Parameters \u00b6 pentry: Pointer [ U8 val] ref pname: String val Returns \u00b6 None val xmlHashAddEntry \u00b6 [Source] fun box xmlHashAddEntry( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, puserdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val puserdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlHashUpdateEntry \u00b6 [Source] fun box xmlHashUpdateEntry( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, puserdata: Pointer[U8 val] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val puserdata: Pointer [ U8 val] ref pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlHashAddEntry2 \u00b6 [Source] fun box xmlHashAddEntry2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, puserdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val puserdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlHashUpdateEntry2 \u00b6 [Source] fun box xmlHashUpdateEntry2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, puserdata: Pointer[U8 val] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val puserdata: Pointer [ U8 val] ref pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlHashAddEntry3 \u00b6 [Source] fun box xmlHashAddEntry3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, puserdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val puserdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlHashUpdateEntry3 \u00b6 [Source] fun box xmlHashUpdateEntry3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, puserdata: Pointer[U8 val] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val puserdata: Pointer [ U8 val] ref pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlHashRemoveEntry \u00b6 [Source] fun box xmlHashRemoveEntry( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlHashRemoveEntry2 \u00b6 [Source] fun box xmlHashRemoveEntry2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlHashRemoveEntry3 \u00b6 [Source] fun box xmlHashRemoveEntry3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlHashLookup \u00b6 [Source] fun box xmlHashLookup( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val) : String val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val Returns \u00b6 String val xmlHashLookup2 \u00b6 [Source] fun box xmlHashLookup2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val) : String val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val Returns \u00b6 String val xmlHashLookup3 \u00b6 [Source] fun box xmlHashLookup3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val) : String val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val Returns \u00b6 String val xmlHashQLookup \u00b6 [Source] fun box xmlHashQLookup( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pprefix: String val) : String val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pprefix: String val Returns \u00b6 String val xmlHashQLookup2 \u00b6 [Source] fun box xmlHashQLookup2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pprefix: String val, pname2: String val, pprefix2: String val) : String val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pprefix: String val pname2: String val pprefix2: String val Returns \u00b6 String val xmlHashQLookup3 \u00b6 [Source] fun box xmlHashQLookup3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pprefix: String val, pname2: String val, pprefix2: String val, pname3: String val, pprefix3: String val) : String val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pprefix: String val pname2: String val pprefix2: String val pname3: String val pprefix3: String val Returns \u00b6 String val xmlHashCopy \u00b6 [Source] fun box xmlHashCopy( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : NullablePointer[Xmlhashtable ref] ref Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlHashSize \u00b6 [Source] fun box xmlHashSize( ptable: NullablePointer[Xmlhashtable ref] ref) : I32 val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 I32 val xmlHashScan \u00b6 [Source] fun box xmlHashScan( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref Returns \u00b6 None val xmlHashScan3 \u00b6 [Source] fun box xmlHashScan3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref Returns \u00b6 None val xmlHashScanFull \u00b6 [Source] fun box xmlHashScanFull( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref Returns \u00b6 None val xmlHashScanFull3 \u00b6 [Source] fun box xmlHashScanFull3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref Returns \u00b6 None val xmlSetGenericErrorFunc \u00b6 [Source] fun box xmlSetGenericErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val initGenericErrorDefaultFunc \u00b6 [Source] fun box initGenericErrorDefaultFunc( phandler: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref) : None val Parameters \u00b6 phandler: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref Returns \u00b6 None val xmlSetStructuredErrorFunc \u00b6 [Source] fun box xmlSetStructuredErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val xmlParserError \u00b6 [Source] fun box xmlParserError( pctx: Pointer[U8 val] ref, pmsg: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pmsg: String val Returns \u00b6 None val xmlParserWarning \u00b6 [Source] fun box xmlParserWarning( pctx: Pointer[U8 val] ref, pmsg: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pmsg: String val Returns \u00b6 None val xmlParserValidityError \u00b6 [Source] fun box xmlParserValidityError( pctx: Pointer[U8 val] ref, pmsg: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pmsg: String val Returns \u00b6 None val xmlParserValidityWarning \u00b6 [Source] fun box xmlParserValidityWarning( pctx: Pointer[U8 val] ref, pmsg: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pmsg: String val Returns \u00b6 None val xmlParserPrintFileInfo \u00b6 [Source] fun box xmlParserPrintFileInfo( pinput: NullablePointer[Xmlparserinput ref] ref) : None val Parameters \u00b6 pinput: NullablePointer [ Xmlparserinput ref] ref Returns \u00b6 None val xmlParserPrintFileContext \u00b6 [Source] fun box xmlParserPrintFileContext( pinput: NullablePointer[Xmlparserinput ref] ref) : None val Parameters \u00b6 pinput: NullablePointer [ Xmlparserinput ref] ref Returns \u00b6 None val xmlGetLastError \u00b6 [Source] fun box xmlGetLastError() : NullablePointer[Xmlerror ref] ref Returns \u00b6 NullablePointer [ Xmlerror ref] ref xmlResetLastError \u00b6 [Source] fun box xmlResetLastError() : None val Returns \u00b6 None val xmlCtxtGetLastError \u00b6 [Source] fun box xmlCtxtGetLastError( pctx: Pointer[U8 val] ref) : NullablePointer[Xmlerror ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlerror ref] ref xmlCtxtResetLastError \u00b6 [Source] fun box xmlCtxtResetLastError( pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlResetError \u00b6 [Source] fun box xmlResetError( perr: NullablePointer[Xmlerror ref] ref) : None val Parameters \u00b6 perr: NullablePointer [ Xmlerror ref] ref Returns \u00b6 None val xmlCopyError \u00b6 [Source] fun box xmlCopyError( pfrom: NullablePointer[Xmlerror ref] ref, pto: NullablePointer[Xmlerror ref] ref) : I32 val Parameters \u00b6 pfrom: NullablePointer [ Xmlerror ref] ref pto: NullablePointer [ Xmlerror ref] ref Returns \u00b6 I32 val xmlListCreate \u00b6 [Source] fun box xmlListCreate( pdeallocator: Pointer[FUNCTIONPOINTER val] ref, pcompare: Pointer[FUNCTIONPOINTER val] ref) : NullablePointer[Xmllist ref] ref Parameters \u00b6 pdeallocator: Pointer [ FUNCTIONPOINTER val] ref pcompare: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 NullablePointer [ Xmllist ref] ref xmlListDelete \u00b6 [Source] fun box xmlListDelete( pl: NullablePointer[Xmllist ref] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 None val xmlListSearch \u00b6 [Source] fun box xmlListSearch( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : String val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 String val xmlListReverseSearch \u00b6 [Source] fun box xmlListReverseSearch( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : String val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 String val xmlListInsert \u00b6 [Source] fun box xmlListInsert( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlListAppend \u00b6 [Source] fun box xmlListAppend( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlListRemoveFirst \u00b6 [Source] fun box xmlListRemoveFirst( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlListRemoveLast \u00b6 [Source] fun box xmlListRemoveLast( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlListRemoveAll \u00b6 [Source] fun box xmlListRemoveAll( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlListClear \u00b6 [Source] fun box xmlListClear( pl: NullablePointer[Xmllist ref] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 None val xmlListEmpty \u00b6 [Source] fun box xmlListEmpty( pl: NullablePointer[Xmllist ref] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 I32 val xmlListFront \u00b6 [Source] fun box xmlListFront( pl: NullablePointer[Xmllist ref] ref) : NullablePointer[Xmllink ref] ref Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 NullablePointer [ Xmllink ref] ref xmlListEnd \u00b6 [Source] fun box xmlListEnd( pl: NullablePointer[Xmllist ref] ref) : NullablePointer[Xmllink ref] ref Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 NullablePointer [ Xmllink ref] ref xmlListSize \u00b6 [Source] fun box xmlListSize( pl: NullablePointer[Xmllist ref] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 I32 val xmlListPopFront \u00b6 [Source] fun box xmlListPopFront( pl: NullablePointer[Xmllist ref] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 None val xmlListPopBack \u00b6 [Source] fun box xmlListPopBack( pl: NullablePointer[Xmllist ref] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 None val xmlListPushFront \u00b6 [Source] fun box xmlListPushFront( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlListPushBack \u00b6 [Source] fun box xmlListPushBack( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlListReverse \u00b6 [Source] fun box xmlListReverse( pl: NullablePointer[Xmllist ref] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 None val xmlListSort \u00b6 [Source] fun box xmlListSort( pl: NullablePointer[Xmllist ref] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref Returns \u00b6 None val xmlListWalk \u00b6 [Source] fun box xmlListWalk( pl: NullablePointer[Xmllist ref] ref, pwalker: Pointer[FUNCTIONPOINTER val] ref, puser: Pointer[U8 val] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pwalker: Pointer [ FUNCTIONPOINTER val] ref puser: Pointer [ U8 val] ref Returns \u00b6 None val xmlListReverseWalk \u00b6 [Source] fun box xmlListReverseWalk( pl: NullablePointer[Xmllist ref] ref, pwalker: Pointer[FUNCTIONPOINTER val] ref, puser: Pointer[U8 val] ref) : None val Parameters \u00b6 pl: NullablePointer [ Xmllist ref] ref pwalker: Pointer [ FUNCTIONPOINTER val] ref puser: Pointer [ U8 val] ref Returns \u00b6 None val xmlListMerge \u00b6 [Source] fun box xmlListMerge( pl1: NullablePointer[Xmllist ref] ref, pl2: NullablePointer[Xmllist ref] ref) : None val Parameters \u00b6 pl1: NullablePointer [ Xmllist ref] ref pl2: NullablePointer [ Xmllist ref] ref Returns \u00b6 None val xmlListDup \u00b6 [Source] fun box xmlListDup( pold: NullablePointer[Xmllist ref] ref) : NullablePointer[Xmllist ref] ref Parameters \u00b6 pold: NullablePointer [ Xmllist ref] ref Returns \u00b6 NullablePointer [ Xmllist ref] ref xmlListCopy \u00b6 [Source] fun box xmlListCopy( pcur: NullablePointer[Xmllist ref] ref, pold: NullablePointer[Xmllist ref] ref) : I32 val Parameters \u00b6 pcur: NullablePointer [ Xmllist ref] ref pold: NullablePointer [ Xmllist ref] ref Returns \u00b6 I32 val xmlLinkGetData \u00b6 [Source] fun box xmlLinkGetData( plk: NullablePointer[Xmllink ref] ref) : String val Parameters \u00b6 plk: NullablePointer [ Xmllink ref] ref Returns \u00b6 String val xmlNewAutomata \u00b6 [Source] fun box xmlNewAutomata() : NullablePointer[Xmlautomata ref] ref Returns \u00b6 NullablePointer [ Xmlautomata ref] ref xmlFreeAutomata \u00b6 [Source] fun box xmlFreeAutomata( pam: NullablePointer[Xmlautomata ref] ref) : None val Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref Returns \u00b6 None val xmlAutomataGetInitState \u00b6 [Source] fun box xmlAutomataGetInitState( pam: NullablePointer[Xmlautomata ref] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataSetFinalState \u00b6 [Source] fun box xmlAutomataSetFinalState( pam: NullablePointer[Xmlautomata ref] ref, pstate: NullablePointer[Xmlautomatastate ref] ref) : I32 val Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pstate: NullablePointer [ Xmlautomatastate ref] ref Returns \u00b6 I32 val xmlAutomataNewState \u00b6 [Source] fun box xmlAutomataNewState( pam: NullablePointer[Xmlautomata ref] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewTransition \u00b6 [Source] fun box xmlAutomataNewTransition( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewTransition2 \u00b6 [Source] fun box xmlAutomataNewTransition2( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewNegTrans \u00b6 [Source] fun box xmlAutomataNewNegTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewCountTrans \u00b6 [Source] fun box xmlAutomataNewCountTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewCountTrans2 \u00b6 [Source] fun box xmlAutomataNewCountTrans2( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewOnceTrans \u00b6 [Source] fun box xmlAutomataNewOnceTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewOnceTrans2 \u00b6 [Source] fun box xmlAutomataNewOnceTrans2( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewAllTrans \u00b6 [Source] fun box xmlAutomataNewAllTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, plax: I32 val) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref plax: I32 val Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewEpsilon \u00b6 [Source] fun box xmlAutomataNewEpsilon( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewCountedTrans \u00b6 [Source] fun box xmlAutomataNewCountedTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, pcounter: I32 val) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref pcounter: I32 val Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewCounterTrans \u00b6 [Source] fun box xmlAutomataNewCounterTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, pcounter: I32 val) : NullablePointer[Xmlautomatastate ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref pcounter: I32 val Returns \u00b6 NullablePointer [ Xmlautomatastate ref] ref xmlAutomataNewCounter \u00b6 [Source] fun box xmlAutomataNewCounter( pam: NullablePointer[Xmlautomata ref] ref, pmin: I32 val, pmax: I32 val) : I32 val Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref pmin: I32 val pmax: I32 val Returns \u00b6 I32 val xmlAutomataCompile \u00b6 [Source] fun box xmlAutomataCompile( pam: NullablePointer[Xmlautomata ref] ref) : NullablePointer[Xmlregexp ref] ref Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref Returns \u00b6 NullablePointer [ Xmlregexp ref] ref xmlAutomataIsDeterminist \u00b6 [Source] fun box xmlAutomataIsDeterminist( pam: NullablePointer[Xmlautomata ref] ref) : I32 val Parameters \u00b6 pam: NullablePointer [ Xmlautomata ref] ref Returns \u00b6 I32 val xmlAddNotationDecl \u00b6 [Source] fun box xmlAddNotationDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdtd: NullablePointer[Xmldtd ref] ref, pname: String val, pPublicID: String val, pSystemID: String val) : NullablePointer[Xmlnotation ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdtd: NullablePointer [ Xmldtd ref] ref pname: String val pPublicID: String val pSystemID: String val Returns \u00b6 NullablePointer [ Xmlnotation ref] ref xmlCopyNotationTable \u00b6 [Source] fun box xmlCopyNotationTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlFreeNotationTable \u00b6 [Source] fun box xmlFreeNotationTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlDumpNotationDecl \u00b6 [Source] fun box xmlDumpNotationDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pnota: NullablePointer[Xmlnotation ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pnota: NullablePointer [ Xmlnotation ref] ref Returns \u00b6 None val xmlDumpNotationTable \u00b6 [Source] fun box xmlDumpNotationTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlNewElementContent \u00b6 [Source] fun box xmlNewElementContent( pname: String val, ptype: I32 val) : NullablePointer[Xmlelementcontent ref] ref Parameters \u00b6 pname: String val ptype: I32 val Returns \u00b6 NullablePointer [ Xmlelementcontent ref] ref xmlCopyElementContent \u00b6 [Source] fun box xmlCopyElementContent( pcontent: NullablePointer[Xmlelementcontent ref] ref) : NullablePointer[Xmlelementcontent ref] ref Parameters \u00b6 pcontent: NullablePointer [ Xmlelementcontent ref] ref Returns \u00b6 NullablePointer [ Xmlelementcontent ref] ref xmlFreeElementContent \u00b6 [Source] fun box xmlFreeElementContent( pcur: NullablePointer[Xmlelementcontent ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlelementcontent ref] ref Returns \u00b6 None val xmlNewDocElementContent \u00b6 [Source] fun box xmlNewDocElementContent( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val) : NullablePointer[Xmlelementcontent ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val Returns \u00b6 NullablePointer [ Xmlelementcontent ref] ref xmlCopyDocElementContent \u00b6 [Source] fun box xmlCopyDocElementContent( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: NullablePointer[Xmlelementcontent ref] ref) : NullablePointer[Xmlelementcontent ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pcontent: NullablePointer [ Xmlelementcontent ref] ref Returns \u00b6 NullablePointer [ Xmlelementcontent ref] ref xmlFreeDocElementContent \u00b6 [Source] fun box xmlFreeDocElementContent( pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlelementcontent ref] ref) : None val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlelementcontent ref] ref Returns \u00b6 None val xmlSnprintfElementContent \u00b6 [Source] fun box xmlSnprintfElementContent( pbuf: String val, psize: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref, penglob: I32 val) : None val Parameters \u00b6 pbuf: String val psize: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref penglob: I32 val Returns \u00b6 None val xmlSprintfElementContent \u00b6 [Source] fun box xmlSprintfElementContent( pbuf: String val, pcontent: NullablePointer[Xmlelementcontent ref] ref, penglob: I32 val) : None val Parameters \u00b6 pbuf: String val pcontent: NullablePointer [ Xmlelementcontent ref] ref penglob: I32 val Returns \u00b6 None val xmlAddElementDecl \u00b6 [Source] fun box xmlAddElementDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdtd: NullablePointer[Xmldtd ref] ref, pname: String val, ptype: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref) : NullablePointer[Xmlelement ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdtd: NullablePointer [ Xmldtd ref] ref pname: String val ptype: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref Returns \u00b6 NullablePointer [ Xmlelement ref] ref xmlCopyElementTable \u00b6 [Source] fun box xmlCopyElementTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlFreeElementTable \u00b6 [Source] fun box xmlFreeElementTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlDumpElementTable \u00b6 [Source] fun box xmlDumpElementTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlDumpElementDecl \u00b6 [Source] fun box xmlDumpElementDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pelem: NullablePointer[Xmlelement ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pelem: NullablePointer [ Xmlelement ref] ref Returns \u00b6 None val xmlCreateEnumeration \u00b6 [Source] fun box xmlCreateEnumeration( pname: String val) : NullablePointer[Xmlenumeration ref] ref Parameters \u00b6 pname: String val Returns \u00b6 NullablePointer [ Xmlenumeration ref] ref xmlFreeEnumeration \u00b6 [Source] fun box xmlFreeEnumeration( pcur: NullablePointer[Xmlenumeration ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlenumeration ref] ref Returns \u00b6 None val xmlCopyEnumeration \u00b6 [Source] fun box xmlCopyEnumeration( pcur: NullablePointer[Xmlenumeration ref] ref) : NullablePointer[Xmlenumeration ref] ref Parameters \u00b6 pcur: NullablePointer [ Xmlenumeration ref] ref Returns \u00b6 NullablePointer [ Xmlenumeration ref] ref xmlAddAttributeDecl \u00b6 [Source] fun box xmlAddAttributeDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdtd: NullablePointer[Xmldtd ref] ref, pelem: String val, pname: String val, pns: String val, ptype: I32 val, pdef: I32 val, pdefaultValue: String val, ptree: NullablePointer[Xmlenumeration ref] ref) : NullablePointer[Xmlattribute ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdtd: NullablePointer [ Xmldtd ref] ref pelem: String val pname: String val pns: String val ptype: I32 val pdef: I32 val pdefaultValue: String val ptree: NullablePointer [ Xmlenumeration ref] ref Returns \u00b6 NullablePointer [ Xmlattribute ref] ref xmlCopyAttributeTable \u00b6 [Source] fun box xmlCopyAttributeTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 NullablePointer [ Xmlhashtable ref] ref xmlFreeAttributeTable \u00b6 [Source] fun box xmlFreeAttributeTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlDumpAttributeTable \u00b6 [Source] fun box xmlDumpAttributeTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlDumpAttributeDecl \u00b6 [Source] fun box xmlDumpAttributeDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pattr: NullablePointer[Xmlattribute ref] ref) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pattr: NullablePointer [ Xmlattribute ref] ref Returns \u00b6 None val xmlAddID \u00b6 [Source] fun box xmlAddID( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val, pattr: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlid ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val pattr: NullablePointer [ Xmlattr ref] ref Returns \u00b6 NullablePointer [ Xmlid ref] ref xmlFreeIDTable \u00b6 [Source] fun box xmlFreeIDTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlGetID \u00b6 [Source] fun box xmlGetID( pdoc: NullablePointer[Xmldoc ref] tag, pID: String val) : NullablePointer[Xmlattr ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pID: String val Returns \u00b6 NullablePointer [ Xmlattr ref] ref xmlIsID \u00b6 [Source] fun box xmlIsID( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pattr: NullablePointer[Xmlattr ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pattr: NullablePointer [ Xmlattr ref] ref Returns \u00b6 I32 val xmlRemoveID \u00b6 [Source] fun box xmlRemoveID( pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattr ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattr ref] ref Returns \u00b6 I32 val xmlAddRef \u00b6 [Source] fun box xmlAddRef( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val, pattr: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlref ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val pattr: NullablePointer [ Xmlattr ref] ref Returns \u00b6 NullablePointer [ Xmlref ref] ref xmlFreeRefTable \u00b6 [Source] fun box xmlFreeRefTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val Parameters \u00b6 ptable: NullablePointer [ Xmlhashtable ref] ref Returns \u00b6 None val xmlIsRef \u00b6 [Source] fun box xmlIsRef( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pattr: NullablePointer[Xmlattr ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pattr: NullablePointer [ Xmlattr ref] ref Returns \u00b6 I32 val xmlRemoveRef \u00b6 [Source] fun box xmlRemoveRef( pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattr ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattr ref] ref Returns \u00b6 I32 val xmlGetRefs \u00b6 [Source] fun box xmlGetRefs( pdoc: NullablePointer[Xmldoc ref] tag, pID: String val) : NullablePointer[Xmllist ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pID: String val Returns \u00b6 NullablePointer [ Xmllist ref] ref xmlNewValidCtxt \u00b6 [Source] fun box xmlNewValidCtxt() : NullablePointer[Xmlvalidctxt ref] ref Returns \u00b6 NullablePointer [ Xmlvalidctxt ref] ref xmlFreeValidCtxt \u00b6 [Source] fun box xmlFreeValidCtxt( p: NullablePointer[Xmlvalidctxt ref] ref) : None val Parameters \u00b6 p: NullablePointer [ Xmlvalidctxt ref] ref Returns \u00b6 None val xmlValidateRoot \u00b6 [Source] fun box xmlValidateRoot( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlValidateElementDecl \u00b6 [Source] fun box xmlValidateElementDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlelement ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlelement ref] ref Returns \u00b6 I32 val xmlValidNormalizeAttributeValue \u00b6 [Source] fun box xmlValidNormalizeAttributeValue( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val Returns \u00b6 String val xmlValidCtxtNormalizeAttributeValue \u00b6 [Source] fun box xmlValidCtxtNormalizeAttributeValue( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val Returns \u00b6 String val xmlValidateAttributeDecl \u00b6 [Source] fun box xmlValidateAttributeDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattribute ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattribute ref] ref Returns \u00b6 I32 val xmlValidateAttributeValue \u00b6 [Source] fun box xmlValidateAttributeValue( ptype: I32 val, pvalue: String val) : I32 val Parameters \u00b6 ptype: I32 val pvalue: String val Returns \u00b6 I32 val xmlValidateNotationDecl \u00b6 [Source] fun box xmlValidateNotationDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pnota: NullablePointer[Xmlnotation ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pnota: NullablePointer [ Xmlnotation ref] ref Returns \u00b6 I32 val xmlValidateDtd \u00b6 [Source] fun box xmlValidateDtd( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pdtd: NullablePointer[Xmldtd ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pdtd: NullablePointer [ Xmldtd ref] ref Returns \u00b6 I32 val xmlValidateDtdFinal \u00b6 [Source] fun box xmlValidateDtdFinal( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlValidateDocument \u00b6 [Source] fun box xmlValidateDocument( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlValidateElement \u00b6 [Source] fun box xmlValidateElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlValidateOneElement \u00b6 [Source] fun box xmlValidateOneElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlValidateOneAttribute \u00b6 [Source] fun box xmlValidateOneAttribute( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pattr: NullablePointer[Xmlattr ref] ref, pvalue: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pattr: NullablePointer [ Xmlattr ref] ref pvalue: String val Returns \u00b6 I32 val xmlValidateOneNamespace \u00b6 [Source] fun box xmlValidateOneNamespace( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pprefix: String val, pns: NullablePointer[Xmlns ref] ref, pvalue: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pprefix: String val pns: NullablePointer [ Xmlns ref] ref pvalue: String val Returns \u00b6 I32 val xmlValidateDocumentFinal \u00b6 [Source] fun box xmlValidateDocumentFinal( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlValidateNotationUse \u00b6 [Source] fun box xmlValidateNotationUse( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pnotationName: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pnotationName: String val Returns \u00b6 I32 val xmlIsMixedElement \u00b6 [Source] fun box xmlIsMixedElement( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val Returns \u00b6 I32 val xmlGetDtdAttrDesc \u00b6 [Source] fun box xmlGetDtdAttrDesc( pdtd: NullablePointer[Xmldtd ref] ref, pelem: String val, pname: String val) : NullablePointer[Xmlattribute ref] ref Parameters \u00b6 pdtd: NullablePointer [ Xmldtd ref] ref pelem: String val pname: String val Returns \u00b6 NullablePointer [ Xmlattribute ref] ref xmlGetDtdQAttrDesc \u00b6 [Source] fun box xmlGetDtdQAttrDesc( pdtd: NullablePointer[Xmldtd ref] ref, pelem: String val, pname: String val, pprefix: String val) : NullablePointer[Xmlattribute ref] ref Parameters \u00b6 pdtd: NullablePointer [ Xmldtd ref] ref pelem: String val pname: String val pprefix: String val Returns \u00b6 NullablePointer [ Xmlattribute ref] ref xmlGetDtdNotationDesc \u00b6 [Source] fun box xmlGetDtdNotationDesc( pdtd: NullablePointer[Xmldtd ref] ref, pname: String val) : NullablePointer[Xmlnotation ref] ref Parameters \u00b6 pdtd: NullablePointer [ Xmldtd ref] ref pname: String val Returns \u00b6 NullablePointer [ Xmlnotation ref] ref xmlGetDtdQElementDesc \u00b6 [Source] fun box xmlGetDtdQElementDesc( pdtd: NullablePointer[Xmldtd ref] ref, pname: String val, pprefix: String val) : NullablePointer[Xmlelement ref] ref Parameters \u00b6 pdtd: NullablePointer [ Xmldtd ref] ref pname: String val pprefix: String val Returns \u00b6 NullablePointer [ Xmlelement ref] ref xmlGetDtdElementDesc \u00b6 [Source] fun box xmlGetDtdElementDesc( pdtd: NullablePointer[Xmldtd ref] ref, pname: String val) : NullablePointer[Xmlelement ref] ref Parameters \u00b6 pdtd: NullablePointer [ Xmldtd ref] ref pname: String val Returns \u00b6 NullablePointer [ Xmlelement ref] ref xmlValidGetPotentialChildren \u00b6 [Source] fun box xmlValidGetPotentialChildren( pctree: NullablePointer[Xmlelementcontent ref] ref, pnames: Pointer[Pointer[U8 val] tag] ref, plen: Pointer[I32 val] ref, pmax: I32 val) : I32 val Parameters \u00b6 pctree: NullablePointer [ Xmlelementcontent ref] ref pnames: Pointer [ Pointer [ U8 val] tag] ref plen: Pointer [ I32 val] ref pmax: I32 val Returns \u00b6 I32 val xmlValidGetValidElements \u00b6 [Source] fun box xmlValidGetValidElements( pprev: NullablePointer[Xmlnode ref] ref, pnext: NullablePointer[Xmlnode ref] ref, pnames: Pointer[Pointer[U8 val] tag] ref, pmax: I32 val) : I32 val Parameters \u00b6 pprev: NullablePointer [ Xmlnode ref] ref pnext: NullablePointer [ Xmlnode ref] ref pnames: Pointer [ Pointer [ U8 val] tag] ref pmax: I32 val Returns \u00b6 I32 val xmlValidateNameValue \u00b6 [Source] fun box xmlValidateNameValue( pvalue: String val) : I32 val Parameters \u00b6 pvalue: String val Returns \u00b6 I32 val xmlValidateNamesValue \u00b6 [Source] fun box xmlValidateNamesValue( pvalue: String val) : I32 val Parameters \u00b6 pvalue: String val Returns \u00b6 I32 val xmlValidateNmtokenValue \u00b6 [Source] fun box xmlValidateNmtokenValue( pvalue: String val) : I32 val Parameters \u00b6 pvalue: String val Returns \u00b6 I32 val xmlValidateNmtokensValue \u00b6 [Source] fun box xmlValidateNmtokensValue( pvalue: String val) : I32 val Parameters \u00b6 pvalue: String val Returns \u00b6 I32 val xmlValidBuildContentModel \u00b6 [Source] fun box xmlValidBuildContentModel( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pelem: NullablePointer[Xmlelement ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pelem: NullablePointer [ Xmlelement ref] ref Returns \u00b6 I32 val xmlValidatePushElement \u00b6 [Source] fun box xmlValidatePushElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pqname: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pqname: String val Returns \u00b6 I32 val xmlValidatePushCData \u00b6 [Source] fun box xmlValidatePushCData( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdata: String val, plen: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdata: String val plen: I32 val Returns \u00b6 I32 val xmlValidatePopElement \u00b6 [Source] fun box xmlValidatePopElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pqname: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pqname: String val Returns \u00b6 I32 val xmlInitCharEncodingHandlers \u00b6 [Source] fun box xmlInitCharEncodingHandlers() : None val Returns \u00b6 None val xmlCleanupCharEncodingHandlers \u00b6 [Source] fun box xmlCleanupCharEncodingHandlers() : None val Returns \u00b6 None val xmlRegisterCharEncodingHandler \u00b6 [Source] fun box xmlRegisterCharEncodingHandler( phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : None val Parameters \u00b6 phandler: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 None val xmlGetCharEncodingHandler \u00b6 [Source] fun box xmlGetCharEncodingHandler( penc: I32 val) : NullablePointer[Xmlcharencodinghandler ref] ref Parameters \u00b6 penc: I32 val Returns \u00b6 NullablePointer [ Xmlcharencodinghandler ref] ref xmlFindCharEncodingHandler \u00b6 [Source] fun box xmlFindCharEncodingHandler( pname: String val) : NullablePointer[Xmlcharencodinghandler ref] ref Parameters \u00b6 pname: String val Returns \u00b6 NullablePointer [ Xmlcharencodinghandler ref] ref xmlNewCharEncodingHandler \u00b6 [Source] fun box xmlNewCharEncodingHandler( pname: String val, pinput: Pointer[FUNCTIONPOINTER val] ref, poutput: Pointer[FUNCTIONPOINTER val] ref) : NullablePointer[Xmlcharencodinghandler ref] ref Parameters \u00b6 pname: String val pinput: Pointer [ FUNCTIONPOINTER val] ref poutput: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 NullablePointer [ Xmlcharencodinghandler ref] ref xmlAddEncodingAlias \u00b6 [Source] fun box xmlAddEncodingAlias( pname: String val, palias: String val) : I32 val Parameters \u00b6 pname: String val palias: String val Returns \u00b6 I32 val xmlDelEncodingAlias \u00b6 [Source] fun box xmlDelEncodingAlias( palias: String val) : I32 val Parameters \u00b6 palias: String val Returns \u00b6 I32 val xmlGetEncodingAlias \u00b6 [Source] fun box xmlGetEncodingAlias( palias: String val) : String val Parameters \u00b6 palias: String val Returns \u00b6 String val xmlCleanupEncodingAliases \u00b6 [Source] fun box xmlCleanupEncodingAliases() : None val Returns \u00b6 None val xmlParseCharEncoding \u00b6 [Source] fun box xmlParseCharEncoding( pname: String val) : I32 val Parameters \u00b6 pname: String val Returns \u00b6 I32 val xmlGetCharEncodingName \u00b6 [Source] fun box xmlGetCharEncodingName( penc: I32 val) : String val Parameters \u00b6 penc: I32 val Returns \u00b6 String val xmlDetectCharEncoding \u00b6 [Source] fun box xmlDetectCharEncoding( pin: String val, plen: I32 val) : I32 val Parameters \u00b6 pin: String val plen: I32 val Returns \u00b6 I32 val xmlCharEncOutFunc \u00b6 [Source] fun box xmlCharEncOutFunc( phandler: NullablePointer[Xmlcharencodinghandler ref] ref, pout: NullablePointer[Xmlbuffer ref] ref, pin: NullablePointer[Xmlbuffer ref] ref) : I32 val Parameters \u00b6 phandler: NullablePointer [ Xmlcharencodinghandler ref] ref pout: NullablePointer [ Xmlbuffer ref] ref pin: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 I32 val xmlCharEncInFunc \u00b6 [Source] fun box xmlCharEncInFunc( phandler: NullablePointer[Xmlcharencodinghandler ref] ref, pout: NullablePointer[Xmlbuffer ref] ref, pin: NullablePointer[Xmlbuffer ref] ref) : I32 val Parameters \u00b6 phandler: NullablePointer [ Xmlcharencodinghandler ref] ref pout: NullablePointer [ Xmlbuffer ref] ref pin: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 I32 val xmlCharEncFirstLine \u00b6 [Source] fun box xmlCharEncFirstLine( phandler: NullablePointer[Xmlcharencodinghandler ref] ref, pout: NullablePointer[Xmlbuffer ref] ref, pin: NullablePointer[Xmlbuffer ref] ref) : I32 val Parameters \u00b6 phandler: NullablePointer [ Xmlcharencodinghandler ref] ref pout: NullablePointer [ Xmlbuffer ref] ref pin: NullablePointer [ Xmlbuffer ref] ref Returns \u00b6 I32 val xmlCharEncCloseFunc \u00b6 [Source] fun box xmlCharEncCloseFunc( phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : I32 val Parameters \u00b6 phandler: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 I32 val utf8Toisolat1 \u00b6 [Source] fun box utf8Toisolat1( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref) : I32 val Parameters \u00b6 pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref Returns \u00b6 I32 val isolat1ToUTF8 \u00b6 [Source] fun box isolat1ToUTF8( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref) : I32 val Parameters \u00b6 pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref Returns \u00b6 I32 val xlinkGetDefaultDetect \u00b6 [Source] fun box xlinkGetDefaultDetect() : Pointer[FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xlinkSetDefaultDetect \u00b6 [Source] fun box xlinkSetDefaultDetect( pfunc: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val xlinkGetDefaultHandler \u00b6 [Source] fun box xlinkGetDefaultHandler() : NullablePointer[Xlinkhandler ref] ref Returns \u00b6 NullablePointer [ Xlinkhandler ref] ref xlinkSetDefaultHandler \u00b6 [Source] fun box xlinkSetDefaultHandler( phandler: NullablePointer[Xlinkhandler ref] ref) : None val Parameters \u00b6 phandler: NullablePointer [ Xlinkhandler ref] ref Returns \u00b6 None val xlinkIsLink \u00b6 [Source] fun box xlinkIsLink( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlSAX2GetPublicId \u00b6 [Source] fun box xmlSAX2GetPublicId( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val xmlSAX2GetSystemId \u00b6 [Source] fun box xmlSAX2GetSystemId( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val xmlSAX2SetDocumentLocator \u00b6 [Source] fun box xmlSAX2SetDocumentLocator( pctx: Pointer[U8 val] ref, ploc: NullablePointer[Xmlsaxlocator ref] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref ploc: NullablePointer [ Xmlsaxlocator ref] ref Returns \u00b6 None val xmlSAX2GetLineNumber \u00b6 [Source] fun box xmlSAX2GetLineNumber( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlSAX2GetColumnNumber \u00b6 [Source] fun box xmlSAX2GetColumnNumber( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlSAX2IsStandalone \u00b6 [Source] fun box xmlSAX2IsStandalone( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlSAX2HasInternalSubset \u00b6 [Source] fun box xmlSAX2HasInternalSubset( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlSAX2HasExternalSubset \u00b6 [Source] fun box xmlSAX2HasExternalSubset( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlSAX2InternalSubset \u00b6 [Source] fun box xmlSAX2InternalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val Returns \u00b6 None val xmlSAX2ExternalSubset \u00b6 [Source] fun box xmlSAX2ExternalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val Returns \u00b6 None val xmlSAX2GetEntity \u00b6 [Source] fun box xmlSAX2GetEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlSAX2GetParameterEntity \u00b6 [Source] fun box xmlSAX2GetParameterEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlSAX2ResolveEntity \u00b6 [Source] fun box xmlSAX2ResolveEntity( pctx: Pointer[U8 val] ref, ppublicId: String val, psystemId: String val) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref ppublicId: String val psystemId: String val Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlSAX2EntityDecl \u00b6 [Source] fun box xmlSAX2EntityDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, ppublicId: String val, psystemId: String val, pcontent: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val ppublicId: String val psystemId: String val pcontent: String val Returns \u00b6 None val xmlSAX2AttributeDecl \u00b6 [Source] fun box xmlSAX2AttributeDecl( pctx: Pointer[U8 val] ref, pelem: String val, pfullname: String val, ptype: I32 val, pdef: I32 val, pdefaultValue: String val, ptree: NullablePointer[Xmlenumeration ref] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pelem: String val pfullname: String val ptype: I32 val pdef: I32 val pdefaultValue: String val ptree: NullablePointer [ Xmlenumeration ref] ref Returns \u00b6 None val xmlSAX2ElementDecl \u00b6 [Source] fun box xmlSAX2ElementDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref Returns \u00b6 None val xmlSAX2NotationDecl \u00b6 [Source] fun box xmlSAX2NotationDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val Returns \u00b6 None val xmlSAX2UnparsedEntityDecl \u00b6 [Source] fun box xmlSAX2UnparsedEntityDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val, pnotationName: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val pnotationName: String val Returns \u00b6 None val xmlSAX2StartDocument \u00b6 [Source] fun box xmlSAX2StartDocument( pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlSAX2EndDocument \u00b6 [Source] fun box xmlSAX2EndDocument( pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlSAX2StartElement \u00b6 [Source] fun box xmlSAX2StartElement( pctx: Pointer[U8 val] ref, pfullname: String val, patts: Pointer[Pointer[U8 val] tag] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pfullname: String val patts: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 None val xmlSAX2EndElement \u00b6 [Source] fun box xmlSAX2EndElement( pctx: Pointer[U8 val] ref, pname: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 None val xmlSAX2StartElementNs \u00b6 [Source] fun box xmlSAX2StartElementNs( pctx: Pointer[U8 val] ref, plocalname: String val, pprefix: String val, pURI: String val, pnb_namespaces: I32 val, pnamespaces: Pointer[Pointer[U8 val] tag] ref, pnb_attributes: I32 val, pnb_defaulted: I32 val, pattributes: Pointer[Pointer[U8 val] tag] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref plocalname: String val pprefix: String val pURI: String val pnb_namespaces: I32 val pnamespaces: Pointer [ Pointer [ U8 val] tag] ref pnb_attributes: I32 val pnb_defaulted: I32 val pattributes: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 None val xmlSAX2EndElementNs \u00b6 [Source] fun box xmlSAX2EndElementNs( pctx: Pointer[U8 val] ref, plocalname: String val, pprefix: String val, pURI: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref plocalname: String val pprefix: String val pURI: String val Returns \u00b6 None val xmlSAX2Reference \u00b6 [Source] fun box xmlSAX2Reference( pctx: Pointer[U8 val] ref, pname: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 None val xmlSAX2Characters \u00b6 [Source] fun box xmlSAX2Characters( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pch: String val plen: I32 val Returns \u00b6 None val xmlSAX2IgnorableWhitespace \u00b6 [Source] fun box xmlSAX2IgnorableWhitespace( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pch: String val plen: I32 val Returns \u00b6 None val xmlSAX2ProcessingInstruction \u00b6 [Source] fun box xmlSAX2ProcessingInstruction( pctx: Pointer[U8 val] ref, ptarget: String val, pdata: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref ptarget: String val pdata: String val Returns \u00b6 None val xmlSAX2Comment \u00b6 [Source] fun box xmlSAX2Comment( pctx: Pointer[U8 val] ref, pvalue: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pvalue: String val Returns \u00b6 None val xmlSAX2CDataBlock \u00b6 [Source] fun box xmlSAX2CDataBlock( pctx: Pointer[U8 val] ref, pvalue: String val, plen: I32 val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pvalue: String val plen: I32 val Returns \u00b6 None val xmlSAXDefaultVersion \u00b6 [Source] fun box xmlSAXDefaultVersion( pversion: I32 val) : I32 val Parameters \u00b6 pversion: I32 val Returns \u00b6 I32 val xmlSAXVersion \u00b6 [Source] fun box xmlSAXVersion( phdlr: NullablePointer[Xmlsaxhandler ref] ref, pversion: I32 val) : I32 val Parameters \u00b6 phdlr: NullablePointer [ Xmlsaxhandler ref] ref pversion: I32 val Returns \u00b6 I32 val xmlSAX2InitDefaultSAXHandler \u00b6 [Source] fun box xmlSAX2InitDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandler ref] ref, pwarning: I32 val) : None val Parameters \u00b6 phdlr: NullablePointer [ Xmlsaxhandler ref] ref pwarning: I32 val Returns \u00b6 None val xmlSAX2InitHtmlDefaultSAXHandler \u00b6 [Source] fun box xmlSAX2InitHtmlDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandler ref] ref) : None val Parameters \u00b6 phdlr: NullablePointer [ Xmlsaxhandler ref] ref Returns \u00b6 None val htmlDefaultSAXHandlerInit \u00b6 [Source] fun box htmlDefaultSAXHandlerInit() : None val Returns \u00b6 None val xmlSAX2InitDocbDefaultSAXHandler \u00b6 [Source] fun box xmlSAX2InitDocbDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandler ref] ref) : None val Parameters \u00b6 phdlr: NullablePointer [ Xmlsaxhandler ref] ref Returns \u00b6 None val docbDefaultSAXHandlerInit \u00b6 [Source] fun box docbDefaultSAXHandlerInit() : None val Returns \u00b6 None val xmlDefaultSAXHandlerInit \u00b6 [Source] fun box xmlDefaultSAXHandlerInit() : None val Returns \u00b6 None val xmlInitGlobals \u00b6 [Source] fun box xmlInitGlobals() : None val Returns \u00b6 None val xmlCleanupGlobals \u00b6 [Source] fun box xmlCleanupGlobals() : None val Returns \u00b6 None val xmlParserInputBufferCreateFilenameDefault \u00b6 [Source] fun box xmlParserInputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlOutputBufferCreateFilenameDefault \u00b6 [Source] fun box xmlOutputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlInitializeGlobalState \u00b6 [Source] fun box xmlInitializeGlobalState( pgs: NullablePointer[Xmlglobalstate ref] ref) : None val Parameters \u00b6 pgs: NullablePointer [ Xmlglobalstate ref] ref Returns \u00b6 None val xmlThrDefSetGenericErrorFunc \u00b6 [Source] fun box xmlThrDefSetGenericErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val xmlThrDefSetStructuredErrorFunc \u00b6 [Source] fun box xmlThrDefSetStructuredErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val xmlRegisterNodeDefault \u00b6 [Source] fun box xmlRegisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlThrDefRegisterNodeDefault \u00b6 [Source] fun box xmlThrDefRegisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlDeregisterNodeDefault \u00b6 [Source] fun box xmlDeregisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlThrDefDeregisterNodeDefault \u00b6 [Source] fun box xmlThrDefDeregisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlThrDefOutputBufferCreateFilenameDefault \u00b6 [Source] fun box xmlThrDefOutputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlThrDefParserInputBufferCreateFilenameDefault \u00b6 [Source] fun box xmlThrDefParserInputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlThrDefBufferAllocScheme \u00b6 [Source] fun box xmlThrDefBufferAllocScheme( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefDefaultBufferSize \u00b6 [Source] fun box xmlThrDefDefaultBufferSize( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefDoValidityCheckingDefaultValue \u00b6 [Source] fun box xmlThrDefDoValidityCheckingDefaultValue( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefGetWarningsDefaultValue \u00b6 [Source] fun box xmlThrDefGetWarningsDefaultValue( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefIndentTreeOutput \u00b6 [Source] fun box xmlThrDefIndentTreeOutput( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefTreeIndentString \u00b6 [Source] fun box xmlThrDefTreeIndentString( pv: String val) : String val Parameters \u00b6 pv: String val Returns \u00b6 String val xmlThrDefKeepBlanksDefaultValue \u00b6 [Source] fun box xmlThrDefKeepBlanksDefaultValue( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefLineNumbersDefaultValue \u00b6 [Source] fun box xmlThrDefLineNumbersDefaultValue( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefLoadExtDtdDefaultValue \u00b6 [Source] fun box xmlThrDefLoadExtDtdDefaultValue( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefParserDebugEntities \u00b6 [Source] fun box xmlThrDefParserDebugEntities( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefPedanticParserDefaultValue \u00b6 [Source] fun box xmlThrDefPedanticParserDefaultValue( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefSaveNoEmptyTags \u00b6 [Source] fun box xmlThrDefSaveNoEmptyTags( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlThrDefSubstituteEntitiesDefaultValue \u00b6 [Source] fun box xmlThrDefSubstituteEntitiesDefaultValue( pv: I32 val) : I32 val Parameters \u00b6 pv: I32 val Returns \u00b6 I32 val xmlNewCatalog \u00b6 [Source] fun box xmlNewCatalog( psgml: I32 val) : NullablePointer[Xmlcatalog ref] ref Parameters \u00b6 psgml: I32 val Returns \u00b6 NullablePointer [ Xmlcatalog ref] ref xmlLoadACatalog \u00b6 [Source] fun box xmlLoadACatalog( pfilename: String val) : NullablePointer[Xmlcatalog ref] ref Parameters \u00b6 pfilename: String val Returns \u00b6 NullablePointer [ Xmlcatalog ref] ref xmlLoadSGMLSuperCatalog \u00b6 [Source] fun box xmlLoadSGMLSuperCatalog( pfilename: String val) : NullablePointer[Xmlcatalog ref] ref Parameters \u00b6 pfilename: String val Returns \u00b6 NullablePointer [ Xmlcatalog ref] ref xmlConvertSGMLCatalog \u00b6 [Source] fun box xmlConvertSGMLCatalog( pcatal: NullablePointer[Xmlcatalog ref] ref) : I32 val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref Returns \u00b6 I32 val xmlACatalogAdd \u00b6 [Source] fun box xmlACatalogAdd( pcatal: NullablePointer[Xmlcatalog ref] ref, ptype: String val, porig: String val, preplace: String val) : I32 val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref ptype: String val porig: String val preplace: String val Returns \u00b6 I32 val xmlACatalogRemove \u00b6 [Source] fun box xmlACatalogRemove( pcatal: NullablePointer[Xmlcatalog ref] ref, pvalue: String val) : I32 val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref pvalue: String val Returns \u00b6 I32 val xmlACatalogResolve \u00b6 [Source] fun box xmlACatalogResolve( pcatal: NullablePointer[Xmlcatalog ref] ref, ppubID: String val, psysID: String val) : String val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref ppubID: String val psysID: String val Returns \u00b6 String val xmlACatalogResolveSystem \u00b6 [Source] fun box xmlACatalogResolveSystem( pcatal: NullablePointer[Xmlcatalog ref] ref, psysID: String val) : String val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref psysID: String val Returns \u00b6 String val xmlACatalogResolvePublic \u00b6 [Source] fun box xmlACatalogResolvePublic( pcatal: NullablePointer[Xmlcatalog ref] ref, ppubID: String val) : String val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref ppubID: String val Returns \u00b6 String val xmlACatalogResolveURI \u00b6 [Source] fun box xmlACatalogResolveURI( pcatal: NullablePointer[Xmlcatalog ref] ref, pURI: String val) : String val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref pURI: String val Returns \u00b6 String val xmlACatalogDump \u00b6 [Source] fun box xmlACatalogDump( pcatal: NullablePointer[Xmlcatalog ref] ref, pout: NullablePointer[IoFile ref] ref) : None val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref pout: NullablePointer [ IoFile ref] ref Returns \u00b6 None val xmlFreeCatalog \u00b6 [Source] fun box xmlFreeCatalog( pcatal: NullablePointer[Xmlcatalog ref] ref) : None val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref Returns \u00b6 None val xmlCatalogIsEmpty \u00b6 [Source] fun box xmlCatalogIsEmpty( pcatal: NullablePointer[Xmlcatalog ref] ref) : I32 val Parameters \u00b6 pcatal: NullablePointer [ Xmlcatalog ref] ref Returns \u00b6 I32 val xmlInitializeCatalog \u00b6 [Source] fun box xmlInitializeCatalog() : None val Returns \u00b6 None val xmlLoadCatalog \u00b6 [Source] fun box xmlLoadCatalog( pfilename: String val) : I32 val Parameters \u00b6 pfilename: String val Returns \u00b6 I32 val xmlLoadCatalogs \u00b6 [Source] fun box xmlLoadCatalogs( ppaths: String val) : None val Parameters \u00b6 ppaths: String val Returns \u00b6 None val xmlCatalogCleanup \u00b6 [Source] fun box xmlCatalogCleanup() : None val Returns \u00b6 None val xmlCatalogDump \u00b6 [Source] fun box xmlCatalogDump( pout: NullablePointer[IoFile ref] ref) : None val Parameters \u00b6 pout: NullablePointer [ IoFile ref] ref Returns \u00b6 None val xmlCatalogResolve \u00b6 [Source] fun box xmlCatalogResolve( ppubID: String val, psysID: String val) : String val Parameters \u00b6 ppubID: String val psysID: String val Returns \u00b6 String val xmlCatalogResolveSystem \u00b6 [Source] fun box xmlCatalogResolveSystem( psysID: String val) : String val Parameters \u00b6 psysID: String val Returns \u00b6 String val xmlCatalogResolvePublic \u00b6 [Source] fun box xmlCatalogResolvePublic( ppubID: String val) : String val Parameters \u00b6 ppubID: String val Returns \u00b6 String val xmlCatalogResolveURI \u00b6 [Source] fun box xmlCatalogResolveURI( pURI: String val) : String val Parameters \u00b6 pURI: String val Returns \u00b6 String val xmlCatalogAdd \u00b6 [Source] fun box xmlCatalogAdd( ptype: String val, porig: String val, preplace: String val) : I32 val Parameters \u00b6 ptype: String val porig: String val preplace: String val Returns \u00b6 I32 val xmlCatalogRemove \u00b6 [Source] fun box xmlCatalogRemove( pvalue: String val) : I32 val Parameters \u00b6 pvalue: String val Returns \u00b6 I32 val xmlParseCatalogFile \u00b6 [Source] fun box xmlParseCatalogFile( pfilename: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfilename: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlCatalogConvert \u00b6 [Source] fun box xmlCatalogConvert() : I32 val Returns \u00b6 I32 val xmlCatalogFreeLocal \u00b6 [Source] fun box xmlCatalogFreeLocal( pcatalogs: Pointer[U8 val] ref) : None val Parameters \u00b6 pcatalogs: Pointer [ U8 val] ref Returns \u00b6 None val xmlCatalogAddLocal \u00b6 [Source] fun box xmlCatalogAddLocal( pcatalogs: Pointer[U8 val] ref, pURL: String val) : String val Parameters \u00b6 pcatalogs: Pointer [ U8 val] ref pURL: String val Returns \u00b6 String val xmlCatalogLocalResolve \u00b6 [Source] fun box xmlCatalogLocalResolve( pcatalogs: Pointer[U8 val] ref, ppubID: String val, psysID: String val) : String val Parameters \u00b6 pcatalogs: Pointer [ U8 val] ref ppubID: String val psysID: String val Returns \u00b6 String val xmlCatalogLocalResolveURI \u00b6 [Source] fun box xmlCatalogLocalResolveURI( pcatalogs: Pointer[U8 val] ref, pURI: String val) : String val Parameters \u00b6 pcatalogs: Pointer [ U8 val] ref pURI: String val Returns \u00b6 String val xmlCatalogSetDebug \u00b6 [Source] fun box xmlCatalogSetDebug( plevel: I32 val) : I32 val Parameters \u00b6 plevel: I32 val Returns \u00b6 I32 val xmlCatalogSetDefaultPrefer \u00b6 [Source] fun box xmlCatalogSetDefaultPrefer( pprefer: I32 val) : I32 val Parameters \u00b6 pprefer: I32 val Returns \u00b6 I32 val xmlCatalogSetDefaults \u00b6 [Source] fun box xmlCatalogSetDefaults( pallow: I32 val) : None val Parameters \u00b6 pallow: I32 val Returns \u00b6 None val xmlCatalogGetDefaults \u00b6 [Source] fun box xmlCatalogGetDefaults() : I32 val Returns \u00b6 I32 val xmlCatalogGetSystem \u00b6 [Source] fun box xmlCatalogGetSystem( psysID: String val) : String val Parameters \u00b6 psysID: String val Returns \u00b6 String val xmlCatalogGetPublic \u00b6 [Source] fun box xmlCatalogGetPublic( ppubID: String val) : String val Parameters \u00b6 ppubID: String val Returns \u00b6 String val xmlCharInRange \u00b6 [Source] fun box xmlCharInRange( pval: U32 val, pgroup: NullablePointer[Xmlchrangegroup ref] ref) : I32 val Parameters \u00b6 pval: U32 val pgroup: NullablePointer [ Xmlchrangegroup ref] ref Returns \u00b6 I32 val xmlIsBaseChar \u00b6 [Source] fun box xmlIsBaseChar( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlIsBlank \u00b6 [Source] fun box xmlIsBlank( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlIsChar \u00b6 [Source] fun box xmlIsChar( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlIsCombining \u00b6 [Source] fun box xmlIsCombining( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlIsDigit \u00b6 [Source] fun box xmlIsDigit( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlIsExtender \u00b6 [Source] fun box xmlIsExtender( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlIsIdeographic \u00b6 [Source] fun box xmlIsIdeographic( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlIsPubidChar \u00b6 [Source] fun box xmlIsPubidChar( pch: U32 val) : I32 val Parameters \u00b6 pch: U32 val Returns \u00b6 I32 val xmlXPathFreeObject \u00b6 [Source] fun box xmlXPathFreeObject( pobj: NullablePointer[Xmlxpathobject ref] ref) : None val Parameters \u00b6 pobj: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 None val xmlXPathNodeSetCreate \u00b6 [Source] fun box xmlXPathNodeSetCreate( pval: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathFreeNodeSetList \u00b6 [Source] fun box xmlXPathFreeNodeSetList( pobj: NullablePointer[Xmlxpathobject ref] ref) : None val Parameters \u00b6 pobj: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 None val xmlXPathFreeNodeSet \u00b6 [Source] fun box xmlXPathFreeNodeSet( pobj: NullablePointer[Xmlnodeset ref] ref) : None val Parameters \u00b6 pobj: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 None val xmlXPathObjectCopy \u00b6 [Source] fun box xmlXPathObjectCopy( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathCmpNodes \u00b6 [Source] fun box xmlXPathCmpNodes( pnode1: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pnode1: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlXPathCastNumberToBoolean \u00b6 [Source] fun box xmlXPathCastNumberToBoolean( pval: F64 val) : I32 val Parameters \u00b6 pval: F64 val Returns \u00b6 I32 val xmlXPathCastStringToBoolean \u00b6 [Source] fun box xmlXPathCastStringToBoolean( pval: String val) : I32 val Parameters \u00b6 pval: String val Returns \u00b6 I32 val xmlXPathCastNodeSetToBoolean \u00b6 [Source] fun box xmlXPathCastNodeSetToBoolean( pns: NullablePointer[Xmlnodeset ref] ref) : I32 val Parameters \u00b6 pns: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 I32 val xmlXPathCastToBoolean \u00b6 [Source] fun box xmlXPathCastToBoolean( pval: NullablePointer[Xmlxpathobject ref] ref) : I32 val Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 I32 val xmlXPathCastBooleanToNumber \u00b6 [Source] fun box xmlXPathCastBooleanToNumber( pval: I32 val) : F64 val Parameters \u00b6 pval: I32 val Returns \u00b6 F64 val xmlXPathCastStringToNumber \u00b6 [Source] fun box xmlXPathCastStringToNumber( pval: String val) : F64 val Parameters \u00b6 pval: String val Returns \u00b6 F64 val xmlXPathCastNodeToNumber \u00b6 [Source] fun box xmlXPathCastNodeToNumber( pnode: NullablePointer[Xmlnode ref] ref) : F64 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 F64 val xmlXPathCastNodeSetToNumber \u00b6 [Source] fun box xmlXPathCastNodeSetToNumber( pns: NullablePointer[Xmlnodeset ref] ref) : F64 val Parameters \u00b6 pns: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 F64 val xmlXPathCastToNumber \u00b6 [Source] fun box xmlXPathCastToNumber( pval: NullablePointer[Xmlxpathobject ref] ref) : F64 val Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 F64 val xmlXPathCastBooleanToString \u00b6 [Source] fun box xmlXPathCastBooleanToString( pval: I32 val) : String val Parameters \u00b6 pval: I32 val Returns \u00b6 String val xmlXPathCastNumberToString \u00b6 [Source] fun box xmlXPathCastNumberToString( pval: F64 val) : String val Parameters \u00b6 pval: F64 val Returns \u00b6 String val xmlXPathCastNodeToString \u00b6 [Source] fun box xmlXPathCastNodeToString( pnode: NullablePointer[Xmlnode ref] ref) : String val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 String val xmlXPathCastNodeSetToString \u00b6 [Source] fun box xmlXPathCastNodeSetToString( pns: NullablePointer[Xmlnodeset ref] ref) : String val Parameters \u00b6 pns: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 String val xmlXPathCastToString \u00b6 [Source] fun box xmlXPathCastToString( pval: NullablePointer[Xmlxpathobject ref] ref) : String val Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 String val xmlXPathConvertBoolean \u00b6 [Source] fun box xmlXPathConvertBoolean( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathConvertNumber \u00b6 [Source] fun box xmlXPathConvertNumber( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathConvertString \u00b6 [Source] fun box xmlXPathConvertString( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathNewContext \u00b6 [Source] fun box xmlXPathNewContext( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlxpathcontext ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmlxpathcontext ref] ref xmlXPathFreeContext \u00b6 [Source] fun box xmlXPathFreeContext( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 None val xmlXPathContextSetCache \u00b6 [Source] fun box xmlXPathContextSetCache( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pactive: I32 val, pvalue: I32 val, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pactive: I32 val pvalue: I32 val poptions: I32 val Returns \u00b6 I32 val xmlXPathOrderDocElems \u00b6 [Source] fun box xmlXPathOrderDocElems( pdoc: NullablePointer[Xmldoc ref] tag) : I64 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I64 val xmlXPathSetContextNode \u00b6 [Source] fun box xmlXPathSetContextNode( pnode: NullablePointer[Xmlnode ref] ref, pctx: NullablePointer[Xmlxpathcontext ref] tag) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pctx: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 I32 val xmlXPathNodeEval \u00b6 [Source] fun box xmlXPathNodeEval( pnode: NullablePointer[Xmlnode ref] ref, pstr: String val, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref pstr: String val pctx: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathEval \u00b6 [Source] fun box xmlXPathEval( pstr: String val, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstr: String val pctx: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathEvalExpression \u00b6 [Source] fun box xmlXPathEvalExpression( pstr: String val, pctxt: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstr: String val pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathEvalPredicate \u00b6 [Source] fun box xmlXPathEvalPredicate( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pres: NullablePointer[Xmlxpathobject ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pres: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 I32 val xmlXPathCompile \u00b6 [Source] fun box xmlXPathCompile( pstr: String val) : NullablePointer[Xmlxpathcompexpr ref] ref Parameters \u00b6 pstr: String val Returns \u00b6 NullablePointer [ Xmlxpathcompexpr ref] ref xmlXPathCtxtCompile \u00b6 [Source] fun box xmlXPathCtxtCompile( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pstr: String val) : NullablePointer[Xmlxpathcompexpr ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pstr: String val Returns \u00b6 NullablePointer [ Xmlxpathcompexpr ref] ref xmlXPathCompiledEval \u00b6 [Source] fun box xmlXPathCompiledEval( pcomp: NullablePointer[Xmlxpathcompexpr ref] ref, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref pctx: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathCompiledEvalToBoolean \u00b6 [Source] fun box xmlXPathCompiledEvalToBoolean( pcomp: NullablePointer[Xmlxpathcompexpr ref] ref, pctxt: NullablePointer[Xmlxpathcontext ref] tag) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 I32 val xmlXPathFreeCompExpr \u00b6 [Source] fun box xmlXPathFreeCompExpr( pcomp: NullablePointer[Xmlxpathcompexpr ref] ref) : None val Parameters \u00b6 pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref Returns \u00b6 None val xmlXPathInit \u00b6 [Source] fun box xmlXPathInit() : None val Returns \u00b6 None val xmlXPathIsNaN \u00b6 [Source] fun box xmlXPathIsNaN( pval: F64 val) : I32 val Parameters \u00b6 pval: F64 val Returns \u00b6 I32 val xmlXPathIsInf \u00b6 [Source] fun box xmlXPathIsInf( pval: F64 val) : I32 val Parameters \u00b6 pval: F64 val Returns \u00b6 I32 val xmlDebugDumpString \u00b6 [Source] fun box xmlDebugDumpString( poutput: NullablePointer[IoFile ref] ref, pstr: String val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pstr: String val Returns \u00b6 None val xmlDebugDumpAttr \u00b6 [Source] fun box xmlDebugDumpAttr( poutput: NullablePointer[IoFile ref] ref, pattr: NullablePointer[Xmlattr ref] ref, pdepth: I32 val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pattr: NullablePointer [ Xmlattr ref] ref pdepth: I32 val Returns \u00b6 None val xmlDebugDumpAttrList \u00b6 [Source] fun box xmlDebugDumpAttrList( poutput: NullablePointer[IoFile ref] ref, pattr: NullablePointer[Xmlattr ref] ref, pdepth: I32 val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pattr: NullablePointer [ Xmlattr ref] ref pdepth: I32 val Returns \u00b6 None val xmlDebugDumpOneNode \u00b6 [Source] fun box xmlDebugDumpOneNode( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pdepth: I32 val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref pdepth: I32 val Returns \u00b6 None val xmlDebugDumpNode \u00b6 [Source] fun box xmlDebugDumpNode( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pdepth: I32 val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref pdepth: I32 val Returns \u00b6 None val xmlDebugDumpNodeList \u00b6 [Source] fun box xmlDebugDumpNodeList( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pdepth: I32 val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref pdepth: I32 val Returns \u00b6 None val xmlDebugDumpDocumentHead \u00b6 [Source] fun box xmlDebugDumpDocumentHead( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 None val xmlDebugDumpDocument \u00b6 [Source] fun box xmlDebugDumpDocument( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 None val xmlDebugDumpDTD \u00b6 [Source] fun box xmlDebugDumpDTD( poutput: NullablePointer[IoFile ref] ref, pdtd: NullablePointer[Xmldtd ref] ref) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pdtd: NullablePointer [ Xmldtd ref] ref Returns \u00b6 None val xmlDebugDumpEntities \u00b6 [Source] fun box xmlDebugDumpEntities( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 None val xmlDebugCheckDocument \u00b6 [Source] fun box xmlDebugCheckDocument( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlLsOneNode \u00b6 [Source] fun box xmlLsOneNode( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val xmlLsCountNode \u00b6 [Source] fun box xmlLsCountNode( pnode: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlBoolToText \u00b6 [Source] fun box xmlBoolToText( pboolval: I32 val) : String val Parameters \u00b6 pboolval: I32 val Returns \u00b6 String val xmlShellPrintXPathError \u00b6 [Source] fun box xmlShellPrintXPathError( perrorType: I32 val, parg: String val) : None val Parameters \u00b6 perrorType: I32 val parg: String val Returns \u00b6 None val xmlShellPrintXPathResult \u00b6 [Source] fun box xmlShellPrintXPathResult( plist: NullablePointer[Xmlxpathobject ref] ref) : None val Parameters \u00b6 plist: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 None val xmlShellList \u00b6 [Source] fun box xmlShellList( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellBase \u00b6 [Source] fun box xmlShellBase( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellDir \u00b6 [Source] fun box xmlShellDir( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellLoad \u00b6 [Source] fun box xmlShellLoad( pctxt: NullablePointer[Xmlshellctxt ref] ref, pfilename: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref pfilename: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellPrintNode \u00b6 [Source] fun box xmlShellPrintNode( pnode: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val xmlShellCat \u00b6 [Source] fun box xmlShellCat( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellWrite \u00b6 [Source] fun box xmlShellWrite( pctxt: NullablePointer[Xmlshellctxt ref] ref, pfilename: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref pfilename: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellSave \u00b6 [Source] fun box xmlShellSave( pctxt: NullablePointer[Xmlshellctxt ref] ref, pfilename: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref pfilename: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellValidate \u00b6 [Source] fun box xmlShellValidate( pctxt: NullablePointer[Xmlshellctxt ref] ref, pdtd: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref pdtd: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellDu \u00b6 [Source] fun box xmlShellDu( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, ptree: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val ptree: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShellPwd \u00b6 [Source] fun box xmlShellPwd( pctxt: NullablePointer[Xmlshellctxt ref] ref, pbuffer: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlshellctxt ref] ref pbuffer: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlShell \u00b6 [Source] fun box xmlShell( pdoc: NullablePointer[Xmldoc ref] tag, pfilename: String val, pinput: Pointer[FUNCTIONPOINTER val] ref, poutput: NullablePointer[IoFile ref] ref) : None val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pfilename: String val pinput: Pointer [ FUNCTIONPOINTER val] ref poutput: NullablePointer [ IoFile ref] ref Returns \u00b6 None val htmlTagLookup \u00b6 [Source] fun box htmlTagLookup( ptag: String val) : NullablePointer[Htmlelemdesc ref] ref Parameters \u00b6 ptag: String val Returns \u00b6 NullablePointer [ Htmlelemdesc ref] ref htmlEntityLookup \u00b6 [Source] fun box htmlEntityLookup( pname: String val) : NullablePointer[Htmlentitydesc ref] ref Parameters \u00b6 pname: String val Returns \u00b6 NullablePointer [ Htmlentitydesc ref] ref htmlEntityValueLookup \u00b6 [Source] fun box htmlEntityValueLookup( pvalue: U32 val) : NullablePointer[Htmlentitydesc ref] ref Parameters \u00b6 pvalue: U32 val Returns \u00b6 NullablePointer [ Htmlentitydesc ref] ref htmlIsAutoClosed \u00b6 [Source] fun box htmlIsAutoClosed( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val htmlAutoCloseTag \u00b6 [Source] fun box htmlAutoCloseTag( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val htmlParseEntityRef \u00b6 [Source] fun box htmlParseEntityRef( pctxt: NullablePointer[Xmlparserctxt ref] ref, pstr: Pointer[Pointer[U8 val] tag] ref) : NullablePointer[Htmlentitydesc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pstr: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 NullablePointer [ Htmlentitydesc ref] ref htmlParseCharRef \u00b6 [Source] fun box htmlParseCharRef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val htmlParseElement \u00b6 [Source] fun box htmlParseElement( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val htmlNewParserCtxt \u00b6 [Source] fun box htmlNewParserCtxt() : NullablePointer[Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref htmlCreateMemoryParserCtxt \u00b6 [Source] fun box htmlCreateMemoryParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref htmlParseDocument \u00b6 [Source] fun box htmlParseDocument( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val htmlSAXParseDoc \u00b6 [Source] fun box htmlSAXParseDoc( pcur: String val, pencoding: String val, psax: NullablePointer[Xmlsaxhandler ref] ref, puserData: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pcur: String val pencoding: String val psax: NullablePointer [ Xmlsaxhandler ref] ref puserData: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlParseDoc \u00b6 [Source] fun box htmlParseDoc( pcur: String val, pencoding: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pcur: String val pencoding: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlSAXParseFile \u00b6 [Source] fun box htmlSAXParseFile( pfilename: String val, pencoding: String val, psax: NullablePointer[Xmlsaxhandler ref] ref, puserData: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfilename: String val pencoding: String val psax: NullablePointer [ Xmlsaxhandler ref] ref puserData: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlParseFile \u00b6 [Source] fun box htmlParseFile( pfilename: String val, pencoding: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfilename: String val pencoding: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref utf8ToHtml \u00b6 [Source] fun box utf8ToHtml( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref) : I32 val Parameters \u00b6 pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref Returns \u00b6 I32 val htmlEncodeEntities \u00b6 [Source] fun box htmlEncodeEntities( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref, pquoteChar: I32 val) : I32 val Parameters \u00b6 pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref pquoteChar: I32 val Returns \u00b6 I32 val htmlIsScriptAttribute \u00b6 [Source] fun box htmlIsScriptAttribute( pname: String val) : I32 val Parameters \u00b6 pname: String val Returns \u00b6 I32 val htmlHandleOmittedElem \u00b6 [Source] fun box htmlHandleOmittedElem( pval: I32 val) : I32 val Parameters \u00b6 pval: I32 val Returns \u00b6 I32 val htmlCreatePushParserCtxt \u00b6 [Source] fun box htmlCreatePushParserCtxt( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pchunk: String val, psize: I32 val, pfilename: String val, penc: I32 val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pchunk: String val psize: I32 val pfilename: String val penc: I32 val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref htmlParseChunk \u00b6 [Source] fun box htmlParseChunk( pctxt: NullablePointer[Xmlparserctxt ref] ref, pchunk: String val, psize: I32 val, pterminate: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pchunk: String val psize: I32 val pterminate: I32 val Returns \u00b6 I32 val htmlFreeParserCtxt \u00b6 [Source] fun box htmlFreeParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val htmlCtxtReset \u00b6 [Source] fun box htmlCtxtReset( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val htmlCtxtUseOptions \u00b6 [Source] fun box htmlCtxtUseOptions( pctxt: NullablePointer[Xmlparserctxt ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref poptions: I32 val Returns \u00b6 I32 val htmlReadDoc \u00b6 [Source] fun box htmlReadDoc( pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pcur: String val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlReadFile \u00b6 [Source] fun box htmlReadFile( pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlReadMemory \u00b6 [Source] fun box htmlReadMemory( pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlReadFd \u00b6 [Source] fun box htmlReadFd( pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pfd: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlReadIO \u00b6 [Source] fun box htmlReadIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlCtxtReadDoc \u00b6 [Source] fun box htmlCtxtReadDoc( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pcur: String val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlCtxtReadFile \u00b6 [Source] fun box htmlCtxtReadFile( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pfilename: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlCtxtReadMemory \u00b6 [Source] fun box htmlCtxtReadMemory( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlCtxtReadFd \u00b6 [Source] fun box htmlCtxtReadFd( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pfd: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlCtxtReadIO \u00b6 [Source] fun box htmlCtxtReadIO( pctxt: NullablePointer[Xmlparserctxt ref] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlNewDoc \u00b6 [Source] fun box htmlNewDoc( pURI: String val, pExternalID: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pURI: String val pExternalID: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlNewDocNoDtD \u00b6 [Source] fun box htmlNewDocNoDtD( pURI: String val, pExternalID: String val) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 pURI: String val pExternalID: String val Returns \u00b6 NullablePointer [ Xmldoc ref] ref htmlGetMetaEncoding \u00b6 [Source] fun box htmlGetMetaEncoding( pdoc: NullablePointer[Xmldoc ref] tag) : String val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 String val htmlSetMetaEncoding \u00b6 [Source] fun box htmlSetMetaEncoding( pdoc: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pencoding: String val Returns \u00b6 I32 val htmlDocDumpMemory \u00b6 [Source] fun box htmlDocDumpMemory( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref Returns \u00b6 None val htmlDocDumpMemoryFormat \u00b6 [Source] fun box htmlDocDumpMemoryFormat( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref, pformat: I32 val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref pformat: I32 val Returns \u00b6 None val htmlDocDump \u00b6 [Source] fun box htmlDocDump( pf: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pf: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val htmlSaveFile \u00b6 [Source] fun box htmlSaveFile( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val htmlNodeDump \u00b6 [Source] fun box htmlNodeDump( pbuf: NullablePointer[Xmlbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val htmlNodeDumpFile \u00b6 [Source] fun box htmlNodeDumpFile( pout: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 pout: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val htmlNodeDumpFileFormat \u00b6 [Source] fun box htmlNodeDumpFileFormat( pout: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, pencoding: String val, pformat: I32 val) : I32 val Parameters \u00b6 pout: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref pencoding: String val pformat: I32 val Returns \u00b6 I32 val htmlSaveFileEnc \u00b6 [Source] fun box htmlSaveFileEnc( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val Parameters \u00b6 pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val Returns \u00b6 I32 val htmlSaveFileFormat \u00b6 [Source] fun box htmlSaveFileFormat( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : I32 val Parameters \u00b6 pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val Returns \u00b6 I32 val htmlNodeDumpFormatOutput \u00b6 [Source] fun box htmlNodeDumpFormatOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, pencoding: String val, pformat: I32 val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmloutputbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref pencoding: String val pformat: I32 val Returns \u00b6 None val htmlDocContentDumpOutput \u00b6 [Source] fun box htmlDocContentDumpOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val Returns \u00b6 None val htmlDocContentDumpFormatOutput \u00b6 [Source] fun box htmlDocContentDumpFormatOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val Returns \u00b6 None val htmlNodeDumpOutput \u00b6 [Source] fun box htmlNodeDumpOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, pencoding: String val) : None val Parameters \u00b6 pbuf: NullablePointer [ Xmloutputbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref pencoding: String val Returns \u00b6 None val htmlIsBooleanAttr \u00b6 [Source] fun box htmlIsBooleanAttr( pname: String val) : I32 val Parameters \u00b6 pname: String val Returns \u00b6 I32 val xmlNanoFTPInit \u00b6 [Source] fun box xmlNanoFTPInit() : None val Returns \u00b6 None val xmlNanoFTPCleanup \u00b6 [Source] fun box xmlNanoFTPCleanup() : None val Returns \u00b6 None val xmlNanoFTPNewCtxt \u00b6 [Source] fun box xmlNanoFTPNewCtxt( pURL: String val) : String val Parameters \u00b6 pURL: String val Returns \u00b6 String val xmlNanoFTPFreeCtxt \u00b6 [Source] fun box xmlNanoFTPFreeCtxt( pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlNanoFTPConnectTo \u00b6 [Source] fun box xmlNanoFTPConnectTo( pserver: String val, pport: I32 val) : String val Parameters \u00b6 pserver: String val pport: I32 val Returns \u00b6 String val xmlNanoFTPOpen \u00b6 [Source] fun box xmlNanoFTPOpen( pURL: String val) : String val Parameters \u00b6 pURL: String val Returns \u00b6 String val xmlNanoFTPConnect \u00b6 [Source] fun box xmlNanoFTPConnect( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoFTPClose \u00b6 [Source] fun box xmlNanoFTPClose( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoFTPQuit \u00b6 [Source] fun box xmlNanoFTPQuit( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoFTPScanProxy \u00b6 [Source] fun box xmlNanoFTPScanProxy( pURL: String val) : None val Parameters \u00b6 pURL: String val Returns \u00b6 None val xmlNanoFTPProxy \u00b6 [Source] fun box xmlNanoFTPProxy( phost: String val, pport: I32 val, puser: String val, ppasswd: String val, ptype: I32 val) : None val Parameters \u00b6 phost: String val pport: I32 val puser: String val ppasswd: String val ptype: I32 val Returns \u00b6 None val xmlNanoFTPUpdateURL \u00b6 [Source] fun box xmlNanoFTPUpdateURL( pctx: Pointer[U8 val] ref, pURL: String val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pURL: String val Returns \u00b6 I32 val xmlNanoFTPGetResponse \u00b6 [Source] fun box xmlNanoFTPGetResponse( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoFTPCheckResponse \u00b6 [Source] fun box xmlNanoFTPCheckResponse( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoFTPCwd \u00b6 [Source] fun box xmlNanoFTPCwd( pctx: Pointer[U8 val] ref, pdirectory: String val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pdirectory: String val Returns \u00b6 I32 val xmlNanoFTPDele \u00b6 [Source] fun box xmlNanoFTPDele( pctx: Pointer[U8 val] ref, pfile: String val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pfile: String val Returns \u00b6 I32 val xmlNanoFTPGetConnection \u00b6 [Source] fun box xmlNanoFTPGetConnection( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoFTPCloseConnection \u00b6 [Source] fun box xmlNanoFTPCloseConnection( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoFTPList \u00b6 [Source] fun box xmlNanoFTPList( pctx: Pointer[U8 val] ref, pcallback: Pointer[FUNCTIONPOINTER val] ref, puserData: Pointer[U8 val] ref, pfilename: String val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pcallback: Pointer [ FUNCTIONPOINTER val] ref puserData: Pointer [ U8 val] ref pfilename: String val Returns \u00b6 I32 val xmlNanoFTPGetSocket \u00b6 [Source] fun box xmlNanoFTPGetSocket( pctx: Pointer[U8 val] ref, pfilename: String val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pfilename: String val Returns \u00b6 I32 val xmlNanoFTPGet \u00b6 [Source] fun box xmlNanoFTPGet( pctx: Pointer[U8 val] ref, pcallback: Pointer[FUNCTIONPOINTER val] ref, puserData: Pointer[U8 val] ref, pfilename: String val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pcallback: Pointer [ FUNCTIONPOINTER val] ref puserData: Pointer [ U8 val] ref pfilename: String val Returns \u00b6 I32 val xmlNanoFTPRead \u00b6 [Source] fun box xmlNanoFTPRead( pctx: Pointer[U8 val] ref, pdest: Pointer[U8 val] ref, plen: I32 val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pdest: Pointer [ U8 val] ref plen: I32 val Returns \u00b6 I32 val xmlNanoHTTPInit \u00b6 [Source] fun box xmlNanoHTTPInit() : None val Returns \u00b6 None val xmlNanoHTTPCleanup \u00b6 [Source] fun box xmlNanoHTTPCleanup() : None val Returns \u00b6 None val xmlNanoHTTPScanProxy \u00b6 [Source] fun box xmlNanoHTTPScanProxy( pURL: String val) : None val Parameters \u00b6 pURL: String val Returns \u00b6 None val xmlNanoHTTPFetch \u00b6 [Source] fun box xmlNanoHTTPFetch( pURL: String val, pfilename: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref) : I32 val Parameters \u00b6 pURL: String val pfilename: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 I32 val xmlNanoHTTPMethod \u00b6 [Source] fun box xmlNanoHTTPMethod( pURL: String val, pmethod: String val, pinput: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref, pheaders: String val, pilen: I32 val) : String val Parameters \u00b6 pURL: String val pmethod: String val pinput: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref pheaders: String val pilen: I32 val Returns \u00b6 String val xmlNanoHTTPMethodRedir \u00b6 [Source] fun box xmlNanoHTTPMethodRedir( pURL: String val, pmethod: String val, pinput: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref, predir: Pointer[Pointer[U8 val] tag] ref, pheaders: String val, pilen: I32 val) : String val Parameters \u00b6 pURL: String val pmethod: String val pinput: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref predir: Pointer [ Pointer [ U8 val] tag] ref pheaders: String val pilen: I32 val Returns \u00b6 String val xmlNanoHTTPOpen \u00b6 [Source] fun box xmlNanoHTTPOpen( pURL: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref) : String val Parameters \u00b6 pURL: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 String val xmlNanoHTTPOpenRedir \u00b6 [Source] fun box xmlNanoHTTPOpenRedir( pURL: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref, predir: Pointer[Pointer[U8 val] tag] ref) : String val Parameters \u00b6 pURL: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref predir: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 String val xmlNanoHTTPReturnCode \u00b6 [Source] fun box xmlNanoHTTPReturnCode( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoHTTPAuthHeader \u00b6 [Source] fun box xmlNanoHTTPAuthHeader( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val xmlNanoHTTPRedir \u00b6 [Source] fun box xmlNanoHTTPRedir( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val xmlNanoHTTPContentLength \u00b6 [Source] fun box xmlNanoHTTPContentLength( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlNanoHTTPEncoding \u00b6 [Source] fun box xmlNanoHTTPEncoding( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val xmlNanoHTTPMimeType \u00b6 [Source] fun box xmlNanoHTTPMimeType( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val xmlNanoHTTPRead \u00b6 [Source] fun box xmlNanoHTTPRead( pctx: Pointer[U8 val] ref, pdest: Pointer[U8 val] ref, plen: I32 val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pdest: Pointer [ U8 val] ref plen: I32 val Returns \u00b6 I32 val xmlNanoHTTPSave \u00b6 [Source] fun box xmlNanoHTTPSave( pctxt: Pointer[U8 val] ref, pfilename: String val) : I32 val Parameters \u00b6 pctxt: Pointer [ U8 val] ref pfilename: String val Returns \u00b6 I32 val xmlNanoHTTPClose \u00b6 [Source] fun box xmlNanoHTTPClose( pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlIsLetter \u00b6 [Source] fun box xmlIsLetter( pc: I32 val) : I32 val Parameters \u00b6 pc: I32 val Returns \u00b6 I32 val xmlCreateFileParserCtxt \u00b6 [Source] fun box xmlCreateFileParserCtxt( pfilename: String val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pfilename: String val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlCreateURLParserCtxt \u00b6 [Source] fun box xmlCreateURLParserCtxt( pfilename: String val, poptions: I32 val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pfilename: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlCreateMemoryParserCtxt \u00b6 [Source] fun box xmlCreateMemoryParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlCreateEntityParserCtxt \u00b6 [Source] fun box xmlCreateEntityParserCtxt( pURL: String val, pID: String val, pbase: String val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pURL: String val pID: String val pbase: String val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlSwitchEncoding \u00b6 [Source] fun box xmlSwitchEncoding( pctxt: NullablePointer[Xmlparserctxt ref] ref, penc: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref penc: I32 val Returns \u00b6 I32 val xmlSwitchToEncoding \u00b6 [Source] fun box xmlSwitchToEncoding( pctxt: NullablePointer[Xmlparserctxt ref] ref, phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref phandler: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 I32 val xmlSwitchInputEncoding \u00b6 [Source] fun box xmlSwitchInputEncoding( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinput: NullablePointer[Xmlparserinput ref] ref, phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pinput: NullablePointer [ Xmlparserinput ref] ref phandler: NullablePointer [ Xmlcharencodinghandler ref] ref Returns \u00b6 I32 val xmlNewStringInputStream \u00b6 [Source] fun box xmlNewStringInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlNewEntityInputStream \u00b6 [Source] fun box xmlNewEntityInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref, pentity: NullablePointer[Xmlentity ref] ref) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pentity: NullablePointer [ Xmlentity ref] ref Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlPushInput \u00b6 [Source] fun box xmlPushInput( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinput: NullablePointer[Xmlparserinput ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pinput: NullablePointer [ Xmlparserinput ref] ref Returns \u00b6 I32 val xmlPopInput \u00b6 [Source] fun box xmlPopInput( pctxt: NullablePointer[Xmlparserctxt ref] ref) : U8 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 U8 val xmlFreeInputStream \u00b6 [Source] fun box xmlFreeInputStream( pinput: NullablePointer[Xmlparserinput ref] ref) : None val Parameters \u00b6 pinput: NullablePointer [ Xmlparserinput ref] ref Returns \u00b6 None val xmlNewInputFromFile \u00b6 [Source] fun box xmlNewInputFromFile( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfilename: String val) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pfilename: String val Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlNewInputStream \u00b6 [Source] fun box xmlNewInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref xmlSplitQName \u00b6 [Source] fun box xmlSplitQName( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, pprefix: Pointer[Pointer[U8 val] tag] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val pprefix: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 String val xmlParseName \u00b6 [Source] fun box xmlParseName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseNmtoken \u00b6 [Source] fun box xmlParseNmtoken( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseEntityValue \u00b6 [Source] fun box xmlParseEntityValue( pctxt: NullablePointer[Xmlparserctxt ref] ref, porig: Pointer[Pointer[U8 val] tag] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref porig: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 String val xmlParseAttValue \u00b6 [Source] fun box xmlParseAttValue( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseSystemLiteral \u00b6 [Source] fun box xmlParseSystemLiteral( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParsePubidLiteral \u00b6 [Source] fun box xmlParsePubidLiteral( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseCharData \u00b6 [Source] fun box xmlParseCharData( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcdata: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pcdata: I32 val Returns \u00b6 None val xmlParseExternalID \u00b6 [Source] fun box xmlParseExternalID( pctxt: NullablePointer[Xmlparserctxt ref] ref, ppublicID: Pointer[Pointer[U8 val] tag] ref, pstrict: I32 val) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref ppublicID: Pointer [ Pointer [ U8 val] tag] ref pstrict: I32 val Returns \u00b6 String val xmlParseComment \u00b6 [Source] fun box xmlParseComment( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParsePITarget \u00b6 [Source] fun box xmlParsePITarget( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParsePI \u00b6 [Source] fun box xmlParsePI( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseNotationDecl \u00b6 [Source] fun box xmlParseNotationDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseEntityDecl \u00b6 [Source] fun box xmlParseEntityDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseDefaultDecl \u00b6 [Source] fun box xmlParseDefaultDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: Pointer[Pointer[U8 val] tag] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 I32 val xmlParseNotationType \u00b6 [Source] fun box xmlParseNotationType( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlenumeration ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlenumeration ref] ref xmlParseEnumerationType \u00b6 [Source] fun box xmlParseEnumerationType( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlenumeration ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlenumeration ref] ref xmlParseEnumeratedType \u00b6 [Source] fun box xmlParseEnumeratedType( pctxt: NullablePointer[Xmlparserctxt ref] ref, ptree: Pointer[NullablePointer[Xmlenumeration ref] ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref ptree: Pointer [ NullablePointer [ Xmlenumeration ref] ref] ref Returns \u00b6 I32 val xmlParseAttributeType \u00b6 [Source] fun box xmlParseAttributeType( pctxt: NullablePointer[Xmlparserctxt ref] ref, ptree: Pointer[NullablePointer[Xmlenumeration ref] ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref ptree: Pointer [ NullablePointer [ Xmlenumeration ref] ref] ref Returns \u00b6 I32 val xmlParseAttributeListDecl \u00b6 [Source] fun box xmlParseAttributeListDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseElementMixedContentDecl \u00b6 [Source] fun box xmlParseElementMixedContentDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinputchk: I32 val) : NullablePointer[Xmlelementcontent ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pinputchk: I32 val Returns \u00b6 NullablePointer [ Xmlelementcontent ref] ref xmlParseElementChildrenContentDecl \u00b6 [Source] fun box xmlParseElementChildrenContentDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinputchk: I32 val) : NullablePointer[Xmlelementcontent ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pinputchk: I32 val Returns \u00b6 NullablePointer [ Xmlelementcontent ref] ref xmlParseElementContentDecl \u00b6 [Source] fun box xmlParseElementContentDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, presult: Pointer[NullablePointer[Xmlelementcontent ref] ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val presult: Pointer [ NullablePointer [ Xmlelementcontent ref] ref] ref Returns \u00b6 I32 val xmlParseElementDecl \u00b6 [Source] fun box xmlParseElementDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val xmlParseMarkupDecl \u00b6 [Source] fun box xmlParseMarkupDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseCharRef \u00b6 [Source] fun box xmlParseCharRef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val xmlParseEntityRef \u00b6 [Source] fun box xmlParseEntityRef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlentity ref] ref xmlParseReference \u00b6 [Source] fun box xmlParseReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParsePEReference \u00b6 [Source] fun box xmlParsePEReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseDocTypeDecl \u00b6 [Source] fun box xmlParseDocTypeDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseAttribute \u00b6 [Source] fun box xmlParseAttribute( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: Pointer[Pointer[U8 val] tag] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 String val xmlParseStartTag \u00b6 [Source] fun box xmlParseStartTag( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseEndTag \u00b6 [Source] fun box xmlParseEndTag( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseCDSect \u00b6 [Source] fun box xmlParseCDSect( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseContent \u00b6 [Source] fun box xmlParseContent( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseElement \u00b6 [Source] fun box xmlParseElement( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseVersionNum \u00b6 [Source] fun box xmlParseVersionNum( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseVersionInfo \u00b6 [Source] fun box xmlParseVersionInfo( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseEncName \u00b6 [Source] fun box xmlParseEncName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseEncodingDecl \u00b6 [Source] fun box xmlParseEncodingDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseSDDecl \u00b6 [Source] fun box xmlParseSDDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val xmlParseXMLDecl \u00b6 [Source] fun box xmlParseXMLDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseTextDecl \u00b6 [Source] fun box xmlParseTextDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseMisc \u00b6 [Source] fun box xmlParseMisc( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParseExternalSubset \u00b6 [Source] fun box xmlParseExternalSubset( pctxt: NullablePointer[Xmlparserctxt ref] ref, pExternalID: String val, pSystemID: String val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pExternalID: String val pSystemID: String val Returns \u00b6 None val xmlStringDecodeEntities \u00b6 [Source] fun box xmlStringDecodeEntities( pctxt: NullablePointer[Xmlparserctxt ref] ref, pstr: String val, pwhat: I32 val, pend: U8 val, pend2: U8 val, pend3: U8 val) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pstr: String val pwhat: I32 val pend: U8 val pend2: U8 val pend3: U8 val Returns \u00b6 String val xmlStringLenDecodeEntities \u00b6 [Source] fun box xmlStringLenDecodeEntities( pctxt: NullablePointer[Xmlparserctxt ref] ref, pstr: String val, plen: I32 val, pwhat: I32 val, pend: U8 val, pend2: U8 val, pend3: U8 val) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pstr: String val plen: I32 val pwhat: I32 val pend: U8 val pend2: U8 val pend3: U8 val Returns \u00b6 String val nodePush \u00b6 [Source] fun box nodePush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val nodePop \u00b6 [Source] fun box nodePop( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref inputPush \u00b6 [Source] fun box inputPush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: NullablePointer[Xmlparserinput ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: NullablePointer [ Xmlparserinput ref] ref Returns \u00b6 I32 val inputPop \u00b6 [Source] fun box inputPop( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref namePop \u00b6 [Source] fun box namePop( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val namePush \u00b6 [Source] fun box namePush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: String val Returns \u00b6 I32 val xmlSkipBlankChars \u00b6 [Source] fun box xmlSkipBlankChars( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 I32 val xmlStringCurrentChar \u00b6 [Source] fun box xmlStringCurrentChar( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcur: String val, plen: Pointer[I32 val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pcur: String val plen: Pointer [ I32 val] ref Returns \u00b6 I32 val xmlParserHandlePEReference \u00b6 [Source] fun box xmlParserHandlePEReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlCheckLanguageID \u00b6 [Source] fun box xmlCheckLanguageID( plang: String val) : I32 val Parameters \u00b6 plang: String val Returns \u00b6 I32 val xmlCurrentChar \u00b6 [Source] fun box xmlCurrentChar( pctxt: NullablePointer[Xmlparserctxt ref] ref, plen: Pointer[I32 val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref plen: Pointer [ I32 val] ref Returns \u00b6 I32 val xmlCopyCharMultiByte \u00b6 [Source] fun box xmlCopyCharMultiByte( pout: String val, pval: I32 val) : I32 val Parameters \u00b6 pout: String val pval: I32 val Returns \u00b6 I32 val xmlCopyChar \u00b6 [Source] fun box xmlCopyChar( plen: I32 val, pout: String val, pval: I32 val) : I32 val Parameters \u00b6 plen: I32 val pout: String val pval: I32 val Returns \u00b6 I32 val xmlNextChar \u00b6 [Source] fun box xmlNextChar( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlParserInputShrink \u00b6 [Source] fun box xmlParserInputShrink( pin: NullablePointer[Xmlparserinput ref] ref) : None val Parameters \u00b6 pin: NullablePointer [ Xmlparserinput ref] ref Returns \u00b6 None val htmlInitAutoClose \u00b6 [Source] fun box htmlInitAutoClose() : None val Returns \u00b6 None val htmlCreateFileParserCtxt \u00b6 [Source] fun box htmlCreateFileParserCtxt( pfilename: String val, pencoding: String val) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pfilename: String val pencoding: String val Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlSetEntityReferenceFunc \u00b6 [Source] fun box xmlSetEntityReferenceFunc( pfunc: Pointer[FUNCTIONPOINTER val] ref) : None val Parameters \u00b6 pfunc: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 None val xmlParseQuotedString \u00b6 [Source] fun box xmlParseQuotedString( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParseNamespace \u00b6 [Source] fun box xmlParseNamespace( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlNamespaceParseNSDef \u00b6 [Source] fun box xmlNamespaceParseNSDef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlScanName \u00b6 [Source] fun box xmlScanName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlNamespaceParseNCName \u00b6 [Source] fun box xmlNamespaceParseNCName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 String val xmlParserHandleReference \u00b6 [Source] fun box xmlParserHandleReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref Returns \u00b6 None val xmlNamespaceParseQName \u00b6 [Source] fun box xmlNamespaceParseQName( pctxt: NullablePointer[Xmlparserctxt ref] ref, pprefix: Pointer[Pointer[U8 val] tag] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pprefix: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 String val xmlDecodeEntities \u00b6 [Source] fun box xmlDecodeEntities( pctxt: NullablePointer[Xmlparserctxt ref] ref, plen: I32 val, pwhat: I32 val, pend: U8 val, pend2: U8 val, pend3: U8 val) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref plen: I32 val pwhat: I32 val pend: U8 val pend2: U8 val pend3: U8 val Returns \u00b6 String val xmlHandleEntity \u00b6 [Source] fun box xmlHandleEntity( pctxt: NullablePointer[Xmlparserctxt ref] ref, pentity: NullablePointer[Xmlentity ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pentity: NullablePointer [ Xmlentity ref] ref Returns \u00b6 None val xmlFreePattern \u00b6 [Source] fun box xmlFreePattern( pcomp: NullablePointer[Xmlpattern ref] ref) : None val Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref Returns \u00b6 None val xmlFreePatternList \u00b6 [Source] fun box xmlFreePatternList( pcomp: NullablePointer[Xmlpattern ref] ref) : None val Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref Returns \u00b6 None val xmlPatterncompile \u00b6 [Source] fun box xmlPatterncompile( ppattern: String val, pdict: NullablePointer[Xmldict ref] ref, pflags: I32 val, pnamespaces: Pointer[Pointer[U8 val] tag] ref) : NullablePointer[Xmlpattern ref] ref Parameters \u00b6 ppattern: String val pdict: NullablePointer [ Xmldict ref] ref pflags: I32 val pnamespaces: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 NullablePointer [ Xmlpattern ref] ref xmlPatternMatch \u00b6 [Source] fun box xmlPatternMatch( pcomp: NullablePointer[Xmlpattern ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlPatternStreamable \u00b6 [Source] fun box xmlPatternStreamable( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref Returns \u00b6 I32 val xmlPatternMaxDepth \u00b6 [Source] fun box xmlPatternMaxDepth( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref Returns \u00b6 I32 val xmlPatternMinDepth \u00b6 [Source] fun box xmlPatternMinDepth( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref Returns \u00b6 I32 val xmlPatternFromRoot \u00b6 [Source] fun box xmlPatternFromRoot( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref Returns \u00b6 I32 val xmlPatternGetStreamCtxt \u00b6 [Source] fun box xmlPatternGetStreamCtxt( pcomp: NullablePointer[Xmlpattern ref] ref) : NullablePointer[Xmlstreamctxt ref] ref Parameters \u00b6 pcomp: NullablePointer [ Xmlpattern ref] ref Returns \u00b6 NullablePointer [ Xmlstreamctxt ref] ref xmlFreeStreamCtxt \u00b6 [Source] fun box xmlFreeStreamCtxt( pstream: NullablePointer[Xmlstreamctxt ref] ref) : None val Parameters \u00b6 pstream: NullablePointer [ Xmlstreamctxt ref] ref Returns \u00b6 None val xmlStreamPushNode \u00b6 [Source] fun box xmlStreamPushNode( pstream: NullablePointer[Xmlstreamctxt ref] ref, pname: String val, pns: String val, pnodeType: I32 val) : I32 val Parameters \u00b6 pstream: NullablePointer [ Xmlstreamctxt ref] ref pname: String val pns: String val pnodeType: I32 val Returns \u00b6 I32 val xmlStreamPush \u00b6 [Source] fun box xmlStreamPush( pstream: NullablePointer[Xmlstreamctxt ref] ref, pname: String val, pns: String val) : I32 val Parameters \u00b6 pstream: NullablePointer [ Xmlstreamctxt ref] ref pname: String val pns: String val Returns \u00b6 I32 val xmlStreamPushAttr \u00b6 [Source] fun box xmlStreamPushAttr( pstream: NullablePointer[Xmlstreamctxt ref] ref, pname: String val, pns: String val) : I32 val Parameters \u00b6 pstream: NullablePointer [ Xmlstreamctxt ref] ref pname: String val pns: String val Returns \u00b6 I32 val xmlStreamPop \u00b6 [Source] fun box xmlStreamPop( pstream: NullablePointer[Xmlstreamctxt ref] ref) : I32 val Parameters \u00b6 pstream: NullablePointer [ Xmlstreamctxt ref] ref Returns \u00b6 I32 val xmlStreamWantsAnyNode \u00b6 [Source] fun box xmlStreamWantsAnyNode( pstream: NullablePointer[Xmlstreamctxt ref] ref) : I32 val Parameters \u00b6 pstream: NullablePointer [ Xmlstreamctxt ref] ref Returns \u00b6 I32 val xmlRelaxNGInitTypes \u00b6 [Source] fun box xmlRelaxNGInitTypes() : I32 val Returns \u00b6 I32 val xmlRelaxNGCleanupTypes \u00b6 [Source] fun box xmlRelaxNGCleanupTypes() : None val Returns \u00b6 None val xmlRelaxNGNewParserCtxt \u00b6 [Source] fun box xmlRelaxNGNewParserCtxt( pURL: String val) : NullablePointer[Xmlrelaxngparserctxt ref] ref Parameters \u00b6 pURL: String val Returns \u00b6 NullablePointer [ Xmlrelaxngparserctxt ref] ref xmlRelaxNGNewMemParserCtxt \u00b6 [Source] fun box xmlRelaxNGNewMemParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlrelaxngparserctxt ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val Returns \u00b6 NullablePointer [ Xmlrelaxngparserctxt ref] ref xmlRelaxNGNewDocParserCtxt \u00b6 [Source] fun box xmlRelaxNGNewDocParserCtxt( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlrelaxngparserctxt ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmlrelaxngparserctxt ref] ref xmlRelaxParserSetFlag \u00b6 [Source] fun box xmlRelaxParserSetFlag( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, pflag: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref pflag: I32 val Returns \u00b6 I32 val xmlRelaxNGFreeParserCtxt \u00b6 [Source] fun box xmlRelaxNGFreeParserCtxt( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref Returns \u00b6 None val xmlRelaxNGSetParserErrors \u00b6 [Source] fun box xmlRelaxNGSetParserErrors( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlRelaxNGGetParserErrors \u00b6 [Source] fun box xmlRelaxNGGetParserErrors( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref Returns \u00b6 I32 val xmlRelaxNGSetParserStructuredErrors \u00b6 [Source] fun box xmlRelaxNGSetParserStructuredErrors( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlRelaxNGParse \u00b6 [Source] fun box xmlRelaxNGParse( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref) : NullablePointer[Xmlrelaxng ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlrelaxng ref] ref xmlRelaxNGFree \u00b6 [Source] fun box xmlRelaxNGFree( pschema: NullablePointer[Xmlrelaxng ref] ref) : None val Parameters \u00b6 pschema: NullablePointer [ Xmlrelaxng ref] ref Returns \u00b6 None val xmlRelaxNGDump \u00b6 [Source] fun box xmlRelaxNGDump( poutput: NullablePointer[IoFile ref] ref, pschema: NullablePointer[Xmlrelaxng ref] ref) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pschema: NullablePointer [ Xmlrelaxng ref] ref Returns \u00b6 None val xmlRelaxNGDumpTree \u00b6 [Source] fun box xmlRelaxNGDumpTree( poutput: NullablePointer[IoFile ref] ref, pschema: NullablePointer[Xmlrelaxng ref] ref) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pschema: NullablePointer [ Xmlrelaxng ref] ref Returns \u00b6 None val xmlRelaxNGSetValidErrors \u00b6 [Source] fun box xmlRelaxNGSetValidErrors( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlRelaxNGGetValidErrors \u00b6 [Source] fun box xmlRelaxNGGetValidErrors( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref Returns \u00b6 I32 val xmlRelaxNGSetValidStructuredErrors \u00b6 [Source] fun box xmlRelaxNGSetValidStructuredErrors( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlRelaxNGNewValidCtxt \u00b6 [Source] fun box xmlRelaxNGNewValidCtxt( pschema: NullablePointer[Xmlrelaxng ref] ref) : NullablePointer[Xmlrelaxngvalidctxt ref] ref Parameters \u00b6 pschema: NullablePointer [ Xmlrelaxng ref] ref Returns \u00b6 NullablePointer [ Xmlrelaxngvalidctxt ref] ref xmlRelaxNGFreeValidCtxt \u00b6 [Source] fun box xmlRelaxNGFreeValidCtxt( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref Returns \u00b6 None val xmlRelaxNGValidateDoc \u00b6 [Source] fun box xmlRelaxNGValidateDoc( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlRelaxNGValidatePushElement \u00b6 [Source] fun box xmlRelaxNGValidatePushElement( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlRelaxNGValidatePushCData \u00b6 [Source] fun box xmlRelaxNGValidatePushCData( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdata: String val, plen: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdata: String val plen: I32 val Returns \u00b6 I32 val xmlRelaxNGValidatePopElement \u00b6 [Source] fun box xmlRelaxNGValidatePopElement( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlRelaxNGValidateFullElement \u00b6 [Source] fun box xmlRelaxNGValidateFullElement( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val getPublicId \u00b6 [Source] fun box getPublicId( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val getSystemId \u00b6 [Source] fun box getSystemId( pctx: Pointer[U8 val] ref) : String val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 String val setDocumentLocator \u00b6 [Source] fun box setDocumentLocator( pctx: Pointer[U8 val] ref, ploc: NullablePointer[Xmlsaxlocator ref] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref ploc: NullablePointer [ Xmlsaxlocator ref] ref Returns \u00b6 None val getLineNumber \u00b6 [Source] fun box getLineNumber( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val getColumnNumber \u00b6 [Source] fun box getColumnNumber( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val isStandalone \u00b6 [Source] fun box isStandalone( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val hasInternalSubset \u00b6 [Source] fun box hasInternalSubset( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val hasExternalSubset \u00b6 [Source] fun box hasExternalSubset( pctx: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 I32 val internalSubset \u00b6 [Source] fun box internalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val Returns \u00b6 None val externalSubset \u00b6 [Source] fun box externalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val Returns \u00b6 None val getEntity \u00b6 [Source] fun box getEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref getParameterEntity \u00b6 [Source] fun box getParameterEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 NullablePointer [ Xmlentity ref] ref resolveEntity \u00b6 [Source] fun box resolveEntity( pctx: Pointer[U8 val] ref, ppublicId: String val, psystemId: String val) : NullablePointer[Xmlparserinput ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref ppublicId: String val psystemId: String val Returns \u00b6 NullablePointer [ Xmlparserinput ref] ref entityDecl \u00b6 [Source] fun box entityDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, ppublicId: String val, psystemId: String val, pcontent: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val ppublicId: String val psystemId: String val pcontent: String val Returns \u00b6 None val attributeDecl \u00b6 [Source] fun box attributeDecl( pctx: Pointer[U8 val] ref, pelem: String val, pfullname: String val, ptype: I32 val, pdef: I32 val, pdefaultValue: String val, ptree: NullablePointer[Xmlenumeration ref] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pelem: String val pfullname: String val ptype: I32 val pdef: I32 val pdefaultValue: String val ptree: NullablePointer [ Xmlenumeration ref] ref Returns \u00b6 None val elementDecl \u00b6 [Source] fun box elementDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref Returns \u00b6 None val notationDecl \u00b6 [Source] fun box notationDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val Returns \u00b6 None val unparsedEntityDecl \u00b6 [Source] fun box unparsedEntityDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val, pnotationName: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val pnotationName: String val Returns \u00b6 None val startDocument \u00b6 [Source] fun box startDocument( pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 None val endDocument \u00b6 [Source] fun box endDocument( pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 None val attribute \u00b6 [Source] fun box attribute( pctx: Pointer[U8 val] ref, pfullname: String val, pvalue: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pfullname: String val pvalue: String val Returns \u00b6 None val startElement \u00b6 [Source] fun box startElement( pctx: Pointer[U8 val] ref, pfullname: String val, patts: Pointer[Pointer[U8 val] tag] ref) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pfullname: String val patts: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 None val endElement \u00b6 [Source] fun box endElement( pctx: Pointer[U8 val] ref, pname: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 None val reference \u00b6 [Source] fun box reference( pctx: Pointer[U8 val] ref, pname: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 None val characters \u00b6 [Source] fun box characters( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pch: String val plen: I32 val Returns \u00b6 None val ignorableWhitespace \u00b6 [Source] fun box ignorableWhitespace( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pch: String val plen: I32 val Returns \u00b6 None val processingInstruction \u00b6 [Source] fun box processingInstruction( pctx: Pointer[U8 val] ref, ptarget: String val, pdata: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref ptarget: String val pdata: String val Returns \u00b6 None val globalNamespace \u00b6 [Source] fun box globalNamespace( pctx: Pointer[U8 val] ref, phref: String val, pprefix: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref phref: String val pprefix: String val Returns \u00b6 None val setNamespace \u00b6 [Source] fun box setNamespace( pctx: Pointer[U8 val] ref, pname: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pname: String val Returns \u00b6 None val getNamespace \u00b6 [Source] fun box getNamespace( pctx: Pointer[U8 val] ref) : NullablePointer[Xmlns ref] ref Parameters \u00b6 pctx: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlns ref] ref checkNamespace \u00b6 [Source] fun box checkNamespace( pctx: Pointer[U8 val] ref, pnameSpace: String val) : I32 val Parameters \u00b6 pctx: Pointer [ U8 val] ref pnameSpace: String val Returns \u00b6 I32 val namespaceDecl \u00b6 [Source] fun box namespaceDecl( pctx: Pointer[U8 val] ref, phref: String val, pprefix: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref phref: String val pprefix: String val Returns \u00b6 None val comment \u00b6 [Source] fun box comment( pctx: Pointer[U8 val] ref, pvalue: String val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pvalue: String val Returns \u00b6 None val cdataBlock \u00b6 [Source] fun box cdataBlock( pctx: Pointer[U8 val] ref, pvalue: String val, plen: I32 val) : None val Parameters \u00b6 pctx: Pointer [ U8 val] ref pvalue: String val plen: I32 val Returns \u00b6 None val initxmlDefaultSAXHandler \u00b6 [Source] fun box initxmlDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandlerv1 ref] ref, pwarning: I32 val) : None val Parameters \u00b6 phdlr: NullablePointer [ Xmlsaxhandlerv1 ref] ref pwarning: I32 val Returns \u00b6 None val inithtmlDefaultSAXHandler \u00b6 [Source] fun box inithtmlDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandlerv1 ref] ref) : None val Parameters \u00b6 phdlr: NullablePointer [ Xmlsaxhandlerv1 ref] ref Returns \u00b6 None val initdocbDefaultSAXHandler \u00b6 [Source] fun box initdocbDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandlerv1 ref] ref) : None val Parameters \u00b6 phdlr: NullablePointer [ Xmlsaxhandlerv1 ref] ref Returns \u00b6 None val xmlSchemaFreeType \u00b6 [Source] fun box xmlSchemaFreeType( ptype: NullablePointer[Xmlschematype ref] ref) : None val Parameters \u00b6 ptype: NullablePointer [ Xmlschematype ref] ref Returns \u00b6 None val xmlSchemaFreeWildcard \u00b6 [Source] fun box xmlSchemaFreeWildcard( pwildcard: NullablePointer[Xmlschemawildcard ref] ref) : None val Parameters \u00b6 pwildcard: NullablePointer [ Xmlschemawildcard ref] ref Returns \u00b6 None val xmlSchematronNewParserCtxt \u00b6 [Source] fun box xmlSchematronNewParserCtxt( pURL: String val) : NullablePointer[Xmlschematronparserctxt ref] ref Parameters \u00b6 pURL: String val Returns \u00b6 NullablePointer [ Xmlschematronparserctxt ref] ref xmlSchematronNewMemParserCtxt \u00b6 [Source] fun box xmlSchematronNewMemParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlschematronparserctxt ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val Returns \u00b6 NullablePointer [ Xmlschematronparserctxt ref] ref xmlSchematronNewDocParserCtxt \u00b6 [Source] fun box xmlSchematronNewDocParserCtxt( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlschematronparserctxt ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmlschematronparserctxt ref] ref xmlSchematronFreeParserCtxt \u00b6 [Source] fun box xmlSchematronFreeParserCtxt( pctxt: NullablePointer[Xmlschematronparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschematronparserctxt ref] ref Returns \u00b6 None val xmlSchematronParse \u00b6 [Source] fun box xmlSchematronParse( pctxt: NullablePointer[Xmlschematronparserctxt ref] ref) : NullablePointer[Xmlschematron ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlschematronparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlschematron ref] ref xmlSchematronFree \u00b6 [Source] fun box xmlSchematronFree( pschema: NullablePointer[Xmlschematron ref] ref) : None val Parameters \u00b6 pschema: NullablePointer [ Xmlschematron ref] ref Returns \u00b6 None val xmlSchematronSetValidStructuredErrors \u00b6 [Source] fun box xmlSchematronSetValidStructuredErrors( pctxt: NullablePointer[Xmlschematronvalidctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschematronvalidctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlSchematronNewValidCtxt \u00b6 [Source] fun box xmlSchematronNewValidCtxt( pschema: NullablePointer[Xmlschematron ref] ref, poptions: I32 val) : NullablePointer[Xmlschematronvalidctxt ref] ref Parameters \u00b6 pschema: NullablePointer [ Xmlschematron ref] ref poptions: I32 val Returns \u00b6 NullablePointer [ Xmlschematronvalidctxt ref] ref xmlSchematronFreeValidCtxt \u00b6 [Source] fun box xmlSchematronFreeValidCtxt( pctxt: NullablePointer[Xmlschematronvalidctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschematronvalidctxt ref] ref Returns \u00b6 None val xmlSchematronValidateDoc \u00b6 [Source] fun box xmlSchematronValidateDoc( pctxt: NullablePointer[Xmlschematronvalidctxt ref] ref, pinstance: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschematronvalidctxt ref] ref pinstance: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlCreateURI \u00b6 [Source] fun box xmlCreateURI() : NullablePointer[Xmluri ref] ref Returns \u00b6 NullablePointer [ Xmluri ref] ref xmlBuildURI \u00b6 [Source] fun box xmlBuildURI( pURI: String val, pbase: String val) : String val Parameters \u00b6 pURI: String val pbase: String val Returns \u00b6 String val xmlBuildRelativeURI \u00b6 [Source] fun box xmlBuildRelativeURI( pURI: String val, pbase: String val) : String val Parameters \u00b6 pURI: String val pbase: String val Returns \u00b6 String val xmlParseURI \u00b6 [Source] fun box xmlParseURI( pstr: String val) : NullablePointer[Xmluri ref] ref Parameters \u00b6 pstr: String val Returns \u00b6 NullablePointer [ Xmluri ref] ref xmlParseURIRaw \u00b6 [Source] fun box xmlParseURIRaw( pstr: String val, praw: I32 val) : NullablePointer[Xmluri ref] ref Parameters \u00b6 pstr: String val praw: I32 val Returns \u00b6 NullablePointer [ Xmluri ref] ref xmlParseURIReference \u00b6 [Source] fun box xmlParseURIReference( puri: NullablePointer[Xmluri ref] ref, pstr: String val) : I32 val Parameters \u00b6 puri: NullablePointer [ Xmluri ref] ref pstr: String val Returns \u00b6 I32 val xmlSaveUri \u00b6 [Source] fun box xmlSaveUri( puri: NullablePointer[Xmluri ref] ref) : String val Parameters \u00b6 puri: NullablePointer [ Xmluri ref] ref Returns \u00b6 String val xmlPrintURI \u00b6 [Source] fun box xmlPrintURI( pstream: NullablePointer[IoFile ref] ref, puri: NullablePointer[Xmluri ref] ref) : None val Parameters \u00b6 pstream: NullablePointer [ IoFile ref] ref puri: NullablePointer [ Xmluri ref] ref Returns \u00b6 None val xmlURIEscapeStr \u00b6 [Source] fun box xmlURIEscapeStr( pstr: String val, plist: String val) : String val Parameters \u00b6 pstr: String val plist: String val Returns \u00b6 String val xmlURIUnescapeString \u00b6 [Source] fun box xmlURIUnescapeString( pstr: String val, plen: I32 val, ptarget: String val) : String val Parameters \u00b6 pstr: String val plen: I32 val ptarget: String val Returns \u00b6 String val xmlNormalizeURIPath \u00b6 [Source] fun box xmlNormalizeURIPath( ppath: String val) : I32 val Parameters \u00b6 ppath: String val Returns \u00b6 I32 val xmlURIEscape \u00b6 [Source] fun box xmlURIEscape( pstr: String val) : String val Parameters \u00b6 pstr: String val Returns \u00b6 String val xmlFreeURI \u00b6 [Source] fun box xmlFreeURI( puri: NullablePointer[Xmluri ref] ref) : None val Parameters \u00b6 puri: NullablePointer [ Xmluri ref] ref Returns \u00b6 None val xmlCanonicPath \u00b6 [Source] fun box xmlCanonicPath( ppath: String val) : String val Parameters \u00b6 ppath: String val Returns \u00b6 String val xmlPathToURI \u00b6 [Source] fun box xmlPathToURI( ppath: String val) : String val Parameters \u00b6 ppath: String val Returns \u00b6 String val xmlXIncludeProcess \u00b6 [Source] fun box xmlXIncludeProcess( pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlXIncludeProcessFlags \u00b6 [Source] fun box xmlXIncludeProcessFlags( pdoc: NullablePointer[Xmldoc ref] tag, pflags: I32 val) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pflags: I32 val Returns \u00b6 I32 val xmlXIncludeProcessFlagsData \u00b6 [Source] fun box xmlXIncludeProcessFlagsData( pdoc: NullablePointer[Xmldoc ref] tag, pflags: I32 val, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pflags: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlXIncludeProcessTreeFlagsData \u00b6 [Source] fun box xmlXIncludeProcessTreeFlagsData( ptree: NullablePointer[Xmlnode ref] ref, pflags: I32 val, pdata: Pointer[U8 val] ref) : I32 val Parameters \u00b6 ptree: NullablePointer [ Xmlnode ref] ref pflags: I32 val pdata: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlXIncludeProcessTree \u00b6 [Source] fun box xmlXIncludeProcessTree( ptree: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 ptree: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlXIncludeProcessTreeFlags \u00b6 [Source] fun box xmlXIncludeProcessTreeFlags( ptree: NullablePointer[Xmlnode ref] ref, pflags: I32 val) : I32 val Parameters \u00b6 ptree: NullablePointer [ Xmlnode ref] ref pflags: I32 val Returns \u00b6 I32 val xmlXIncludeNewContext \u00b6 [Source] fun box xmlXIncludeNewContext( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlxincludectxt ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmlxincludectxt ref] ref xmlXIncludeSetFlags \u00b6 [Source] fun box xmlXIncludeSetFlags( pctxt: NullablePointer[Xmlxincludectxt ref] ref, pflags: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxincludectxt ref] ref pflags: I32 val Returns \u00b6 I32 val xmlXIncludeFreeContext \u00b6 [Source] fun box xmlXIncludeFreeContext( pctxt: NullablePointer[Xmlxincludectxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxincludectxt ref] ref Returns \u00b6 None val xmlXIncludeProcessNode \u00b6 [Source] fun box xmlXIncludeProcessNode( pctxt: NullablePointer[Xmlxincludectxt ref] ref, ptree: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxincludectxt ref] ref ptree: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlModuleOpen \u00b6 [Source] fun box xmlModuleOpen( pfilename: String val, poptions: I32 val) : NullablePointer[Xmlmodule ref] ref Parameters \u00b6 pfilename: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmlmodule ref] ref xmlModuleSymbol \u00b6 [Source] fun box xmlModuleSymbol( pmodule: NullablePointer[Xmlmodule ref] ref, pname: String val, presult: Pointer[Pointer[U8 val] ref] ref) : I32 val Parameters \u00b6 pmodule: NullablePointer [ Xmlmodule ref] ref pname: String val presult: Pointer [ Pointer [ U8 val] ref] ref Returns \u00b6 I32 val xmlModuleClose \u00b6 [Source] fun box xmlModuleClose( pmodule: NullablePointer[Xmlmodule ref] ref) : I32 val Parameters \u00b6 pmodule: NullablePointer [ Xmlmodule ref] ref Returns \u00b6 I32 val xmlModuleFree \u00b6 [Source] fun box xmlModuleFree( pmodule: NullablePointer[Xmlmodule ref] ref) : I32 val Parameters \u00b6 pmodule: NullablePointer [ Xmlmodule ref] ref Returns \u00b6 I32 val xmlSchemaNewParserCtxt \u00b6 [Source] fun box xmlSchemaNewParserCtxt( pURL: String val) : NullablePointer[Xmlschemaparserctxt ref] ref Parameters \u00b6 pURL: String val Returns \u00b6 NullablePointer [ Xmlschemaparserctxt ref] ref xmlSchemaNewMemParserCtxt \u00b6 [Source] fun box xmlSchemaNewMemParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlschemaparserctxt ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val Returns \u00b6 NullablePointer [ Xmlschemaparserctxt ref] ref xmlSchemaNewDocParserCtxt \u00b6 [Source] fun box xmlSchemaNewDocParserCtxt( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlschemaparserctxt ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmlschemaparserctxt ref] ref xmlSchemaFreeParserCtxt \u00b6 [Source] fun box xmlSchemaFreeParserCtxt( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref Returns \u00b6 None val xmlSchemaSetParserErrors \u00b6 [Source] fun box xmlSchemaSetParserErrors( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlSchemaSetParserStructuredErrors \u00b6 [Source] fun box xmlSchemaSetParserStructuredErrors( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlSchemaGetParserErrors \u00b6 [Source] fun box xmlSchemaGetParserErrors( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref Returns \u00b6 I32 val xmlSchemaIsValid \u00b6 [Source] fun box xmlSchemaIsValid( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref Returns \u00b6 I32 val xmlSchemaParse \u00b6 [Source] fun box xmlSchemaParse( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref) : NullablePointer[Xmlschema ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref Returns \u00b6 NullablePointer [ Xmlschema ref] ref xmlSchemaFree \u00b6 [Source] fun box xmlSchemaFree( pschema: NullablePointer[Xmlschema ref] ref) : None val Parameters \u00b6 pschema: NullablePointer [ Xmlschema ref] ref Returns \u00b6 None val xmlSchemaDump \u00b6 [Source] fun box xmlSchemaDump( poutput: NullablePointer[IoFile ref] ref, pschema: NullablePointer[Xmlschema ref] ref) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pschema: NullablePointer [ Xmlschema ref] ref Returns \u00b6 None val xmlSchemaSetValidErrors \u00b6 [Source] fun box xmlSchemaSetValidErrors( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlSchemaSetValidStructuredErrors \u00b6 [Source] fun box xmlSchemaSetValidStructuredErrors( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref Returns \u00b6 None val xmlSchemaGetValidErrors \u00b6 [Source] fun box xmlSchemaGetValidErrors( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref Returns \u00b6 I32 val xmlSchemaSetValidOptions \u00b6 [Source] fun box xmlSchemaSetValidOptions( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref poptions: I32 val Returns \u00b6 I32 val xmlSchemaValidateSetFilename \u00b6 [Source] fun box xmlSchemaValidateSetFilename( pvctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pfilename: String val) : None val Parameters \u00b6 pvctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pfilename: String val Returns \u00b6 None val xmlSchemaValidCtxtGetOptions \u00b6 [Source] fun box xmlSchemaValidCtxtGetOptions( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref Returns \u00b6 I32 val xmlSchemaNewValidCtxt \u00b6 [Source] fun box xmlSchemaNewValidCtxt( pschema: NullablePointer[Xmlschema ref] ref) : NullablePointer[Xmlschemavalidctxt ref] ref Parameters \u00b6 pschema: NullablePointer [ Xmlschema ref] ref Returns \u00b6 NullablePointer [ Xmlschemavalidctxt ref] ref xmlSchemaFreeValidCtxt \u00b6 [Source] fun box xmlSchemaFreeValidCtxt( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref Returns \u00b6 None val xmlSchemaValidateDoc \u00b6 [Source] fun box xmlSchemaValidateDoc( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pinstance: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pinstance: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlSchemaValidateOneElement \u00b6 [Source] fun box xmlSchemaValidateOneElement( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pelem: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlSchemaValidateStream \u00b6 [Source] fun box xmlSchemaValidateStream( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, penc: I32 val, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref penc: I32 val psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlSchemaValidateFile \u00b6 [Source] fun box xmlSchemaValidateFile( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pfilename: String val, poptions: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pfilename: String val poptions: I32 val Returns \u00b6 I32 val xmlSchemaValidCtxtGetParserCtxt \u00b6 [Source] fun box xmlSchemaValidCtxtGetParserCtxt( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : NullablePointer[Xmlparserctxt ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref Returns \u00b6 NullablePointer [ Xmlparserctxt ref] ref xmlSchemaSAXPlug \u00b6 [Source] fun box xmlSchemaSAXPlug( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, psax: Pointer[NullablePointer[Xmlsaxhandler ref] ref] ref, puser_data: Pointer[Pointer[U8 val] ref] ref) : NullablePointer[Xmlschemasaxplug ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref psax: Pointer [ NullablePointer [ Xmlsaxhandler ref] ref] ref puser_data: Pointer [ Pointer [ U8 val] ref] ref Returns \u00b6 NullablePointer [ Xmlschemasaxplug ref] ref xmlSchemaSAXUnplug \u00b6 [Source] fun box xmlSchemaSAXUnplug( pplug: NullablePointer[Xmlschemasaxplug ref] ref) : I32 val Parameters \u00b6 pplug: NullablePointer [ Xmlschemasaxplug ref] ref Returns \u00b6 I32 val xmlSchemaValidateSetLocator \u00b6 [Source] fun box xmlSchemaValidateSetLocator( pvctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, pctxt: Pointer[U8 val] ref) : None val Parameters \u00b6 pvctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref pctxt: Pointer [ U8 val] ref Returns \u00b6 None val xmlNewTextReader \u00b6 [Source] fun box xmlNewTextReader( pinput: NullablePointer[Xmlparserinputbuffer ref] ref, pURI: String val) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pinput: NullablePointer [ Xmlparserinputbuffer ref] ref pURI: String val Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlNewTextReaderFilename \u00b6 [Source] fun box xmlNewTextReaderFilename( pURI: String val) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pURI: String val Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlFreeTextReader \u00b6 [Source] fun box xmlFreeTextReader( preader: NullablePointer[Xmltextreader ref] ref) : None val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 None val xmlTextReaderSetup \u00b6 [Source] fun box xmlTextReaderSetup( preader: NullablePointer[Xmltextreader ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 I32 val xmlTextReaderRead \u00b6 [Source] fun box xmlTextReaderRead( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderReadInnerXml \u00b6 [Source] fun box xmlTextReaderReadInnerXml( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderReadOuterXml \u00b6 [Source] fun box xmlTextReaderReadOuterXml( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderReadString \u00b6 [Source] fun box xmlTextReaderReadString( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderReadAttributeValue \u00b6 [Source] fun box xmlTextReaderReadAttributeValue( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderAttributeCount \u00b6 [Source] fun box xmlTextReaderAttributeCount( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderDepth \u00b6 [Source] fun box xmlTextReaderDepth( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderHasAttributes \u00b6 [Source] fun box xmlTextReaderHasAttributes( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderHasValue \u00b6 [Source] fun box xmlTextReaderHasValue( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderIsDefault \u00b6 [Source] fun box xmlTextReaderIsDefault( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderIsEmptyElement \u00b6 [Source] fun box xmlTextReaderIsEmptyElement( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderNodeType \u00b6 [Source] fun box xmlTextReaderNodeType( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderQuoteChar \u00b6 [Source] fun box xmlTextReaderQuoteChar( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderReadState \u00b6 [Source] fun box xmlTextReaderReadState( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderIsNamespaceDecl \u00b6 [Source] fun box xmlTextReaderIsNamespaceDecl( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderConstBaseUri \u00b6 [Source] fun box xmlTextReaderConstBaseUri( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderConstLocalName \u00b6 [Source] fun box xmlTextReaderConstLocalName( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderConstName \u00b6 [Source] fun box xmlTextReaderConstName( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderConstNamespaceUri \u00b6 [Source] fun box xmlTextReaderConstNamespaceUri( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderConstPrefix \u00b6 [Source] fun box xmlTextReaderConstPrefix( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderConstXmlLang \u00b6 [Source] fun box xmlTextReaderConstXmlLang( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderConstString \u00b6 [Source] fun box xmlTextReaderConstString( preader: NullablePointer[Xmltextreader ref] ref, pstr: String val) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pstr: String val Returns \u00b6 String val xmlTextReaderConstValue \u00b6 [Source] fun box xmlTextReaderConstValue( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderBaseUri \u00b6 [Source] fun box xmlTextReaderBaseUri( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderLocalName \u00b6 [Source] fun box xmlTextReaderLocalName( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderName \u00b6 [Source] fun box xmlTextReaderName( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderNamespaceUri \u00b6 [Source] fun box xmlTextReaderNamespaceUri( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderPrefix \u00b6 [Source] fun box xmlTextReaderPrefix( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderXmlLang \u00b6 [Source] fun box xmlTextReaderXmlLang( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderValue \u00b6 [Source] fun box xmlTextReaderValue( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderClose \u00b6 [Source] fun box xmlTextReaderClose( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderGetAttributeNo \u00b6 [Source] fun box xmlTextReaderGetAttributeNo( preader: NullablePointer[Xmltextreader ref] ref, pno: I32 val) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pno: I32 val Returns \u00b6 String val xmlTextReaderGetAttribute \u00b6 [Source] fun box xmlTextReaderGetAttribute( preader: NullablePointer[Xmltextreader ref] ref, pname: String val) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pname: String val Returns \u00b6 String val xmlTextReaderGetAttributeNs \u00b6 [Source] fun box xmlTextReaderGetAttributeNs( preader: NullablePointer[Xmltextreader ref] ref, plocalName: String val, pnamespaceURI: String val) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref plocalName: String val pnamespaceURI: String val Returns \u00b6 String val xmlTextReaderGetRemainder \u00b6 [Source] fun box xmlTextReaderGetRemainder( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlparserinputbuffer ref] ref Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 NullablePointer [ Xmlparserinputbuffer ref] ref xmlTextReaderLookupNamespace \u00b6 [Source] fun box xmlTextReaderLookupNamespace( preader: NullablePointer[Xmltextreader ref] ref, pprefix: String val) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pprefix: String val Returns \u00b6 String val xmlTextReaderMoveToAttributeNo \u00b6 [Source] fun box xmlTextReaderMoveToAttributeNo( preader: NullablePointer[Xmltextreader ref] ref, pno: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pno: I32 val Returns \u00b6 I32 val xmlTextReaderMoveToAttribute \u00b6 [Source] fun box xmlTextReaderMoveToAttribute( preader: NullablePointer[Xmltextreader ref] ref, pname: String val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pname: String val Returns \u00b6 I32 val xmlTextReaderMoveToAttributeNs \u00b6 [Source] fun box xmlTextReaderMoveToAttributeNs( preader: NullablePointer[Xmltextreader ref] ref, plocalName: String val, pnamespaceURI: String val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref plocalName: String val pnamespaceURI: String val Returns \u00b6 I32 val xmlTextReaderMoveToFirstAttribute \u00b6 [Source] fun box xmlTextReaderMoveToFirstAttribute( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderMoveToNextAttribute \u00b6 [Source] fun box xmlTextReaderMoveToNextAttribute( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderMoveToElement \u00b6 [Source] fun box xmlTextReaderMoveToElement( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderNormalization \u00b6 [Source] fun box xmlTextReaderNormalization( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderConstEncoding \u00b6 [Source] fun box xmlTextReaderConstEncoding( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderSetParserProp \u00b6 [Source] fun box xmlTextReaderSetParserProp( preader: NullablePointer[Xmltextreader ref] ref, pprop: I32 val, pvalue: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pprop: I32 val pvalue: I32 val Returns \u00b6 I32 val xmlTextReaderGetParserProp \u00b6 [Source] fun box xmlTextReaderGetParserProp( preader: NullablePointer[Xmltextreader ref] ref, pprop: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pprop: I32 val Returns \u00b6 I32 val xmlTextReaderCurrentNode \u00b6 [Source] fun box xmlTextReaderCurrentNode( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlTextReaderGetParserLineNumber \u00b6 [Source] fun box xmlTextReaderGetParserLineNumber( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderGetParserColumnNumber \u00b6 [Source] fun box xmlTextReaderGetParserColumnNumber( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderPreserve \u00b6 [Source] fun box xmlTextReaderPreserve( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlTextReaderPreservePattern \u00b6 [Source] fun box xmlTextReaderPreservePattern( preader: NullablePointer[Xmltextreader ref] ref, ppattern: String val, pnamespaces: Pointer[Pointer[U8 val] tag] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref ppattern: String val pnamespaces: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 I32 val xmlTextReaderCurrentDoc \u00b6 [Source] fun box xmlTextReaderCurrentDoc( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmldoc ref] ref Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 NullablePointer [ Xmldoc ref] ref xmlTextReaderExpand \u00b6 [Source] fun box xmlTextReaderExpand( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlTextReaderNext \u00b6 [Source] fun box xmlTextReaderNext( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderNextSibling \u00b6 [Source] fun box xmlTextReaderNextSibling( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderIsValid \u00b6 [Source] fun box xmlTextReaderIsValid( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderRelaxNGValidate \u00b6 [Source] fun box xmlTextReaderRelaxNGValidate( preader: NullablePointer[Xmltextreader ref] ref, prng: String val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref prng: String val Returns \u00b6 I32 val xmlTextReaderRelaxNGValidateCtxt \u00b6 [Source] fun box xmlTextReaderRelaxNGValidateCtxt( preader: NullablePointer[Xmltextreader ref] ref, pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref poptions: I32 val Returns \u00b6 I32 val xmlTextReaderRelaxNGSetSchema \u00b6 [Source] fun box xmlTextReaderRelaxNGSetSchema( preader: NullablePointer[Xmltextreader ref] ref, pschema: NullablePointer[Xmlrelaxng ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pschema: NullablePointer [ Xmlrelaxng ref] ref Returns \u00b6 I32 val xmlTextReaderSchemaValidate \u00b6 [Source] fun box xmlTextReaderSchemaValidate( preader: NullablePointer[Xmltextreader ref] ref, pxsd: String val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pxsd: String val Returns \u00b6 I32 val xmlTextReaderSchemaValidateCtxt \u00b6 [Source] fun box xmlTextReaderSchemaValidateCtxt( preader: NullablePointer[Xmltextreader ref] ref, pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref poptions: I32 val Returns \u00b6 I32 val xmlTextReaderSetSchema \u00b6 [Source] fun box xmlTextReaderSetSchema( preader: NullablePointer[Xmltextreader ref] ref, pschema: NullablePointer[Xmlschema ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pschema: NullablePointer [ Xmlschema ref] ref Returns \u00b6 I32 val xmlTextReaderConstXmlVersion \u00b6 [Source] fun box xmlTextReaderConstXmlVersion( preader: NullablePointer[Xmltextreader ref] ref) : String val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 String val xmlTextReaderStandalone \u00b6 [Source] fun box xmlTextReaderStandalone( preader: NullablePointer[Xmltextreader ref] ref) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I32 val xmlTextReaderByteConsumed \u00b6 [Source] fun box xmlTextReaderByteConsumed( preader: NullablePointer[Xmltextreader ref] ref) : I64 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 I64 val xmlReaderWalker \u00b6 [Source] fun box xmlReaderWalker( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlReaderForDoc \u00b6 [Source] fun box xmlReaderForDoc( pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pcur: String val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlReaderForFile \u00b6 [Source] fun box xmlReaderForFile( pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pfilename: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlReaderForMemory \u00b6 [Source] fun box xmlReaderForMemory( pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlReaderForFd \u00b6 [Source] fun box xmlReaderForFd( pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pfd: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlReaderForIO \u00b6 [Source] fun box xmlReaderForIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref Parameters \u00b6 pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmltextreader ref] ref xmlReaderNewWalker \u00b6 [Source] fun box xmlReaderNewWalker( preader: NullablePointer[Xmltextreader ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I32 val xmlReaderNewDoc \u00b6 [Source] fun box xmlReaderNewDoc( preader: NullablePointer[Xmltextreader ref] ref, pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pcur: String val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 I32 val xmlReaderNewFile \u00b6 [Source] fun box xmlReaderNewFile( preader: NullablePointer[Xmltextreader ref] ref, pfilename: String val, pencoding: String val, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pfilename: String val pencoding: String val poptions: I32 val Returns \u00b6 I32 val xmlReaderNewMemory \u00b6 [Source] fun box xmlReaderNewMemory( preader: NullablePointer[Xmltextreader ref] ref, pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 I32 val xmlReaderNewFd \u00b6 [Source] fun box xmlReaderNewFd( preader: NullablePointer[Xmltextreader ref] ref, pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pfd: I32 val pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 I32 val xmlReaderNewIO \u00b6 [Source] fun box xmlReaderNewIO( preader: NullablePointer[Xmltextreader ref] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val Returns \u00b6 I32 val xmlTextReaderLocatorLineNumber \u00b6 [Source] fun box xmlTextReaderLocatorLineNumber( plocator: Pointer[U8 val] ref) : I32 val Parameters \u00b6 plocator: Pointer [ U8 val] ref Returns \u00b6 I32 val xmlTextReaderLocatorBaseURI \u00b6 [Source] fun box xmlTextReaderLocatorBaseURI( plocator: Pointer[U8 val] ref) : String val Parameters \u00b6 plocator: Pointer [ U8 val] ref Returns \u00b6 String val xmlTextReaderSetErrorHandler \u00b6 [Source] fun box xmlTextReaderSetErrorHandler( preader: NullablePointer[Xmltextreader ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, parg: Pointer[U8 val] ref) : None val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref parg: Pointer [ U8 val] ref Returns \u00b6 None val xmlTextReaderSetStructuredErrorHandler \u00b6 [Source] fun box xmlTextReaderSetStructuredErrorHandler( preader: NullablePointer[Xmltextreader ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, parg: Pointer[U8 val] ref) : None val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref parg: Pointer [ U8 val] ref Returns \u00b6 None val xmlTextReaderGetErrorHandler \u00b6 [Source] fun box xmlTextReaderGetErrorHandler( preader: NullablePointer[Xmltextreader ref] ref, pf: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, parg: Pointer[Pointer[U8 val] ref] ref) : None val Parameters \u00b6 preader: NullablePointer [ Xmltextreader ref] ref pf: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref parg: Pointer [ Pointer [ U8 val] ref] ref Returns \u00b6 None val xmlSaveToFd \u00b6 [Source] fun box xmlSaveToFd( pfd: I32 val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref Parameters \u00b6 pfd: I32 val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmlsavectxt ref] ref xmlSaveToFilename \u00b6 [Source] fun box xmlSaveToFilename( pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref Parameters \u00b6 pfilename: String val pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmlsavectxt ref] ref xmlSaveToBuffer \u00b6 [Source] fun box xmlSaveToBuffer( pbuffer: NullablePointer[Xmlbuffer ref] ref, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref Parameters \u00b6 pbuffer: NullablePointer [ Xmlbuffer ref] ref pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmlsavectxt ref] ref xmlSaveToIO \u00b6 [Source] fun box xmlSaveToIO( piowrite: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref Parameters \u00b6 piowrite: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pencoding: String val poptions: I32 val Returns \u00b6 NullablePointer [ Xmlsavectxt ref] ref xmlSaveDoc \u00b6 [Source] fun box xmlSaveDoc( pctxt: NullablePointer[Xmlsavectxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I64 val Parameters \u00b6 pctxt: NullablePointer [ Xmlsavectxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag Returns \u00b6 I64 val xmlSaveTree \u00b6 [Source] fun box xmlSaveTree( pctxt: NullablePointer[Xmlsavectxt ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I64 val Parameters \u00b6 pctxt: NullablePointer [ Xmlsavectxt ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I64 val xmlSaveFlush \u00b6 [Source] fun box xmlSaveFlush( pctxt: NullablePointer[Xmlsavectxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlsavectxt ref] ref Returns \u00b6 I32 val xmlSaveClose \u00b6 [Source] fun box xmlSaveClose( pctxt: NullablePointer[Xmlsavectxt ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlsavectxt ref] ref Returns \u00b6 I32 val xmlSaveSetEscape \u00b6 [Source] fun box xmlSaveSetEscape( pctxt: NullablePointer[Xmlsavectxt ref] ref, pescape: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlsavectxt ref] ref pescape: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlSaveSetAttrEscape \u00b6 [Source] fun box xmlSaveSetAttrEscape( pctxt: NullablePointer[Xmlsavectxt ref] ref, pescape: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlsavectxt ref] ref pescape: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlSchemaInitTypes \u00b6 [Source] fun box xmlSchemaInitTypes() : None val Returns \u00b6 None val xmlSchemaCleanupTypes \u00b6 [Source] fun box xmlSchemaCleanupTypes() : None val Returns \u00b6 None val xmlSchemaGetPredefinedType \u00b6 [Source] fun box xmlSchemaGetPredefinedType( pname: String val, pns: String val) : NullablePointer[Xmlschematype ref] ref Parameters \u00b6 pname: String val pns: String val Returns \u00b6 NullablePointer [ Xmlschematype ref] ref xmlSchemaValidatePredefinedType \u00b6 [Source] fun box xmlSchemaValidatePredefinedType( ptype: NullablePointer[Xmlschematype ref] ref, pvalue: String val, pval: Pointer[NullablePointer[Xmlschemaval ref] ref] ref) : I32 val Parameters \u00b6 ptype: NullablePointer [ Xmlschematype ref] ref pvalue: String val pval: Pointer [ NullablePointer [ Xmlschemaval ref] ref] ref Returns \u00b6 I32 val xmlSchemaValPredefTypeNode \u00b6 [Source] fun box xmlSchemaValPredefTypeNode( ptype: NullablePointer[Xmlschematype ref] ref, pvalue: String val, pval: Pointer[NullablePointer[Xmlschemaval ref] ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 ptype: NullablePointer [ Xmlschematype ref] ref pvalue: String val pval: Pointer [ NullablePointer [ Xmlschemaval ref] ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlSchemaValidateFacet \u00b6 [Source] fun box xmlSchemaValidateFacet( pbase: NullablePointer[Xmlschematype ref] ref, pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref) : I32 val Parameters \u00b6 pbase: NullablePointer [ Xmlschematype ref] ref pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 I32 val xmlSchemaValidateFacetWhtsp \u00b6 [Source] fun box xmlSchemaValidateFacetWhtsp( pfacet: NullablePointer[Xmlschemafacet ref] ref, pfws: I32 val, pvalType: I32 val, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref, pws: I32 val) : I32 val Parameters \u00b6 pfacet: NullablePointer [ Xmlschemafacet ref] ref pfws: I32 val pvalType: I32 val pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref pws: I32 val Returns \u00b6 I32 val xmlSchemaFreeValue \u00b6 [Source] fun box xmlSchemaFreeValue( pval: NullablePointer[Xmlschemaval ref] ref) : None val Parameters \u00b6 pval: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 None val xmlSchemaNewFacet \u00b6 [Source] fun box xmlSchemaNewFacet() : NullablePointer[Xmlschemafacet ref] ref Returns \u00b6 NullablePointer [ Xmlschemafacet ref] ref xmlSchemaCheckFacet \u00b6 [Source] fun box xmlSchemaCheckFacet( pfacet: NullablePointer[Xmlschemafacet ref] ref, ptypeDecl: NullablePointer[Xmlschematype ref] ref, pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, pname: String val) : I32 val Parameters \u00b6 pfacet: NullablePointer [ Xmlschemafacet ref] ref ptypeDecl: NullablePointer [ Xmlschematype ref] ref pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref pname: String val Returns \u00b6 I32 val xmlSchemaFreeFacet \u00b6 [Source] fun box xmlSchemaFreeFacet( pfacet: NullablePointer[Xmlschemafacet ref] ref) : None val Parameters \u00b6 pfacet: NullablePointer [ Xmlschemafacet ref] ref Returns \u00b6 None val xmlSchemaCompareValues \u00b6 [Source] fun box xmlSchemaCompareValues( px: NullablePointer[Xmlschemaval ref] ref, py: NullablePointer[Xmlschemaval ref] ref) : I32 val Parameters \u00b6 px: NullablePointer [ Xmlschemaval ref] ref py: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 I32 val xmlSchemaGetBuiltInListSimpleTypeItemType \u00b6 [Source] fun box xmlSchemaGetBuiltInListSimpleTypeItemType( ptype: NullablePointer[Xmlschematype ref] ref) : NullablePointer[Xmlschematype ref] ref Parameters \u00b6 ptype: NullablePointer [ Xmlschematype ref] ref Returns \u00b6 NullablePointer [ Xmlschematype ref] ref xmlSchemaValidateListSimpleTypeFacet \u00b6 [Source] fun box xmlSchemaValidateListSimpleTypeFacet( pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalue: String val, pactualLen: U64 val, pexpectedLen: Pointer[U64 val] ref) : I32 val Parameters \u00b6 pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalue: String val pactualLen: U64 val pexpectedLen: Pointer [ U64 val] ref Returns \u00b6 I32 val xmlSchemaGetBuiltInType \u00b6 [Source] fun box xmlSchemaGetBuiltInType( ptype: I32 val) : NullablePointer[Xmlschematype ref] ref Parameters \u00b6 ptype: I32 val Returns \u00b6 NullablePointer [ Xmlschematype ref] ref xmlSchemaIsBuiltInTypeFacet \u00b6 [Source] fun box xmlSchemaIsBuiltInTypeFacet( ptype: NullablePointer[Xmlschematype ref] ref, pfacetType: I32 val) : I32 val Parameters \u00b6 ptype: NullablePointer [ Xmlschematype ref] ref pfacetType: I32 val Returns \u00b6 I32 val xmlSchemaCollapseString \u00b6 [Source] fun box xmlSchemaCollapseString( pvalue: String val) : String val Parameters \u00b6 pvalue: String val Returns \u00b6 String val xmlSchemaWhiteSpaceReplace \u00b6 [Source] fun box xmlSchemaWhiteSpaceReplace( pvalue: String val) : String val Parameters \u00b6 pvalue: String val Returns \u00b6 String val xmlSchemaGetFacetValueAsULong \u00b6 [Source] fun box xmlSchemaGetFacetValueAsULong( pfacet: NullablePointer[Xmlschemafacet ref] ref) : U64 val Parameters \u00b6 pfacet: NullablePointer [ Xmlschemafacet ref] ref Returns \u00b6 U64 val xmlSchemaValidateLengthFacet \u00b6 [Source] fun box xmlSchemaValidateLengthFacet( ptype: NullablePointer[Xmlschematype ref] ref, pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref, plength: Pointer[U64 val] ref) : I32 val Parameters \u00b6 ptype: NullablePointer [ Xmlschematype ref] ref pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref plength: Pointer [ U64 val] ref Returns \u00b6 I32 val xmlSchemaValidateLengthFacetWhtsp \u00b6 [Source] fun box xmlSchemaValidateLengthFacetWhtsp( pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalType: I32 val, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref, plength: Pointer[U64 val] ref, pws: I32 val) : I32 val Parameters \u00b6 pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalType: I32 val pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref plength: Pointer [ U64 val] ref pws: I32 val Returns \u00b6 I32 val xmlSchemaValPredefTypeNodeNoNorm \u00b6 [Source] fun box xmlSchemaValPredefTypeNodeNoNorm( ptype: NullablePointer[Xmlschematype ref] ref, pvalue: String val, pval: Pointer[NullablePointer[Xmlschemaval ref] ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 ptype: NullablePointer [ Xmlschematype ref] ref pvalue: String val pval: Pointer [ NullablePointer [ Xmlschemaval ref] ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlSchemaGetCanonValue \u00b6 [Source] fun box xmlSchemaGetCanonValue( pval: NullablePointer[Xmlschemaval ref] ref, pretValue: Pointer[Pointer[U8 val] tag] ref) : I32 val Parameters \u00b6 pval: NullablePointer [ Xmlschemaval ref] ref pretValue: Pointer [ Pointer [ U8 val] tag] ref Returns \u00b6 I32 val xmlSchemaGetCanonValueWhtsp \u00b6 [Source] fun box xmlSchemaGetCanonValueWhtsp( pval: NullablePointer[Xmlschemaval ref] ref, pretValue: Pointer[Pointer[U8 val] tag] ref, pws: I32 val) : I32 val Parameters \u00b6 pval: NullablePointer [ Xmlschemaval ref] ref pretValue: Pointer [ Pointer [ U8 val] tag] ref pws: I32 val Returns \u00b6 I32 val xmlSchemaValueAppend \u00b6 [Source] fun box xmlSchemaValueAppend( pprev: NullablePointer[Xmlschemaval ref] ref, pcur: NullablePointer[Xmlschemaval ref] ref) : I32 val Parameters \u00b6 pprev: NullablePointer [ Xmlschemaval ref] ref pcur: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 I32 val xmlSchemaValueGetNext \u00b6 [Source] fun box xmlSchemaValueGetNext( pcur: NullablePointer[Xmlschemaval ref] ref) : NullablePointer[Xmlschemaval ref] ref Parameters \u00b6 pcur: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 NullablePointer [ Xmlschemaval ref] ref xmlSchemaValueGetAsString \u00b6 [Source] fun box xmlSchemaValueGetAsString( pval: NullablePointer[Xmlschemaval ref] ref) : String val Parameters \u00b6 pval: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 String val xmlSchemaValueGetAsBoolean \u00b6 [Source] fun box xmlSchemaValueGetAsBoolean( pval: NullablePointer[Xmlschemaval ref] ref) : I32 val Parameters \u00b6 pval: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 I32 val xmlSchemaNewStringValue \u00b6 [Source] fun box xmlSchemaNewStringValue( ptype: I32 val, pvalue: String val) : NullablePointer[Xmlschemaval ref] ref Parameters \u00b6 ptype: I32 val pvalue: String val Returns \u00b6 NullablePointer [ Xmlschemaval ref] ref xmlSchemaNewNOTATIONValue \u00b6 [Source] fun box xmlSchemaNewNOTATIONValue( pname: String val, pns: String val) : NullablePointer[Xmlschemaval ref] ref Parameters \u00b6 pname: String val pns: String val Returns \u00b6 NullablePointer [ Xmlschemaval ref] ref xmlSchemaNewQNameValue \u00b6 [Source] fun box xmlSchemaNewQNameValue( pnamespaceName: String val, plocalName: String val) : NullablePointer[Xmlschemaval ref] ref Parameters \u00b6 pnamespaceName: String val plocalName: String val Returns \u00b6 NullablePointer [ Xmlschemaval ref] ref xmlSchemaCompareValuesWhtsp \u00b6 [Source] fun box xmlSchemaCompareValuesWhtsp( px: NullablePointer[Xmlschemaval ref] ref, pxws: I32 val, py: NullablePointer[Xmlschemaval ref] ref, pyws: I32 val) : I32 val Parameters \u00b6 px: NullablePointer [ Xmlschemaval ref] ref pxws: I32 val py: NullablePointer [ Xmlschemaval ref] ref pyws: I32 val Returns \u00b6 I32 val xmlSchemaCopyValue \u00b6 [Source] fun box xmlSchemaCopyValue( pval: NullablePointer[Xmlschemaval ref] ref) : NullablePointer[Xmlschemaval ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 NullablePointer [ Xmlschemaval ref] ref xmlSchemaGetValType \u00b6 [Source] fun box xmlSchemaGetValType( pval: NullablePointer[Xmlschemaval ref] ref) : I32 val Parameters \u00b6 pval: NullablePointer [ Xmlschemaval ref] ref Returns \u00b6 I32 val xmlUCSIsAegeanNumbers \u00b6 [Source] fun box xmlUCSIsAegeanNumbers( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsAlphabeticPresentationForms \u00b6 [Source] fun box xmlUCSIsAlphabeticPresentationForms( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsArabic \u00b6 [Source] fun box xmlUCSIsArabic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsArabicPresentationFormsA \u00b6 [Source] fun box xmlUCSIsArabicPresentationFormsA( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsArabicPresentationFormsB \u00b6 [Source] fun box xmlUCSIsArabicPresentationFormsB( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsArmenian \u00b6 [Source] fun box xmlUCSIsArmenian( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsArrows \u00b6 [Source] fun box xmlUCSIsArrows( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBasicLatin \u00b6 [Source] fun box xmlUCSIsBasicLatin( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBengali \u00b6 [Source] fun box xmlUCSIsBengali( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBlockElements \u00b6 [Source] fun box xmlUCSIsBlockElements( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBopomofo \u00b6 [Source] fun box xmlUCSIsBopomofo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBopomofoExtended \u00b6 [Source] fun box xmlUCSIsBopomofoExtended( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBoxDrawing \u00b6 [Source] fun box xmlUCSIsBoxDrawing( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBraillePatterns \u00b6 [Source] fun box xmlUCSIsBraillePatterns( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBuhid \u00b6 [Source] fun box xmlUCSIsBuhid( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsByzantineMusicalSymbols \u00b6 [Source] fun box xmlUCSIsByzantineMusicalSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKCompatibility \u00b6 [Source] fun box xmlUCSIsCJKCompatibility( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKCompatibilityForms \u00b6 [Source] fun box xmlUCSIsCJKCompatibilityForms( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKCompatibilityIdeographs \u00b6 [Source] fun box xmlUCSIsCJKCompatibilityIdeographs( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKCompatibilityIdeographsSupplement \u00b6 [Source] fun box xmlUCSIsCJKCompatibilityIdeographsSupplement( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKRadicalsSupplement \u00b6 [Source] fun box xmlUCSIsCJKRadicalsSupplement( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKSymbolsandPunctuation \u00b6 [Source] fun box xmlUCSIsCJKSymbolsandPunctuation( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKUnifiedIdeographs \u00b6 [Source] fun box xmlUCSIsCJKUnifiedIdeographs( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKUnifiedIdeographsExtensionA \u00b6 [Source] fun box xmlUCSIsCJKUnifiedIdeographsExtensionA( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCJKUnifiedIdeographsExtensionB \u00b6 [Source] fun box xmlUCSIsCJKUnifiedIdeographsExtensionB( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCherokee \u00b6 [Source] fun box xmlUCSIsCherokee( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCombiningDiacriticalMarks \u00b6 [Source] fun box xmlUCSIsCombiningDiacriticalMarks( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCombiningDiacriticalMarksforSymbols \u00b6 [Source] fun box xmlUCSIsCombiningDiacriticalMarksforSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCombiningHalfMarks \u00b6 [Source] fun box xmlUCSIsCombiningHalfMarks( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCombiningMarksforSymbols \u00b6 [Source] fun box xmlUCSIsCombiningMarksforSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsControlPictures \u00b6 [Source] fun box xmlUCSIsControlPictures( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCurrencySymbols \u00b6 [Source] fun box xmlUCSIsCurrencySymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCypriotSyllabary \u00b6 [Source] fun box xmlUCSIsCypriotSyllabary( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCyrillic \u00b6 [Source] fun box xmlUCSIsCyrillic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCyrillicSupplement \u00b6 [Source] fun box xmlUCSIsCyrillicSupplement( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsDeseret \u00b6 [Source] fun box xmlUCSIsDeseret( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsDevanagari \u00b6 [Source] fun box xmlUCSIsDevanagari( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsDingbats \u00b6 [Source] fun box xmlUCSIsDingbats( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsEnclosedAlphanumerics \u00b6 [Source] fun box xmlUCSIsEnclosedAlphanumerics( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsEnclosedCJKLettersandMonths \u00b6 [Source] fun box xmlUCSIsEnclosedCJKLettersandMonths( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsEthiopic \u00b6 [Source] fun box xmlUCSIsEthiopic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGeneralPunctuation \u00b6 [Source] fun box xmlUCSIsGeneralPunctuation( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGeometricShapes \u00b6 [Source] fun box xmlUCSIsGeometricShapes( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGeorgian \u00b6 [Source] fun box xmlUCSIsGeorgian( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGothic \u00b6 [Source] fun box xmlUCSIsGothic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGreek \u00b6 [Source] fun box xmlUCSIsGreek( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGreekExtended \u00b6 [Source] fun box xmlUCSIsGreekExtended( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGreekandCoptic \u00b6 [Source] fun box xmlUCSIsGreekandCoptic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGujarati \u00b6 [Source] fun box xmlUCSIsGujarati( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsGurmukhi \u00b6 [Source] fun box xmlUCSIsGurmukhi( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHalfwidthandFullwidthForms \u00b6 [Source] fun box xmlUCSIsHalfwidthandFullwidthForms( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHangulCompatibilityJamo \u00b6 [Source] fun box xmlUCSIsHangulCompatibilityJamo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHangulJamo \u00b6 [Source] fun box xmlUCSIsHangulJamo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHangulSyllables \u00b6 [Source] fun box xmlUCSIsHangulSyllables( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHanunoo \u00b6 [Source] fun box xmlUCSIsHanunoo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHebrew \u00b6 [Source] fun box xmlUCSIsHebrew( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHighPrivateUseSurrogates \u00b6 [Source] fun box xmlUCSIsHighPrivateUseSurrogates( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHighSurrogates \u00b6 [Source] fun box xmlUCSIsHighSurrogates( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsHiragana \u00b6 [Source] fun box xmlUCSIsHiragana( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsIPAExtensions \u00b6 [Source] fun box xmlUCSIsIPAExtensions( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsIdeographicDescriptionCharacters \u00b6 [Source] fun box xmlUCSIsIdeographicDescriptionCharacters( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsKanbun \u00b6 [Source] fun box xmlUCSIsKanbun( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsKangxiRadicals \u00b6 [Source] fun box xmlUCSIsKangxiRadicals( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsKannada \u00b6 [Source] fun box xmlUCSIsKannada( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsKatakana \u00b6 [Source] fun box xmlUCSIsKatakana( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsKatakanaPhoneticExtensions \u00b6 [Source] fun box xmlUCSIsKatakanaPhoneticExtensions( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsKhmer \u00b6 [Source] fun box xmlUCSIsKhmer( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsKhmerSymbols \u00b6 [Source] fun box xmlUCSIsKhmerSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLao \u00b6 [Source] fun box xmlUCSIsLao( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLatin1Supplement \u00b6 [Source] fun box xmlUCSIsLatin1Supplement( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLatinExtendedA \u00b6 [Source] fun box xmlUCSIsLatinExtendedA( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLatinExtendedB \u00b6 [Source] fun box xmlUCSIsLatinExtendedB( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLatinExtendedAdditional \u00b6 [Source] fun box xmlUCSIsLatinExtendedAdditional( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLetterlikeSymbols \u00b6 [Source] fun box xmlUCSIsLetterlikeSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLimbu \u00b6 [Source] fun box xmlUCSIsLimbu( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLinearBIdeograms \u00b6 [Source] fun box xmlUCSIsLinearBIdeograms( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLinearBSyllabary \u00b6 [Source] fun box xmlUCSIsLinearBSyllabary( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsLowSurrogates \u00b6 [Source] fun box xmlUCSIsLowSurrogates( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMalayalam \u00b6 [Source] fun box xmlUCSIsMalayalam( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMathematicalAlphanumericSymbols \u00b6 [Source] fun box xmlUCSIsMathematicalAlphanumericSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMathematicalOperators \u00b6 [Source] fun box xmlUCSIsMathematicalOperators( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMiscellaneousMathematicalSymbolsA \u00b6 [Source] fun box xmlUCSIsMiscellaneousMathematicalSymbolsA( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMiscellaneousMathematicalSymbolsB \u00b6 [Source] fun box xmlUCSIsMiscellaneousMathematicalSymbolsB( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMiscellaneousSymbols \u00b6 [Source] fun box xmlUCSIsMiscellaneousSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMiscellaneousSymbolsandArrows \u00b6 [Source] fun box xmlUCSIsMiscellaneousSymbolsandArrows( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMiscellaneousTechnical \u00b6 [Source] fun box xmlUCSIsMiscellaneousTechnical( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMongolian \u00b6 [Source] fun box xmlUCSIsMongolian( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMusicalSymbols \u00b6 [Source] fun box xmlUCSIsMusicalSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsMyanmar \u00b6 [Source] fun box xmlUCSIsMyanmar( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsNumberForms \u00b6 [Source] fun box xmlUCSIsNumberForms( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsOgham \u00b6 [Source] fun box xmlUCSIsOgham( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsOldItalic \u00b6 [Source] fun box xmlUCSIsOldItalic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsOpticalCharacterRecognition \u00b6 [Source] fun box xmlUCSIsOpticalCharacterRecognition( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsOriya \u00b6 [Source] fun box xmlUCSIsOriya( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsOsmanya \u00b6 [Source] fun box xmlUCSIsOsmanya( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsPhoneticExtensions \u00b6 [Source] fun box xmlUCSIsPhoneticExtensions( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsPrivateUse \u00b6 [Source] fun box xmlUCSIsPrivateUse( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsPrivateUseArea \u00b6 [Source] fun box xmlUCSIsPrivateUseArea( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsRunic \u00b6 [Source] fun box xmlUCSIsRunic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsShavian \u00b6 [Source] fun box xmlUCSIsShavian( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSinhala \u00b6 [Source] fun box xmlUCSIsSinhala( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSmallFormVariants \u00b6 [Source] fun box xmlUCSIsSmallFormVariants( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSpacingModifierLetters \u00b6 [Source] fun box xmlUCSIsSpacingModifierLetters( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSpecials \u00b6 [Source] fun box xmlUCSIsSpecials( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSuperscriptsandSubscripts \u00b6 [Source] fun box xmlUCSIsSuperscriptsandSubscripts( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSupplementalArrowsA \u00b6 [Source] fun box xmlUCSIsSupplementalArrowsA( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSupplementalArrowsB \u00b6 [Source] fun box xmlUCSIsSupplementalArrowsB( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSupplementalMathematicalOperators \u00b6 [Source] fun box xmlUCSIsSupplementalMathematicalOperators( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSupplementaryPrivateUseAreaA \u00b6 [Source] fun box xmlUCSIsSupplementaryPrivateUseAreaA( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSupplementaryPrivateUseAreaB \u00b6 [Source] fun box xmlUCSIsSupplementaryPrivateUseAreaB( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsSyriac \u00b6 [Source] fun box xmlUCSIsSyriac( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTagalog \u00b6 [Source] fun box xmlUCSIsTagalog( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTagbanwa \u00b6 [Source] fun box xmlUCSIsTagbanwa( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTags \u00b6 [Source] fun box xmlUCSIsTags( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTaiLe \u00b6 [Source] fun box xmlUCSIsTaiLe( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTaiXuanJingSymbols \u00b6 [Source] fun box xmlUCSIsTaiXuanJingSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTamil \u00b6 [Source] fun box xmlUCSIsTamil( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTelugu \u00b6 [Source] fun box xmlUCSIsTelugu( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsThaana \u00b6 [Source] fun box xmlUCSIsThaana( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsThai \u00b6 [Source] fun box xmlUCSIsThai( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsTibetan \u00b6 [Source] fun box xmlUCSIsTibetan( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsUgaritic \u00b6 [Source] fun box xmlUCSIsUgaritic( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsUnifiedCanadianAboriginalSyllabics \u00b6 [Source] fun box xmlUCSIsUnifiedCanadianAboriginalSyllabics( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsVariationSelectors \u00b6 [Source] fun box xmlUCSIsVariationSelectors( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsVariationSelectorsSupplement \u00b6 [Source] fun box xmlUCSIsVariationSelectorsSupplement( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsYiRadicals \u00b6 [Source] fun box xmlUCSIsYiRadicals( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsYiSyllables \u00b6 [Source] fun box xmlUCSIsYiSyllables( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsYijingHexagramSymbols \u00b6 [Source] fun box xmlUCSIsYijingHexagramSymbols( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsBlock \u00b6 [Source] fun box xmlUCSIsBlock( pcode: I32 val, pblock: String val) : I32 val Parameters \u00b6 pcode: I32 val pblock: String val Returns \u00b6 I32 val xmlUCSIsCatC \u00b6 [Source] fun box xmlUCSIsCatC( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatCc \u00b6 [Source] fun box xmlUCSIsCatCc( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatCf \u00b6 [Source] fun box xmlUCSIsCatCf( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatCo \u00b6 [Source] fun box xmlUCSIsCatCo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatCs \u00b6 [Source] fun box xmlUCSIsCatCs( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatL \u00b6 [Source] fun box xmlUCSIsCatL( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatLl \u00b6 [Source] fun box xmlUCSIsCatLl( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatLm \u00b6 [Source] fun box xmlUCSIsCatLm( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatLo \u00b6 [Source] fun box xmlUCSIsCatLo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatLt \u00b6 [Source] fun box xmlUCSIsCatLt( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatLu \u00b6 [Source] fun box xmlUCSIsCatLu( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatM \u00b6 [Source] fun box xmlUCSIsCatM( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatMc \u00b6 [Source] fun box xmlUCSIsCatMc( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatMe \u00b6 [Source] fun box xmlUCSIsCatMe( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatMn \u00b6 [Source] fun box xmlUCSIsCatMn( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatN \u00b6 [Source] fun box xmlUCSIsCatN( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatNd \u00b6 [Source] fun box xmlUCSIsCatNd( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatNl \u00b6 [Source] fun box xmlUCSIsCatNl( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatNo \u00b6 [Source] fun box xmlUCSIsCatNo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatP \u00b6 [Source] fun box xmlUCSIsCatP( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatPc \u00b6 [Source] fun box xmlUCSIsCatPc( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatPd \u00b6 [Source] fun box xmlUCSIsCatPd( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatPe \u00b6 [Source] fun box xmlUCSIsCatPe( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatPf \u00b6 [Source] fun box xmlUCSIsCatPf( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatPi \u00b6 [Source] fun box xmlUCSIsCatPi( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatPo \u00b6 [Source] fun box xmlUCSIsCatPo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatPs \u00b6 [Source] fun box xmlUCSIsCatPs( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatS \u00b6 [Source] fun box xmlUCSIsCatS( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatSc \u00b6 [Source] fun box xmlUCSIsCatSc( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatSk \u00b6 [Source] fun box xmlUCSIsCatSk( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatSm \u00b6 [Source] fun box xmlUCSIsCatSm( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatSo \u00b6 [Source] fun box xmlUCSIsCatSo( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatZ \u00b6 [Source] fun box xmlUCSIsCatZ( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatZl \u00b6 [Source] fun box xmlUCSIsCatZl( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatZp \u00b6 [Source] fun box xmlUCSIsCatZp( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCatZs \u00b6 [Source] fun box xmlUCSIsCatZs( pcode: I32 val) : I32 val Parameters \u00b6 pcode: I32 val Returns \u00b6 I32 val xmlUCSIsCat \u00b6 [Source] fun box xmlUCSIsCat( pcode: I32 val, pcat: String val) : I32 val Parameters \u00b6 pcode: I32 val pcat: String val Returns \u00b6 I32 val xmlNewTextWriter \u00b6 [Source] fun box xmlNewTextWriter( pout: NullablePointer[Xmloutputbuffer ref] ref) : NullablePointer[Xmltextwriter ref] ref Parameters \u00b6 pout: NullablePointer [ Xmloutputbuffer ref] ref Returns \u00b6 NullablePointer [ Xmltextwriter ref] ref xmlNewTextWriterFilename \u00b6 [Source] fun box xmlNewTextWriterFilename( puri: String val, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref Parameters \u00b6 puri: String val pcompression: I32 val Returns \u00b6 NullablePointer [ Xmltextwriter ref] ref xmlNewTextWriterMemory \u00b6 [Source] fun box xmlNewTextWriterMemory( pbuf: NullablePointer[Xmlbuffer ref] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref Parameters \u00b6 pbuf: NullablePointer [ Xmlbuffer ref] ref pcompression: I32 val Returns \u00b6 NullablePointer [ Xmltextwriter ref] ref xmlNewTextWriterPushParser \u00b6 [Source] fun box xmlNewTextWriterPushParser( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlparserctxt ref] ref pcompression: I32 val Returns \u00b6 NullablePointer [ Xmltextwriter ref] ref xmlNewTextWriterDoc \u00b6 [Source] fun box xmlNewTextWriterDoc( pdoc: Pointer[NullablePointer[Xmldoc ref] tag] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref Parameters \u00b6 pdoc: Pointer [ NullablePointer [ Xmldoc ref] tag] ref pcompression: I32 val Returns \u00b6 NullablePointer [ Xmltextwriter ref] ref xmlNewTextWriterTree \u00b6 [Source] fun box xmlNewTextWriterTree( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pcompression: I32 val Returns \u00b6 NullablePointer [ Xmltextwriter ref] ref xmlFreeTextWriter \u00b6 [Source] fun box xmlFreeTextWriter( pwriter: NullablePointer[Xmltextwriter ref] ref) : None val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 None val xmlTextWriterStartDocument \u00b6 [Source] fun box xmlTextWriterStartDocument( pwriter: NullablePointer[Xmltextwriter ref] ref, pversion: String val, pencoding: String val, pstandalone: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pversion: String val pencoding: String val pstandalone: String val Returns \u00b6 I32 val xmlTextWriterEndDocument \u00b6 [Source] fun box xmlTextWriterEndDocument( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterStartComment \u00b6 [Source] fun box xmlTextWriterStartComment( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterEndComment \u00b6 [Source] fun box xmlTextWriterEndComment( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatComment \u00b6 [Source] fun box xmlTextWriterWriteFormatComment( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatComment \u00b6 [Source] fun box xmlTextWriterWriteVFormatComment( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteComment \u00b6 [Source] fun box xmlTextWriterWriteComment( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val Returns \u00b6 I32 val xmlTextWriterStartElement \u00b6 [Source] fun box xmlTextWriterStartElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val Returns \u00b6 I32 val xmlTextWriterStartElementNS \u00b6 [Source] fun box xmlTextWriterStartElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val Returns \u00b6 I32 val xmlTextWriterEndElement \u00b6 [Source] fun box xmlTextWriterEndElement( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterFullEndElement \u00b6 [Source] fun box xmlTextWriterFullEndElement( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatElement \u00b6 [Source] fun box xmlTextWriterWriteFormatElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatElement \u00b6 [Source] fun box xmlTextWriterWriteVFormatElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteElement \u00b6 [Source] fun box xmlTextWriterWriteElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterWriteFormatElementNS \u00b6 [Source] fun box xmlTextWriterWriteFormatElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatElementNS \u00b6 [Source] fun box xmlTextWriterWriteVFormatElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteElementNS \u00b6 [Source] fun box xmlTextWriterWriteElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterWriteFormatRaw \u00b6 [Source] fun box xmlTextWriterWriteFormatRaw( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatRaw \u00b6 [Source] fun box xmlTextWriterWriteVFormatRaw( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteRawLen \u00b6 [Source] fun box xmlTextWriterWriteRawLen( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val, plen: I32 val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val plen: I32 val Returns \u00b6 I32 val xmlTextWriterWriteRaw \u00b6 [Source] fun box xmlTextWriterWriteRaw( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val Returns \u00b6 I32 val xmlTextWriterWriteFormatString \u00b6 [Source] fun box xmlTextWriterWriteFormatString( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatString \u00b6 [Source] fun box xmlTextWriterWriteVFormatString( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteString \u00b6 [Source] fun box xmlTextWriterWriteString( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val Returns \u00b6 I32 val xmlTextWriterWriteBase64 \u00b6 [Source] fun box xmlTextWriterWriteBase64( pwriter: NullablePointer[Xmltextwriter ref] ref, pdata: String val, pstart: I32 val, plen: I32 val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pdata: String val pstart: I32 val plen: I32 val Returns \u00b6 I32 val xmlTextWriterWriteBinHex \u00b6 [Source] fun box xmlTextWriterWriteBinHex( pwriter: NullablePointer[Xmltextwriter ref] ref, pdata: String val, pstart: I32 val, plen: I32 val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pdata: String val pstart: I32 val plen: I32 val Returns \u00b6 I32 val xmlTextWriterStartAttribute \u00b6 [Source] fun box xmlTextWriterStartAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val Returns \u00b6 I32 val xmlTextWriterStartAttributeNS \u00b6 [Source] fun box xmlTextWriterStartAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val Returns \u00b6 I32 val xmlTextWriterEndAttribute \u00b6 [Source] fun box xmlTextWriterEndAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatAttribute \u00b6 [Source] fun box xmlTextWriterWriteFormatAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatAttribute \u00b6 [Source] fun box xmlTextWriterWriteVFormatAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteAttribute \u00b6 [Source] fun box xmlTextWriterWriteAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterWriteFormatAttributeNS \u00b6 [Source] fun box xmlTextWriterWriteFormatAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatAttributeNS \u00b6 [Source] fun box xmlTextWriterWriteVFormatAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteAttributeNS \u00b6 [Source] fun box xmlTextWriterWriteAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterStartPI \u00b6 [Source] fun box xmlTextWriterStartPI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val Returns \u00b6 I32 val xmlTextWriterEndPI \u00b6 [Source] fun box xmlTextWriterEndPI( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatPI \u00b6 [Source] fun box xmlTextWriterWriteFormatPI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatPI \u00b6 [Source] fun box xmlTextWriterWriteVFormatPI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWritePI \u00b6 [Source] fun box xmlTextWriterWritePI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterStartCDATA \u00b6 [Source] fun box xmlTextWriterStartCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterEndCDATA \u00b6 [Source] fun box xmlTextWriterEndCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatCDATA \u00b6 [Source] fun box xmlTextWriterWriteFormatCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatCDATA \u00b6 [Source] fun box xmlTextWriterWriteVFormatCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteCDATA \u00b6 [Source] fun box xmlTextWriterWriteCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val Returns \u00b6 I32 val xmlTextWriterStartDTD \u00b6 [Source] fun box xmlTextWriterStartDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val Returns \u00b6 I32 val xmlTextWriterEndDTD \u00b6 [Source] fun box xmlTextWriterEndDTD( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatDTD \u00b6 [Source] fun box xmlTextWriterWriteFormatDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatDTD \u00b6 [Source] fun box xmlTextWriterWriteVFormatDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteDTD \u00b6 [Source] fun box xmlTextWriterWriteDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val, psubset: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val psubset: String val Returns \u00b6 I32 val xmlTextWriterStartDTDElement \u00b6 [Source] fun box xmlTextWriterStartDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val Returns \u00b6 I32 val xmlTextWriterEndDTDElement \u00b6 [Source] fun box xmlTextWriterEndDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatDTDElement \u00b6 [Source] fun box xmlTextWriterWriteFormatDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatDTDElement \u00b6 [Source] fun box xmlTextWriterWriteVFormatDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteDTDElement \u00b6 [Source] fun box xmlTextWriterWriteDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterStartDTDAttlist \u00b6 [Source] fun box xmlTextWriterStartDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val Returns \u00b6 I32 val xmlTextWriterEndDTDAttlist \u00b6 [Source] fun box xmlTextWriterEndDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatDTDAttlist \u00b6 [Source] fun box xmlTextWriterWriteFormatDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatDTDAttlist \u00b6 [Source] fun box xmlTextWriterWriteVFormatDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteDTDAttlist \u00b6 [Source] fun box xmlTextWriterWriteDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterStartDTDEntity \u00b6 [Source] fun box xmlTextWriterStartDTDEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val Returns \u00b6 I32 val xmlTextWriterEndDTDEntity \u00b6 [Source] fun box xmlTextWriterEndDTDEntity( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlTextWriterWriteFormatDTDInternalEntity \u00b6 [Source] fun box xmlTextWriterWriteFormatDTDInternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, pformat: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val pformat: String val Returns \u00b6 I32 val xmlTextWriterWriteVFormatDTDInternalEntity \u00b6 [Source] fun box xmlTextWriterWriteVFormatDTDInternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref Returns \u00b6 I32 val xmlTextWriterWriteDTDInternalEntity \u00b6 [Source] fun box xmlTextWriterWriteDTDInternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterWriteDTDExternalEntity \u00b6 [Source] fun box xmlTextWriterWriteDTDExternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, ppubid: String val, psysid: String val, pndataid: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val ppubid: String val psysid: String val pndataid: String val Returns \u00b6 I32 val xmlTextWriterWriteDTDExternalEntityContents \u00b6 [Source] fun box xmlTextWriterWriteDTDExternalEntityContents( pwriter: NullablePointer[Xmltextwriter ref] ref, ppubid: String val, psysid: String val, pndataid: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ppubid: String val psysid: String val pndataid: String val Returns \u00b6 I32 val xmlTextWriterWriteDTDEntity \u00b6 [Source] fun box xmlTextWriterWriteDTDEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, ppubid: String val, psysid: String val, pndataid: String val, pcontent: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val ppubid: String val psysid: String val pndataid: String val pcontent: String val Returns \u00b6 I32 val xmlTextWriterWriteDTDNotation \u00b6 [Source] fun box xmlTextWriterWriteDTDNotation( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val Returns \u00b6 I32 val xmlTextWriterSetIndent \u00b6 [Source] fun box xmlTextWriterSetIndent( pwriter: NullablePointer[Xmltextwriter ref] ref, pindent: I32 val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pindent: I32 val Returns \u00b6 I32 val xmlTextWriterSetIndentString \u00b6 [Source] fun box xmlTextWriterSetIndentString( pwriter: NullablePointer[Xmltextwriter ref] ref, pstr: String val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pstr: String val Returns \u00b6 I32 val xmlTextWriterSetQuoteChar \u00b6 [Source] fun box xmlTextWriterSetQuoteChar( pwriter: NullablePointer[Xmltextwriter ref] ref, pquotechar: U8 val) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref pquotechar: U8 val Returns \u00b6 I32 val xmlTextWriterFlush \u00b6 [Source] fun box xmlTextWriterFlush( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val Parameters \u00b6 pwriter: NullablePointer [ Xmltextwriter ref] ref Returns \u00b6 I32 val xmlXPathPopBoolean \u00b6 [Source] fun box xmlXPathPopBoolean( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 I32 val xmlXPathPopNumber \u00b6 [Source] fun box xmlXPathPopNumber( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : F64 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 F64 val xmlXPathPopString \u00b6 [Source] fun box xmlXPathPopString( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 String val xmlXPathPopNodeSet \u00b6 [Source] fun box xmlXPathPopNodeSet( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathPopExternal \u00b6 [Source] fun box xmlXPathPopExternal( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 String val xmlXPathRegisterVariableLookup \u00b6 [Source] fun box xmlXPathRegisterVariableLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref Returns \u00b6 None val xmlXPathRegisterFuncLookup \u00b6 [Source] fun box xmlXPathRegisterFuncLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pf: Pointer[FUNCTIONPOINTER val] ref, pfuncCtxt: Pointer[U8 val] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pf: Pointer [ FUNCTIONPOINTER val] ref pfuncCtxt: Pointer [ U8 val] ref Returns \u00b6 None val xmlXPatherror \u00b6 [Source] fun box xmlXPatherror( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pfile: String val, pline: I32 val, pno: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pfile: String val pline: I32 val pno: I32 val Returns \u00b6 None val xmlXPathErr \u00b6 [Source] fun box xmlXPathErr( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, perror: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref perror: I32 val Returns \u00b6 None val xmlXPathDebugDumpObject \u00b6 [Source] fun box xmlXPathDebugDumpObject( poutput: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmlxpathobject ref] ref, pdepth: I32 val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmlxpathobject ref] ref pdepth: I32 val Returns \u00b6 None val xmlXPathDebugDumpCompExpr \u00b6 [Source] fun box xmlXPathDebugDumpCompExpr( poutput: NullablePointer[IoFile ref] ref, pcomp: NullablePointer[Xmlxpathcompexpr ref] ref, pdepth: I32 val) : None val Parameters \u00b6 poutput: NullablePointer [ IoFile ref] ref pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref pdepth: I32 val Returns \u00b6 None val xmlXPathNodeSetContains \u00b6 [Source] fun box xmlXPathNodeSetContains( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlXPathDifference \u00b6 [Source] fun box xmlXPathDifference( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathIntersection \u00b6 [Source] fun box xmlXPathIntersection( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathDistinctSorted \u00b6 [Source] fun box xmlXPathDistinctSorted( pnodes: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathDistinct \u00b6 [Source] fun box xmlXPathDistinct( pnodes: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathHasSameNodes \u00b6 [Source] fun box xmlXPathHasSameNodes( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : I32 val Parameters \u00b6 pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 I32 val xmlXPathNodeLeadingSorted \u00b6 [Source] fun box xmlXPathNodeLeadingSorted( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathLeadingSorted \u00b6 [Source] fun box xmlXPathLeadingSorted( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathNodeLeading \u00b6 [Source] fun box xmlXPathNodeLeading( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathLeading \u00b6 [Source] fun box xmlXPathLeading( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathNodeTrailingSorted \u00b6 [Source] fun box xmlXPathNodeTrailingSorted( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathTrailingSorted \u00b6 [Source] fun box xmlXPathTrailingSorted( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathNodeTrailing \u00b6 [Source] fun box xmlXPathNodeTrailing( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathTrailing \u00b6 [Source] fun box xmlXPathTrailing( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathRegisterNs \u00b6 [Source] fun box xmlXPathRegisterNs( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pprefix: String val, pns_uri: String val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pprefix: String val pns_uri: String val Returns \u00b6 I32 val xmlXPathNsLookup \u00b6 [Source] fun box xmlXPathNsLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pprefix: String val) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pprefix: String val Returns \u00b6 String val xmlXPathRegisteredNsCleanup \u00b6 [Source] fun box xmlXPathRegisteredNsCleanup( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 None val xmlXPathRegisterFunc \u00b6 [Source] fun box xmlXPathRegisterFunc( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlXPathRegisterFuncNS \u00b6 [Source] fun box xmlXPathRegisterFuncNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val pf: Pointer [ FUNCTIONPOINTER val] ref Returns \u00b6 I32 val xmlXPathRegisterVariable \u00b6 [Source] fun box xmlXPathRegisterVariable( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pvalue: NullablePointer[Xmlxpathobject ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pvalue: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 I32 val xmlXPathRegisterVariableNS \u00b6 [Source] fun box xmlXPathRegisterVariableNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val, pvalue: NullablePointer[Xmlxpathobject ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val pvalue: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 I32 val xmlXPathFunctionLookup \u00b6 [Source] fun box xmlXPathFunctionLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlXPathFunctionLookupNS \u00b6 [Source] fun box xmlXPathFunctionLookupNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val) : Pointer[FUNCTIONPOINTER val] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val Returns \u00b6 Pointer [ FUNCTIONPOINTER val] ref xmlXPathRegisteredFuncsCleanup \u00b6 [Source] fun box xmlXPathRegisteredFuncsCleanup( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 None val xmlXPathVariableLookup \u00b6 [Source] fun box xmlXPathVariableLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathVariableLookupNS \u00b6 [Source] fun box xmlXPathVariableLookupNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathRegisteredVariablesCleanup \u00b6 [Source] fun box xmlXPathRegisteredVariablesCleanup( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 None val xmlXPathNewParserContext \u00b6 [Source] fun box xmlXPathNewParserContext( pstr: String val, pctxt: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathparsercontext ref] ref Parameters \u00b6 pstr: String val pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 NullablePointer [ Xmlxpathparsercontext ref] ref xmlXPathFreeParserContext \u00b6 [Source] fun box xmlXPathFreeParserContext( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val valuePop \u00b6 [Source] fun box valuePop( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref valuePush \u00b6 [Source] fun box valuePush( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pvalue: NullablePointer[Xmlxpathobject ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pvalue: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 I32 val xmlXPathNewString \u00b6 [Source] fun box xmlXPathNewString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: String val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathNewCString \u00b6 [Source] fun box xmlXPathNewCString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: String val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathWrapString \u00b6 [Source] fun box xmlXPathWrapString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: String val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathWrapCString \u00b6 [Source] fun box xmlXPathWrapCString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: String val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathNewFloat \u00b6 [Source] fun box xmlXPathNewFloat( pval: F64 val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: F64 val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathNewBoolean \u00b6 [Source] fun box xmlXPathNewBoolean( pval: I32 val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: I32 val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathNewNodeSet \u00b6 [Source] fun box xmlXPathNewNodeSet( pval: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathNewValueTree \u00b6 [Source] fun box xmlXPathNewValueTree( pval: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathNodeSetAdd \u00b6 [Source] fun box xmlXPathNodeSetAdd( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlXPathNodeSetAddUnique \u00b6 [Source] fun box xmlXPathNodeSetAddUnique( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : I32 val Parameters \u00b6 pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref Returns \u00b6 I32 val xmlXPathNodeSetAddNs \u00b6 [Source] fun box xmlXPathNodeSetAddNs( pcur: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref) : I32 val Parameters \u00b6 pcur: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref Returns \u00b6 I32 val xmlXPathNodeSetSort \u00b6 [Source] fun box xmlXPathNodeSetSort( pset: NullablePointer[Xmlnodeset ref] ref) : None val Parameters \u00b6 pset: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 None val xmlXPathRoot \u00b6 [Source] fun box xmlXPathRoot( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathEvalExpr \u00b6 [Source] fun box xmlXPathEvalExpr( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathParseName \u00b6 [Source] fun box xmlXPathParseName( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 String val xmlXPathParseNCName \u00b6 [Source] fun box xmlXPathParseNCName( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 String val xmlXPathStringEvalNumber \u00b6 [Source] fun box xmlXPathStringEvalNumber( pstr: String val) : F64 val Parameters \u00b6 pstr: String val Returns \u00b6 F64 val xmlXPathEvaluatePredicateResult \u00b6 [Source] fun box xmlXPathEvaluatePredicateResult( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pres: NullablePointer[Xmlxpathobject ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pres: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 I32 val xmlXPathRegisterAllFunctions \u00b6 [Source] fun box xmlXPathRegisterAllFunctions( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 None val xmlXPathNodeSetMerge \u00b6 [Source] fun box xmlXPathNodeSetMerge( pval1: NullablePointer[Xmlnodeset ref] ref, pval2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref Parameters \u00b6 pval1: NullablePointer [ Xmlnodeset ref] ref pval2: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlnodeset ref] ref xmlXPathNodeSetDel \u00b6 [Source] fun box xmlXPathNodeSetDel( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref Returns \u00b6 None val xmlXPathNodeSetRemove \u00b6 [Source] fun box xmlXPathNodeSetRemove( pcur: NullablePointer[Xmlnodeset ref] ref, pval: I32 val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmlnodeset ref] ref pval: I32 val Returns \u00b6 None val xmlXPathNewNodeSetList \u00b6 [Source] fun box xmlXPathNewNodeSetList( pval: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathWrapNodeSet \u00b6 [Source] fun box xmlXPathWrapNodeSet( pval: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathWrapExternal \u00b6 [Source] fun box xmlXPathWrapExternal( pval: Pointer[U8 val] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: Pointer [ U8 val] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPathEqualValues \u00b6 [Source] fun box xmlXPathEqualValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 I32 val xmlXPathNotEqualValues \u00b6 [Source] fun box xmlXPathNotEqualValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 I32 val xmlXPathCompareValues \u00b6 [Source] fun box xmlXPathCompareValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pinf: I32 val, pstrict: I32 val) : I32 val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pinf: I32 val pstrict: I32 val Returns \u00b6 I32 val xmlXPathValueFlipSign \u00b6 [Source] fun box xmlXPathValueFlipSign( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathAddValues \u00b6 [Source] fun box xmlXPathAddValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathSubValues \u00b6 [Source] fun box xmlXPathSubValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathMultValues \u00b6 [Source] fun box xmlXPathMultValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathDivValues \u00b6 [Source] fun box xmlXPathDivValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathModValues \u00b6 [Source] fun box xmlXPathModValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val xmlXPathIsNodeType \u00b6 [Source] fun box xmlXPathIsNodeType( pname: String val) : I32 val Parameters \u00b6 pname: String val Returns \u00b6 I32 val xmlXPathNextSelf \u00b6 [Source] fun box xmlXPathNextSelf( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextChild \u00b6 [Source] fun box xmlXPathNextChild( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextDescendant \u00b6 [Source] fun box xmlXPathNextDescendant( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextDescendantOrSelf \u00b6 [Source] fun box xmlXPathNextDescendantOrSelf( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextParent \u00b6 [Source] fun box xmlXPathNextParent( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextAncestorOrSelf \u00b6 [Source] fun box xmlXPathNextAncestorOrSelf( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextFollowingSibling \u00b6 [Source] fun box xmlXPathNextFollowingSibling( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextFollowing \u00b6 [Source] fun box xmlXPathNextFollowing( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextNamespace \u00b6 [Source] fun box xmlXPathNextNamespace( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextAttribute \u00b6 [Source] fun box xmlXPathNextAttribute( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextPreceding \u00b6 [Source] fun box xmlXPathNextPreceding( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextAncestor \u00b6 [Source] fun box xmlXPathNextAncestor( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathNextPrecedingSibling \u00b6 [Source] fun box xmlXPathNextPrecedingSibling( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPathLastFunction \u00b6 [Source] fun box xmlXPathLastFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathPositionFunction \u00b6 [Source] fun box xmlXPathPositionFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathCountFunction \u00b6 [Source] fun box xmlXPathCountFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathIdFunction \u00b6 [Source] fun box xmlXPathIdFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathLocalNameFunction \u00b6 [Source] fun box xmlXPathLocalNameFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathNamespaceURIFunction \u00b6 [Source] fun box xmlXPathNamespaceURIFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathStringFunction \u00b6 [Source] fun box xmlXPathStringFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathStringLengthFunction \u00b6 [Source] fun box xmlXPathStringLengthFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathConcatFunction \u00b6 [Source] fun box xmlXPathConcatFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathContainsFunction \u00b6 [Source] fun box xmlXPathContainsFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathStartsWithFunction \u00b6 [Source] fun box xmlXPathStartsWithFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathSubstringFunction \u00b6 [Source] fun box xmlXPathSubstringFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathSubstringBeforeFunction \u00b6 [Source] fun box xmlXPathSubstringBeforeFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathSubstringAfterFunction \u00b6 [Source] fun box xmlXPathSubstringAfterFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathNormalizeFunction \u00b6 [Source] fun box xmlXPathNormalizeFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathTranslateFunction \u00b6 [Source] fun box xmlXPathTranslateFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathNotFunction \u00b6 [Source] fun box xmlXPathNotFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathTrueFunction \u00b6 [Source] fun box xmlXPathTrueFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathFalseFunction \u00b6 [Source] fun box xmlXPathFalseFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathLangFunction \u00b6 [Source] fun box xmlXPathLangFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathNumberFunction \u00b6 [Source] fun box xmlXPathNumberFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathSumFunction \u00b6 [Source] fun box xmlXPathSumFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathFloorFunction \u00b6 [Source] fun box xmlXPathFloorFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathCeilingFunction \u00b6 [Source] fun box xmlXPathCeilingFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathRoundFunction \u00b6 [Source] fun box xmlXPathRoundFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathBooleanFunction \u00b6 [Source] fun box xmlXPathBooleanFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPathNodeSetFreeNs \u00b6 [Source] fun box xmlXPathNodeSetFreeNs( pns: NullablePointer[Xmlns ref] ref) : None val Parameters \u00b6 pns: NullablePointer [ Xmlns ref] ref Returns \u00b6 None val xmlXPtrLocationSetCreate \u00b6 [Source] fun box xmlXPtrLocationSetCreate( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmllocationset ref] ref Parameters \u00b6 pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmllocationset ref] ref xmlXPtrFreeLocationSet \u00b6 [Source] fun box xmlXPtrFreeLocationSet( pobj: NullablePointer[Xmllocationset ref] ref) : None val Parameters \u00b6 pobj: NullablePointer [ Xmllocationset ref] ref Returns \u00b6 None val xmlXPtrLocationSetMerge \u00b6 [Source] fun box xmlXPtrLocationSetMerge( pval1: NullablePointer[Xmllocationset ref] ref, pval2: NullablePointer[Xmllocationset ref] ref) : NullablePointer[Xmllocationset ref] ref Parameters \u00b6 pval1: NullablePointer [ Xmllocationset ref] ref pval2: NullablePointer [ Xmllocationset ref] ref Returns \u00b6 NullablePointer [ Xmllocationset ref] ref xmlXPtrNewRange \u00b6 [Source] fun box xmlXPtrNewRange( pstart: NullablePointer[Xmlnode ref] ref, pstartindex: I32 val, pend: NullablePointer[Xmlnode ref] ref, pendindex: I32 val) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlnode ref] ref pstartindex: I32 val pend: NullablePointer [ Xmlnode ref] ref pendindex: I32 val Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewRangePoints \u00b6 [Source] fun box xmlXPtrNewRangePoints( pstart: NullablePointer[Xmlxpathobject ref] ref, pend: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlxpathobject ref] ref pend: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewRangeNodePoint \u00b6 [Source] fun box xmlXPtrNewRangeNodePoint( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewRangePointNode \u00b6 [Source] fun box xmlXPtrNewRangePointNode( pstart: NullablePointer[Xmlxpathobject ref] ref, pend: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlxpathobject ref] ref pend: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewRangeNodes \u00b6 [Source] fun box xmlXPtrNewRangeNodes( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewLocationSetNodes \u00b6 [Source] fun box xmlXPtrNewLocationSetNodes( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewLocationSetNodeSet \u00b6 [Source] fun box xmlXPtrNewLocationSetNodeSet( pset: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pset: NullablePointer [ Xmlnodeset ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewRangeNodeObject \u00b6 [Source] fun box xmlXPtrNewRangeNodeObject( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrNewCollapsedRange \u00b6 [Source] fun box xmlXPtrNewCollapsedRange( pstart: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstart: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrLocationSetAdd \u00b6 [Source] fun box xmlXPtrLocationSetAdd( pcur: NullablePointer[Xmllocationset ref] ref, pval: NullablePointer[Xmlxpathobject ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmllocationset ref] ref pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 None val xmlXPtrWrapLocationSet \u00b6 [Source] fun box xmlXPtrWrapLocationSet( pval: NullablePointer[Xmllocationset ref] ref) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pval: NullablePointer [ Xmllocationset ref] ref Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrLocationSetDel \u00b6 [Source] fun box xmlXPtrLocationSetDel( pcur: NullablePointer[Xmllocationset ref] ref, pval: NullablePointer[Xmlxpathobject ref] ref) : None val Parameters \u00b6 pcur: NullablePointer [ Xmllocationset ref] ref pval: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 None val xmlXPtrLocationSetRemove \u00b6 [Source] fun box xmlXPtrLocationSetRemove( pcur: NullablePointer[Xmllocationset ref] ref, pval: I32 val) : None val Parameters \u00b6 pcur: NullablePointer [ Xmllocationset ref] ref pval: I32 val Returns \u00b6 None val xmlXPtrNewContext \u00b6 [Source] fun box xmlXPtrNewContext( pdoc: NullablePointer[Xmldoc ref] tag, phere: NullablePointer[Xmlnode ref] ref, porigin: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathcontext ref] ref Parameters \u00b6 pdoc: NullablePointer [ Xmldoc ref] tag phere: NullablePointer [ Xmlnode ref] ref porigin: NullablePointer [ Xmlnode ref] ref Returns \u00b6 NullablePointer [ Xmlxpathcontext ref] ref xmlXPtrEval \u00b6 [Source] fun box xmlXPtrEval( pstr: String val, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref Parameters \u00b6 pstr: String val pctx: NullablePointer [ Xmlxpathcontext ref] tag Returns \u00b6 NullablePointer [ Xmlxpathobject ref] ref xmlXPtrRangeToFunction \u00b6 [Source] fun box xmlXPtrRangeToFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val Returns \u00b6 None val xmlXPtrBuildNodeList \u00b6 [Source] fun box xmlXPtrBuildNodeList( pobj: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlnode ref] ref Parameters \u00b6 pobj: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 NullablePointer [ Xmlnode ref] ref xmlXPtrEvalRangePredicate \u00b6 [Source] fun box xmlXPtrEvalRangePredicate( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val Parameters \u00b6 pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: LibXML2 val) : Bool val Parameters \u00b6 that: LibXML2 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: LibXML2 val) : Bool val Parameters \u00b6 that: LibXML2 val Returns \u00b6 Bool val","title":"primitive LibXML2"},{"location":"pony-libxml2-LibXML2/#libxml2","text":"[Source] primitive val LibXML2","title":"LibXML2"},{"location":"pony-libxml2-LibXML2/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-LibXML2/#create","text":"[Source] new val create() : LibXML2 val^","title":"create"},{"location":"pony-libxml2-LibXML2/#returns","text":"LibXML2 val^","title":"Returns"},{"location":"pony-libxml2-LibXML2/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-LibXML2/#xmlcheckversion","text":"[Source] fun box xmlCheckVersion( pversion: I32 val) : None val","title":"xmlCheckVersion"},{"location":"pony-libxml2-LibXML2/#parameters","text":"pversion: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrdup","text":"[Source] fun box xmlStrdup( pcur: String val) : String val","title":"xmlStrdup"},{"location":"pony-libxml2-LibXML2/#parameters_1","text":"pcur: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_2","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrndup","text":"[Source] fun box xmlStrndup( pcur: String val, plen: I32 val) : String val","title":"xmlStrndup"},{"location":"pony-libxml2-LibXML2/#parameters_2","text":"pcur: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_3","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcharstrndup","text":"[Source] fun box xmlCharStrndup( pcur: String val, plen: I32 val) : String val","title":"xmlCharStrndup"},{"location":"pony-libxml2-LibXML2/#parameters_3","text":"pcur: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_4","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcharstrdup","text":"[Source] fun box xmlCharStrdup( pcur: String val) : String val","title":"xmlCharStrdup"},{"location":"pony-libxml2-LibXML2/#parameters_4","text":"pcur: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_5","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrsub","text":"[Source] fun box xmlStrsub( pstr: String val, pstart: I32 val, plen: I32 val) : String val","title":"xmlStrsub"},{"location":"pony-libxml2-LibXML2/#parameters_5","text":"pstr: String val pstart: I32 val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_6","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrchr","text":"[Source] fun box xmlStrchr( pstr: String val, pval: U8 val) : String val","title":"xmlStrchr"},{"location":"pony-libxml2-LibXML2/#parameters_6","text":"pstr: String val pval: U8 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_7","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrstr","text":"[Source] fun box xmlStrstr( pstr: String val, pval: String val) : String val","title":"xmlStrstr"},{"location":"pony-libxml2-LibXML2/#parameters_7","text":"pstr: String val pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_8","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrcasestr","text":"[Source] fun box xmlStrcasestr( pstr: String val, pval: String val) : String val","title":"xmlStrcasestr"},{"location":"pony-libxml2-LibXML2/#parameters_8","text":"pstr: String val pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_9","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrcmp","text":"[Source] fun box xmlStrcmp( pstr1: String val, pstr2: String val) : I32 val","title":"xmlStrcmp"},{"location":"pony-libxml2-LibXML2/#parameters_9","text":"pstr1: String val pstr2: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_10","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrncmp","text":"[Source] fun box xmlStrncmp( pstr1: String val, pstr2: String val, plen: I32 val) : I32 val","title":"xmlStrncmp"},{"location":"pony-libxml2-LibXML2/#parameters_10","text":"pstr1: String val pstr2: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_11","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrcasecmp","text":"[Source] fun box xmlStrcasecmp( pstr1: String val, pstr2: String val) : I32 val","title":"xmlStrcasecmp"},{"location":"pony-libxml2-LibXML2/#parameters_11","text":"pstr1: String val pstr2: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_12","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrncasecmp","text":"[Source] fun box xmlStrncasecmp( pstr1: String val, pstr2: String val, plen: I32 val) : I32 val","title":"xmlStrncasecmp"},{"location":"pony-libxml2-LibXML2/#parameters_12","text":"pstr1: String val pstr2: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_13","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrequal","text":"[Source] fun box xmlStrEqual( pstr1: String val, pstr2: String val) : I32 val","title":"xmlStrEqual"},{"location":"pony-libxml2-LibXML2/#parameters_13","text":"pstr1: String val pstr2: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_14","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrqequal","text":"[Source] fun box xmlStrQEqual( ppref: String val, pname: String val, pstr: String val) : I32 val","title":"xmlStrQEqual"},{"location":"pony-libxml2-LibXML2/#parameters_14","text":"ppref: String val pname: String val pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_15","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrlen","text":"[Source] fun box xmlStrlen( pstr: String val) : I32 val","title":"xmlStrlen"},{"location":"pony-libxml2-LibXML2/#parameters_15","text":"pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_16","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrcat","text":"[Source] fun box xmlStrcat( pcur: String val, padd: String val) : String val","title":"xmlStrcat"},{"location":"pony-libxml2-LibXML2/#parameters_16","text":"pcur: String val padd: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_17","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrncat","text":"[Source] fun box xmlStrncat( pcur: String val, padd: String val, plen: I32 val) : String val","title":"xmlStrncat"},{"location":"pony-libxml2-LibXML2/#parameters_17","text":"pcur: String val padd: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_18","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrncatnew","text":"[Source] fun box xmlStrncatNew( pstr1: String val, pstr2: String val, plen: I32 val) : String val","title":"xmlStrncatNew"},{"location":"pony-libxml2-LibXML2/#parameters_18","text":"pstr1: String val pstr2: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_19","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrprintf","text":"[Source] fun box xmlStrPrintf( pbuf: String val, plen: I32 val, pmsg: String val) : I32 val","title":"xmlStrPrintf"},{"location":"pony-libxml2-LibXML2/#parameters_19","text":"pbuf: String val plen: I32 val pmsg: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_20","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstrvprintf","text":"[Source] fun box xmlStrVPrintf( pbuf: String val, plen: I32 val, pmsg: String val, pap: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlStrVPrintf"},{"location":"pony-libxml2-LibXML2/#parameters_20","text":"pbuf: String val plen: I32 val pmsg: String val pap: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_21","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetutf8char","text":"[Source] fun box xmlGetUTF8Char( putf: String val, plen: Pointer[I32 val] ref) : I32 val","title":"xmlGetUTF8Char"},{"location":"pony-libxml2-LibXML2/#parameters_21","text":"putf: String val plen: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_22","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcheckutf8","text":"[Source] fun box xmlCheckUTF8( putf: String val) : I32 val","title":"xmlCheckUTF8"},{"location":"pony-libxml2-LibXML2/#parameters_22","text":"putf: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_23","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8strsize","text":"[Source] fun box xmlUTF8Strsize( putf: String val, plen: I32 val) : I32 val","title":"xmlUTF8Strsize"},{"location":"pony-libxml2-LibXML2/#parameters_23","text":"putf: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_24","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8strndup","text":"[Source] fun box xmlUTF8Strndup( putf: String val, plen: I32 val) : String val","title":"xmlUTF8Strndup"},{"location":"pony-libxml2-LibXML2/#parameters_24","text":"putf: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_25","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8strpos","text":"[Source] fun box xmlUTF8Strpos( putf: String val, ppos: I32 val) : String val","title":"xmlUTF8Strpos"},{"location":"pony-libxml2-LibXML2/#parameters_25","text":"putf: String val ppos: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_26","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8strloc","text":"[Source] fun box xmlUTF8Strloc( putf: String val, putfchar: String val) : I32 val","title":"xmlUTF8Strloc"},{"location":"pony-libxml2-LibXML2/#parameters_26","text":"putf: String val putfchar: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_27","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8strsub","text":"[Source] fun box xmlUTF8Strsub( putf: String val, pstart: I32 val, plen: I32 val) : String val","title":"xmlUTF8Strsub"},{"location":"pony-libxml2-LibXML2/#parameters_27","text":"putf: String val pstart: I32 val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_28","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8strlen","text":"[Source] fun box xmlUTF8Strlen( putf: String val) : I32 val","title":"xmlUTF8Strlen"},{"location":"pony-libxml2-LibXML2/#parameters_28","text":"putf: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_29","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8size","text":"[Source] fun box xmlUTF8Size( putf: String val) : I32 val","title":"xmlUTF8Size"},{"location":"pony-libxml2-LibXML2/#parameters_29","text":"putf: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_30","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlutf8charcmp","text":"[Source] fun box xmlUTF8Charcmp( putf1: String val, putf2: String val) : I32 val","title":"xmlUTF8Charcmp"},{"location":"pony-libxml2-LibXML2/#parameters_30","text":"putf1: String val putf2: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_31","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupinputcallbacks","text":"[Source] fun box xmlCleanupInputCallbacks() : None val","title":"xmlCleanupInputCallbacks"},{"location":"pony-libxml2-LibXML2/#returns_32","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpopinputcallbacks","text":"[Source] fun box xmlPopInputCallbacks() : I32 val","title":"xmlPopInputCallbacks"},{"location":"pony-libxml2-LibXML2/#returns_33","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregisterdefaultinputcallbacks","text":"[Source] fun box xmlRegisterDefaultInputCallbacks() : None val","title":"xmlRegisterDefaultInputCallbacks"},{"location":"pony-libxml2-LibXML2/#returns_34","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlallocparserinputbuffer","text":"[Source] fun box xmlAllocParserInputBuffer( penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlAllocParserInputBuffer"},{"location":"pony-libxml2-LibXML2/#parameters_31","text":"penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_35","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffercreatefilename","text":"[Source] fun box xmlParserInputBufferCreateFilename( pURI: String val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlParserInputBufferCreateFilename"},{"location":"pony-libxml2-LibXML2/#parameters_32","text":"pURI: String val penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_36","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffercreatefile","text":"[Source] fun box xmlParserInputBufferCreateFile( pfile: NullablePointer[IoFile ref] ref, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlParserInputBufferCreateFile"},{"location":"pony-libxml2-LibXML2/#parameters_33","text":"pfile: NullablePointer [ IoFile ref] ref penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_37","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffercreatefd","text":"[Source] fun box xmlParserInputBufferCreateFd( pfd: I32 val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlParserInputBufferCreateFd"},{"location":"pony-libxml2-LibXML2/#parameters_34","text":"pfd: I32 val penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_38","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffercreatemem","text":"[Source] fun box xmlParserInputBufferCreateMem( pmem: String val, psize: I32 val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlParserInputBufferCreateMem"},{"location":"pony-libxml2-LibXML2/#parameters_35","text":"pmem: String val psize: I32 val penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_39","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffercreatestatic","text":"[Source] fun box xmlParserInputBufferCreateStatic( pmem: String val, psize: I32 val, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlParserInputBufferCreateStatic"},{"location":"pony-libxml2-LibXML2/#parameters_36","text":"pmem: String val psize: I32 val penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_40","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffercreateio","text":"[Source] fun box xmlParserInputBufferCreateIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, penc: I32 val) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlParserInputBufferCreateIO"},{"location":"pony-libxml2-LibXML2/#parameters_37","text":"pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_41","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbufferread","text":"[Source] fun box xmlParserInputBufferRead( pin: NullablePointer[Xmlparserinputbuffer ref] ref, plen: I32 val) : I32 val","title":"xmlParserInputBufferRead"},{"location":"pony-libxml2-LibXML2/#parameters_38","text":"pin: NullablePointer [ Xmlparserinputbuffer ref] ref plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_42","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffergrow","text":"[Source] fun box xmlParserInputBufferGrow( pin: NullablePointer[Xmlparserinputbuffer ref] ref, plen: I32 val) : I32 val","title":"xmlParserInputBufferGrow"},{"location":"pony-libxml2-LibXML2/#parameters_39","text":"pin: NullablePointer [ Xmlparserinputbuffer ref] ref plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_43","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbufferpush","text":"[Source] fun box xmlParserInputBufferPush( pin: NullablePointer[Xmlparserinputbuffer ref] ref, plen: I32 val, pbuf: String val) : I32 val","title":"xmlParserInputBufferPush"},{"location":"pony-libxml2-LibXML2/#parameters_40","text":"pin: NullablePointer [ Xmlparserinputbuffer ref] ref plen: I32 val pbuf: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_44","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeparserinputbuffer","text":"[Source] fun box xmlFreeParserInputBuffer( pin: NullablePointer[Xmlparserinputbuffer ref] ref) : None val","title":"xmlFreeParserInputBuffer"},{"location":"pony-libxml2-LibXML2/#parameters_41","text":"pin: NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_45","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsergetdirectory","text":"[Source] fun box xmlParserGetDirectory( pfilename: String val) : String val","title":"xmlParserGetDirectory"},{"location":"pony-libxml2-LibXML2/#parameters_42","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_46","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregisterinputcallbacks","text":"[Source] fun box xmlRegisterInputCallbacks( pmatchFunc: Pointer[FUNCTIONPOINTER val] ref, popenFunc: Pointer[FUNCTIONPOINTER val] ref, preadFunc: Pointer[FUNCTIONPOINTER val] ref, pcloseFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlRegisterInputCallbacks"},{"location":"pony-libxml2-LibXML2/#parameters_43","text":"pmatchFunc: Pointer [ FUNCTIONPOINTER val] ref popenFunc: Pointer [ FUNCTIONPOINTER val] ref preadFunc: Pointer [ FUNCTIONPOINTER val] ref pcloseFunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_47","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupoutputcallbacks","text":"[Source] fun box xmlCleanupOutputCallbacks() : None val","title":"xmlCleanupOutputCallbacks"},{"location":"pony-libxml2-LibXML2/#returns_48","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregisterdefaultoutputcallbacks","text":"[Source] fun box xmlRegisterDefaultOutputCallbacks() : None val","title":"xmlRegisterDefaultOutputCallbacks"},{"location":"pony-libxml2-LibXML2/#returns_49","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlallocoutputbuffer","text":"[Source] fun box xmlAllocOutputBuffer( pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref","title":"xmlAllocOutputBuffer"},{"location":"pony-libxml2-LibXML2/#parameters_44","text":"pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_50","text":"NullablePointer [ Xmloutputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffercreatefilename","text":"[Source] fun box xmlOutputBufferCreateFilename( pURI: String val, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref, pcompression: I32 val) : NullablePointer[Xmloutputbuffer ref] ref","title":"xmlOutputBufferCreateFilename"},{"location":"pony-libxml2-LibXML2/#parameters_45","text":"pURI: String val pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref pcompression: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_51","text":"NullablePointer [ Xmloutputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffercreatefile","text":"[Source] fun box xmlOutputBufferCreateFile( pfile: NullablePointer[IoFile ref] ref, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref","title":"xmlOutputBufferCreateFile"},{"location":"pony-libxml2-LibXML2/#parameters_46","text":"pfile: NullablePointer [ IoFile ref] ref pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_52","text":"NullablePointer [ Xmloutputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffercreatebuffer","text":"[Source] fun box xmlOutputBufferCreateBuffer( pbuffer: NullablePointer[Xmlbuffer ref] ref, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref","title":"xmlOutputBufferCreateBuffer"},{"location":"pony-libxml2-LibXML2/#parameters_47","text":"pbuffer: NullablePointer [ Xmlbuffer ref] ref pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_53","text":"NullablePointer [ Xmloutputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffercreatefd","text":"[Source] fun box xmlOutputBufferCreateFd( pfd: I32 val, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref","title":"xmlOutputBufferCreateFd"},{"location":"pony-libxml2-LibXML2/#parameters_48","text":"pfd: I32 val pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_54","text":"NullablePointer [ Xmloutputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffercreateio","text":"[Source] fun box xmlOutputBufferCreateIO( piowrite: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pencoder: NullablePointer[Xmlcharencodinghandler ref] ref) : NullablePointer[Xmloutputbuffer ref] ref","title":"xmlOutputBufferCreateIO"},{"location":"pony-libxml2-LibXML2/#parameters_49","text":"piowrite: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_55","text":"NullablePointer [ Xmloutputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffergetcontent","text":"[Source] fun box xmlOutputBufferGetContent( pout: NullablePointer[Xmloutputbuffer ref] ref) : String val","title":"xmlOutputBufferGetContent"},{"location":"pony-libxml2-LibXML2/#parameters_50","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_56","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffergetsize","text":"[Source] fun box xmlOutputBufferGetSize( pout: NullablePointer[Xmloutputbuffer ref] ref) : U64 val","title":"xmlOutputBufferGetSize"},{"location":"pony-libxml2-LibXML2/#parameters_51","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_57","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbufferwrite","text":"[Source] fun box xmlOutputBufferWrite( pout: NullablePointer[Xmloutputbuffer ref] ref, plen: I32 val, pbuf: String val) : I32 val","title":"xmlOutputBufferWrite"},{"location":"pony-libxml2-LibXML2/#parameters_52","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref plen: I32 val pbuf: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_58","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbufferwritestring","text":"[Source] fun box xmlOutputBufferWriteString( pout: NullablePointer[Xmloutputbuffer ref] ref, pstr: String val) : I32 val","title":"xmlOutputBufferWriteString"},{"location":"pony-libxml2-LibXML2/#parameters_53","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_59","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbufferwriteescape","text":"[Source] fun box xmlOutputBufferWriteEscape( pout: NullablePointer[Xmloutputbuffer ref] ref, pstr: String val, pescaping: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlOutputBufferWriteEscape"},{"location":"pony-libxml2-LibXML2/#parameters_54","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref pstr: String val pescaping: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_60","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbufferflush","text":"[Source] fun box xmlOutputBufferFlush( pout: NullablePointer[Xmloutputbuffer ref] ref) : I32 val","title":"xmlOutputBufferFlush"},{"location":"pony-libxml2-LibXML2/#parameters_55","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_61","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbufferclose","text":"[Source] fun box xmlOutputBufferClose( pout: NullablePointer[Xmloutputbuffer ref] ref) : I32 val","title":"xmlOutputBufferClose"},{"location":"pony-libxml2-LibXML2/#parameters_56","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_62","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregisteroutputcallbacks","text":"[Source] fun box xmlRegisterOutputCallbacks( pmatchFunc: Pointer[FUNCTIONPOINTER val] ref, popenFunc: Pointer[FUNCTIONPOINTER val] ref, pwriteFunc: Pointer[FUNCTIONPOINTER val] ref, pcloseFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlRegisterOutputCallbacks"},{"location":"pony-libxml2-LibXML2/#parameters_57","text":"pmatchFunc: Pointer [ FUNCTIONPOINTER val] ref popenFunc: Pointer [ FUNCTIONPOINTER val] ref pwriteFunc: Pointer [ FUNCTIONPOINTER val] ref pcloseFunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_63","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregisterhttppostcallbacks","text":"[Source] fun box xmlRegisterHTTPPostCallbacks() : None val","title":"xmlRegisterHTTPPostCallbacks"},{"location":"pony-libxml2-LibXML2/#returns_64","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcheckhttpinput","text":"[Source] fun box xmlCheckHTTPInput( pctxt: NullablePointer[Xmlparserctxt ref] ref, pret: NullablePointer[Xmlparserinput ref] ref) : NullablePointer[Xmlparserinput ref] ref","title":"xmlCheckHTTPInput"},{"location":"pony-libxml2-LibXML2/#parameters_58","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pret: NullablePointer [ Xmlparserinput ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_65","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnonetexternalentityloader","text":"[Source] fun box xmlNoNetExternalEntityLoader( pURL: String val, pID: String val, pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref","title":"xmlNoNetExternalEntityLoader"},{"location":"pony-libxml2-LibXML2/#parameters_59","text":"pURL: String val pID: String val pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_66","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnormalizewindowspath","text":"[Source] fun box xmlNormalizeWindowsPath( ppath: String val) : String val","title":"xmlNormalizeWindowsPath"},{"location":"pony-libxml2-LibXML2/#parameters_60","text":"ppath: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_67","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcheckfilename","text":"[Source] fun box xmlCheckFilename( ppath: String val) : I32 val","title":"xmlCheckFilename"},{"location":"pony-libxml2-LibXML2/#parameters_61","text":"ppath: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_68","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfilematch","text":"[Source] fun box xmlFileMatch( pfilename: String val) : I32 val","title":"xmlFileMatch"},{"location":"pony-libxml2-LibXML2/#parameters_62","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_69","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfileopen","text":"[Source] fun box xmlFileOpen( pfilename: String val) : String val","title":"xmlFileOpen"},{"location":"pony-libxml2-LibXML2/#parameters_63","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_70","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfileread","text":"[Source] fun box xmlFileRead( pcontext: Pointer[U8 val] ref, pbuffer: String val, plen: I32 val) : I32 val","title":"xmlFileRead"},{"location":"pony-libxml2-LibXML2/#parameters_64","text":"pcontext: Pointer [ U8 val] ref pbuffer: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_71","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfileclose","text":"[Source] fun box xmlFileClose( pcontext: Pointer[U8 val] ref) : I32 val","title":"xmlFileClose"},{"location":"pony-libxml2-LibXML2/#parameters_65","text":"pcontext: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_72","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmliohttpmatch","text":"[Source] fun box xmlIOHTTPMatch( pfilename: String val) : I32 val","title":"xmlIOHTTPMatch"},{"location":"pony-libxml2-LibXML2/#parameters_66","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_73","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmliohttpopen","text":"[Source] fun box xmlIOHTTPOpen( pfilename: String val) : String val","title":"xmlIOHTTPOpen"},{"location":"pony-libxml2-LibXML2/#parameters_67","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_74","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmliohttpopenw","text":"[Source] fun box xmlIOHTTPOpenW( ppost_uri: String val, pcompression: I32 val) : String val","title":"xmlIOHTTPOpenW"},{"location":"pony-libxml2-LibXML2/#parameters_68","text":"ppost_uri: String val pcompression: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_75","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmliohttpread","text":"[Source] fun box xmlIOHTTPRead( pcontext: Pointer[U8 val] ref, pbuffer: String val, plen: I32 val) : I32 val","title":"xmlIOHTTPRead"},{"location":"pony-libxml2-LibXML2/#parameters_69","text":"pcontext: Pointer [ U8 val] ref pbuffer: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_76","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmliohttpclose","text":"[Source] fun box xmlIOHTTPClose( pcontext: Pointer[U8 val] ref) : I32 val","title":"xmlIOHTTPClose"},{"location":"pony-libxml2-LibXML2/#parameters_70","text":"pcontext: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_77","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlioftpmatch","text":"[Source] fun box xmlIOFTPMatch( pfilename: String val) : I32 val","title":"xmlIOFTPMatch"},{"location":"pony-libxml2-LibXML2/#parameters_71","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_78","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlioftpopen","text":"[Source] fun box xmlIOFTPOpen( pfilename: String val) : String val","title":"xmlIOFTPOpen"},{"location":"pony-libxml2-LibXML2/#parameters_72","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_79","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlioftpread","text":"[Source] fun box xmlIOFTPRead( pcontext: Pointer[U8 val] ref, pbuffer: String val, plen: I32 val) : I32 val","title":"xmlIOFTPRead"},{"location":"pony-libxml2-LibXML2/#parameters_73","text":"pcontext: Pointer [ U8 val] ref pbuffer: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_80","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlioftpclose","text":"[Source] fun box xmlIOFTPClose( pcontext: Pointer[U8 val] ref) : I32 val","title":"xmlIOFTPClose"},{"location":"pony-libxml2-LibXML2/#parameters_74","text":"pcontext: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_81","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufcontent","text":"[Source] fun box xmlBufContent( pbuf: NullablePointer[Xmlbuf ref] ref) : String val","title":"xmlBufContent"},{"location":"pony-libxml2-LibXML2/#parameters_75","text":"pbuf: NullablePointer [ Xmlbuf ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_82","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufend","text":"[Source] fun box xmlBufEnd( pbuf: NullablePointer[Xmlbuf ref] ref) : String val","title":"xmlBufEnd"},{"location":"pony-libxml2-LibXML2/#parameters_76","text":"pbuf: NullablePointer [ Xmlbuf ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_83","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufuse","text":"[Source] fun box xmlBufUse( pbuf: NullablePointer[Xmlbuf ref] ref) : U64 val","title":"xmlBufUse"},{"location":"pony-libxml2-LibXML2/#parameters_77","text":"pbuf: NullablePointer [ Xmlbuf ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_84","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufshrink","text":"[Source] fun box xmlBufShrink( pbuf: NullablePointer[Xmlbuf ref] ref, plen: U64 val) : U64 val","title":"xmlBufShrink"},{"location":"pony-libxml2-LibXML2/#parameters_78","text":"pbuf: NullablePointer [ Xmlbuf ref] ref plen: U64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_85","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatencname","text":"[Source] fun box xmlValidateNCName( pvalue: String val, pspace: I32 val) : I32 val","title":"xmlValidateNCName"},{"location":"pony-libxml2-LibXML2/#parameters_79","text":"pvalue: String val pspace: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_86","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateqname","text":"[Source] fun box xmlValidateQName( pvalue: String val, pspace: I32 val) : I32 val","title":"xmlValidateQName"},{"location":"pony-libxml2-LibXML2/#parameters_80","text":"pvalue: String val pspace: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_87","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatename","text":"[Source] fun box xmlValidateName( pvalue: String val, pspace: I32 val) : I32 val","title":"xmlValidateName"},{"location":"pony-libxml2-LibXML2/#parameters_81","text":"pvalue: String val pspace: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_88","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatenmtoken","text":"[Source] fun box xmlValidateNMToken( pvalue: String val, pspace: I32 val) : I32 val","title":"xmlValidateNMToken"},{"location":"pony-libxml2-LibXML2/#parameters_82","text":"pvalue: String val pspace: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_89","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuildqname","text":"[Source] fun box xmlBuildQName( pncname: String val, pprefix: String val, pmemory: String val, plen: I32 val) : String val","title":"xmlBuildQName"},{"location":"pony-libxml2-LibXML2/#parameters_83","text":"pncname: String val pprefix: String val pmemory: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_90","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsplitqname2","text":"[Source] fun box xmlSplitQName2( pname: String val, pprefix: Pointer[Pointer[U8 val] tag] ref) : String val","title":"xmlSplitQName2"},{"location":"pony-libxml2-LibXML2/#parameters_84","text":"pname: String val pprefix: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_91","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsplitqname3","text":"[Source] fun box xmlSplitQName3( pname: String val, plen: Pointer[I32 val] ref) : String val","title":"xmlSplitQName3"},{"location":"pony-libxml2-LibXML2/#parameters_85","text":"pname: String val plen: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_92","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetbufferallocationscheme","text":"[Source] fun box xmlSetBufferAllocationScheme( pscheme: I32 val) : None val","title":"xmlSetBufferAllocationScheme"},{"location":"pony-libxml2-LibXML2/#parameters_86","text":"pscheme: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_93","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetbufferallocationscheme","text":"[Source] fun box xmlGetBufferAllocationScheme() : I32 val","title":"xmlGetBufferAllocationScheme"},{"location":"pony-libxml2-LibXML2/#returns_94","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffercreate","text":"[Source] fun box xmlBufferCreate() : NullablePointer[Xmlbuffer ref] ref","title":"xmlBufferCreate"},{"location":"pony-libxml2-LibXML2/#returns_95","text":"NullablePointer [ Xmlbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffercreatesize","text":"[Source] fun box xmlBufferCreateSize( psize: U64 val) : NullablePointer[Xmlbuffer ref] ref","title":"xmlBufferCreateSize"},{"location":"pony-libxml2-LibXML2/#parameters_87","text":"psize: U64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_96","text":"NullablePointer [ Xmlbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffercreatestatic","text":"[Source] fun box xmlBufferCreateStatic( pmem: Pointer[U8 val] ref, psize: U64 val) : NullablePointer[Xmlbuffer ref] ref","title":"xmlBufferCreateStatic"},{"location":"pony-libxml2-LibXML2/#parameters_88","text":"pmem: Pointer [ U8 val] ref psize: U64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_97","text":"NullablePointer [ Xmlbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferresize","text":"[Source] fun box xmlBufferResize( pbuf: NullablePointer[Xmlbuffer ref] ref, psize: U32 val) : I32 val","title":"xmlBufferResize"},{"location":"pony-libxml2-LibXML2/#parameters_89","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref psize: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_98","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferfree","text":"[Source] fun box xmlBufferFree( pbuf: NullablePointer[Xmlbuffer ref] ref) : None val","title":"xmlBufferFree"},{"location":"pony-libxml2-LibXML2/#parameters_90","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_99","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferdump","text":"[Source] fun box xmlBufferDump( pfile: NullablePointer[IoFile ref] ref, pbuf: NullablePointer[Xmlbuffer ref] ref) : I32 val","title":"xmlBufferDump"},{"location":"pony-libxml2-LibXML2/#parameters_91","text":"pfile: NullablePointer [ IoFile ref] ref pbuf: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_100","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferadd","text":"[Source] fun box xmlBufferAdd( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val, plen: I32 val) : I32 val","title":"xmlBufferAdd"},{"location":"pony-libxml2-LibXML2/#parameters_92","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_101","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferaddhead","text":"[Source] fun box xmlBufferAddHead( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val, plen: I32 val) : I32 val","title":"xmlBufferAddHead"},{"location":"pony-libxml2-LibXML2/#parameters_93","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_102","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffercat","text":"[Source] fun box xmlBufferCat( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val) : I32 val","title":"xmlBufferCat"},{"location":"pony-libxml2-LibXML2/#parameters_94","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_103","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferccat","text":"[Source] fun box xmlBufferCCat( pbuf: NullablePointer[Xmlbuffer ref] ref, pstr: String val) : I32 val","title":"xmlBufferCCat"},{"location":"pony-libxml2-LibXML2/#parameters_95","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_104","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffershrink","text":"[Source] fun box xmlBufferShrink( pbuf: NullablePointer[Xmlbuffer ref] ref, plen: U32 val) : I32 val","title":"xmlBufferShrink"},{"location":"pony-libxml2-LibXML2/#parameters_96","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref plen: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_105","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffergrow","text":"[Source] fun box xmlBufferGrow( pbuf: NullablePointer[Xmlbuffer ref] ref, plen: U32 val) : I32 val","title":"xmlBufferGrow"},{"location":"pony-libxml2-LibXML2/#parameters_97","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref plen: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_106","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferempty","text":"[Source] fun box xmlBufferEmpty( pbuf: NullablePointer[Xmlbuffer ref] ref) : None val","title":"xmlBufferEmpty"},{"location":"pony-libxml2-LibXML2/#parameters_98","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_107","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffercontent","text":"[Source] fun box xmlBufferContent( pbuf: NullablePointer[Xmlbuffer ref] ref) : String val","title":"xmlBufferContent"},{"location":"pony-libxml2-LibXML2/#parameters_99","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_108","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferdetach","text":"[Source] fun box xmlBufferDetach( pbuf: NullablePointer[Xmlbuffer ref] ref) : String val","title":"xmlBufferDetach"},{"location":"pony-libxml2-LibXML2/#parameters_100","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_109","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuffersetallocationscheme","text":"[Source] fun box xmlBufferSetAllocationScheme( pbuf: NullablePointer[Xmlbuffer ref] ref, pscheme: I32 val) : None val","title":"xmlBufferSetAllocationScheme"},{"location":"pony-libxml2-LibXML2/#parameters_101","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pscheme: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_110","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferlength","text":"[Source] fun box xmlBufferLength( pbuf: NullablePointer[Xmlbuffer ref] ref) : I32 val","title":"xmlBufferLength"},{"location":"pony-libxml2-LibXML2/#parameters_102","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_111","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreateintsubset","text":"[Source] fun box xmlCreateIntSubset( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref","title":"xmlCreateIntSubset"},{"location":"pony-libxml2-LibXML2/#parameters_103","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_112","text":"NullablePointer [ Xmldtd ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdtd","text":"[Source] fun box xmlNewDtd( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref","title":"xmlNewDtd"},{"location":"pony-libxml2-LibXML2/#parameters_104","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_113","text":"NullablePointer [ Xmldtd ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetintsubset","text":"[Source] fun box xmlGetIntSubset( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmldtd ref] ref","title":"xmlGetIntSubset"},{"location":"pony-libxml2-LibXML2/#parameters_105","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_114","text":"NullablePointer [ Xmldtd ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreedtd","text":"[Source] fun box xmlFreeDtd( pcur: NullablePointer[Xmldtd ref] ref) : None val","title":"xmlFreeDtd"},{"location":"pony-libxml2-LibXML2/#parameters_106","text":"pcur: NullablePointer [ Xmldtd ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_115","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewglobalns","text":"[Source] fun box xmlNewGlobalNs( pdoc: NullablePointer[Xmldoc ref] tag, phref: String val, pprefix: String val) : NullablePointer[Xmlns ref] ref","title":"xmlNewGlobalNs"},{"location":"pony-libxml2-LibXML2/#parameters_107","text":"pdoc: NullablePointer [ Xmldoc ref] tag phref: String val pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_116","text":"NullablePointer [ Xmlns ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewns","text":"[Source] fun box xmlNewNs( pnode: NullablePointer[Xmlnode ref] ref, phref: String val, pprefix: String val) : NullablePointer[Xmlns ref] ref","title":"xmlNewNs"},{"location":"pony-libxml2-LibXML2/#parameters_108","text":"pnode: NullablePointer [ Xmlnode ref] ref phref: String val pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_117","text":"NullablePointer [ Xmlns ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreens","text":"[Source] fun box xmlFreeNs( pcur: NullablePointer[Xmlns ref] ref) : None val","title":"xmlFreeNs"},{"location":"pony-libxml2-LibXML2/#parameters_109","text":"pcur: NullablePointer [ Xmlns ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_118","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreenslist","text":"[Source] fun box xmlFreeNsList( pcur: NullablePointer[Xmlns ref] ref) : None val","title":"xmlFreeNsList"},{"location":"pony-libxml2-LibXML2/#parameters_110","text":"pcur: NullablePointer [ Xmlns ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_119","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdoc","text":"[Source] fun box xmlNewDoc( pversion: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlNewDoc"},{"location":"pony-libxml2-LibXML2/#parameters_111","text":"pversion: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_120","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreedoc","text":"[Source] fun box xmlFreeDoc( pcur: NullablePointer[Xmldoc ref] tag) : None val","title":"xmlFreeDoc"},{"location":"pony-libxml2-LibXML2/#parameters_112","text":"pcur: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_121","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdocprop","text":"[Source] fun box xmlNewDocProp( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlNewDocProp"},{"location":"pony-libxml2-LibXML2/#parameters_113","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_122","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewprop","text":"[Source] fun box xmlNewProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlNewProp"},{"location":"pony-libxml2-LibXML2/#parameters_114","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_123","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewnsprop","text":"[Source] fun box xmlNewNsProp( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlNewNsProp"},{"location":"pony-libxml2-LibXML2/#parameters_115","text":"pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_124","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewnspropeatname","text":"[Source] fun box xmlNewNsPropEatName( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlNewNsPropEatName"},{"location":"pony-libxml2-LibXML2/#parameters_116","text":"pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_125","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeproplist","text":"[Source] fun box xmlFreePropList( pcur: NullablePointer[Xmlattr ref] ref) : None val","title":"xmlFreePropList"},{"location":"pony-libxml2-LibXML2/#parameters_117","text":"pcur: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_126","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeprop","text":"[Source] fun box xmlFreeProp( pcur: NullablePointer[Xmlattr ref] ref) : None val","title":"xmlFreeProp"},{"location":"pony-libxml2-LibXML2/#parameters_118","text":"pcur: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_127","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyprop","text":"[Source] fun box xmlCopyProp( ptarget: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlattr ref] ref","title":"xmlCopyProp"},{"location":"pony-libxml2-LibXML2/#parameters_119","text":"ptarget: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_128","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyproplist","text":"[Source] fun box xmlCopyPropList( ptarget: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlattr ref] ref","title":"xmlCopyPropList"},{"location":"pony-libxml2-LibXML2/#parameters_120","text":"ptarget: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_129","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopydtd","text":"[Source] fun box xmlCopyDtd( pdtd: NullablePointer[Xmldtd ref] ref) : NullablePointer[Xmldtd ref] ref","title":"xmlCopyDtd"},{"location":"pony-libxml2-LibXML2/#parameters_121","text":"pdtd: NullablePointer [ Xmldtd ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_130","text":"NullablePointer [ Xmldtd ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopydoc","text":"[Source] fun box xmlCopyDoc( pdoc: NullablePointer[Xmldoc ref] tag, precursive: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlCopyDoc"},{"location":"pony-libxml2-LibXML2/#parameters_122","text":"pdoc: NullablePointer [ Xmldoc ref] tag precursive: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_131","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdocnode","text":"[Source] fun box xmlNewDocNode( pdoc: NullablePointer[Xmldoc ref] tag, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocNode"},{"location":"pony-libxml2-LibXML2/#parameters_123","text":"pdoc: NullablePointer [ Xmldoc ref] tag pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_132","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdocnodeeatname","text":"[Source] fun box xmlNewDocNodeEatName( pdoc: NullablePointer[Xmldoc ref] tag, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocNodeEatName"},{"location":"pony-libxml2-LibXML2/#parameters_124","text":"pdoc: NullablePointer [ Xmldoc ref] tag pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_133","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewnode","text":"[Source] fun box xmlNewNode( pns: NullablePointer[Xmlns ref] ref, pname: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewNode"},{"location":"pony-libxml2-LibXML2/#parameters_125","text":"pns: NullablePointer [ Xmlns ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_134","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewnodeeatname","text":"[Source] fun box xmlNewNodeEatName( pns: NullablePointer[Xmlns ref] ref, pname: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewNodeEatName"},{"location":"pony-libxml2-LibXML2/#parameters_126","text":"pns: NullablePointer [ Xmlns ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_135","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewchild","text":"[Source] fun box xmlNewChild( pparent: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewChild"},{"location":"pony-libxml2-LibXML2/#parameters_127","text":"pparent: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_136","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdoctext","text":"[Source] fun box xmlNewDocText( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocText"},{"location":"pony-libxml2-LibXML2/#parameters_128","text":"pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_137","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtext","text":"[Source] fun box xmlNewText( pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewText"},{"location":"pony-libxml2-LibXML2/#parameters_129","text":"pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_138","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdocpi","text":"[Source] fun box xmlNewDocPI( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocPI"},{"location":"pony-libxml2-LibXML2/#parameters_130","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_139","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewpi","text":"[Source] fun box xmlNewPI( pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewPI"},{"location":"pony-libxml2-LibXML2/#parameters_131","text":"pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_140","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdoctextlen","text":"[Source] fun box xmlNewDocTextLen( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocTextLen"},{"location":"pony-libxml2-LibXML2/#parameters_132","text":"pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_141","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextlen","text":"[Source] fun box xmlNewTextLen( pcontent: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewTextLen"},{"location":"pony-libxml2-LibXML2/#parameters_133","text":"pcontent: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_142","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdoccomment","text":"[Source] fun box xmlNewDocComment( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocComment"},{"location":"pony-libxml2-LibXML2/#parameters_134","text":"pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_143","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewcomment","text":"[Source] fun box xmlNewComment( pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewComment"},{"location":"pony-libxml2-LibXML2/#parameters_135","text":"pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_144","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewcdatablock","text":"[Source] fun box xmlNewCDataBlock( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewCDataBlock"},{"location":"pony-libxml2-LibXML2/#parameters_136","text":"pdoc: NullablePointer [ Xmldoc ref] tag pcontent: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_145","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewcharref","text":"[Source] fun box xmlNewCharRef( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewCharRef"},{"location":"pony-libxml2-LibXML2/#parameters_137","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_146","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewreference","text":"[Source] fun box xmlNewReference( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewReference"},{"location":"pony-libxml2-LibXML2/#parameters_138","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_147","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopynode","text":"[Source] fun box xmlCopyNode( pnode: NullablePointer[Xmlnode ref] ref, precursive: I32 val) : NullablePointer[Xmlnode ref] ref","title":"xmlCopyNode"},{"location":"pony-libxml2-LibXML2/#parameters_139","text":"pnode: NullablePointer [ Xmlnode ref] ref precursive: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_148","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldoccopynode","text":"[Source] fun box xmlDocCopyNode( pnode: NullablePointer[Xmlnode ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, precursive: I32 val) : NullablePointer[Xmlnode ref] ref","title":"xmlDocCopyNode"},{"location":"pony-libxml2-LibXML2/#parameters_140","text":"pnode: NullablePointer [ Xmlnode ref] ref pdoc: NullablePointer [ Xmldoc ref] tag precursive: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_149","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldoccopynodelist","text":"[Source] fun box xmlDocCopyNodeList( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlDocCopyNodeList"},{"location":"pony-libxml2-LibXML2/#parameters_141","text":"pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_150","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopynodelist","text":"[Source] fun box xmlCopyNodeList( pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlCopyNodeList"},{"location":"pony-libxml2-LibXML2/#parameters_142","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_151","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextchild","text":"[Source] fun box xmlNewTextChild( pparent: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewTextChild"},{"location":"pony-libxml2-LibXML2/#parameters_143","text":"pparent: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_152","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdocrawnode","text":"[Source] fun box xmlNewDocRawNode( pdoc: NullablePointer[Xmldoc ref] tag, pns: NullablePointer[Xmlns ref] ref, pname: String val, pcontent: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocRawNode"},{"location":"pony-libxml2-LibXML2/#parameters_144","text":"pdoc: NullablePointer [ Xmldoc ref] tag pns: NullablePointer [ Xmlns ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_153","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdocfragment","text":"[Source] fun box xmlNewDocFragment( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlnode ref] ref","title":"xmlNewDocFragment"},{"location":"pony-libxml2-LibXML2/#parameters_145","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_154","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetlineno","text":"[Source] fun box xmlGetLineNo( pnode: NullablePointer[Xmlnode ref] ref) : I64 val","title":"xmlGetLineNo"},{"location":"pony-libxml2-LibXML2/#parameters_146","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_155","text":"I64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetnodepath","text":"[Source] fun box xmlGetNodePath( pnode: NullablePointer[Xmlnode ref] ref) : String val","title":"xmlGetNodePath"},{"location":"pony-libxml2-LibXML2/#parameters_147","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_156","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocgetrootelement","text":"[Source] fun box xmlDocGetRootElement( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlnode ref] ref","title":"xmlDocGetRootElement"},{"location":"pony-libxml2-LibXML2/#parameters_148","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_157","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetlastchild","text":"[Source] fun box xmlGetLastChild( pparent: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlGetLastChild"},{"location":"pony-libxml2-LibXML2/#parameters_149","text":"pparent: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_158","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodeistext","text":"[Source] fun box xmlNodeIsText( pnode: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlNodeIsText"},{"location":"pony-libxml2-LibXML2/#parameters_150","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_159","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisblanknode","text":"[Source] fun box xmlIsBlankNode( pnode: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlIsBlankNode"},{"location":"pony-libxml2-LibXML2/#parameters_151","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_160","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocsetrootelement","text":"[Source] fun box xmlDocSetRootElement( pdoc: NullablePointer[Xmldoc ref] tag, proot: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlDocSetRootElement"},{"location":"pony-libxml2-LibXML2/#parameters_152","text":"pdoc: NullablePointer [ Xmldoc ref] tag proot: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_161","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodesetname","text":"[Source] fun box xmlNodeSetName( pcur: NullablePointer[Xmlnode ref] ref, pname: String val) : None val","title":"xmlNodeSetName"},{"location":"pony-libxml2-LibXML2/#parameters_153","text":"pcur: NullablePointer [ Xmlnode ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_162","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdchild","text":"[Source] fun box xmlAddChild( pparent: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlAddChild"},{"location":"pony-libxml2-LibXML2/#parameters_154","text":"pparent: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_163","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdchildlist","text":"[Source] fun box xmlAddChildList( pparent: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlAddChildList"},{"location":"pony-libxml2-LibXML2/#parameters_155","text":"pparent: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_164","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreplacenode","text":"[Source] fun box xmlReplaceNode( pold: NullablePointer[Xmlnode ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlReplaceNode"},{"location":"pony-libxml2-LibXML2/#parameters_156","text":"pold: NullablePointer [ Xmlnode ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_165","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdprevsibling","text":"[Source] fun box xmlAddPrevSibling( pcur: NullablePointer[Xmlnode ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlAddPrevSibling"},{"location":"pony-libxml2-LibXML2/#parameters_157","text":"pcur: NullablePointer [ Xmlnode ref] ref pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_166","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdsibling","text":"[Source] fun box xmlAddSibling( pcur: NullablePointer[Xmlnode ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlAddSibling"},{"location":"pony-libxml2-LibXML2/#parameters_158","text":"pcur: NullablePointer [ Xmlnode ref] ref pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_167","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdnextsibling","text":"[Source] fun box xmlAddNextSibling( pcur: NullablePointer[Xmlnode ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlAddNextSibling"},{"location":"pony-libxml2-LibXML2/#parameters_159","text":"pcur: NullablePointer [ Xmlnode ref] ref pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_168","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlunlinknode","text":"[Source] fun box xmlUnlinkNode( pcur: NullablePointer[Xmlnode ref] ref) : None val","title":"xmlUnlinkNode"},{"location":"pony-libxml2-LibXML2/#parameters_160","text":"pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_169","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextmerge","text":"[Source] fun box xmlTextMerge( pfirst: NullablePointer[Xmlnode ref] ref, psecond: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlTextMerge"},{"location":"pony-libxml2-LibXML2/#parameters_161","text":"pfirst: NullablePointer [ Xmlnode ref] ref psecond: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_170","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextconcat","text":"[Source] fun box xmlTextConcat( pnode: NullablePointer[Xmlnode ref] ref, pcontent: String val, plen: I32 val) : I32 val","title":"xmlTextConcat"},{"location":"pony-libxml2-LibXML2/#parameters_162","text":"pnode: NullablePointer [ Xmlnode ref] ref pcontent: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_171","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreenodelist","text":"[Source] fun box xmlFreeNodeList( pcur: NullablePointer[Xmlnode ref] ref) : None val","title":"xmlFreeNodeList"},{"location":"pony-libxml2-LibXML2/#parameters_163","text":"pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_172","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreenode","text":"[Source] fun box xmlFreeNode( pcur: NullablePointer[Xmlnode ref] ref) : None val","title":"xmlFreeNode"},{"location":"pony-libxml2-LibXML2/#parameters_164","text":"pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_173","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsettreedoc","text":"[Source] fun box xmlSetTreeDoc( ptree: NullablePointer[Xmlnode ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val","title":"xmlSetTreeDoc"},{"location":"pony-libxml2-LibXML2/#parameters_165","text":"ptree: NullablePointer [ Xmlnode ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_174","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetlistdoc","text":"[Source] fun box xmlSetListDoc( plist: NullablePointer[Xmlnode ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val","title":"xmlSetListDoc"},{"location":"pony-libxml2-LibXML2/#parameters_166","text":"plist: NullablePointer [ Xmlnode ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_175","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsearchns","text":"[Source] fun box xmlSearchNs( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pnameSpace: String val) : NullablePointer[Xmlns ref] ref","title":"xmlSearchNs"},{"location":"pony-libxml2-LibXML2/#parameters_167","text":"pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pnameSpace: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_176","text":"NullablePointer [ Xmlns ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsearchnsbyhref","text":"[Source] fun box xmlSearchNsByHref( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, phref: String val) : NullablePointer[Xmlns ref] ref","title":"xmlSearchNsByHref"},{"location":"pony-libxml2-LibXML2/#parameters_168","text":"pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref phref: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_177","text":"NullablePointer [ Xmlns ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetnslist","text":"[Source] fun box xmlGetNsList( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref) : Pointer[NullablePointer[Xmlns ref] ref] ref","title":"xmlGetNsList"},{"location":"pony-libxml2-LibXML2/#parameters_169","text":"pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_178","text":"Pointer [ NullablePointer [ Xmlns ref] ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetns","text":"[Source] fun box xmlSetNs( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref) : None val","title":"xmlSetNs"},{"location":"pony-libxml2-LibXML2/#parameters_170","text":"pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_179","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopynamespace","text":"[Source] fun box xmlCopyNamespace( pcur: NullablePointer[Xmlns ref] ref) : NullablePointer[Xmlns ref] ref","title":"xmlCopyNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_171","text":"pcur: NullablePointer [ Xmlns ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_180","text":"NullablePointer [ Xmlns ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopynamespacelist","text":"[Source] fun box xmlCopyNamespaceList( pcur: NullablePointer[Xmlns ref] ref) : NullablePointer[Xmlns ref] ref","title":"xmlCopyNamespaceList"},{"location":"pony-libxml2-LibXML2/#parameters_172","text":"pcur: NullablePointer [ Xmlns ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_181","text":"NullablePointer [ Xmlns ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetprop","text":"[Source] fun box xmlSetProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlSetProp"},{"location":"pony-libxml2-LibXML2/#parameters_173","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_182","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetnsprop","text":"[Source] fun box xmlSetNsProp( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val, pvalue: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlSetNsProp"},{"location":"pony-libxml2-LibXML2/#parameters_174","text":"pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_183","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetnonsprop","text":"[Source] fun box xmlGetNoNsProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : String val","title":"xmlGetNoNsProp"},{"location":"pony-libxml2-LibXML2/#parameters_175","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_184","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetprop","text":"[Source] fun box xmlGetProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : String val","title":"xmlGetProp"},{"location":"pony-libxml2-LibXML2/#parameters_176","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_185","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhasprop","text":"[Source] fun box xmlHasProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlHasProp"},{"location":"pony-libxml2-LibXML2/#parameters_177","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_186","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhasnsprop","text":"[Source] fun box xmlHasNsProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pnameSpace: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlHasNsProp"},{"location":"pony-libxml2-LibXML2/#parameters_178","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val pnameSpace: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_187","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetnsprop","text":"[Source] fun box xmlGetNsProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val, pnameSpace: String val) : String val","title":"xmlGetNsProp"},{"location":"pony-libxml2-LibXML2/#parameters_179","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val pnameSpace: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_188","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstringgetnodelist","text":"[Source] fun box xmlStringGetNodeList( pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val) : NullablePointer[Xmlnode ref] ref","title":"xmlStringGetNodeList"},{"location":"pony-libxml2-LibXML2/#parameters_180","text":"pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_189","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstringlengetnodelist","text":"[Source] fun box xmlStringLenGetNodeList( pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val, plen: I32 val) : NullablePointer[Xmlnode ref] ref","title":"xmlStringLenGetNodeList"},{"location":"pony-libxml2-LibXML2/#parameters_181","text":"pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_190","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodelistgetstring","text":"[Source] fun box xmlNodeListGetString( pdoc: NullablePointer[Xmldoc ref] tag, plist: NullablePointer[Xmlnode ref] ref, pinLine: I32 val) : String val","title":"xmlNodeListGetString"},{"location":"pony-libxml2-LibXML2/#parameters_182","text":"pdoc: NullablePointer [ Xmldoc ref] tag plist: NullablePointer [ Xmlnode ref] ref pinLine: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_191","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodelistgetrawstring","text":"[Source] fun box xmlNodeListGetRawString( pdoc: NullablePointer[Xmldoc ref] tag, plist: NullablePointer[Xmlnode ref] ref, pinLine: I32 val) : String val","title":"xmlNodeListGetRawString"},{"location":"pony-libxml2-LibXML2/#parameters_183","text":"pdoc: NullablePointer [ Xmldoc ref] tag plist: NullablePointer [ Xmlnode ref] ref pinLine: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_192","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodesetcontent","text":"[Source] fun box xmlNodeSetContent( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val) : None val","title":"xmlNodeSetContent"},{"location":"pony-libxml2-LibXML2/#parameters_184","text":"pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_193","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodesetcontentlen","text":"[Source] fun box xmlNodeSetContentLen( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val, plen: I32 val) : None val","title":"xmlNodeSetContentLen"},{"location":"pony-libxml2-LibXML2/#parameters_185","text":"pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_194","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodeaddcontent","text":"[Source] fun box xmlNodeAddContent( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val) : None val","title":"xmlNodeAddContent"},{"location":"pony-libxml2-LibXML2/#parameters_186","text":"pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_195","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodeaddcontentlen","text":"[Source] fun box xmlNodeAddContentLen( pcur: NullablePointer[Xmlnode ref] ref, pcontent: String val, plen: I32 val) : None val","title":"xmlNodeAddContentLen"},{"location":"pony-libxml2-LibXML2/#parameters_187","text":"pcur: NullablePointer [ Xmlnode ref] ref pcontent: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_196","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodegetcontent","text":"[Source] fun box xmlNodeGetContent( pcur: NullablePointer[Xmlnode ref] ref) : String val","title":"xmlNodeGetContent"},{"location":"pony-libxml2-LibXML2/#parameters_188","text":"pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_197","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodebufgetcontent","text":"[Source] fun box xmlNodeBufGetContent( pbuffer: NullablePointer[Xmlbuffer ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlNodeBufGetContent"},{"location":"pony-libxml2-LibXML2/#parameters_189","text":"pbuffer: NullablePointer [ Xmlbuffer ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_198","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufgetnodecontent","text":"[Source] fun box xmlBufGetNodeContent( pbuf: NullablePointer[Xmlbuf ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlBufGetNodeContent"},{"location":"pony-libxml2-LibXML2/#parameters_190","text":"pbuf: NullablePointer [ Xmlbuf ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_199","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodegetlang","text":"[Source] fun box xmlNodeGetLang( pcur: NullablePointer[Xmlnode ref] ref) : String val","title":"xmlNodeGetLang"},{"location":"pony-libxml2-LibXML2/#parameters_191","text":"pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_200","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodegetspacepreserve","text":"[Source] fun box xmlNodeGetSpacePreserve( pcur: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlNodeGetSpacePreserve"},{"location":"pony-libxml2-LibXML2/#parameters_192","text":"pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_201","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodesetlang","text":"[Source] fun box xmlNodeSetLang( pcur: NullablePointer[Xmlnode ref] ref, plang: String val) : None val","title":"xmlNodeSetLang"},{"location":"pony-libxml2-LibXML2/#parameters_193","text":"pcur: NullablePointer [ Xmlnode ref] ref plang: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_202","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodesetspacepreserve","text":"[Source] fun box xmlNodeSetSpacePreserve( pcur: NullablePointer[Xmlnode ref] ref, pval: I32 val) : None val","title":"xmlNodeSetSpacePreserve"},{"location":"pony-libxml2-LibXML2/#parameters_194","text":"pcur: NullablePointer [ Xmlnode ref] ref pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_203","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodegetbase","text":"[Source] fun box xmlNodeGetBase( pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : String val","title":"xmlNodeGetBase"},{"location":"pony-libxml2-LibXML2/#parameters_195","text":"pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_204","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodesetbase","text":"[Source] fun box xmlNodeSetBase( pcur: NullablePointer[Xmlnode ref] ref, puri: String val) : None val","title":"xmlNodeSetBase"},{"location":"pony-libxml2-LibXML2/#parameters_196","text":"pcur: NullablePointer [ Xmlnode ref] ref puri: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_205","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlremoveprop","text":"[Source] fun box xmlRemoveProp( pcur: NullablePointer[Xmlattr ref] ref) : I32 val","title":"xmlRemoveProp"},{"location":"pony-libxml2-LibXML2/#parameters_197","text":"pcur: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_206","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlunsetnsprop","text":"[Source] fun box xmlUnsetNsProp( pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref, pname: String val) : I32 val","title":"xmlUnsetNsProp"},{"location":"pony-libxml2-LibXML2/#parameters_198","text":"pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_207","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlunsetprop","text":"[Source] fun box xmlUnsetProp( pnode: NullablePointer[Xmlnode ref] ref, pname: String val) : I32 val","title":"xmlUnsetProp"},{"location":"pony-libxml2-LibXML2/#parameters_199","text":"pnode: NullablePointer [ Xmlnode ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_208","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferwritechar","text":"[Source] fun box xmlBufferWriteChar( pbuf: NullablePointer[Xmlbuffer ref] ref, pstring: String val) : None val","title":"xmlBufferWriteChar"},{"location":"pony-libxml2-LibXML2/#parameters_200","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pstring: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_209","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufferwritequotedstring","text":"[Source] fun box xmlBufferWriteQuotedString( pbuf: NullablePointer[Xmlbuffer ref] ref, pstring: String val) : None val","title":"xmlBufferWriteQuotedString"},{"location":"pony-libxml2-LibXML2/#parameters_201","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pstring: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_210","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlattrserializetxtcontent","text":"[Source] fun box xmlAttrSerializeTxtContent( pbuf: NullablePointer[Xmlbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattr ref] ref, pstring: String val) : None val","title":"xmlAttrSerializeTxtContent"},{"location":"pony-libxml2-LibXML2/#parameters_202","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattr ref] ref pstring: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_211","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreconciliatens","text":"[Source] fun box xmlReconciliateNs( pdoc: NullablePointer[Xmldoc ref] tag, ptree: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlReconciliateNs"},{"location":"pony-libxml2-LibXML2/#parameters_203","text":"pdoc: NullablePointer [ Xmldoc ref] tag ptree: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_212","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocdumpformatmemory","text":"[Source] fun box xmlDocDumpFormatMemory( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref, pformat: I32 val) : None val","title":"xmlDocDumpFormatMemory"},{"location":"pony-libxml2-LibXML2/#parameters_204","text":"pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_213","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocdumpmemory","text":"[Source] fun box xmlDocDumpMemory( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref) : None val","title":"xmlDocDumpMemory"},{"location":"pony-libxml2-LibXML2/#parameters_205","text":"pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_214","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocdumpmemoryenc","text":"[Source] fun box xmlDocDumpMemoryEnc( pout_doc: NullablePointer[Xmldoc ref] tag, pdoc_txt_ptr: Pointer[Pointer[U8 val] tag] ref, pdoc_txt_len: Pointer[I32 val] ref, ptxt_encoding: String val) : None val","title":"xmlDocDumpMemoryEnc"},{"location":"pony-libxml2-LibXML2/#parameters_206","text":"pout_doc: NullablePointer [ Xmldoc ref] tag pdoc_txt_ptr: Pointer [ Pointer [ U8 val] tag] ref pdoc_txt_len: Pointer [ I32 val] ref ptxt_encoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_215","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocdumpformatmemoryenc","text":"[Source] fun box xmlDocDumpFormatMemoryEnc( pout_doc: NullablePointer[Xmldoc ref] tag, pdoc_txt_ptr: Pointer[Pointer[U8 val] tag] ref, pdoc_txt_len: Pointer[I32 val] ref, ptxt_encoding: String val, pformat: I32 val) : None val","title":"xmlDocDumpFormatMemoryEnc"},{"location":"pony-libxml2-LibXML2/#parameters_207","text":"pout_doc: NullablePointer [ Xmldoc ref] tag pdoc_txt_ptr: Pointer [ Pointer [ U8 val] tag] ref pdoc_txt_len: Pointer [ I32 val] ref ptxt_encoding: String val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_216","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocformatdump","text":"[Source] fun box xmlDocFormatDump( pf: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pformat: I32 val) : I32 val","title":"xmlDocFormatDump"},{"location":"pony-libxml2-LibXML2/#parameters_208","text":"pf: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmldoc ref] tag pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_217","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldocdump","text":"[Source] fun box xmlDocDump( pf: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlDocDump"},{"location":"pony-libxml2-LibXML2/#parameters_209","text":"pf: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_218","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlelemdump","text":"[Source] fun box xmlElemDump( pf: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : None val","title":"xmlElemDump"},{"location":"pony-libxml2-LibXML2/#parameters_210","text":"pf: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_219","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavefile","text":"[Source] fun box xmlSaveFile( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlSaveFile"},{"location":"pony-libxml2-LibXML2/#parameters_211","text":"pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_220","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaveformatfile","text":"[Source] fun box xmlSaveFormatFile( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pformat: I32 val) : I32 val","title":"xmlSaveFormatFile"},{"location":"pony-libxml2-LibXML2/#parameters_212","text":"pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_221","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbufnodedump","text":"[Source] fun box xmlBufNodeDump( pbuf: NullablePointer[Xmlbuf ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, plevel: I32 val, pformat: I32 val) : U64 val","title":"xmlBufNodeDump"},{"location":"pony-libxml2-LibXML2/#parameters_213","text":"pbuf: NullablePointer [ Xmlbuf ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref plevel: I32 val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_222","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodedump","text":"[Source] fun box xmlNodeDump( pbuf: NullablePointer[Xmlbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, plevel: I32 val, pformat: I32 val) : I32 val","title":"xmlNodeDump"},{"location":"pony-libxml2-LibXML2/#parameters_214","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref plevel: I32 val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_223","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavefileto","text":"[Source] fun box xmlSaveFileTo( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val","title":"xmlSaveFileTo"},{"location":"pony-libxml2-LibXML2/#parameters_215","text":"pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_224","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaveformatfileto","text":"[Source] fun box xmlSaveFormatFileTo( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : I32 val","title":"xmlSaveFormatFileTo"},{"location":"pony-libxml2-LibXML2/#parameters_216","text":"pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_225","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnodedumpoutput","text":"[Source] fun box xmlNodeDumpOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, plevel: I32 val, pformat: I32 val, pencoding: String val) : None val","title":"xmlNodeDumpOutput"},{"location":"pony-libxml2-LibXML2/#parameters_217","text":"pbuf: NullablePointer [ Xmloutputbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref plevel: I32 val pformat: I32 val pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_226","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaveformatfileenc","text":"[Source] fun box xmlSaveFormatFileEnc( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : I32 val","title":"xmlSaveFormatFileEnc"},{"location":"pony-libxml2-LibXML2/#parameters_218","text":"pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_227","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavefileenc","text":"[Source] fun box xmlSaveFileEnc( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val","title":"xmlSaveFileEnc"},{"location":"pony-libxml2-LibXML2/#parameters_219","text":"pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_228","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisxhtml","text":"[Source] fun box xmlIsXHTML( psystemID: String val, ppublicID: String val) : I32 val","title":"xmlIsXHTML"},{"location":"pony-libxml2-LibXML2/#parameters_220","text":"psystemID: String val ppublicID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_229","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdoccompressmode","text":"[Source] fun box xmlGetDocCompressMode( pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlGetDocCompressMode"},{"location":"pony-libxml2-LibXML2/#parameters_221","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_230","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetdoccompressmode","text":"[Source] fun box xmlSetDocCompressMode( pdoc: NullablePointer[Xmldoc ref] tag, pmode: I32 val) : None val","title":"xmlSetDocCompressMode"},{"location":"pony-libxml2-LibXML2/#parameters_222","text":"pdoc: NullablePointer [ Xmldoc ref] tag pmode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_231","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetcompressmode","text":"[Source] fun box xmlGetCompressMode() : I32 val","title":"xmlGetCompressMode"},{"location":"pony-libxml2-LibXML2/#returns_232","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetcompressmode","text":"[Source] fun box xmlSetCompressMode( pmode: I32 val) : None val","title":"xmlSetCompressMode"},{"location":"pony-libxml2-LibXML2/#parameters_223","text":"pmode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_233","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldomwrapnewctxt","text":"[Source] fun box xmlDOMWrapNewCtxt() : NullablePointer[Xmldomwrapctxt ref] ref","title":"xmlDOMWrapNewCtxt"},{"location":"pony-libxml2-LibXML2/#returns_234","text":"NullablePointer [ Xmldomwrapctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldomwrapfreectxt","text":"[Source] fun box xmlDOMWrapFreeCtxt( pctxt: NullablePointer[Xmldomwrapctxt ref] ref) : None val","title":"xmlDOMWrapFreeCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_224","text":"pctxt: NullablePointer [ Xmldomwrapctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_235","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldomwrapreconcilenamespaces","text":"[Source] fun box xmlDOMWrapReconcileNamespaces( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, pelem: NullablePointer[Xmlnode ref] ref, poptions: I32 val) : I32 val","title":"xmlDOMWrapReconcileNamespaces"},{"location":"pony-libxml2-LibXML2/#parameters_225","text":"pctxt: NullablePointer [ Xmldomwrapctxt ref] ref pelem: NullablePointer [ Xmlnode ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_236","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldomwrapadoptnode","text":"[Source] fun box xmlDOMWrapAdoptNode( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, psourceDoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pdestDoc: NullablePointer[Xmldoc ref] tag, pdestParent: NullablePointer[Xmlnode ref] ref, poptions: I32 val) : I32 val","title":"xmlDOMWrapAdoptNode"},{"location":"pony-libxml2-LibXML2/#parameters_226","text":"pctxt: NullablePointer [ Xmldomwrapctxt ref] ref psourceDoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pdestDoc: NullablePointer [ Xmldoc ref] tag pdestParent: NullablePointer [ Xmlnode ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_237","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldomwrapremovenode","text":"[Source] fun box xmlDOMWrapRemoveNode( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, poptions: I32 val) : I32 val","title":"xmlDOMWrapRemoveNode"},{"location":"pony-libxml2-LibXML2/#parameters_227","text":"pctxt: NullablePointer [ Xmldomwrapctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_238","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldomwrapclonenode","text":"[Source] fun box xmlDOMWrapCloneNode( pctxt: NullablePointer[Xmldomwrapctxt ref] ref, psourceDoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pclonedNode: Pointer[NullablePointer[Xmlnode ref] ref] ref, pdestDoc: NullablePointer[Xmldoc ref] tag, pdestParent: NullablePointer[Xmlnode ref] ref, pdeep: I32 val, poptions: I32 val) : I32 val","title":"xmlDOMWrapCloneNode"},{"location":"pony-libxml2-LibXML2/#parameters_228","text":"pctxt: NullablePointer [ Xmldomwrapctxt ref] ref psourceDoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pclonedNode: Pointer [ NullablePointer [ Xmlnode ref] ref] ref pdestDoc: NullablePointer [ Xmldoc ref] tag pdestParent: NullablePointer [ Xmlnode ref] ref pdeep: I32 val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_239","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlchildelementcount","text":"[Source] fun box xmlChildElementCount( pparent: NullablePointer[Xmlnode ref] ref) : U64 val","title":"xmlChildElementCount"},{"location":"pony-libxml2-LibXML2/#parameters_229","text":"pparent: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_240","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnextelementsibling","text":"[Source] fun box xmlNextElementSibling( pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlNextElementSibling"},{"location":"pony-libxml2-LibXML2/#parameters_230","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_241","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfirstelementchild","text":"[Source] fun box xmlFirstElementChild( pparent: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlFirstElementChild"},{"location":"pony-libxml2-LibXML2/#parameters_231","text":"pparent: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_242","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllastelementchild","text":"[Source] fun box xmlLastElementChild( pparent: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlLastElementChild"},{"location":"pony-libxml2-LibXML2/#parameters_232","text":"pparent: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_243","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpreviouselementsibling","text":"[Source] fun box xmlPreviousElementSibling( pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlPreviousElementSibling"},{"location":"pony-libxml2-LibXML2/#parameters_233","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_244","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitparser","text":"[Source] fun box xmlInitParser() : None val","title":"xmlInitParser"},{"location":"pony-libxml2-LibXML2/#returns_245","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupparser","text":"[Source] fun box xmlCleanupParser() : None val","title":"xmlCleanupParser"},{"location":"pony-libxml2-LibXML2/#returns_246","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputread","text":"[Source] fun box xmlParserInputRead( pin: NullablePointer[Xmlparserinput ref] ref, plen: I32 val) : I32 val","title":"xmlParserInputRead"},{"location":"pony-libxml2-LibXML2/#parameters_234","text":"pin: NullablePointer [ Xmlparserinput ref] ref plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_247","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputgrow","text":"[Source] fun box xmlParserInputGrow( pin: NullablePointer[Xmlparserinput ref] ref, plen: I32 val) : I32 val","title":"xmlParserInputGrow"},{"location":"pony-libxml2-LibXML2/#parameters_235","text":"pin: NullablePointer [ Xmlparserinput ref] ref plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_248","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsedoc","text":"[Source] fun box xmlParseDoc( pcur: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlParseDoc"},{"location":"pony-libxml2-LibXML2/#parameters_236","text":"pcur: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_249","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsefile","text":"[Source] fun box xmlParseFile( pfilename: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlParseFile"},{"location":"pony-libxml2-LibXML2/#parameters_237","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_250","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsememory","text":"[Source] fun box xmlParseMemory( pbuffer: String val, psize: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlParseMemory"},{"location":"pony-libxml2-LibXML2/#parameters_238","text":"pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_251","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsubstituteentitiesdefault","text":"[Source] fun box xmlSubstituteEntitiesDefault( pval: I32 val) : I32 val","title":"xmlSubstituteEntitiesDefault"},{"location":"pony-libxml2-LibXML2/#parameters_239","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_252","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlkeepblanksdefault","text":"[Source] fun box xmlKeepBlanksDefault( pval: I32 val) : I32 val","title":"xmlKeepBlanksDefault"},{"location":"pony-libxml2-LibXML2/#parameters_240","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_253","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstopparser","text":"[Source] fun box xmlStopParser( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlStopParser"},{"location":"pony-libxml2-LibXML2/#parameters_241","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_254","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpedanticparserdefault","text":"[Source] fun box xmlPedanticParserDefault( pval: I32 val) : I32 val","title":"xmlPedanticParserDefault"},{"location":"pony-libxml2-LibXML2/#parameters_242","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_255","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllinenumbersdefault","text":"[Source] fun box xmlLineNumbersDefault( pval: I32 val) : I32 val","title":"xmlLineNumbersDefault"},{"location":"pony-libxml2-LibXML2/#parameters_243","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_256","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrecoverdoc","text":"[Source] fun box xmlRecoverDoc( pcur: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlRecoverDoc"},{"location":"pony-libxml2-LibXML2/#parameters_244","text":"pcur: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_257","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrecovermemory","text":"[Source] fun box xmlRecoverMemory( pbuffer: String val, psize: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlRecoverMemory"},{"location":"pony-libxml2-LibXML2/#parameters_245","text":"pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_258","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrecoverfile","text":"[Source] fun box xmlRecoverFile( pfilename: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlRecoverFile"},{"location":"pony-libxml2-LibXML2/#parameters_246","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_259","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsedocument","text":"[Source] fun box xmlParseDocument( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"xmlParseDocument"},{"location":"pony-libxml2-LibXML2/#parameters_247","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_260","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseextparsedent","text":"[Source] fun box xmlParseExtParsedEnt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"xmlParseExtParsedEnt"},{"location":"pony-libxml2-LibXML2/#parameters_248","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_261","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxuserparsefile","text":"[Source] fun box xmlSAXUserParseFile( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pfilename: String val) : I32 val","title":"xmlSAXUserParseFile"},{"location":"pony-libxml2-LibXML2/#parameters_249","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_262","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxuserparsememory","text":"[Source] fun box xmlSAXUserParseMemory( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pbuffer: String val, psize: I32 val) : I32 val","title":"xmlSAXUserParseMemory"},{"location":"pony-libxml2-LibXML2/#parameters_250","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_263","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxparsedoc","text":"[Source] fun box xmlSAXParseDoc( psax: NullablePointer[Xmlsaxhandler ref] ref, pcur: String val, precovery: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlSAXParseDoc"},{"location":"pony-libxml2-LibXML2/#parameters_251","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pcur: String val precovery: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_264","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxparsememory","text":"[Source] fun box xmlSAXParseMemory( psax: NullablePointer[Xmlsaxhandler ref] ref, pbuffer: String val, psize: I32 val, precovery: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlSAXParseMemory"},{"location":"pony-libxml2-LibXML2/#parameters_252","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pbuffer: String val psize: I32 val precovery: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_265","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxparsememorywithdata","text":"[Source] fun box xmlSAXParseMemoryWithData( psax: NullablePointer[Xmlsaxhandler ref] ref, pbuffer: String val, psize: I32 val, precovery: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref","title":"xmlSAXParseMemoryWithData"},{"location":"pony-libxml2-LibXML2/#parameters_253","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pbuffer: String val psize: I32 val precovery: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_266","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxparsefile","text":"[Source] fun box xmlSAXParseFile( psax: NullablePointer[Xmlsaxhandler ref] ref, pfilename: String val, precovery: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlSAXParseFile"},{"location":"pony-libxml2-LibXML2/#parameters_254","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pfilename: String val precovery: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_267","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxparsefilewithdata","text":"[Source] fun box xmlSAXParseFileWithData( psax: NullablePointer[Xmlsaxhandler ref] ref, pfilename: String val, precovery: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref","title":"xmlSAXParseFileWithData"},{"location":"pony-libxml2-LibXML2/#parameters_255","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pfilename: String val precovery: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_268","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxparseentity","text":"[Source] fun box xmlSAXParseEntity( psax: NullablePointer[Xmlsaxhandler ref] ref, pfilename: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlSAXParseEntity"},{"location":"pony-libxml2-LibXML2/#parameters_256","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_269","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseentity","text":"[Source] fun box xmlParseEntity( pfilename: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlParseEntity"},{"location":"pony-libxml2-LibXML2/#parameters_257","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_270","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxparsedtd","text":"[Source] fun box xmlSAXParseDTD( psax: NullablePointer[Xmlsaxhandler ref] ref, pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref","title":"xmlSAXParseDTD"},{"location":"pony-libxml2-LibXML2/#parameters_258","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_271","text":"NullablePointer [ Xmldtd ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsedtd","text":"[Source] fun box xmlParseDTD( pExternalID: String val, pSystemID: String val) : NullablePointer[Xmldtd ref] ref","title":"xmlParseDTD"},{"location":"pony-libxml2-LibXML2/#parameters_259","text":"pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_272","text":"NullablePointer [ Xmldtd ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlioparsedtd","text":"[Source] fun box xmlIOParseDTD( psax: NullablePointer[Xmlsaxhandler ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, penc: I32 val) : NullablePointer[Xmldtd ref] ref","title":"xmlIOParseDTD"},{"location":"pony-libxml2-LibXML2/#parameters_260","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_273","text":"NullablePointer [ Xmldtd ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsebalancedchunkmemory","text":"[Source] fun box xmlParseBalancedChunkMemory( pdoc: NullablePointer[Xmldoc ref] tag, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pdepth: I32 val, pstring: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val","title":"xmlParseBalancedChunkMemory"},{"location":"pony-libxml2-LibXML2/#parameters_261","text":"pdoc: NullablePointer [ Xmldoc ref] tag psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pdepth: I32 val pstring: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_274","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseinnodecontext","text":"[Source] fun box xmlParseInNodeContext( pnode: NullablePointer[Xmlnode ref] ref, pdata: String val, pdatalen: I32 val, poptions: I32 val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val","title":"xmlParseInNodeContext"},{"location":"pony-libxml2-LibXML2/#parameters_262","text":"pnode: NullablePointer [ Xmlnode ref] ref pdata: String val pdatalen: I32 val poptions: I32 val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_275","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsebalancedchunkmemoryrecover","text":"[Source] fun box xmlParseBalancedChunkMemoryRecover( pdoc: NullablePointer[Xmldoc ref] tag, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pdepth: I32 val, pstring: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref, precover: I32 val) : I32 val","title":"xmlParseBalancedChunkMemoryRecover"},{"location":"pony-libxml2-LibXML2/#parameters_263","text":"pdoc: NullablePointer [ Xmldoc ref] tag psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pdepth: I32 val pstring: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref precover: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_276","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseexternalentity","text":"[Source] fun box xmlParseExternalEntity( pdoc: NullablePointer[Xmldoc ref] tag, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pdepth: I32 val, pURL: String val, pID: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val","title":"xmlParseExternalEntity"},{"location":"pony-libxml2-LibXML2/#parameters_264","text":"pdoc: NullablePointer [ Xmldoc ref] tag psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pdepth: I32 val pURL: String val pID: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_277","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsectxtexternalentity","text":"[Source] fun box xmlParseCtxtExternalEntity( pctx: NullablePointer[Xmlparserctxt ref] ref, pURL: String val, pID: String val, plst: Pointer[NullablePointer[Xmlnode ref] ref] ref) : I32 val","title":"xmlParseCtxtExternalEntity"},{"location":"pony-libxml2-LibXML2/#parameters_265","text":"pctx: NullablePointer [ Xmlparserctxt ref] ref pURL: String val pID: String val plst: Pointer [ NullablePointer [ Xmlnode ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_278","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewparserctxt","text":"[Source] fun box xmlNewParserCtxt() : NullablePointer[Xmlparserctxt ref] ref","title":"xmlNewParserCtxt"},{"location":"pony-libxml2-LibXML2/#returns_279","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitparserctxt","text":"[Source] fun box xmlInitParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"xmlInitParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_266","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_280","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlclearparserctxt","text":"[Source] fun box xmlClearParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlClearParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_267","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_281","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeparserctxt","text":"[Source] fun box xmlFreeParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlFreeParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_268","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_282","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetupparserforbuffer","text":"[Source] fun box xmlSetupParserForBuffer( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val, pfilename: String val) : None val","title":"xmlSetupParserForBuffer"},{"location":"pony-libxml2-LibXML2/#parameters_269","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_283","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreatedocparserctxt","text":"[Source] fun box xmlCreateDocParserCtxt( pcur: String val) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlCreateDocParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_270","text":"pcur: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_284","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetfeatureslist","text":"[Source] fun box xmlGetFeaturesList( plen: Pointer[I32 val] ref, presult: Pointer[Pointer[U8 val] tag] ref) : I32 val","title":"xmlGetFeaturesList"},{"location":"pony-libxml2-LibXML2/#parameters_271","text":"plen: Pointer [ I32 val] ref presult: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_285","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetfeature","text":"[Source] fun box xmlGetFeature( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, presult: Pointer[U8 val] ref) : I32 val","title":"xmlGetFeature"},{"location":"pony-libxml2-LibXML2/#parameters_272","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val presult: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_286","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetfeature","text":"[Source] fun box xmlSetFeature( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, pvalue: Pointer[U8 val] ref) : I32 val","title":"xmlSetFeature"},{"location":"pony-libxml2-LibXML2/#parameters_273","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val pvalue: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_287","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreatepushparserctxt","text":"[Source] fun box xmlCreatePushParserCtxt( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pchunk: String val, psize: I32 val, pfilename: String val) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlCreatePushParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_274","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pchunk: String val psize: I32 val pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_288","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsechunk","text":"[Source] fun box xmlParseChunk( pctxt: NullablePointer[Xmlparserctxt ref] ref, pchunk: String val, psize: I32 val, pterminate: I32 val) : I32 val","title":"xmlParseChunk"},{"location":"pony-libxml2-LibXML2/#parameters_275","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pchunk: String val psize: I32 val pterminate: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_289","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreateioparserctxt","text":"[Source] fun box xmlCreateIOParserCtxt( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, penc: I32 val) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlCreateIOParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_276","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_290","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewioinputstream","text":"[Source] fun box xmlNewIOInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, penc: I32 val) : NullablePointer[Xmlparserinput ref] ref","title":"xmlNewIOInputStream"},{"location":"pony-libxml2-LibXML2/#parameters_277","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_291","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserfindnodeinfo","text":"[Source] fun box xmlParserFindNodeInfo( pctxt: NullablePointer[Xmlparserctxt ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlparsernodeinfo ref] ref","title":"xmlParserFindNodeInfo"},{"location":"pony-libxml2-LibXML2/#parameters_278","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_292","text":"NullablePointer [ Xmlparsernodeinfo ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitnodeinfoseq","text":"[Source] fun box xmlInitNodeInfoSeq( pseq: NullablePointer[Xmlparsernodeinfoseq ref] ref) : None val","title":"xmlInitNodeInfoSeq"},{"location":"pony-libxml2-LibXML2/#parameters_279","text":"pseq: NullablePointer [ Xmlparsernodeinfoseq ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_293","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlclearnodeinfoseq","text":"[Source] fun box xmlClearNodeInfoSeq( pseq: NullablePointer[Xmlparsernodeinfoseq ref] ref) : None val","title":"xmlClearNodeInfoSeq"},{"location":"pony-libxml2-LibXML2/#parameters_280","text":"pseq: NullablePointer [ Xmlparsernodeinfoseq ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_294","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserfindnodeinfoindex","text":"[Source] fun box xmlParserFindNodeInfoIndex( pseq: NullablePointer[Xmlparsernodeinfoseq ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : U64 val","title":"xmlParserFindNodeInfoIndex"},{"location":"pony-libxml2-LibXML2/#parameters_281","text":"pseq: NullablePointer [ Xmlparsernodeinfoseq ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_295","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseraddnodeinfo","text":"[Source] fun box xmlParserAddNodeInfo( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinfo: NullablePointer[Xmlparsernodeinfo ref] ref) : None val","title":"xmlParserAddNodeInfo"},{"location":"pony-libxml2-LibXML2/#parameters_282","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pinfo: NullablePointer [ Xmlparsernodeinfo ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_296","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetexternalentityloader","text":"[Source] fun box xmlSetExternalEntityLoader( pf: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xmlSetExternalEntityLoader"},{"location":"pony-libxml2-LibXML2/#parameters_283","text":"pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_297","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetexternalentityloader","text":"[Source] fun box xmlGetExternalEntityLoader() : Pointer[FUNCTIONPOINTER val] ref","title":"xmlGetExternalEntityLoader"},{"location":"pony-libxml2-LibXML2/#returns_298","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlloadexternalentity","text":"[Source] fun box xmlLoadExternalEntity( pURL: String val, pID: String val, pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref","title":"xmlLoadExternalEntity"},{"location":"pony-libxml2-LibXML2/#parameters_284","text":"pURL: String val pID: String val pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_299","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbyteconsumed","text":"[Source] fun box xmlByteConsumed( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I64 val","title":"xmlByteConsumed"},{"location":"pony-libxml2-LibXML2/#parameters_285","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_300","text":"I64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtreset","text":"[Source] fun box xmlCtxtReset( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlCtxtReset"},{"location":"pony-libxml2-LibXML2/#parameters_286","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_301","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtresetpush","text":"[Source] fun box xmlCtxtResetPush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pchunk: String val, psize: I32 val, pfilename: String val, pencoding: String val) : I32 val","title":"xmlCtxtResetPush"},{"location":"pony-libxml2-LibXML2/#parameters_287","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pchunk: String val psize: I32 val pfilename: String val pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_302","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtuseoptions","text":"[Source] fun box xmlCtxtUseOptions( pctxt: NullablePointer[Xmlparserctxt ref] ref, poptions: I32 val) : I32 val","title":"xmlCtxtUseOptions"},{"location":"pony-libxml2-LibXML2/#parameters_288","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_303","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreaddoc","text":"[Source] fun box xmlReadDoc( pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlReadDoc"},{"location":"pony-libxml2-LibXML2/#parameters_289","text":"pcur: String val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_304","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadfile","text":"[Source] fun box xmlReadFile( pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlReadFile"},{"location":"pony-libxml2-LibXML2/#parameters_290","text":"pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_305","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadmemory","text":"[Source] fun box xmlReadMemory( pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlReadMemory"},{"location":"pony-libxml2-LibXML2/#parameters_291","text":"pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_306","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadfd","text":"[Source] fun box xmlReadFd( pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlReadFd"},{"location":"pony-libxml2-LibXML2/#parameters_292","text":"pfd: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_307","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadio","text":"[Source] fun box xmlReadIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlReadIO"},{"location":"pony-libxml2-LibXML2/#parameters_293","text":"pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_308","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtreaddoc","text":"[Source] fun box xmlCtxtReadDoc( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlCtxtReadDoc"},{"location":"pony-libxml2-LibXML2/#parameters_294","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pcur: String val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_309","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtreadfile","text":"[Source] fun box xmlCtxtReadFile( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlCtxtReadFile"},{"location":"pony-libxml2-LibXML2/#parameters_295","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pfilename: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_310","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtreadmemory","text":"[Source] fun box xmlCtxtReadMemory( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlCtxtReadMemory"},{"location":"pony-libxml2-LibXML2/#parameters_296","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_311","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtreadfd","text":"[Source] fun box xmlCtxtReadFd( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlCtxtReadFd"},{"location":"pony-libxml2-LibXML2/#parameters_297","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pfd: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_312","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtreadio","text":"[Source] fun box xmlCtxtReadIO( pctxt: NullablePointer[Xmlparserctxt ref] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"xmlCtxtReadIO"},{"location":"pony-libxml2-LibXML2/#parameters_298","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_313","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhasfeature","text":"[Source] fun box xmlHasFeature( pfeature: I32 val) : I32 val","title":"xmlHasFeature"},{"location":"pony-libxml2-LibXML2/#parameters_299","text":"pfeature: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_314","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitializepredefinedentities","text":"[Source] fun box xmlInitializePredefinedEntities() : None val","title":"xmlInitializePredefinedEntities"},{"location":"pony-libxml2-LibXML2/#returns_315","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewentity","text":"[Source] fun box xmlNewEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val, pExternalID: String val, pSystemID: String val, pcontent: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlNewEntity"},{"location":"pony-libxml2-LibXML2/#parameters_300","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val pExternalID: String val pSystemID: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_316","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladddocentity","text":"[Source] fun box xmlAddDocEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val, pExternalID: String val, pSystemID: String val, pcontent: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlAddDocEntity"},{"location":"pony-libxml2-LibXML2/#parameters_301","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val pExternalID: String val pSystemID: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_317","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladddtdentity","text":"[Source] fun box xmlAddDtdEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val, pExternalID: String val, pSystemID: String val, pcontent: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlAddDtdEntity"},{"location":"pony-libxml2-LibXML2/#parameters_302","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val pExternalID: String val pSystemID: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_318","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetpredefinedentity","text":"[Source] fun box xmlGetPredefinedEntity( pname: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlGetPredefinedEntity"},{"location":"pony-libxml2-LibXML2/#parameters_303","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_319","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdocentity","text":"[Source] fun box xmlGetDocEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlGetDocEntity"},{"location":"pony-libxml2-LibXML2/#parameters_304","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_320","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdtdentity","text":"[Source] fun box xmlGetDtdEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlGetDtdEntity"},{"location":"pony-libxml2-LibXML2/#parameters_305","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_321","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetparameterentity","text":"[Source] fun box xmlGetParameterEntity( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlGetParameterEntity"},{"location":"pony-libxml2-LibXML2/#parameters_306","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_322","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlencodeentities","text":"[Source] fun box xmlEncodeEntities( pdoc: NullablePointer[Xmldoc ref] tag, pinput: String val) : String val","title":"xmlEncodeEntities"},{"location":"pony-libxml2-LibXML2/#parameters_307","text":"pdoc: NullablePointer [ Xmldoc ref] tag pinput: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_323","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlencodeentitiesreentrant","text":"[Source] fun box xmlEncodeEntitiesReentrant( pdoc: NullablePointer[Xmldoc ref] tag, pinput: String val) : String val","title":"xmlEncodeEntitiesReentrant"},{"location":"pony-libxml2-LibXML2/#parameters_308","text":"pdoc: NullablePointer [ Xmldoc ref] tag pinput: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_324","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlencodespecialchars","text":"[Source] fun box xmlEncodeSpecialChars( pdoc: NullablePointer[Xmldoc ref] tag, pinput: String val) : String val","title":"xmlEncodeSpecialChars"},{"location":"pony-libxml2-LibXML2/#parameters_309","text":"pdoc: NullablePointer [ Xmldoc ref] tag pinput: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_325","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreateentitiestable","text":"[Source] fun box xmlCreateEntitiesTable() : NullablePointer[Xmlhashtable ref] ref","title":"xmlCreateEntitiesTable"},{"location":"pony-libxml2-LibXML2/#returns_326","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyentitiestable","text":"[Source] fun box xmlCopyEntitiesTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref","title":"xmlCopyEntitiesTable"},{"location":"pony-libxml2-LibXML2/#parameters_310","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_327","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeentitiestable","text":"[Source] fun box xmlFreeEntitiesTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlFreeEntitiesTable"},{"location":"pony-libxml2-LibXML2/#parameters_311","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_328","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpentitiestable","text":"[Source] fun box xmlDumpEntitiesTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlDumpEntitiesTable"},{"location":"pony-libxml2-LibXML2/#parameters_312","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_329","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpentitydecl","text":"[Source] fun box xmlDumpEntityDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pent: NullablePointer[Xmlentity ref] ref) : None val","title":"xmlDumpEntityDecl"},{"location":"pony-libxml2-LibXML2/#parameters_313","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pent: NullablePointer [ Xmlentity ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_330","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanuppredefinedentities","text":"[Source] fun box xmlCleanupPredefinedEntities() : None val","title":"xmlCleanupPredefinedEntities"},{"location":"pony-libxml2-LibXML2/#returns_331","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexpcompile","text":"[Source] fun box xmlRegexpCompile( pregexp: String val) : NullablePointer[Xmlregexp ref] ref","title":"xmlRegexpCompile"},{"location":"pony-libxml2-LibXML2/#parameters_314","text":"pregexp: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_332","text":"NullablePointer [ Xmlregexp ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregfreeregexp","text":"[Source] fun box xmlRegFreeRegexp( pregexp: NullablePointer[Xmlregexp ref] ref) : None val","title":"xmlRegFreeRegexp"},{"location":"pony-libxml2-LibXML2/#parameters_315","text":"pregexp: NullablePointer [ Xmlregexp ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_333","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexpexec","text":"[Source] fun box xmlRegexpExec( pcomp: NullablePointer[Xmlregexp ref] ref, pvalue: String val) : I32 val","title":"xmlRegexpExec"},{"location":"pony-libxml2-LibXML2/#parameters_316","text":"pcomp: NullablePointer [ Xmlregexp ref] ref pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_334","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexpprint","text":"[Source] fun box xmlRegexpPrint( poutput: NullablePointer[IoFile ref] ref, pregexp: NullablePointer[Xmlregexp ref] ref) : None val","title":"xmlRegexpPrint"},{"location":"pony-libxml2-LibXML2/#parameters_317","text":"poutput: NullablePointer [ IoFile ref] ref pregexp: NullablePointer [ Xmlregexp ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_335","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexpisdeterminist","text":"[Source] fun box xmlRegexpIsDeterminist( pcomp: NullablePointer[Xmlregexp ref] ref) : I32 val","title":"xmlRegexpIsDeterminist"},{"location":"pony-libxml2-LibXML2/#parameters_318","text":"pcomp: NullablePointer [ Xmlregexp ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_336","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregnewexecctxt","text":"[Source] fun box xmlRegNewExecCtxt( pcomp: NullablePointer[Xmlregexp ref] ref, pcallback: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlregexecctxt ref] ref","title":"xmlRegNewExecCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_319","text":"pcomp: NullablePointer [ Xmlregexp ref] ref pcallback: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_337","text":"NullablePointer [ Xmlregexecctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregfreeexecctxt","text":"[Source] fun box xmlRegFreeExecCtxt( pexec: NullablePointer[Xmlregexecctxt ref] ref) : None val","title":"xmlRegFreeExecCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_320","text":"pexec: NullablePointer [ Xmlregexecctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_338","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexecpushstring","text":"[Source] fun box xmlRegExecPushString( pexec: NullablePointer[Xmlregexecctxt ref] ref, pvalue: String val, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlRegExecPushString"},{"location":"pony-libxml2-LibXML2/#parameters_321","text":"pexec: NullablePointer [ Xmlregexecctxt ref] ref pvalue: String val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_339","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexecpushstring2","text":"[Source] fun box xmlRegExecPushString2( pexec: NullablePointer[Xmlregexecctxt ref] ref, pvalue: String val, pvalue2: String val, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlRegExecPushString2"},{"location":"pony-libxml2-LibXML2/#parameters_322","text":"pexec: NullablePointer [ Xmlregexecctxt ref] ref pvalue: String val pvalue2: String val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_340","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexecnextvalues","text":"[Source] fun box xmlRegExecNextValues( pexec: NullablePointer[Xmlregexecctxt ref] ref, pnbval: Pointer[I32 val] ref, pnbneg: Pointer[I32 val] ref, pvalues: Pointer[Pointer[U8 val] tag] ref, pterminal: Pointer[I32 val] ref) : I32 val","title":"xmlRegExecNextValues"},{"location":"pony-libxml2-LibXML2/#parameters_323","text":"pexec: NullablePointer [ Xmlregexecctxt ref] ref pnbval: Pointer [ I32 val] ref pnbneg: Pointer [ I32 val] ref pvalues: Pointer [ Pointer [ U8 val] tag] ref pterminal: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_341","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregexecerrinfo","text":"[Source] fun box xmlRegExecErrInfo( pexec: NullablePointer[Xmlregexecctxt ref] ref, pstring: Pointer[Pointer[U8 val] tag] ref, pnbval: Pointer[I32 val] ref, pnbneg: Pointer[I32 val] ref, pvalues: Pointer[Pointer[U8 val] tag] ref, pterminal: Pointer[I32 val] ref) : I32 val","title":"xmlRegExecErrInfo"},{"location":"pony-libxml2-LibXML2/#parameters_324","text":"pexec: NullablePointer [ Xmlregexecctxt ref] ref pstring: Pointer [ Pointer [ U8 val] tag] ref pnbval: Pointer [ I32 val] ref pnbneg: Pointer [ I32 val] ref pvalues: Pointer [ Pointer [ U8 val] tag] ref pterminal: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_342","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitializedict","text":"[Source] fun box xmlInitializeDict() : I32 val","title":"xmlInitializeDict"},{"location":"pony-libxml2-LibXML2/#returns_343","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictcreate","text":"[Source] fun box xmlDictCreate() : NullablePointer[Xmldict ref] ref","title":"xmlDictCreate"},{"location":"pony-libxml2-LibXML2/#returns_344","text":"NullablePointer [ Xmldict ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictsetlimit","text":"[Source] fun box xmlDictSetLimit( pdict: NullablePointer[Xmldict ref] ref, plimit: U64 val) : U64 val","title":"xmlDictSetLimit"},{"location":"pony-libxml2-LibXML2/#parameters_325","text":"pdict: NullablePointer [ Xmldict ref] ref plimit: U64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_345","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictgetusage","text":"[Source] fun box xmlDictGetUsage( pdict: NullablePointer[Xmldict ref] ref) : U64 val","title":"xmlDictGetUsage"},{"location":"pony-libxml2-LibXML2/#parameters_326","text":"pdict: NullablePointer [ Xmldict ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_346","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictcreatesub","text":"[Source] fun box xmlDictCreateSub( psub: NullablePointer[Xmldict ref] ref) : NullablePointer[Xmldict ref] ref","title":"xmlDictCreateSub"},{"location":"pony-libxml2-LibXML2/#parameters_327","text":"psub: NullablePointer [ Xmldict ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_347","text":"NullablePointer [ Xmldict ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictreference","text":"[Source] fun box xmlDictReference( pdict: NullablePointer[Xmldict ref] ref) : I32 val","title":"xmlDictReference"},{"location":"pony-libxml2-LibXML2/#parameters_328","text":"pdict: NullablePointer [ Xmldict ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_348","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictfree","text":"[Source] fun box xmlDictFree( pdict: NullablePointer[Xmldict ref] ref) : None val","title":"xmlDictFree"},{"location":"pony-libxml2-LibXML2/#parameters_329","text":"pdict: NullablePointer [ Xmldict ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_349","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictlookup","text":"[Source] fun box xmlDictLookup( pdict: NullablePointer[Xmldict ref] ref, pname: String val, plen: I32 val) : String val","title":"xmlDictLookup"},{"location":"pony-libxml2-LibXML2/#parameters_330","text":"pdict: NullablePointer [ Xmldict ref] ref pname: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_350","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictexists","text":"[Source] fun box xmlDictExists( pdict: NullablePointer[Xmldict ref] ref, pname: String val, plen: I32 val) : String val","title":"xmlDictExists"},{"location":"pony-libxml2-LibXML2/#parameters_331","text":"pdict: NullablePointer [ Xmldict ref] ref pname: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_351","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictqlookup","text":"[Source] fun box xmlDictQLookup( pdict: NullablePointer[Xmldict ref] ref, pprefix: String val, pname: String val) : String val","title":"xmlDictQLookup"},{"location":"pony-libxml2-LibXML2/#parameters_332","text":"pdict: NullablePointer [ Xmldict ref] ref pprefix: String val pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_352","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictowns","text":"[Source] fun box xmlDictOwns( pdict: NullablePointer[Xmldict ref] ref, pstr: String val) : I32 val","title":"xmlDictOwns"},{"location":"pony-libxml2-LibXML2/#parameters_333","text":"pdict: NullablePointer [ Xmldict ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_353","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictsize","text":"[Source] fun box xmlDictSize( pdict: NullablePointer[Xmldict ref] ref) : I32 val","title":"xmlDictSize"},{"location":"pony-libxml2-LibXML2/#parameters_334","text":"pdict: NullablePointer [ Xmldict ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_354","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldictcleanup","text":"[Source] fun box xmlDictCleanup() : None val","title":"xmlDictCleanup"},{"location":"pony-libxml2-LibXML2/#returns_355","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemsetup","text":"[Source] fun box xmlMemSetup( pfreeFunc: Pointer[FUNCTIONPOINTER val] ref, pmallocFunc: Pointer[FUNCTIONPOINTER val] ref, preallocFunc: Pointer[FUNCTIONPOINTER val] ref, pstrdupFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlMemSetup"},{"location":"pony-libxml2-LibXML2/#parameters_335","text":"pfreeFunc: Pointer [ FUNCTIONPOINTER val] ref pmallocFunc: Pointer [ FUNCTIONPOINTER val] ref preallocFunc: Pointer [ FUNCTIONPOINTER val] ref pstrdupFunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_356","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemget","text":"[Source] fun box xmlMemGet( pfreeFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pmallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, preallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pstrdupFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref) : I32 val","title":"xmlMemGet"},{"location":"pony-libxml2-LibXML2/#parameters_336","text":"pfreeFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pmallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref preallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pstrdupFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_357","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgcmemsetup","text":"[Source] fun box xmlGcMemSetup( pfreeFunc: Pointer[FUNCTIONPOINTER val] ref, pmallocFunc: Pointer[FUNCTIONPOINTER val] ref, pmallocAtomicFunc: Pointer[FUNCTIONPOINTER val] ref, preallocFunc: Pointer[FUNCTIONPOINTER val] ref, pstrdupFunc: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlGcMemSetup"},{"location":"pony-libxml2-LibXML2/#parameters_337","text":"pfreeFunc: Pointer [ FUNCTIONPOINTER val] ref pmallocFunc: Pointer [ FUNCTIONPOINTER val] ref pmallocAtomicFunc: Pointer [ FUNCTIONPOINTER val] ref preallocFunc: Pointer [ FUNCTIONPOINTER val] ref pstrdupFunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_358","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgcmemget","text":"[Source] fun box xmlGcMemGet( pfreeFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pmallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pmallocAtomicFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, preallocFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pstrdupFunc: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref) : I32 val","title":"xmlGcMemGet"},{"location":"pony-libxml2-LibXML2/#parameters_338","text":"pfreeFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pmallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pmallocAtomicFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref preallocFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pstrdupFunc: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_359","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitmemory","text":"[Source] fun box xmlInitMemory() : I32 val","title":"xmlInitMemory"},{"location":"pony-libxml2-LibXML2/#returns_360","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupmemory","text":"[Source] fun box xmlCleanupMemory() : None val","title":"xmlCleanupMemory"},{"location":"pony-libxml2-LibXML2/#returns_361","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemused","text":"[Source] fun box xmlMemUsed() : I32 val","title":"xmlMemUsed"},{"location":"pony-libxml2-LibXML2/#returns_362","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemblocks","text":"[Source] fun box xmlMemBlocks() : I32 val","title":"xmlMemBlocks"},{"location":"pony-libxml2-LibXML2/#returns_363","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemdisplay","text":"[Source] fun box xmlMemDisplay( pfp: NullablePointer[IoFile ref] ref) : None val","title":"xmlMemDisplay"},{"location":"pony-libxml2-LibXML2/#parameters_339","text":"pfp: NullablePointer [ IoFile ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_364","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemdisplaylast","text":"[Source] fun box xmlMemDisplayLast( pfp: NullablePointer[IoFile ref] ref, pnbBytes: I64 val) : None val","title":"xmlMemDisplayLast"},{"location":"pony-libxml2-LibXML2/#parameters_340","text":"pfp: NullablePointer [ IoFile ref] ref pnbBytes: I64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_365","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemshow","text":"[Source] fun box xmlMemShow( pfp: NullablePointer[IoFile ref] ref, pnr: I32 val) : None val","title":"xmlMemShow"},{"location":"pony-libxml2-LibXML2/#parameters_341","text":"pfp: NullablePointer [ IoFile ref] ref pnr: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_366","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemorydump","text":"[Source] fun box xmlMemoryDump() : None val","title":"xmlMemoryDump"},{"location":"pony-libxml2-LibXML2/#returns_367","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemmalloc","text":"[Source] fun box xmlMemMalloc( psize: U64 val) : String val","title":"xmlMemMalloc"},{"location":"pony-libxml2-LibXML2/#parameters_342","text":"psize: U64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_368","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemrealloc","text":"[Source] fun box xmlMemRealloc( pptr: Pointer[U8 val] ref, psize: U64 val) : String val","title":"xmlMemRealloc"},{"location":"pony-libxml2-LibXML2/#parameters_343","text":"pptr: Pointer [ U8 val] ref psize: U64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_369","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemfree","text":"[Source] fun box xmlMemFree( pptr: Pointer[U8 val] ref) : None val","title":"xmlMemFree"},{"location":"pony-libxml2-LibXML2/#parameters_344","text":"pptr: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_370","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemorystrdup","text":"[Source] fun box xmlMemoryStrdup( pstr: String val) : String val","title":"xmlMemoryStrdup"},{"location":"pony-libxml2-LibXML2/#parameters_345","text":"pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_371","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmallocloc","text":"[Source] fun box xmlMallocLoc( psize: U64 val, pfile: String val, pline: I32 val) : String val","title":"xmlMallocLoc"},{"location":"pony-libxml2-LibXML2/#parameters_346","text":"psize: U64 val pfile: String val pline: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_372","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreallocloc","text":"[Source] fun box xmlReallocLoc( pptr: Pointer[U8 val] ref, psize: U64 val, pfile: String val, pline: I32 val) : String val","title":"xmlReallocLoc"},{"location":"pony-libxml2-LibXML2/#parameters_347","text":"pptr: Pointer [ U8 val] ref psize: U64 val pfile: String val pline: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_373","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmallocatomicloc","text":"[Source] fun box xmlMallocAtomicLoc( psize: U64 val, pfile: String val, pline: I32 val) : String val","title":"xmlMallocAtomicLoc"},{"location":"pony-libxml2-LibXML2/#parameters_348","text":"psize: U64 val pfile: String val pline: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_374","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmemstrduploc","text":"[Source] fun box xmlMemStrdupLoc( pstr: String val, pfile: String val, pline: I32 val) : String val","title":"xmlMemStrdupLoc"},{"location":"pony-libxml2-LibXML2/#parameters_349","text":"pstr: String val pfile: String val pline: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_375","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewmutex","text":"[Source] fun box xmlNewMutex() : NullablePointer[Xmlmutex ref] ref","title":"xmlNewMutex"},{"location":"pony-libxml2-LibXML2/#returns_376","text":"NullablePointer [ Xmlmutex ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmutexlock","text":"[Source] fun box xmlMutexLock( ptok: NullablePointer[Xmlmutex ref] ref) : None val","title":"xmlMutexLock"},{"location":"pony-libxml2-LibXML2/#parameters_350","text":"ptok: NullablePointer [ Xmlmutex ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_377","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmutexunlock","text":"[Source] fun box xmlMutexUnlock( ptok: NullablePointer[Xmlmutex ref] ref) : None val","title":"xmlMutexUnlock"},{"location":"pony-libxml2-LibXML2/#parameters_351","text":"ptok: NullablePointer [ Xmlmutex ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_378","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreemutex","text":"[Source] fun box xmlFreeMutex( ptok: NullablePointer[Xmlmutex ref] ref) : None val","title":"xmlFreeMutex"},{"location":"pony-libxml2-LibXML2/#parameters_352","text":"ptok: NullablePointer [ Xmlmutex ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_379","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewrmutex","text":"[Source] fun box xmlNewRMutex() : NullablePointer[Xmlrmutex ref] ref","title":"xmlNewRMutex"},{"location":"pony-libxml2-LibXML2/#returns_380","text":"NullablePointer [ Xmlrmutex ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrmutexlock","text":"[Source] fun box xmlRMutexLock( ptok: NullablePointer[Xmlrmutex ref] ref) : None val","title":"xmlRMutexLock"},{"location":"pony-libxml2-LibXML2/#parameters_353","text":"ptok: NullablePointer [ Xmlrmutex ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_381","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrmutexunlock","text":"[Source] fun box xmlRMutexUnlock( ptok: NullablePointer[Xmlrmutex ref] ref) : None val","title":"xmlRMutexUnlock"},{"location":"pony-libxml2-LibXML2/#parameters_354","text":"ptok: NullablePointer [ Xmlrmutex ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_382","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreermutex","text":"[Source] fun box xmlFreeRMutex( ptok: NullablePointer[Xmlrmutex ref] ref) : None val","title":"xmlFreeRMutex"},{"location":"pony-libxml2-LibXML2/#parameters_355","text":"ptok: NullablePointer [ Xmlrmutex ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_383","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitthreads","text":"[Source] fun box xmlInitThreads() : None val","title":"xmlInitThreads"},{"location":"pony-libxml2-LibXML2/#returns_384","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllocklibrary","text":"[Source] fun box xmlLockLibrary() : None val","title":"xmlLockLibrary"},{"location":"pony-libxml2-LibXML2/#returns_385","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlunlocklibrary","text":"[Source] fun box xmlUnlockLibrary() : None val","title":"xmlUnlockLibrary"},{"location":"pony-libxml2-LibXML2/#returns_386","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetthreadid","text":"[Source] fun box xmlGetThreadId() : I32 val","title":"xmlGetThreadId"},{"location":"pony-libxml2-LibXML2/#returns_387","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlismainthread","text":"[Source] fun box xmlIsMainThread() : I32 val","title":"xmlIsMainThread"},{"location":"pony-libxml2-LibXML2/#returns_388","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupthreads","text":"[Source] fun box xmlCleanupThreads() : None val","title":"xmlCleanupThreads"},{"location":"pony-libxml2-LibXML2/#returns_389","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetglobalstate","text":"[Source] fun box xmlGetGlobalState() : NullablePointer[Xmlglobalstate ref] ref","title":"xmlGetGlobalState"},{"location":"pony-libxml2-LibXML2/#returns_390","text":"NullablePointer [ Xmlglobalstate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashcreate","text":"[Source] fun box xmlHashCreate( psize: I32 val) : NullablePointer[Xmlhashtable ref] ref","title":"xmlHashCreate"},{"location":"pony-libxml2-LibXML2/#parameters_356","text":"psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_391","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashcreatedict","text":"[Source] fun box xmlHashCreateDict( psize: I32 val, pdict: NullablePointer[Xmldict ref] ref) : NullablePointer[Xmlhashtable ref] ref","title":"xmlHashCreateDict"},{"location":"pony-libxml2-LibXML2/#parameters_357","text":"psize: I32 val pdict: NullablePointer [ Xmldict ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_392","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashfree","text":"[Source] fun box xmlHashFree( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xmlHashFree"},{"location":"pony-libxml2-LibXML2/#parameters_358","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_393","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashdefaultdeallocator","text":"[Source] fun box xmlHashDefaultDeallocator( pentry: Pointer[U8 val] ref, pname: String val) : None val","title":"xmlHashDefaultDeallocator"},{"location":"pony-libxml2-LibXML2/#parameters_359","text":"pentry: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_394","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashaddentry","text":"[Source] fun box xmlHashAddEntry( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, puserdata: Pointer[U8 val] ref) : I32 val","title":"xmlHashAddEntry"},{"location":"pony-libxml2-LibXML2/#parameters_360","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val puserdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_395","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashupdateentry","text":"[Source] fun box xmlHashUpdateEntry( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, puserdata: Pointer[U8 val] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlHashUpdateEntry"},{"location":"pony-libxml2-LibXML2/#parameters_361","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val puserdata: Pointer [ U8 val] ref pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_396","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashaddentry2","text":"[Source] fun box xmlHashAddEntry2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, puserdata: Pointer[U8 val] ref) : I32 val","title":"xmlHashAddEntry2"},{"location":"pony-libxml2-LibXML2/#parameters_362","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val puserdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_397","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashupdateentry2","text":"[Source] fun box xmlHashUpdateEntry2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, puserdata: Pointer[U8 val] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlHashUpdateEntry2"},{"location":"pony-libxml2-LibXML2/#parameters_363","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val puserdata: Pointer [ U8 val] ref pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_398","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashaddentry3","text":"[Source] fun box xmlHashAddEntry3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, puserdata: Pointer[U8 val] ref) : I32 val","title":"xmlHashAddEntry3"},{"location":"pony-libxml2-LibXML2/#parameters_364","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val puserdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_399","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashupdateentry3","text":"[Source] fun box xmlHashUpdateEntry3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, puserdata: Pointer[U8 val] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlHashUpdateEntry3"},{"location":"pony-libxml2-LibXML2/#parameters_365","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val puserdata: Pointer [ U8 val] ref pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_400","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashremoveentry","text":"[Source] fun box xmlHashRemoveEntry( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlHashRemoveEntry"},{"location":"pony-libxml2-LibXML2/#parameters_366","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_401","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashremoveentry2","text":"[Source] fun box xmlHashRemoveEntry2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlHashRemoveEntry2"},{"location":"pony-libxml2-LibXML2/#parameters_367","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_402","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashremoveentry3","text":"[Source] fun box xmlHashRemoveEntry3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlHashRemoveEntry3"},{"location":"pony-libxml2-LibXML2/#parameters_368","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_403","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashlookup","text":"[Source] fun box xmlHashLookup( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val) : String val","title":"xmlHashLookup"},{"location":"pony-libxml2-LibXML2/#parameters_369","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_404","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashlookup2","text":"[Source] fun box xmlHashLookup2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val) : String val","title":"xmlHashLookup2"},{"location":"pony-libxml2-LibXML2/#parameters_370","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_405","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashlookup3","text":"[Source] fun box xmlHashLookup3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val) : String val","title":"xmlHashLookup3"},{"location":"pony-libxml2-LibXML2/#parameters_371","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_406","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashqlookup","text":"[Source] fun box xmlHashQLookup( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pprefix: String val) : String val","title":"xmlHashQLookup"},{"location":"pony-libxml2-LibXML2/#parameters_372","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_407","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashqlookup2","text":"[Source] fun box xmlHashQLookup2( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pprefix: String val, pname2: String val, pprefix2: String val) : String val","title":"xmlHashQLookup2"},{"location":"pony-libxml2-LibXML2/#parameters_373","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pprefix: String val pname2: String val pprefix2: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_408","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashqlookup3","text":"[Source] fun box xmlHashQLookup3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pprefix: String val, pname2: String val, pprefix2: String val, pname3: String val, pprefix3: String val) : String val","title":"xmlHashQLookup3"},{"location":"pony-libxml2-LibXML2/#parameters_374","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pprefix: String val pname2: String val pprefix2: String val pname3: String val pprefix3: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_409","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashcopy","text":"[Source] fun box xmlHashCopy( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref) : NullablePointer[Xmlhashtable ref] ref","title":"xmlHashCopy"},{"location":"pony-libxml2-LibXML2/#parameters_375","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_410","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashsize","text":"[Source] fun box xmlHashSize( ptable: NullablePointer[Xmlhashtable ref] ref) : I32 val","title":"xmlHashSize"},{"location":"pony-libxml2-LibXML2/#parameters_376","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_411","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashscan","text":"[Source] fun box xmlHashScan( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val","title":"xmlHashScan"},{"location":"pony-libxml2-LibXML2/#parameters_377","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_412","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashscan3","text":"[Source] fun box xmlHashScan3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val","title":"xmlHashScan3"},{"location":"pony-libxml2-LibXML2/#parameters_378","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_413","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashscanfull","text":"[Source] fun box xmlHashScanFull( ptable: NullablePointer[Xmlhashtable ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val","title":"xmlHashScanFull"},{"location":"pony-libxml2-LibXML2/#parameters_379","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_414","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhashscanfull3","text":"[Source] fun box xmlHashScanFull3( ptable: NullablePointer[Xmlhashtable ref] ref, pname: String val, pname2: String val, pname3: String val, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val","title":"xmlHashScanFull3"},{"location":"pony-libxml2-LibXML2/#parameters_380","text":"ptable: NullablePointer [ Xmlhashtable ref] ref pname: String val pname2: String val pname3: String val pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_415","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetgenericerrorfunc","text":"[Source] fun box xmlSetGenericErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xmlSetGenericErrorFunc"},{"location":"pony-libxml2-LibXML2/#parameters_381","text":"pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_416","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#initgenericerrordefaultfunc","text":"[Source] fun box initGenericErrorDefaultFunc( phandler: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref) : None val","title":"initGenericErrorDefaultFunc"},{"location":"pony-libxml2-LibXML2/#parameters_382","text":"phandler: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_417","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetstructurederrorfunc","text":"[Source] fun box xmlSetStructuredErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xmlSetStructuredErrorFunc"},{"location":"pony-libxml2-LibXML2/#parameters_383","text":"pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_418","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsererror","text":"[Source] fun box xmlParserError( pctx: Pointer[U8 val] ref, pmsg: String val) : None val","title":"xmlParserError"},{"location":"pony-libxml2-LibXML2/#parameters_384","text":"pctx: Pointer [ U8 val] ref pmsg: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_419","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserwarning","text":"[Source] fun box xmlParserWarning( pctx: Pointer[U8 val] ref, pmsg: String val) : None val","title":"xmlParserWarning"},{"location":"pony-libxml2-LibXML2/#parameters_385","text":"pctx: Pointer [ U8 val] ref pmsg: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_420","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparservalidityerror","text":"[Source] fun box xmlParserValidityError( pctx: Pointer[U8 val] ref, pmsg: String val) : None val","title":"xmlParserValidityError"},{"location":"pony-libxml2-LibXML2/#parameters_386","text":"pctx: Pointer [ U8 val] ref pmsg: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_421","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparservaliditywarning","text":"[Source] fun box xmlParserValidityWarning( pctx: Pointer[U8 val] ref, pmsg: String val) : None val","title":"xmlParserValidityWarning"},{"location":"pony-libxml2-LibXML2/#parameters_387","text":"pctx: Pointer [ U8 val] ref pmsg: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_422","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserprintfileinfo","text":"[Source] fun box xmlParserPrintFileInfo( pinput: NullablePointer[Xmlparserinput ref] ref) : None val","title":"xmlParserPrintFileInfo"},{"location":"pony-libxml2-LibXML2/#parameters_388","text":"pinput: NullablePointer [ Xmlparserinput ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_423","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserprintfilecontext","text":"[Source] fun box xmlParserPrintFileContext( pinput: NullablePointer[Xmlparserinput ref] ref) : None val","title":"xmlParserPrintFileContext"},{"location":"pony-libxml2-LibXML2/#parameters_389","text":"pinput: NullablePointer [ Xmlparserinput ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_424","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetlasterror","text":"[Source] fun box xmlGetLastError() : NullablePointer[Xmlerror ref] ref","title":"xmlGetLastError"},{"location":"pony-libxml2-LibXML2/#returns_425","text":"NullablePointer [ Xmlerror ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlresetlasterror","text":"[Source] fun box xmlResetLastError() : None val","title":"xmlResetLastError"},{"location":"pony-libxml2-LibXML2/#returns_426","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtgetlasterror","text":"[Source] fun box xmlCtxtGetLastError( pctx: Pointer[U8 val] ref) : NullablePointer[Xmlerror ref] ref","title":"xmlCtxtGetLastError"},{"location":"pony-libxml2-LibXML2/#parameters_390","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_427","text":"NullablePointer [ Xmlerror ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlctxtresetlasterror","text":"[Source] fun box xmlCtxtResetLastError( pctx: Pointer[U8 val] ref) : None val","title":"xmlCtxtResetLastError"},{"location":"pony-libxml2-LibXML2/#parameters_391","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_428","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreseterror","text":"[Source] fun box xmlResetError( perr: NullablePointer[Xmlerror ref] ref) : None val","title":"xmlResetError"},{"location":"pony-libxml2-LibXML2/#parameters_392","text":"perr: NullablePointer [ Xmlerror ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_429","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyerror","text":"[Source] fun box xmlCopyError( pfrom: NullablePointer[Xmlerror ref] ref, pto: NullablePointer[Xmlerror ref] ref) : I32 val","title":"xmlCopyError"},{"location":"pony-libxml2-LibXML2/#parameters_393","text":"pfrom: NullablePointer [ Xmlerror ref] ref pto: NullablePointer [ Xmlerror ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_430","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistcreate","text":"[Source] fun box xmlListCreate( pdeallocator: Pointer[FUNCTIONPOINTER val] ref, pcompare: Pointer[FUNCTIONPOINTER val] ref) : NullablePointer[Xmllist ref] ref","title":"xmlListCreate"},{"location":"pony-libxml2-LibXML2/#parameters_394","text":"pdeallocator: Pointer [ FUNCTIONPOINTER val] ref pcompare: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_431","text":"NullablePointer [ Xmllist ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistdelete","text":"[Source] fun box xmlListDelete( pl: NullablePointer[Xmllist ref] ref) : None val","title":"xmlListDelete"},{"location":"pony-libxml2-LibXML2/#parameters_395","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_432","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistsearch","text":"[Source] fun box xmlListSearch( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : String val","title":"xmlListSearch"},{"location":"pony-libxml2-LibXML2/#parameters_396","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_433","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistreversesearch","text":"[Source] fun box xmlListReverseSearch( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : String val","title":"xmlListReverseSearch"},{"location":"pony-libxml2-LibXML2/#parameters_397","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_434","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistinsert","text":"[Source] fun box xmlListInsert( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlListInsert"},{"location":"pony-libxml2-LibXML2/#parameters_398","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_435","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistappend","text":"[Source] fun box xmlListAppend( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlListAppend"},{"location":"pony-libxml2-LibXML2/#parameters_399","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_436","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistremovefirst","text":"[Source] fun box xmlListRemoveFirst( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlListRemoveFirst"},{"location":"pony-libxml2-LibXML2/#parameters_400","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_437","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistremovelast","text":"[Source] fun box xmlListRemoveLast( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlListRemoveLast"},{"location":"pony-libxml2-LibXML2/#parameters_401","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_438","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistremoveall","text":"[Source] fun box xmlListRemoveAll( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlListRemoveAll"},{"location":"pony-libxml2-LibXML2/#parameters_402","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_439","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistclear","text":"[Source] fun box xmlListClear( pl: NullablePointer[Xmllist ref] ref) : None val","title":"xmlListClear"},{"location":"pony-libxml2-LibXML2/#parameters_403","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_440","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistempty","text":"[Source] fun box xmlListEmpty( pl: NullablePointer[Xmllist ref] ref) : I32 val","title":"xmlListEmpty"},{"location":"pony-libxml2-LibXML2/#parameters_404","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_441","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistfront","text":"[Source] fun box xmlListFront( pl: NullablePointer[Xmllist ref] ref) : NullablePointer[Xmllink ref] ref","title":"xmlListFront"},{"location":"pony-libxml2-LibXML2/#parameters_405","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_442","text":"NullablePointer [ Xmllink ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistend","text":"[Source] fun box xmlListEnd( pl: NullablePointer[Xmllist ref] ref) : NullablePointer[Xmllink ref] ref","title":"xmlListEnd"},{"location":"pony-libxml2-LibXML2/#parameters_406","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_443","text":"NullablePointer [ Xmllink ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistsize","text":"[Source] fun box xmlListSize( pl: NullablePointer[Xmllist ref] ref) : I32 val","title":"xmlListSize"},{"location":"pony-libxml2-LibXML2/#parameters_407","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_444","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistpopfront","text":"[Source] fun box xmlListPopFront( pl: NullablePointer[Xmllist ref] ref) : None val","title":"xmlListPopFront"},{"location":"pony-libxml2-LibXML2/#parameters_408","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_445","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistpopback","text":"[Source] fun box xmlListPopBack( pl: NullablePointer[Xmllist ref] ref) : None val","title":"xmlListPopBack"},{"location":"pony-libxml2-LibXML2/#parameters_409","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_446","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistpushfront","text":"[Source] fun box xmlListPushFront( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlListPushFront"},{"location":"pony-libxml2-LibXML2/#parameters_410","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_447","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistpushback","text":"[Source] fun box xmlListPushBack( pl: NullablePointer[Xmllist ref] ref, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlListPushBack"},{"location":"pony-libxml2-LibXML2/#parameters_411","text":"pl: NullablePointer [ Xmllist ref] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_448","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistreverse","text":"[Source] fun box xmlListReverse( pl: NullablePointer[Xmllist ref] ref) : None val","title":"xmlListReverse"},{"location":"pony-libxml2-LibXML2/#parameters_412","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_449","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistsort","text":"[Source] fun box xmlListSort( pl: NullablePointer[Xmllist ref] ref) : None val","title":"xmlListSort"},{"location":"pony-libxml2-LibXML2/#parameters_413","text":"pl: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_450","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistwalk","text":"[Source] fun box xmlListWalk( pl: NullablePointer[Xmllist ref] ref, pwalker: Pointer[FUNCTIONPOINTER val] ref, puser: Pointer[U8 val] ref) : None val","title":"xmlListWalk"},{"location":"pony-libxml2-LibXML2/#parameters_414","text":"pl: NullablePointer [ Xmllist ref] ref pwalker: Pointer [ FUNCTIONPOINTER val] ref puser: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_451","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistreversewalk","text":"[Source] fun box xmlListReverseWalk( pl: NullablePointer[Xmllist ref] ref, pwalker: Pointer[FUNCTIONPOINTER val] ref, puser: Pointer[U8 val] ref) : None val","title":"xmlListReverseWalk"},{"location":"pony-libxml2-LibXML2/#parameters_415","text":"pl: NullablePointer [ Xmllist ref] ref pwalker: Pointer [ FUNCTIONPOINTER val] ref puser: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_452","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistmerge","text":"[Source] fun box xmlListMerge( pl1: NullablePointer[Xmllist ref] ref, pl2: NullablePointer[Xmllist ref] ref) : None val","title":"xmlListMerge"},{"location":"pony-libxml2-LibXML2/#parameters_416","text":"pl1: NullablePointer [ Xmllist ref] ref pl2: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_453","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistdup","text":"[Source] fun box xmlListDup( pold: NullablePointer[Xmllist ref] ref) : NullablePointer[Xmllist ref] ref","title":"xmlListDup"},{"location":"pony-libxml2-LibXML2/#parameters_417","text":"pold: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_454","text":"NullablePointer [ Xmllist ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllistcopy","text":"[Source] fun box xmlListCopy( pcur: NullablePointer[Xmllist ref] ref, pold: NullablePointer[Xmllist ref] ref) : I32 val","title":"xmlListCopy"},{"location":"pony-libxml2-LibXML2/#parameters_418","text":"pcur: NullablePointer [ Xmllist ref] ref pold: NullablePointer [ Xmllist ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_455","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllinkgetdata","text":"[Source] fun box xmlLinkGetData( plk: NullablePointer[Xmllink ref] ref) : String val","title":"xmlLinkGetData"},{"location":"pony-libxml2-LibXML2/#parameters_419","text":"plk: NullablePointer [ Xmllink ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_456","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewautomata","text":"[Source] fun box xmlNewAutomata() : NullablePointer[Xmlautomata ref] ref","title":"xmlNewAutomata"},{"location":"pony-libxml2-LibXML2/#returns_457","text":"NullablePointer [ Xmlautomata ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeautomata","text":"[Source] fun box xmlFreeAutomata( pam: NullablePointer[Xmlautomata ref] ref) : None val","title":"xmlFreeAutomata"},{"location":"pony-libxml2-LibXML2/#parameters_420","text":"pam: NullablePointer [ Xmlautomata ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_458","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatagetinitstate","text":"[Source] fun box xmlAutomataGetInitState( pam: NullablePointer[Xmlautomata ref] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataGetInitState"},{"location":"pony-libxml2-LibXML2/#parameters_421","text":"pam: NullablePointer [ Xmlautomata ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_459","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatasetfinalstate","text":"[Source] fun box xmlAutomataSetFinalState( pam: NullablePointer[Xmlautomata ref] ref, pstate: NullablePointer[Xmlautomatastate ref] ref) : I32 val","title":"xmlAutomataSetFinalState"},{"location":"pony-libxml2-LibXML2/#parameters_422","text":"pam: NullablePointer [ Xmlautomata ref] ref pstate: NullablePointer [ Xmlautomatastate ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_460","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewstate","text":"[Source] fun box xmlAutomataNewState( pam: NullablePointer[Xmlautomata ref] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewState"},{"location":"pony-libxml2-LibXML2/#parameters_423","text":"pam: NullablePointer [ Xmlautomata ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_461","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewtransition","text":"[Source] fun box xmlAutomataNewTransition( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewTransition"},{"location":"pony-libxml2-LibXML2/#parameters_424","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_462","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewtransition2","text":"[Source] fun box xmlAutomataNewTransition2( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewTransition2"},{"location":"pony-libxml2-LibXML2/#parameters_425","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_463","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewnegtrans","text":"[Source] fun box xmlAutomataNewNegTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewNegTrans"},{"location":"pony-libxml2-LibXML2/#parameters_426","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_464","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewcounttrans","text":"[Source] fun box xmlAutomataNewCountTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewCountTrans"},{"location":"pony-libxml2-LibXML2/#parameters_427","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_465","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewcounttrans2","text":"[Source] fun box xmlAutomataNewCountTrans2( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewCountTrans2"},{"location":"pony-libxml2-LibXML2/#parameters_428","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_466","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewoncetrans","text":"[Source] fun box xmlAutomataNewOnceTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewOnceTrans"},{"location":"pony-libxml2-LibXML2/#parameters_429","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_467","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewoncetrans2","text":"[Source] fun box xmlAutomataNewOnceTrans2( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, ptoken: String val, ptoken2: String val, pmin: I32 val, pmax: I32 val, pdata: Pointer[U8 val] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewOnceTrans2"},{"location":"pony-libxml2-LibXML2/#parameters_430","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref ptoken: String val ptoken2: String val pmin: I32 val pmax: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_468","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewalltrans","text":"[Source] fun box xmlAutomataNewAllTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, plax: I32 val) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewAllTrans"},{"location":"pony-libxml2-LibXML2/#parameters_431","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref plax: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_469","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewepsilon","text":"[Source] fun box xmlAutomataNewEpsilon( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewEpsilon"},{"location":"pony-libxml2-LibXML2/#parameters_432","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_470","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewcountedtrans","text":"[Source] fun box xmlAutomataNewCountedTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, pcounter: I32 val) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewCountedTrans"},{"location":"pony-libxml2-LibXML2/#parameters_433","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref pcounter: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_471","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewcountertrans","text":"[Source] fun box xmlAutomataNewCounterTrans( pam: NullablePointer[Xmlautomata ref] ref, pfrom: NullablePointer[Xmlautomatastate ref] ref, pto: NullablePointer[Xmlautomatastate ref] ref, pcounter: I32 val) : NullablePointer[Xmlautomatastate ref] ref","title":"xmlAutomataNewCounterTrans"},{"location":"pony-libxml2-LibXML2/#parameters_434","text":"pam: NullablePointer [ Xmlautomata ref] ref pfrom: NullablePointer [ Xmlautomatastate ref] ref pto: NullablePointer [ Xmlautomatastate ref] ref pcounter: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_472","text":"NullablePointer [ Xmlautomatastate ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatanewcounter","text":"[Source] fun box xmlAutomataNewCounter( pam: NullablePointer[Xmlautomata ref] ref, pmin: I32 val, pmax: I32 val) : I32 val","title":"xmlAutomataNewCounter"},{"location":"pony-libxml2-LibXML2/#parameters_435","text":"pam: NullablePointer [ Xmlautomata ref] ref pmin: I32 val pmax: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_473","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomatacompile","text":"[Source] fun box xmlAutomataCompile( pam: NullablePointer[Xmlautomata ref] ref) : NullablePointer[Xmlregexp ref] ref","title":"xmlAutomataCompile"},{"location":"pony-libxml2-LibXML2/#parameters_436","text":"pam: NullablePointer [ Xmlautomata ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_474","text":"NullablePointer [ Xmlregexp ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlautomataisdeterminist","text":"[Source] fun box xmlAutomataIsDeterminist( pam: NullablePointer[Xmlautomata ref] ref) : I32 val","title":"xmlAutomataIsDeterminist"},{"location":"pony-libxml2-LibXML2/#parameters_437","text":"pam: NullablePointer [ Xmlautomata ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_475","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdnotationdecl","text":"[Source] fun box xmlAddNotationDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdtd: NullablePointer[Xmldtd ref] ref, pname: String val, pPublicID: String val, pSystemID: String val) : NullablePointer[Xmlnotation ref] ref","title":"xmlAddNotationDecl"},{"location":"pony-libxml2-LibXML2/#parameters_438","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdtd: NullablePointer [ Xmldtd ref] ref pname: String val pPublicID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_476","text":"NullablePointer [ Xmlnotation ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopynotationtable","text":"[Source] fun box xmlCopyNotationTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref","title":"xmlCopyNotationTable"},{"location":"pony-libxml2-LibXML2/#parameters_439","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_477","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreenotationtable","text":"[Source] fun box xmlFreeNotationTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlFreeNotationTable"},{"location":"pony-libxml2-LibXML2/#parameters_440","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_478","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpnotationdecl","text":"[Source] fun box xmlDumpNotationDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pnota: NullablePointer[Xmlnotation ref] ref) : None val","title":"xmlDumpNotationDecl"},{"location":"pony-libxml2-LibXML2/#parameters_441","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pnota: NullablePointer [ Xmlnotation ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_479","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpnotationtable","text":"[Source] fun box xmlDumpNotationTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlDumpNotationTable"},{"location":"pony-libxml2-LibXML2/#parameters_442","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_480","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewelementcontent","text":"[Source] fun box xmlNewElementContent( pname: String val, ptype: I32 val) : NullablePointer[Xmlelementcontent ref] ref","title":"xmlNewElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_443","text":"pname: String val ptype: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_481","text":"NullablePointer [ Xmlelementcontent ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyelementcontent","text":"[Source] fun box xmlCopyElementContent( pcontent: NullablePointer[Xmlelementcontent ref] ref) : NullablePointer[Xmlelementcontent ref] ref","title":"xmlCopyElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_444","text":"pcontent: NullablePointer [ Xmlelementcontent ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_482","text":"NullablePointer [ Xmlelementcontent ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeelementcontent","text":"[Source] fun box xmlFreeElementContent( pcur: NullablePointer[Xmlelementcontent ref] ref) : None val","title":"xmlFreeElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_445","text":"pcur: NullablePointer [ Xmlelementcontent ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_483","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewdocelementcontent","text":"[Source] fun box xmlNewDocElementContent( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, ptype: I32 val) : NullablePointer[Xmlelementcontent ref] ref","title":"xmlNewDocElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_446","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val ptype: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_484","text":"NullablePointer [ Xmlelementcontent ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopydocelementcontent","text":"[Source] fun box xmlCopyDocElementContent( pdoc: NullablePointer[Xmldoc ref] tag, pcontent: NullablePointer[Xmlelementcontent ref] ref) : NullablePointer[Xmlelementcontent ref] ref","title":"xmlCopyDocElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_447","text":"pdoc: NullablePointer [ Xmldoc ref] tag pcontent: NullablePointer [ Xmlelementcontent ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_485","text":"NullablePointer [ Xmlelementcontent ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreedocelementcontent","text":"[Source] fun box xmlFreeDocElementContent( pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlelementcontent ref] ref) : None val","title":"xmlFreeDocElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_448","text":"pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlelementcontent ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_486","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsnprintfelementcontent","text":"[Source] fun box xmlSnprintfElementContent( pbuf: String val, psize: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref, penglob: I32 val) : None val","title":"xmlSnprintfElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_449","text":"pbuf: String val psize: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref penglob: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_487","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsprintfelementcontent","text":"[Source] fun box xmlSprintfElementContent( pbuf: String val, pcontent: NullablePointer[Xmlelementcontent ref] ref, penglob: I32 val) : None val","title":"xmlSprintfElementContent"},{"location":"pony-libxml2-LibXML2/#parameters_450","text":"pbuf: String val pcontent: NullablePointer [ Xmlelementcontent ref] ref penglob: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_488","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdelementdecl","text":"[Source] fun box xmlAddElementDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdtd: NullablePointer[Xmldtd ref] ref, pname: String val, ptype: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref) : NullablePointer[Xmlelement ref] ref","title":"xmlAddElementDecl"},{"location":"pony-libxml2-LibXML2/#parameters_451","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdtd: NullablePointer [ Xmldtd ref] ref pname: String val ptype: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_489","text":"NullablePointer [ Xmlelement ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyelementtable","text":"[Source] fun box xmlCopyElementTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref","title":"xmlCopyElementTable"},{"location":"pony-libxml2-LibXML2/#parameters_452","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_490","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeelementtable","text":"[Source] fun box xmlFreeElementTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlFreeElementTable"},{"location":"pony-libxml2-LibXML2/#parameters_453","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_491","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpelementtable","text":"[Source] fun box xmlDumpElementTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlDumpElementTable"},{"location":"pony-libxml2-LibXML2/#parameters_454","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_492","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpelementdecl","text":"[Source] fun box xmlDumpElementDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pelem: NullablePointer[Xmlelement ref] ref) : None val","title":"xmlDumpElementDecl"},{"location":"pony-libxml2-LibXML2/#parameters_455","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pelem: NullablePointer [ Xmlelement ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_493","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreateenumeration","text":"[Source] fun box xmlCreateEnumeration( pname: String val) : NullablePointer[Xmlenumeration ref] ref","title":"xmlCreateEnumeration"},{"location":"pony-libxml2-LibXML2/#parameters_456","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_494","text":"NullablePointer [ Xmlenumeration ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeenumeration","text":"[Source] fun box xmlFreeEnumeration( pcur: NullablePointer[Xmlenumeration ref] ref) : None val","title":"xmlFreeEnumeration"},{"location":"pony-libxml2-LibXML2/#parameters_457","text":"pcur: NullablePointer [ Xmlenumeration ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_495","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyenumeration","text":"[Source] fun box xmlCopyEnumeration( pcur: NullablePointer[Xmlenumeration ref] ref) : NullablePointer[Xmlenumeration ref] ref","title":"xmlCopyEnumeration"},{"location":"pony-libxml2-LibXML2/#parameters_458","text":"pcur: NullablePointer [ Xmlenumeration ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_496","text":"NullablePointer [ Xmlenumeration ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdattributedecl","text":"[Source] fun box xmlAddAttributeDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdtd: NullablePointer[Xmldtd ref] ref, pelem: String val, pname: String val, pns: String val, ptype: I32 val, pdef: I32 val, pdefaultValue: String val, ptree: NullablePointer[Xmlenumeration ref] ref) : NullablePointer[Xmlattribute ref] ref","title":"xmlAddAttributeDecl"},{"location":"pony-libxml2-LibXML2/#parameters_459","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdtd: NullablePointer [ Xmldtd ref] ref pelem: String val pname: String val pns: String val ptype: I32 val pdef: I32 val pdefaultValue: String val ptree: NullablePointer [ Xmlenumeration ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_497","text":"NullablePointer [ Xmlattribute ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopyattributetable","text":"[Source] fun box xmlCopyAttributeTable( ptable: NullablePointer[Xmlhashtable ref] ref) : NullablePointer[Xmlhashtable ref] ref","title":"xmlCopyAttributeTable"},{"location":"pony-libxml2-LibXML2/#parameters_460","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_498","text":"NullablePointer [ Xmlhashtable ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeattributetable","text":"[Source] fun box xmlFreeAttributeTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlFreeAttributeTable"},{"location":"pony-libxml2-LibXML2/#parameters_461","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_499","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpattributetable","text":"[Source] fun box xmlDumpAttributeTable( pbuf: NullablePointer[Xmlbuffer ref] ref, ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlDumpAttributeTable"},{"location":"pony-libxml2-LibXML2/#parameters_462","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_500","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldumpattributedecl","text":"[Source] fun box xmlDumpAttributeDecl( pbuf: NullablePointer[Xmlbuffer ref] ref, pattr: NullablePointer[Xmlattribute ref] ref) : None val","title":"xmlDumpAttributeDecl"},{"location":"pony-libxml2-LibXML2/#parameters_463","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pattr: NullablePointer [ Xmlattribute ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_501","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdid","text":"[Source] fun box xmlAddID( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val, pattr: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlid ref] ref","title":"xmlAddID"},{"location":"pony-libxml2-LibXML2/#parameters_464","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val pattr: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_502","text":"NullablePointer [ Xmlid ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeidtable","text":"[Source] fun box xmlFreeIDTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlFreeIDTable"},{"location":"pony-libxml2-LibXML2/#parameters_465","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_503","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetid","text":"[Source] fun box xmlGetID( pdoc: NullablePointer[Xmldoc ref] tag, pID: String val) : NullablePointer[Xmlattr ref] ref","title":"xmlGetID"},{"location":"pony-libxml2-LibXML2/#parameters_466","text":"pdoc: NullablePointer [ Xmldoc ref] tag pID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_504","text":"NullablePointer [ Xmlattr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisid","text":"[Source] fun box xmlIsID( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pattr: NullablePointer[Xmlattr ref] ref) : I32 val","title":"xmlIsID"},{"location":"pony-libxml2-LibXML2/#parameters_467","text":"pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pattr: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_505","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlremoveid","text":"[Source] fun box xmlRemoveID( pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattr ref] ref) : I32 val","title":"xmlRemoveID"},{"location":"pony-libxml2-LibXML2/#parameters_468","text":"pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_506","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdref","text":"[Source] fun box xmlAddRef( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pvalue: String val, pattr: NullablePointer[Xmlattr ref] ref) : NullablePointer[Xmlref ref] ref","title":"xmlAddRef"},{"location":"pony-libxml2-LibXML2/#parameters_469","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pvalue: String val pattr: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_507","text":"NullablePointer [ Xmlref ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreereftable","text":"[Source] fun box xmlFreeRefTable( ptable: NullablePointer[Xmlhashtable ref] ref) : None val","title":"xmlFreeRefTable"},{"location":"pony-libxml2-LibXML2/#parameters_470","text":"ptable: NullablePointer [ Xmlhashtable ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_508","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisref","text":"[Source] fun box xmlIsRef( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pattr: NullablePointer[Xmlattr ref] ref) : I32 val","title":"xmlIsRef"},{"location":"pony-libxml2-LibXML2/#parameters_471","text":"pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pattr: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_509","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlremoveref","text":"[Source] fun box xmlRemoveRef( pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattr ref] ref) : I32 val","title":"xmlRemoveRef"},{"location":"pony-libxml2-LibXML2/#parameters_472","text":"pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_510","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetrefs","text":"[Source] fun box xmlGetRefs( pdoc: NullablePointer[Xmldoc ref] tag, pID: String val) : NullablePointer[Xmllist ref] ref","title":"xmlGetRefs"},{"location":"pony-libxml2-LibXML2/#parameters_473","text":"pdoc: NullablePointer [ Xmldoc ref] tag pID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_511","text":"NullablePointer [ Xmllist ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewvalidctxt","text":"[Source] fun box xmlNewValidCtxt() : NullablePointer[Xmlvalidctxt ref] ref","title":"xmlNewValidCtxt"},{"location":"pony-libxml2-LibXML2/#returns_512","text":"NullablePointer [ Xmlvalidctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreevalidctxt","text":"[Source] fun box xmlFreeValidCtxt( p: NullablePointer[Xmlvalidctxt ref] ref) : None val","title":"xmlFreeValidCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_474","text":"p: NullablePointer [ Xmlvalidctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_513","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateroot","text":"[Source] fun box xmlValidateRoot( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlValidateRoot"},{"location":"pony-libxml2-LibXML2/#parameters_475","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_514","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateelementdecl","text":"[Source] fun box xmlValidateElementDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlelement ref] ref) : I32 val","title":"xmlValidateElementDecl"},{"location":"pony-libxml2-LibXML2/#parameters_476","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlelement ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_515","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidnormalizeattributevalue","text":"[Source] fun box xmlValidNormalizeAttributeValue( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : String val","title":"xmlValidNormalizeAttributeValue"},{"location":"pony-libxml2-LibXML2/#parameters_477","text":"pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_516","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidctxtnormalizeattributevalue","text":"[Source] fun box xmlValidCtxtNormalizeAttributeValue( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pname: String val, pvalue: String val) : String val","title":"xmlValidCtxtNormalizeAttributeValue"},{"location":"pony-libxml2-LibXML2/#parameters_478","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_517","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateattributedecl","text":"[Source] fun box xmlValidateAttributeDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pattr: NullablePointer[Xmlattribute ref] ref) : I32 val","title":"xmlValidateAttributeDecl"},{"location":"pony-libxml2-LibXML2/#parameters_479","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pattr: NullablePointer [ Xmlattribute ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_518","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateattributevalue","text":"[Source] fun box xmlValidateAttributeValue( ptype: I32 val, pvalue: String val) : I32 val","title":"xmlValidateAttributeValue"},{"location":"pony-libxml2-LibXML2/#parameters_480","text":"ptype: I32 val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_519","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatenotationdecl","text":"[Source] fun box xmlValidateNotationDecl( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pnota: NullablePointer[Xmlnotation ref] ref) : I32 val","title":"xmlValidateNotationDecl"},{"location":"pony-libxml2-LibXML2/#parameters_481","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pnota: NullablePointer [ Xmlnotation ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_520","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatedtd","text":"[Source] fun box xmlValidateDtd( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pdtd: NullablePointer[Xmldtd ref] ref) : I32 val","title":"xmlValidateDtd"},{"location":"pony-libxml2-LibXML2/#parameters_482","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pdtd: NullablePointer [ Xmldtd ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_521","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatedtdfinal","text":"[Source] fun box xmlValidateDtdFinal( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlValidateDtdFinal"},{"location":"pony-libxml2-LibXML2/#parameters_483","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_522","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatedocument","text":"[Source] fun box xmlValidateDocument( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlValidateDocument"},{"location":"pony-libxml2-LibXML2/#parameters_484","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_523","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateelement","text":"[Source] fun box xmlValidateElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlValidateElement"},{"location":"pony-libxml2-LibXML2/#parameters_485","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_524","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateoneelement","text":"[Source] fun box xmlValidateOneElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlValidateOneElement"},{"location":"pony-libxml2-LibXML2/#parameters_486","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_525","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateoneattribute","text":"[Source] fun box xmlValidateOneAttribute( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pattr: NullablePointer[Xmlattr ref] ref, pvalue: String val) : I32 val","title":"xmlValidateOneAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_487","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pattr: NullablePointer [ Xmlattr ref] ref pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_526","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidateonenamespace","text":"[Source] fun box xmlValidateOneNamespace( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pprefix: String val, pns: NullablePointer[Xmlns ref] ref, pvalue: String val) : I32 val","title":"xmlValidateOneNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_488","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pprefix: String val pns: NullablePointer [ Xmlns ref] ref pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_527","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatedocumentfinal","text":"[Source] fun box xmlValidateDocumentFinal( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlValidateDocumentFinal"},{"location":"pony-libxml2-LibXML2/#parameters_489","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_528","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatenotationuse","text":"[Source] fun box xmlValidateNotationUse( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pnotationName: String val) : I32 val","title":"xmlValidateNotationUse"},{"location":"pony-libxml2-LibXML2/#parameters_490","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pnotationName: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_529","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlismixedelement","text":"[Source] fun box xmlIsMixedElement( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val) : I32 val","title":"xmlIsMixedElement"},{"location":"pony-libxml2-LibXML2/#parameters_491","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_530","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdtdattrdesc","text":"[Source] fun box xmlGetDtdAttrDesc( pdtd: NullablePointer[Xmldtd ref] ref, pelem: String val, pname: String val) : NullablePointer[Xmlattribute ref] ref","title":"xmlGetDtdAttrDesc"},{"location":"pony-libxml2-LibXML2/#parameters_492","text":"pdtd: NullablePointer [ Xmldtd ref] ref pelem: String val pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_531","text":"NullablePointer [ Xmlattribute ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdtdqattrdesc","text":"[Source] fun box xmlGetDtdQAttrDesc( pdtd: NullablePointer[Xmldtd ref] ref, pelem: String val, pname: String val, pprefix: String val) : NullablePointer[Xmlattribute ref] ref","title":"xmlGetDtdQAttrDesc"},{"location":"pony-libxml2-LibXML2/#parameters_493","text":"pdtd: NullablePointer [ Xmldtd ref] ref pelem: String val pname: String val pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_532","text":"NullablePointer [ Xmlattribute ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdtdnotationdesc","text":"[Source] fun box xmlGetDtdNotationDesc( pdtd: NullablePointer[Xmldtd ref] ref, pname: String val) : NullablePointer[Xmlnotation ref] ref","title":"xmlGetDtdNotationDesc"},{"location":"pony-libxml2-LibXML2/#parameters_494","text":"pdtd: NullablePointer [ Xmldtd ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_533","text":"NullablePointer [ Xmlnotation ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdtdqelementdesc","text":"[Source] fun box xmlGetDtdQElementDesc( pdtd: NullablePointer[Xmldtd ref] ref, pname: String val, pprefix: String val) : NullablePointer[Xmlelement ref] ref","title":"xmlGetDtdQElementDesc"},{"location":"pony-libxml2-LibXML2/#parameters_495","text":"pdtd: NullablePointer [ Xmldtd ref] ref pname: String val pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_534","text":"NullablePointer [ Xmlelement ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetdtdelementdesc","text":"[Source] fun box xmlGetDtdElementDesc( pdtd: NullablePointer[Xmldtd ref] ref, pname: String val) : NullablePointer[Xmlelement ref] ref","title":"xmlGetDtdElementDesc"},{"location":"pony-libxml2-LibXML2/#parameters_496","text":"pdtd: NullablePointer [ Xmldtd ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_535","text":"NullablePointer [ Xmlelement ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidgetpotentialchildren","text":"[Source] fun box xmlValidGetPotentialChildren( pctree: NullablePointer[Xmlelementcontent ref] ref, pnames: Pointer[Pointer[U8 val] tag] ref, plen: Pointer[I32 val] ref, pmax: I32 val) : I32 val","title":"xmlValidGetPotentialChildren"},{"location":"pony-libxml2-LibXML2/#parameters_497","text":"pctree: NullablePointer [ Xmlelementcontent ref] ref pnames: Pointer [ Pointer [ U8 val] tag] ref plen: Pointer [ I32 val] ref pmax: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_536","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidgetvalidelements","text":"[Source] fun box xmlValidGetValidElements( pprev: NullablePointer[Xmlnode ref] ref, pnext: NullablePointer[Xmlnode ref] ref, pnames: Pointer[Pointer[U8 val] tag] ref, pmax: I32 val) : I32 val","title":"xmlValidGetValidElements"},{"location":"pony-libxml2-LibXML2/#parameters_498","text":"pprev: NullablePointer [ Xmlnode ref] ref pnext: NullablePointer [ Xmlnode ref] ref pnames: Pointer [ Pointer [ U8 val] tag] ref pmax: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_537","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatenamevalue","text":"[Source] fun box xmlValidateNameValue( pvalue: String val) : I32 val","title":"xmlValidateNameValue"},{"location":"pony-libxml2-LibXML2/#parameters_499","text":"pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_538","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatenamesvalue","text":"[Source] fun box xmlValidateNamesValue( pvalue: String val) : I32 val","title":"xmlValidateNamesValue"},{"location":"pony-libxml2-LibXML2/#parameters_500","text":"pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_539","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatenmtokenvalue","text":"[Source] fun box xmlValidateNmtokenValue( pvalue: String val) : I32 val","title":"xmlValidateNmtokenValue"},{"location":"pony-libxml2-LibXML2/#parameters_501","text":"pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_540","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatenmtokensvalue","text":"[Source] fun box xmlValidateNmtokensValue( pvalue: String val) : I32 val","title":"xmlValidateNmtokensValue"},{"location":"pony-libxml2-LibXML2/#parameters_502","text":"pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_541","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidbuildcontentmodel","text":"[Source] fun box xmlValidBuildContentModel( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pelem: NullablePointer[Xmlelement ref] ref) : I32 val","title":"xmlValidBuildContentModel"},{"location":"pony-libxml2-LibXML2/#parameters_503","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pelem: NullablePointer [ Xmlelement ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_542","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatepushelement","text":"[Source] fun box xmlValidatePushElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pqname: String val) : I32 val","title":"xmlValidatePushElement"},{"location":"pony-libxml2-LibXML2/#parameters_504","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pqname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_543","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatepushcdata","text":"[Source] fun box xmlValidatePushCData( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdata: String val, plen: I32 val) : I32 val","title":"xmlValidatePushCData"},{"location":"pony-libxml2-LibXML2/#parameters_505","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdata: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_544","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlvalidatepopelement","text":"[Source] fun box xmlValidatePopElement( pctxt: NullablePointer[Xmlvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref, pqname: String val) : I32 val","title":"xmlValidatePopElement"},{"location":"pony-libxml2-LibXML2/#parameters_506","text":"pctxt: NullablePointer [ Xmlvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref pqname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_545","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitcharencodinghandlers","text":"[Source] fun box xmlInitCharEncodingHandlers() : None val","title":"xmlInitCharEncodingHandlers"},{"location":"pony-libxml2-LibXML2/#returns_546","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupcharencodinghandlers","text":"[Source] fun box xmlCleanupCharEncodingHandlers() : None val","title":"xmlCleanupCharEncodingHandlers"},{"location":"pony-libxml2-LibXML2/#returns_547","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregistercharencodinghandler","text":"[Source] fun box xmlRegisterCharEncodingHandler( phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : None val","title":"xmlRegisterCharEncodingHandler"},{"location":"pony-libxml2-LibXML2/#parameters_507","text":"phandler: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_548","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetcharencodinghandler","text":"[Source] fun box xmlGetCharEncodingHandler( penc: I32 val) : NullablePointer[Xmlcharencodinghandler ref] ref","title":"xmlGetCharEncodingHandler"},{"location":"pony-libxml2-LibXML2/#parameters_508","text":"penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_549","text":"NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfindcharencodinghandler","text":"[Source] fun box xmlFindCharEncodingHandler( pname: String val) : NullablePointer[Xmlcharencodinghandler ref] ref","title":"xmlFindCharEncodingHandler"},{"location":"pony-libxml2-LibXML2/#parameters_509","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_550","text":"NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewcharencodinghandler","text":"[Source] fun box xmlNewCharEncodingHandler( pname: String val, pinput: Pointer[FUNCTIONPOINTER val] ref, poutput: Pointer[FUNCTIONPOINTER val] ref) : NullablePointer[Xmlcharencodinghandler ref] ref","title":"xmlNewCharEncodingHandler"},{"location":"pony-libxml2-LibXML2/#parameters_510","text":"pname: String val pinput: Pointer [ FUNCTIONPOINTER val] ref poutput: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_551","text":"NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmladdencodingalias","text":"[Source] fun box xmlAddEncodingAlias( pname: String val, palias: String val) : I32 val","title":"xmlAddEncodingAlias"},{"location":"pony-libxml2-LibXML2/#parameters_511","text":"pname: String val palias: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_552","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldelencodingalias","text":"[Source] fun box xmlDelEncodingAlias( palias: String val) : I32 val","title":"xmlDelEncodingAlias"},{"location":"pony-libxml2-LibXML2/#parameters_512","text":"palias: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_553","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetencodingalias","text":"[Source] fun box xmlGetEncodingAlias( palias: String val) : String val","title":"xmlGetEncodingAlias"},{"location":"pony-libxml2-LibXML2/#parameters_513","text":"palias: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_554","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupencodingaliases","text":"[Source] fun box xmlCleanupEncodingAliases() : None val","title":"xmlCleanupEncodingAliases"},{"location":"pony-libxml2-LibXML2/#returns_555","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsecharencoding","text":"[Source] fun box xmlParseCharEncoding( pname: String val) : I32 val","title":"xmlParseCharEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_514","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_556","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlgetcharencodingname","text":"[Source] fun box xmlGetCharEncodingName( penc: I32 val) : String val","title":"xmlGetCharEncodingName"},{"location":"pony-libxml2-LibXML2/#parameters_515","text":"penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_557","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldetectcharencoding","text":"[Source] fun box xmlDetectCharEncoding( pin: String val, plen: I32 val) : I32 val","title":"xmlDetectCharEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_516","text":"pin: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_558","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcharencoutfunc","text":"[Source] fun box xmlCharEncOutFunc( phandler: NullablePointer[Xmlcharencodinghandler ref] ref, pout: NullablePointer[Xmlbuffer ref] ref, pin: NullablePointer[Xmlbuffer ref] ref) : I32 val","title":"xmlCharEncOutFunc"},{"location":"pony-libxml2-LibXML2/#parameters_517","text":"phandler: NullablePointer [ Xmlcharencodinghandler ref] ref pout: NullablePointer [ Xmlbuffer ref] ref pin: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_559","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcharencinfunc","text":"[Source] fun box xmlCharEncInFunc( phandler: NullablePointer[Xmlcharencodinghandler ref] ref, pout: NullablePointer[Xmlbuffer ref] ref, pin: NullablePointer[Xmlbuffer ref] ref) : I32 val","title":"xmlCharEncInFunc"},{"location":"pony-libxml2-LibXML2/#parameters_518","text":"phandler: NullablePointer [ Xmlcharencodinghandler ref] ref pout: NullablePointer [ Xmlbuffer ref] ref pin: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_560","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcharencfirstline","text":"[Source] fun box xmlCharEncFirstLine( phandler: NullablePointer[Xmlcharencodinghandler ref] ref, pout: NullablePointer[Xmlbuffer ref] ref, pin: NullablePointer[Xmlbuffer ref] ref) : I32 val","title":"xmlCharEncFirstLine"},{"location":"pony-libxml2-LibXML2/#parameters_519","text":"phandler: NullablePointer [ Xmlcharencodinghandler ref] ref pout: NullablePointer [ Xmlbuffer ref] ref pin: NullablePointer [ Xmlbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_561","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcharencclosefunc","text":"[Source] fun box xmlCharEncCloseFunc( phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : I32 val","title":"xmlCharEncCloseFunc"},{"location":"pony-libxml2-LibXML2/#parameters_520","text":"phandler: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_562","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#utf8toisolat1","text":"[Source] fun box utf8Toisolat1( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref) : I32 val","title":"utf8Toisolat1"},{"location":"pony-libxml2-LibXML2/#parameters_521","text":"pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_563","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#isolat1toutf8","text":"[Source] fun box isolat1ToUTF8( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref) : I32 val","title":"isolat1ToUTF8"},{"location":"pony-libxml2-LibXML2/#parameters_522","text":"pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_564","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xlinkgetdefaultdetect","text":"[Source] fun box xlinkGetDefaultDetect() : Pointer[FUNCTIONPOINTER val] ref","title":"xlinkGetDefaultDetect"},{"location":"pony-libxml2-LibXML2/#returns_565","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xlinksetdefaultdetect","text":"[Source] fun box xlinkSetDefaultDetect( pfunc: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xlinkSetDefaultDetect"},{"location":"pony-libxml2-LibXML2/#parameters_523","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_566","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xlinkgetdefaulthandler","text":"[Source] fun box xlinkGetDefaultHandler() : NullablePointer[Xlinkhandler ref] ref","title":"xlinkGetDefaultHandler"},{"location":"pony-libxml2-LibXML2/#returns_567","text":"NullablePointer [ Xlinkhandler ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xlinksetdefaulthandler","text":"[Source] fun box xlinkSetDefaultHandler( phandler: NullablePointer[Xlinkhandler ref] ref) : None val","title":"xlinkSetDefaultHandler"},{"location":"pony-libxml2-LibXML2/#parameters_524","text":"phandler: NullablePointer [ Xlinkhandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_568","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xlinkislink","text":"[Source] fun box xlinkIsLink( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xlinkIsLink"},{"location":"pony-libxml2-LibXML2/#parameters_525","text":"pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_569","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2getpublicid","text":"[Source] fun box xmlSAX2GetPublicId( pctx: Pointer[U8 val] ref) : String val","title":"xmlSAX2GetPublicId"},{"location":"pony-libxml2-LibXML2/#parameters_526","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_570","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2getsystemid","text":"[Source] fun box xmlSAX2GetSystemId( pctx: Pointer[U8 val] ref) : String val","title":"xmlSAX2GetSystemId"},{"location":"pony-libxml2-LibXML2/#parameters_527","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_571","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2setdocumentlocator","text":"[Source] fun box xmlSAX2SetDocumentLocator( pctx: Pointer[U8 val] ref, ploc: NullablePointer[Xmlsaxlocator ref] ref) : None val","title":"xmlSAX2SetDocumentLocator"},{"location":"pony-libxml2-LibXML2/#parameters_528","text":"pctx: Pointer [ U8 val] ref ploc: NullablePointer [ Xmlsaxlocator ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_572","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2getlinenumber","text":"[Source] fun box xmlSAX2GetLineNumber( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlSAX2GetLineNumber"},{"location":"pony-libxml2-LibXML2/#parameters_529","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_573","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2getcolumnnumber","text":"[Source] fun box xmlSAX2GetColumnNumber( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlSAX2GetColumnNumber"},{"location":"pony-libxml2-LibXML2/#parameters_530","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_574","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2isstandalone","text":"[Source] fun box xmlSAX2IsStandalone( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlSAX2IsStandalone"},{"location":"pony-libxml2-LibXML2/#parameters_531","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_575","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2hasinternalsubset","text":"[Source] fun box xmlSAX2HasInternalSubset( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlSAX2HasInternalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_532","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_576","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2hasexternalsubset","text":"[Source] fun box xmlSAX2HasExternalSubset( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlSAX2HasExternalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_533","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_577","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2internalsubset","text":"[Source] fun box xmlSAX2InternalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val","title":"xmlSAX2InternalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_534","text":"pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_578","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2externalsubset","text":"[Source] fun box xmlSAX2ExternalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val","title":"xmlSAX2ExternalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_535","text":"pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_579","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2getentity","text":"[Source] fun box xmlSAX2GetEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlSAX2GetEntity"},{"location":"pony-libxml2-LibXML2/#parameters_536","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_580","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2getparameterentity","text":"[Source] fun box xmlSAX2GetParameterEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref","title":"xmlSAX2GetParameterEntity"},{"location":"pony-libxml2-LibXML2/#parameters_537","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_581","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2resolveentity","text":"[Source] fun box xmlSAX2ResolveEntity( pctx: Pointer[U8 val] ref, ppublicId: String val, psystemId: String val) : NullablePointer[Xmlparserinput ref] ref","title":"xmlSAX2ResolveEntity"},{"location":"pony-libxml2-LibXML2/#parameters_538","text":"pctx: Pointer [ U8 val] ref ppublicId: String val psystemId: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_582","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2entitydecl","text":"[Source] fun box xmlSAX2EntityDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, ppublicId: String val, psystemId: String val, pcontent: String val) : None val","title":"xmlSAX2EntityDecl"},{"location":"pony-libxml2-LibXML2/#parameters_539","text":"pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val ppublicId: String val psystemId: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_583","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2attributedecl","text":"[Source] fun box xmlSAX2AttributeDecl( pctx: Pointer[U8 val] ref, pelem: String val, pfullname: String val, ptype: I32 val, pdef: I32 val, pdefaultValue: String val, ptree: NullablePointer[Xmlenumeration ref] ref) : None val","title":"xmlSAX2AttributeDecl"},{"location":"pony-libxml2-LibXML2/#parameters_540","text":"pctx: Pointer [ U8 val] ref pelem: String val pfullname: String val ptype: I32 val pdef: I32 val pdefaultValue: String val ptree: NullablePointer [ Xmlenumeration ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_584","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2elementdecl","text":"[Source] fun box xmlSAX2ElementDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref) : None val","title":"xmlSAX2ElementDecl"},{"location":"pony-libxml2-LibXML2/#parameters_541","text":"pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_585","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2notationdecl","text":"[Source] fun box xmlSAX2NotationDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val) : None val","title":"xmlSAX2NotationDecl"},{"location":"pony-libxml2-LibXML2/#parameters_542","text":"pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_586","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2unparsedentitydecl","text":"[Source] fun box xmlSAX2UnparsedEntityDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val, pnotationName: String val) : None val","title":"xmlSAX2UnparsedEntityDecl"},{"location":"pony-libxml2-LibXML2/#parameters_543","text":"pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val pnotationName: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_587","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2startdocument","text":"[Source] fun box xmlSAX2StartDocument( pctx: Pointer[U8 val] ref) : None val","title":"xmlSAX2StartDocument"},{"location":"pony-libxml2-LibXML2/#parameters_544","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_588","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2enddocument","text":"[Source] fun box xmlSAX2EndDocument( pctx: Pointer[U8 val] ref) : None val","title":"xmlSAX2EndDocument"},{"location":"pony-libxml2-LibXML2/#parameters_545","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_589","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2startelement","text":"[Source] fun box xmlSAX2StartElement( pctx: Pointer[U8 val] ref, pfullname: String val, patts: Pointer[Pointer[U8 val] tag] ref) : None val","title":"xmlSAX2StartElement"},{"location":"pony-libxml2-LibXML2/#parameters_546","text":"pctx: Pointer [ U8 val] ref pfullname: String val patts: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_590","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2endelement","text":"[Source] fun box xmlSAX2EndElement( pctx: Pointer[U8 val] ref, pname: String val) : None val","title":"xmlSAX2EndElement"},{"location":"pony-libxml2-LibXML2/#parameters_547","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_591","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2startelementns","text":"[Source] fun box xmlSAX2StartElementNs( pctx: Pointer[U8 val] ref, plocalname: String val, pprefix: String val, pURI: String val, pnb_namespaces: I32 val, pnamespaces: Pointer[Pointer[U8 val] tag] ref, pnb_attributes: I32 val, pnb_defaulted: I32 val, pattributes: Pointer[Pointer[U8 val] tag] ref) : None val","title":"xmlSAX2StartElementNs"},{"location":"pony-libxml2-LibXML2/#parameters_548","text":"pctx: Pointer [ U8 val] ref plocalname: String val pprefix: String val pURI: String val pnb_namespaces: I32 val pnamespaces: Pointer [ Pointer [ U8 val] tag] ref pnb_attributes: I32 val pnb_defaulted: I32 val pattributes: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_592","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2endelementns","text":"[Source] fun box xmlSAX2EndElementNs( pctx: Pointer[U8 val] ref, plocalname: String val, pprefix: String val, pURI: String val) : None val","title":"xmlSAX2EndElementNs"},{"location":"pony-libxml2-LibXML2/#parameters_549","text":"pctx: Pointer [ U8 val] ref plocalname: String val pprefix: String val pURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_593","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2reference","text":"[Source] fun box xmlSAX2Reference( pctx: Pointer[U8 val] ref, pname: String val) : None val","title":"xmlSAX2Reference"},{"location":"pony-libxml2-LibXML2/#parameters_550","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_594","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2characters","text":"[Source] fun box xmlSAX2Characters( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val","title":"xmlSAX2Characters"},{"location":"pony-libxml2-LibXML2/#parameters_551","text":"pctx: Pointer [ U8 val] ref pch: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_595","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2ignorablewhitespace","text":"[Source] fun box xmlSAX2IgnorableWhitespace( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val","title":"xmlSAX2IgnorableWhitespace"},{"location":"pony-libxml2-LibXML2/#parameters_552","text":"pctx: Pointer [ U8 val] ref pch: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_596","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2processinginstruction","text":"[Source] fun box xmlSAX2ProcessingInstruction( pctx: Pointer[U8 val] ref, ptarget: String val, pdata: String val) : None val","title":"xmlSAX2ProcessingInstruction"},{"location":"pony-libxml2-LibXML2/#parameters_553","text":"pctx: Pointer [ U8 val] ref ptarget: String val pdata: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_597","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2comment","text":"[Source] fun box xmlSAX2Comment( pctx: Pointer[U8 val] ref, pvalue: String val) : None val","title":"xmlSAX2Comment"},{"location":"pony-libxml2-LibXML2/#parameters_554","text":"pctx: Pointer [ U8 val] ref pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_598","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2cdatablock","text":"[Source] fun box xmlSAX2CDataBlock( pctx: Pointer[U8 val] ref, pvalue: String val, plen: I32 val) : None val","title":"xmlSAX2CDataBlock"},{"location":"pony-libxml2-LibXML2/#parameters_555","text":"pctx: Pointer [ U8 val] ref pvalue: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_599","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxdefaultversion","text":"[Source] fun box xmlSAXDefaultVersion( pversion: I32 val) : I32 val","title":"xmlSAXDefaultVersion"},{"location":"pony-libxml2-LibXML2/#parameters_556","text":"pversion: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_600","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaxversion","text":"[Source] fun box xmlSAXVersion( phdlr: NullablePointer[Xmlsaxhandler ref] ref, pversion: I32 val) : I32 val","title":"xmlSAXVersion"},{"location":"pony-libxml2-LibXML2/#parameters_557","text":"phdlr: NullablePointer [ Xmlsaxhandler ref] ref pversion: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_601","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2initdefaultsaxhandler","text":"[Source] fun box xmlSAX2InitDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandler ref] ref, pwarning: I32 val) : None val","title":"xmlSAX2InitDefaultSAXHandler"},{"location":"pony-libxml2-LibXML2/#parameters_558","text":"phdlr: NullablePointer [ Xmlsaxhandler ref] ref pwarning: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_602","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2inithtmldefaultsaxhandler","text":"[Source] fun box xmlSAX2InitHtmlDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandler ref] ref) : None val","title":"xmlSAX2InitHtmlDefaultSAXHandler"},{"location":"pony-libxml2-LibXML2/#parameters_559","text":"phdlr: NullablePointer [ Xmlsaxhandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_603","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmldefaultsaxhandlerinit","text":"[Source] fun box htmlDefaultSAXHandlerInit() : None val","title":"htmlDefaultSAXHandlerInit"},{"location":"pony-libxml2-LibXML2/#returns_604","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsax2initdocbdefaultsaxhandler","text":"[Source] fun box xmlSAX2InitDocbDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandler ref] ref) : None val","title":"xmlSAX2InitDocbDefaultSAXHandler"},{"location":"pony-libxml2-LibXML2/#parameters_560","text":"phdlr: NullablePointer [ Xmlsaxhandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_605","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#docbdefaultsaxhandlerinit","text":"[Source] fun box docbDefaultSAXHandlerInit() : None val","title":"docbDefaultSAXHandlerInit"},{"location":"pony-libxml2-LibXML2/#returns_606","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldefaultsaxhandlerinit","text":"[Source] fun box xmlDefaultSAXHandlerInit() : None val","title":"xmlDefaultSAXHandlerInit"},{"location":"pony-libxml2-LibXML2/#returns_607","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitglobals","text":"[Source] fun box xmlInitGlobals() : None val","title":"xmlInitGlobals"},{"location":"pony-libxml2-LibXML2/#returns_608","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcleanupglobals","text":"[Source] fun box xmlCleanupGlobals() : None val","title":"xmlCleanupGlobals"},{"location":"pony-libxml2-LibXML2/#returns_609","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputbuffercreatefilenamedefault","text":"[Source] fun box xmlParserInputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlParserInputBufferCreateFilenameDefault"},{"location":"pony-libxml2-LibXML2/#parameters_561","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_610","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmloutputbuffercreatefilenamedefault","text":"[Source] fun box xmlOutputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlOutputBufferCreateFilenameDefault"},{"location":"pony-libxml2-LibXML2/#parameters_562","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_611","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitializeglobalstate","text":"[Source] fun box xmlInitializeGlobalState( pgs: NullablePointer[Xmlglobalstate ref] ref) : None val","title":"xmlInitializeGlobalState"},{"location":"pony-libxml2-LibXML2/#parameters_563","text":"pgs: NullablePointer [ Xmlglobalstate ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_612","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefsetgenericerrorfunc","text":"[Source] fun box xmlThrDefSetGenericErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xmlThrDefSetGenericErrorFunc"},{"location":"pony-libxml2-LibXML2/#parameters_564","text":"pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_613","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefsetstructurederrorfunc","text":"[Source] fun box xmlThrDefSetStructuredErrorFunc( pctx: Pointer[U8 val] ref, phandler: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xmlThrDefSetStructuredErrorFunc"},{"location":"pony-libxml2-LibXML2/#parameters_565","text":"pctx: Pointer [ U8 val] ref phandler: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_614","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlregisternodedefault","text":"[Source] fun box xmlRegisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlRegisterNodeDefault"},{"location":"pony-libxml2-LibXML2/#parameters_566","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_615","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefregisternodedefault","text":"[Source] fun box xmlThrDefRegisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlThrDefRegisterNodeDefault"},{"location":"pony-libxml2-LibXML2/#parameters_567","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_616","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlderegisternodedefault","text":"[Source] fun box xmlDeregisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlDeregisterNodeDefault"},{"location":"pony-libxml2-LibXML2/#parameters_568","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_617","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefderegisternodedefault","text":"[Source] fun box xmlThrDefDeregisterNodeDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlThrDefDeregisterNodeDefault"},{"location":"pony-libxml2-LibXML2/#parameters_569","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_618","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefoutputbuffercreatefilenamedefault","text":"[Source] fun box xmlThrDefOutputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlThrDefOutputBufferCreateFilenameDefault"},{"location":"pony-libxml2-LibXML2/#parameters_570","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_619","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefparserinputbuffercreatefilenamedefault","text":"[Source] fun box xmlThrDefParserInputBufferCreateFilenameDefault( pfunc: Pointer[FUNCTIONPOINTER val] ref) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlThrDefParserInputBufferCreateFilenameDefault"},{"location":"pony-libxml2-LibXML2/#parameters_571","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_620","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefbufferallocscheme","text":"[Source] fun box xmlThrDefBufferAllocScheme( pv: I32 val) : I32 val","title":"xmlThrDefBufferAllocScheme"},{"location":"pony-libxml2-LibXML2/#parameters_572","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_621","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefdefaultbuffersize","text":"[Source] fun box xmlThrDefDefaultBufferSize( pv: I32 val) : I32 val","title":"xmlThrDefDefaultBufferSize"},{"location":"pony-libxml2-LibXML2/#parameters_573","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_622","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefdovaliditycheckingdefaultvalue","text":"[Source] fun box xmlThrDefDoValidityCheckingDefaultValue( pv: I32 val) : I32 val","title":"xmlThrDefDoValidityCheckingDefaultValue"},{"location":"pony-libxml2-LibXML2/#parameters_574","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_623","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefgetwarningsdefaultvalue","text":"[Source] fun box xmlThrDefGetWarningsDefaultValue( pv: I32 val) : I32 val","title":"xmlThrDefGetWarningsDefaultValue"},{"location":"pony-libxml2-LibXML2/#parameters_575","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_624","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefindenttreeoutput","text":"[Source] fun box xmlThrDefIndentTreeOutput( pv: I32 val) : I32 val","title":"xmlThrDefIndentTreeOutput"},{"location":"pony-libxml2-LibXML2/#parameters_576","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_625","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdeftreeindentstring","text":"[Source] fun box xmlThrDefTreeIndentString( pv: String val) : String val","title":"xmlThrDefTreeIndentString"},{"location":"pony-libxml2-LibXML2/#parameters_577","text":"pv: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_626","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefkeepblanksdefaultvalue","text":"[Source] fun box xmlThrDefKeepBlanksDefaultValue( pv: I32 val) : I32 val","title":"xmlThrDefKeepBlanksDefaultValue"},{"location":"pony-libxml2-LibXML2/#parameters_578","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_627","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdeflinenumbersdefaultvalue","text":"[Source] fun box xmlThrDefLineNumbersDefaultValue( pv: I32 val) : I32 val","title":"xmlThrDefLineNumbersDefaultValue"},{"location":"pony-libxml2-LibXML2/#parameters_579","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_628","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefloadextdtddefaultvalue","text":"[Source] fun box xmlThrDefLoadExtDtdDefaultValue( pv: I32 val) : I32 val","title":"xmlThrDefLoadExtDtdDefaultValue"},{"location":"pony-libxml2-LibXML2/#parameters_580","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_629","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefparserdebugentities","text":"[Source] fun box xmlThrDefParserDebugEntities( pv: I32 val) : I32 val","title":"xmlThrDefParserDebugEntities"},{"location":"pony-libxml2-LibXML2/#parameters_581","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_630","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefpedanticparserdefaultvalue","text":"[Source] fun box xmlThrDefPedanticParserDefaultValue( pv: I32 val) : I32 val","title":"xmlThrDefPedanticParserDefaultValue"},{"location":"pony-libxml2-LibXML2/#parameters_582","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_631","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefsavenoemptytags","text":"[Source] fun box xmlThrDefSaveNoEmptyTags( pv: I32 val) : I32 val","title":"xmlThrDefSaveNoEmptyTags"},{"location":"pony-libxml2-LibXML2/#parameters_583","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_632","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlthrdefsubstituteentitiesdefaultvalue","text":"[Source] fun box xmlThrDefSubstituteEntitiesDefaultValue( pv: I32 val) : I32 val","title":"xmlThrDefSubstituteEntitiesDefaultValue"},{"location":"pony-libxml2-LibXML2/#parameters_584","text":"pv: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_633","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewcatalog","text":"[Source] fun box xmlNewCatalog( psgml: I32 val) : NullablePointer[Xmlcatalog ref] ref","title":"xmlNewCatalog"},{"location":"pony-libxml2-LibXML2/#parameters_585","text":"psgml: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_634","text":"NullablePointer [ Xmlcatalog ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlloadacatalog","text":"[Source] fun box xmlLoadACatalog( pfilename: String val) : NullablePointer[Xmlcatalog ref] ref","title":"xmlLoadACatalog"},{"location":"pony-libxml2-LibXML2/#parameters_586","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_635","text":"NullablePointer [ Xmlcatalog ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlloadsgmlsupercatalog","text":"[Source] fun box xmlLoadSGMLSuperCatalog( pfilename: String val) : NullablePointer[Xmlcatalog ref] ref","title":"xmlLoadSGMLSuperCatalog"},{"location":"pony-libxml2-LibXML2/#parameters_587","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_636","text":"NullablePointer [ Xmlcatalog ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlconvertsgmlcatalog","text":"[Source] fun box xmlConvertSGMLCatalog( pcatal: NullablePointer[Xmlcatalog ref] ref) : I32 val","title":"xmlConvertSGMLCatalog"},{"location":"pony-libxml2-LibXML2/#parameters_588","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_637","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlacatalogadd","text":"[Source] fun box xmlACatalogAdd( pcatal: NullablePointer[Xmlcatalog ref] ref, ptype: String val, porig: String val, preplace: String val) : I32 val","title":"xmlACatalogAdd"},{"location":"pony-libxml2-LibXML2/#parameters_589","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref ptype: String val porig: String val preplace: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_638","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlacatalogremove","text":"[Source] fun box xmlACatalogRemove( pcatal: NullablePointer[Xmlcatalog ref] ref, pvalue: String val) : I32 val","title":"xmlACatalogRemove"},{"location":"pony-libxml2-LibXML2/#parameters_590","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_639","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlacatalogresolve","text":"[Source] fun box xmlACatalogResolve( pcatal: NullablePointer[Xmlcatalog ref] ref, ppubID: String val, psysID: String val) : String val","title":"xmlACatalogResolve"},{"location":"pony-libxml2-LibXML2/#parameters_591","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref ppubID: String val psysID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_640","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlacatalogresolvesystem","text":"[Source] fun box xmlACatalogResolveSystem( pcatal: NullablePointer[Xmlcatalog ref] ref, psysID: String val) : String val","title":"xmlACatalogResolveSystem"},{"location":"pony-libxml2-LibXML2/#parameters_592","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref psysID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_641","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlacatalogresolvepublic","text":"[Source] fun box xmlACatalogResolvePublic( pcatal: NullablePointer[Xmlcatalog ref] ref, ppubID: String val) : String val","title":"xmlACatalogResolvePublic"},{"location":"pony-libxml2-LibXML2/#parameters_593","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref ppubID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_642","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlacatalogresolveuri","text":"[Source] fun box xmlACatalogResolveURI( pcatal: NullablePointer[Xmlcatalog ref] ref, pURI: String val) : String val","title":"xmlACatalogResolveURI"},{"location":"pony-libxml2-LibXML2/#parameters_594","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref pURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_643","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlacatalogdump","text":"[Source] fun box xmlACatalogDump( pcatal: NullablePointer[Xmlcatalog ref] ref, pout: NullablePointer[IoFile ref] ref) : None val","title":"xmlACatalogDump"},{"location":"pony-libxml2-LibXML2/#parameters_595","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref pout: NullablePointer [ IoFile ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_644","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreecatalog","text":"[Source] fun box xmlFreeCatalog( pcatal: NullablePointer[Xmlcatalog ref] ref) : None val","title":"xmlFreeCatalog"},{"location":"pony-libxml2-LibXML2/#parameters_596","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_645","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogisempty","text":"[Source] fun box xmlCatalogIsEmpty( pcatal: NullablePointer[Xmlcatalog ref] ref) : I32 val","title":"xmlCatalogIsEmpty"},{"location":"pony-libxml2-LibXML2/#parameters_597","text":"pcatal: NullablePointer [ Xmlcatalog ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_646","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlinitializecatalog","text":"[Source] fun box xmlInitializeCatalog() : None val","title":"xmlInitializeCatalog"},{"location":"pony-libxml2-LibXML2/#returns_647","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlloadcatalog","text":"[Source] fun box xmlLoadCatalog( pfilename: String val) : I32 val","title":"xmlLoadCatalog"},{"location":"pony-libxml2-LibXML2/#parameters_598","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_648","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlloadcatalogs","text":"[Source] fun box xmlLoadCatalogs( ppaths: String val) : None val","title":"xmlLoadCatalogs"},{"location":"pony-libxml2-LibXML2/#parameters_599","text":"ppaths: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_649","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogcleanup","text":"[Source] fun box xmlCatalogCleanup() : None val","title":"xmlCatalogCleanup"},{"location":"pony-libxml2-LibXML2/#returns_650","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogdump","text":"[Source] fun box xmlCatalogDump( pout: NullablePointer[IoFile ref] ref) : None val","title":"xmlCatalogDump"},{"location":"pony-libxml2-LibXML2/#parameters_600","text":"pout: NullablePointer [ IoFile ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_651","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogresolve","text":"[Source] fun box xmlCatalogResolve( ppubID: String val, psysID: String val) : String val","title":"xmlCatalogResolve"},{"location":"pony-libxml2-LibXML2/#parameters_601","text":"ppubID: String val psysID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_652","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogresolvesystem","text":"[Source] fun box xmlCatalogResolveSystem( psysID: String val) : String val","title":"xmlCatalogResolveSystem"},{"location":"pony-libxml2-LibXML2/#parameters_602","text":"psysID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_653","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogresolvepublic","text":"[Source] fun box xmlCatalogResolvePublic( ppubID: String val) : String val","title":"xmlCatalogResolvePublic"},{"location":"pony-libxml2-LibXML2/#parameters_603","text":"ppubID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_654","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogresolveuri","text":"[Source] fun box xmlCatalogResolveURI( pURI: String val) : String val","title":"xmlCatalogResolveURI"},{"location":"pony-libxml2-LibXML2/#parameters_604","text":"pURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_655","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogadd","text":"[Source] fun box xmlCatalogAdd( ptype: String val, porig: String val, preplace: String val) : I32 val","title":"xmlCatalogAdd"},{"location":"pony-libxml2-LibXML2/#parameters_605","text":"ptype: String val porig: String val preplace: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_656","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogremove","text":"[Source] fun box xmlCatalogRemove( pvalue: String val) : I32 val","title":"xmlCatalogRemove"},{"location":"pony-libxml2-LibXML2/#parameters_606","text":"pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_657","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsecatalogfile","text":"[Source] fun box xmlParseCatalogFile( pfilename: String val) : NullablePointer[Xmldoc ref] ref","title":"xmlParseCatalogFile"},{"location":"pony-libxml2-LibXML2/#parameters_607","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_658","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogconvert","text":"[Source] fun box xmlCatalogConvert() : I32 val","title":"xmlCatalogConvert"},{"location":"pony-libxml2-LibXML2/#returns_659","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogfreelocal","text":"[Source] fun box xmlCatalogFreeLocal( pcatalogs: Pointer[U8 val] ref) : None val","title":"xmlCatalogFreeLocal"},{"location":"pony-libxml2-LibXML2/#parameters_608","text":"pcatalogs: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_660","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogaddlocal","text":"[Source] fun box xmlCatalogAddLocal( pcatalogs: Pointer[U8 val] ref, pURL: String val) : String val","title":"xmlCatalogAddLocal"},{"location":"pony-libxml2-LibXML2/#parameters_609","text":"pcatalogs: Pointer [ U8 val] ref pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_661","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcataloglocalresolve","text":"[Source] fun box xmlCatalogLocalResolve( pcatalogs: Pointer[U8 val] ref, ppubID: String val, psysID: String val) : String val","title":"xmlCatalogLocalResolve"},{"location":"pony-libxml2-LibXML2/#parameters_610","text":"pcatalogs: Pointer [ U8 val] ref ppubID: String val psysID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_662","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcataloglocalresolveuri","text":"[Source] fun box xmlCatalogLocalResolveURI( pcatalogs: Pointer[U8 val] ref, pURI: String val) : String val","title":"xmlCatalogLocalResolveURI"},{"location":"pony-libxml2-LibXML2/#parameters_611","text":"pcatalogs: Pointer [ U8 val] ref pURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_663","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogsetdebug","text":"[Source] fun box xmlCatalogSetDebug( plevel: I32 val) : I32 val","title":"xmlCatalogSetDebug"},{"location":"pony-libxml2-LibXML2/#parameters_612","text":"plevel: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_664","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogsetdefaultprefer","text":"[Source] fun box xmlCatalogSetDefaultPrefer( pprefer: I32 val) : I32 val","title":"xmlCatalogSetDefaultPrefer"},{"location":"pony-libxml2-LibXML2/#parameters_613","text":"pprefer: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_665","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcatalogsetdefaults","text":"[Source] fun box xmlCatalogSetDefaults( pallow: I32 val) : None val","title":"xmlCatalogSetDefaults"},{"location":"pony-libxml2-LibXML2/#parameters_614","text":"pallow: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_666","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcataloggetdefaults","text":"[Source] fun box xmlCatalogGetDefaults() : I32 val","title":"xmlCatalogGetDefaults"},{"location":"pony-libxml2-LibXML2/#returns_667","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcataloggetsystem","text":"[Source] fun box xmlCatalogGetSystem( psysID: String val) : String val","title":"xmlCatalogGetSystem"},{"location":"pony-libxml2-LibXML2/#parameters_615","text":"psysID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_668","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcataloggetpublic","text":"[Source] fun box xmlCatalogGetPublic( ppubID: String val) : String val","title":"xmlCatalogGetPublic"},{"location":"pony-libxml2-LibXML2/#parameters_616","text":"ppubID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_669","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcharinrange","text":"[Source] fun box xmlCharInRange( pval: U32 val, pgroup: NullablePointer[Xmlchrangegroup ref] ref) : I32 val","title":"xmlCharInRange"},{"location":"pony-libxml2-LibXML2/#parameters_617","text":"pval: U32 val pgroup: NullablePointer [ Xmlchrangegroup ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_670","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisbasechar","text":"[Source] fun box xmlIsBaseChar( pch: U32 val) : I32 val","title":"xmlIsBaseChar"},{"location":"pony-libxml2-LibXML2/#parameters_618","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_671","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisblank","text":"[Source] fun box xmlIsBlank( pch: U32 val) : I32 val","title":"xmlIsBlank"},{"location":"pony-libxml2-LibXML2/#parameters_619","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_672","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlischar","text":"[Source] fun box xmlIsChar( pch: U32 val) : I32 val","title":"xmlIsChar"},{"location":"pony-libxml2-LibXML2/#parameters_620","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_673","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmliscombining","text":"[Source] fun box xmlIsCombining( pch: U32 val) : I32 val","title":"xmlIsCombining"},{"location":"pony-libxml2-LibXML2/#parameters_621","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_674","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisdigit","text":"[Source] fun box xmlIsDigit( pch: U32 val) : I32 val","title":"xmlIsDigit"},{"location":"pony-libxml2-LibXML2/#parameters_622","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_675","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisextender","text":"[Source] fun box xmlIsExtender( pch: U32 val) : I32 val","title":"xmlIsExtender"},{"location":"pony-libxml2-LibXML2/#parameters_623","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_676","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisideographic","text":"[Source] fun box xmlIsIdeographic( pch: U32 val) : I32 val","title":"xmlIsIdeographic"},{"location":"pony-libxml2-LibXML2/#parameters_624","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_677","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlispubidchar","text":"[Source] fun box xmlIsPubidChar( pch: U32 val) : I32 val","title":"xmlIsPubidChar"},{"location":"pony-libxml2-LibXML2/#parameters_625","text":"pch: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_678","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfreeobject","text":"[Source] fun box xmlXPathFreeObject( pobj: NullablePointer[Xmlxpathobject ref] ref) : None val","title":"xmlXPathFreeObject"},{"location":"pony-libxml2-LibXML2/#parameters_626","text":"pobj: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_679","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetcreate","text":"[Source] fun box xmlXPathNodeSetCreate( pval: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathNodeSetCreate"},{"location":"pony-libxml2-LibXML2/#parameters_627","text":"pval: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_680","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfreenodesetlist","text":"[Source] fun box xmlXPathFreeNodeSetList( pobj: NullablePointer[Xmlxpathobject ref] ref) : None val","title":"xmlXPathFreeNodeSetList"},{"location":"pony-libxml2-LibXML2/#parameters_628","text":"pobj: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_681","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfreenodeset","text":"[Source] fun box xmlXPathFreeNodeSet( pobj: NullablePointer[Xmlnodeset ref] ref) : None val","title":"xmlXPathFreeNodeSet"},{"location":"pony-libxml2-LibXML2/#parameters_629","text":"pobj: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_682","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathobjectcopy","text":"[Source] fun box xmlXPathObjectCopy( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathObjectCopy"},{"location":"pony-libxml2-LibXML2/#parameters_630","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_683","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcmpnodes","text":"[Source] fun box xmlXPathCmpNodes( pnode1: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlXPathCmpNodes"},{"location":"pony-libxml2-LibXML2/#parameters_631","text":"pnode1: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_684","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastnumbertoboolean","text":"[Source] fun box xmlXPathCastNumberToBoolean( pval: F64 val) : I32 val","title":"xmlXPathCastNumberToBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_632","text":"pval: F64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_685","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcaststringtoboolean","text":"[Source] fun box xmlXPathCastStringToBoolean( pval: String val) : I32 val","title":"xmlXPathCastStringToBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_633","text":"pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_686","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastnodesettoboolean","text":"[Source] fun box xmlXPathCastNodeSetToBoolean( pns: NullablePointer[Xmlnodeset ref] ref) : I32 val","title":"xmlXPathCastNodeSetToBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_634","text":"pns: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_687","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcasttoboolean","text":"[Source] fun box xmlXPathCastToBoolean( pval: NullablePointer[Xmlxpathobject ref] ref) : I32 val","title":"xmlXPathCastToBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_635","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_688","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastbooleantonumber","text":"[Source] fun box xmlXPathCastBooleanToNumber( pval: I32 val) : F64 val","title":"xmlXPathCastBooleanToNumber"},{"location":"pony-libxml2-LibXML2/#parameters_636","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_689","text":"F64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcaststringtonumber","text":"[Source] fun box xmlXPathCastStringToNumber( pval: String val) : F64 val","title":"xmlXPathCastStringToNumber"},{"location":"pony-libxml2-LibXML2/#parameters_637","text":"pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_690","text":"F64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastnodetonumber","text":"[Source] fun box xmlXPathCastNodeToNumber( pnode: NullablePointer[Xmlnode ref] ref) : F64 val","title":"xmlXPathCastNodeToNumber"},{"location":"pony-libxml2-LibXML2/#parameters_638","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_691","text":"F64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastnodesettonumber","text":"[Source] fun box xmlXPathCastNodeSetToNumber( pns: NullablePointer[Xmlnodeset ref] ref) : F64 val","title":"xmlXPathCastNodeSetToNumber"},{"location":"pony-libxml2-LibXML2/#parameters_639","text":"pns: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_692","text":"F64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcasttonumber","text":"[Source] fun box xmlXPathCastToNumber( pval: NullablePointer[Xmlxpathobject ref] ref) : F64 val","title":"xmlXPathCastToNumber"},{"location":"pony-libxml2-LibXML2/#parameters_640","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_693","text":"F64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastbooleantostring","text":"[Source] fun box xmlXPathCastBooleanToString( pval: I32 val) : String val","title":"xmlXPathCastBooleanToString"},{"location":"pony-libxml2-LibXML2/#parameters_641","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_694","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastnumbertostring","text":"[Source] fun box xmlXPathCastNumberToString( pval: F64 val) : String val","title":"xmlXPathCastNumberToString"},{"location":"pony-libxml2-LibXML2/#parameters_642","text":"pval: F64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_695","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastnodetostring","text":"[Source] fun box xmlXPathCastNodeToString( pnode: NullablePointer[Xmlnode ref] ref) : String val","title":"xmlXPathCastNodeToString"},{"location":"pony-libxml2-LibXML2/#parameters_643","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_696","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcastnodesettostring","text":"[Source] fun box xmlXPathCastNodeSetToString( pns: NullablePointer[Xmlnodeset ref] ref) : String val","title":"xmlXPathCastNodeSetToString"},{"location":"pony-libxml2-LibXML2/#parameters_644","text":"pns: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_697","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcasttostring","text":"[Source] fun box xmlXPathCastToString( pval: NullablePointer[Xmlxpathobject ref] ref) : String val","title":"xmlXPathCastToString"},{"location":"pony-libxml2-LibXML2/#parameters_645","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_698","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathconvertboolean","text":"[Source] fun box xmlXPathConvertBoolean( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathConvertBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_646","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_699","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathconvertnumber","text":"[Source] fun box xmlXPathConvertNumber( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathConvertNumber"},{"location":"pony-libxml2-LibXML2/#parameters_647","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_700","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathconvertstring","text":"[Source] fun box xmlXPathConvertString( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathConvertString"},{"location":"pony-libxml2-LibXML2/#parameters_648","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_701","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewcontext","text":"[Source] fun box xmlXPathNewContext( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlxpathcontext ref] ref","title":"xmlXPathNewContext"},{"location":"pony-libxml2-LibXML2/#parameters_649","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_702","text":"NullablePointer [ Xmlxpathcontext ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfreecontext","text":"[Source] fun box xmlXPathFreeContext( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val","title":"xmlXPathFreeContext"},{"location":"pony-libxml2-LibXML2/#parameters_650","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_703","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcontextsetcache","text":"[Source] fun box xmlXPathContextSetCache( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pactive: I32 val, pvalue: I32 val, poptions: I32 val) : I32 val","title":"xmlXPathContextSetCache"},{"location":"pony-libxml2-LibXML2/#parameters_651","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pactive: I32 val pvalue: I32 val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_704","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathorderdocelems","text":"[Source] fun box xmlXPathOrderDocElems( pdoc: NullablePointer[Xmldoc ref] tag) : I64 val","title":"xmlXPathOrderDocElems"},{"location":"pony-libxml2-LibXML2/#parameters_652","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_705","text":"I64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathsetcontextnode","text":"[Source] fun box xmlXPathSetContextNode( pnode: NullablePointer[Xmlnode ref] ref, pctx: NullablePointer[Xmlxpathcontext ref] tag) : I32 val","title":"xmlXPathSetContextNode"},{"location":"pony-libxml2-LibXML2/#parameters_653","text":"pnode: NullablePointer [ Xmlnode ref] ref pctx: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_706","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodeeval","text":"[Source] fun box xmlXPathNodeEval( pnode: NullablePointer[Xmlnode ref] ref, pstr: String val, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNodeEval"},{"location":"pony-libxml2-LibXML2/#parameters_654","text":"pnode: NullablePointer [ Xmlnode ref] ref pstr: String val pctx: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_707","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpatheval","text":"[Source] fun box xmlXPathEval( pstr: String val, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathEval"},{"location":"pony-libxml2-LibXML2/#parameters_655","text":"pstr: String val pctx: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_708","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathevalexpression","text":"[Source] fun box xmlXPathEvalExpression( pstr: String val, pctxt: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathEvalExpression"},{"location":"pony-libxml2-LibXML2/#parameters_656","text":"pstr: String val pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_709","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathevalpredicate","text":"[Source] fun box xmlXPathEvalPredicate( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pres: NullablePointer[Xmlxpathobject ref] ref) : I32 val","title":"xmlXPathEvalPredicate"},{"location":"pony-libxml2-LibXML2/#parameters_657","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pres: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_710","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcompile","text":"[Source] fun box xmlXPathCompile( pstr: String val) : NullablePointer[Xmlxpathcompexpr ref] ref","title":"xmlXPathCompile"},{"location":"pony-libxml2-LibXML2/#parameters_658","text":"pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_711","text":"NullablePointer [ Xmlxpathcompexpr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathctxtcompile","text":"[Source] fun box xmlXPathCtxtCompile( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pstr: String val) : NullablePointer[Xmlxpathcompexpr ref] ref","title":"xmlXPathCtxtCompile"},{"location":"pony-libxml2-LibXML2/#parameters_659","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_712","text":"NullablePointer [ Xmlxpathcompexpr ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcompiledeval","text":"[Source] fun box xmlXPathCompiledEval( pcomp: NullablePointer[Xmlxpathcompexpr ref] ref, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathCompiledEval"},{"location":"pony-libxml2-LibXML2/#parameters_660","text":"pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref pctx: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_713","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcompiledevaltoboolean","text":"[Source] fun box xmlXPathCompiledEvalToBoolean( pcomp: NullablePointer[Xmlxpathcompexpr ref] ref, pctxt: NullablePointer[Xmlxpathcontext ref] tag) : I32 val","title":"xmlXPathCompiledEvalToBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_661","text":"pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_714","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfreecompexpr","text":"[Source] fun box xmlXPathFreeCompExpr( pcomp: NullablePointer[Xmlxpathcompexpr ref] ref) : None val","title":"xmlXPathFreeCompExpr"},{"location":"pony-libxml2-LibXML2/#parameters_662","text":"pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_715","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathinit","text":"[Source] fun box xmlXPathInit() : None val","title":"xmlXPathInit"},{"location":"pony-libxml2-LibXML2/#returns_716","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathisnan","text":"[Source] fun box xmlXPathIsNaN( pval: F64 val) : I32 val","title":"xmlXPathIsNaN"},{"location":"pony-libxml2-LibXML2/#parameters_663","text":"pval: F64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_717","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathisinf","text":"[Source] fun box xmlXPathIsInf( pval: F64 val) : I32 val","title":"xmlXPathIsInf"},{"location":"pony-libxml2-LibXML2/#parameters_664","text":"pval: F64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_718","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpstring","text":"[Source] fun box xmlDebugDumpString( poutput: NullablePointer[IoFile ref] ref, pstr: String val) : None val","title":"xmlDebugDumpString"},{"location":"pony-libxml2-LibXML2/#parameters_665","text":"poutput: NullablePointer [ IoFile ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_719","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpattr","text":"[Source] fun box xmlDebugDumpAttr( poutput: NullablePointer[IoFile ref] ref, pattr: NullablePointer[Xmlattr ref] ref, pdepth: I32 val) : None val","title":"xmlDebugDumpAttr"},{"location":"pony-libxml2-LibXML2/#parameters_666","text":"poutput: NullablePointer [ IoFile ref] ref pattr: NullablePointer [ Xmlattr ref] ref pdepth: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_720","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpattrlist","text":"[Source] fun box xmlDebugDumpAttrList( poutput: NullablePointer[IoFile ref] ref, pattr: NullablePointer[Xmlattr ref] ref, pdepth: I32 val) : None val","title":"xmlDebugDumpAttrList"},{"location":"pony-libxml2-LibXML2/#parameters_667","text":"poutput: NullablePointer [ IoFile ref] ref pattr: NullablePointer [ Xmlattr ref] ref pdepth: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_721","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumponenode","text":"[Source] fun box xmlDebugDumpOneNode( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pdepth: I32 val) : None val","title":"xmlDebugDumpOneNode"},{"location":"pony-libxml2-LibXML2/#parameters_668","text":"poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref pdepth: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_722","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpnode","text":"[Source] fun box xmlDebugDumpNode( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pdepth: I32 val) : None val","title":"xmlDebugDumpNode"},{"location":"pony-libxml2-LibXML2/#parameters_669","text":"poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref pdepth: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_723","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpnodelist","text":"[Source] fun box xmlDebugDumpNodeList( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pdepth: I32 val) : None val","title":"xmlDebugDumpNodeList"},{"location":"pony-libxml2-LibXML2/#parameters_670","text":"poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref pdepth: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_724","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpdocumenthead","text":"[Source] fun box xmlDebugDumpDocumentHead( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val","title":"xmlDebugDumpDocumentHead"},{"location":"pony-libxml2-LibXML2/#parameters_671","text":"poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_725","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpdocument","text":"[Source] fun box xmlDebugDumpDocument( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val","title":"xmlDebugDumpDocument"},{"location":"pony-libxml2-LibXML2/#parameters_672","text":"poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_726","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpdtd","text":"[Source] fun box xmlDebugDumpDTD( poutput: NullablePointer[IoFile ref] ref, pdtd: NullablePointer[Xmldtd ref] ref) : None val","title":"xmlDebugDumpDTD"},{"location":"pony-libxml2-LibXML2/#parameters_673","text":"poutput: NullablePointer [ IoFile ref] ref pdtd: NullablePointer [ Xmldtd ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_727","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugdumpentities","text":"[Source] fun box xmlDebugDumpEntities( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : None val","title":"xmlDebugDumpEntities"},{"location":"pony-libxml2-LibXML2/#parameters_674","text":"poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_728","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldebugcheckdocument","text":"[Source] fun box xmlDebugCheckDocument( poutput: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlDebugCheckDocument"},{"location":"pony-libxml2-LibXML2/#parameters_675","text":"poutput: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_729","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllsonenode","text":"[Source] fun box xmlLsOneNode( poutput: NullablePointer[IoFile ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : None val","title":"xmlLsOneNode"},{"location":"pony-libxml2-LibXML2/#parameters_676","text":"poutput: NullablePointer [ IoFile ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_730","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmllscountnode","text":"[Source] fun box xmlLsCountNode( pnode: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlLsCountNode"},{"location":"pony-libxml2-LibXML2/#parameters_677","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_731","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbooltotext","text":"[Source] fun box xmlBoolToText( pboolval: I32 val) : String val","title":"xmlBoolToText"},{"location":"pony-libxml2-LibXML2/#parameters_678","text":"pboolval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_732","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellprintxpatherror","text":"[Source] fun box xmlShellPrintXPathError( perrorType: I32 val, parg: String val) : None val","title":"xmlShellPrintXPathError"},{"location":"pony-libxml2-LibXML2/#parameters_679","text":"perrorType: I32 val parg: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_733","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellprintxpathresult","text":"[Source] fun box xmlShellPrintXPathResult( plist: NullablePointer[Xmlxpathobject ref] ref) : None val","title":"xmlShellPrintXPathResult"},{"location":"pony-libxml2-LibXML2/#parameters_680","text":"plist: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_734","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshelllist","text":"[Source] fun box xmlShellList( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellList"},{"location":"pony-libxml2-LibXML2/#parameters_681","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_735","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellbase","text":"[Source] fun box xmlShellBase( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellBase"},{"location":"pony-libxml2-LibXML2/#parameters_682","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_736","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshelldir","text":"[Source] fun box xmlShellDir( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellDir"},{"location":"pony-libxml2-LibXML2/#parameters_683","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_737","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellload","text":"[Source] fun box xmlShellLoad( pctxt: NullablePointer[Xmlshellctxt ref] ref, pfilename: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellLoad"},{"location":"pony-libxml2-LibXML2/#parameters_684","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref pfilename: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_738","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellprintnode","text":"[Source] fun box xmlShellPrintNode( pnode: NullablePointer[Xmlnode ref] ref) : None val","title":"xmlShellPrintNode"},{"location":"pony-libxml2-LibXML2/#parameters_685","text":"pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_739","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellcat","text":"[Source] fun box xmlShellCat( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellCat"},{"location":"pony-libxml2-LibXML2/#parameters_686","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_740","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellwrite","text":"[Source] fun box xmlShellWrite( pctxt: NullablePointer[Xmlshellctxt ref] ref, pfilename: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellWrite"},{"location":"pony-libxml2-LibXML2/#parameters_687","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref pfilename: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_741","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellsave","text":"[Source] fun box xmlShellSave( pctxt: NullablePointer[Xmlshellctxt ref] ref, pfilename: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellSave"},{"location":"pony-libxml2-LibXML2/#parameters_688","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref pfilename: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_742","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellvalidate","text":"[Source] fun box xmlShellValidate( pctxt: NullablePointer[Xmlshellctxt ref] ref, pdtd: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellValidate"},{"location":"pony-libxml2-LibXML2/#parameters_689","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref pdtd: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_743","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshelldu","text":"[Source] fun box xmlShellDu( pctxt: NullablePointer[Xmlshellctxt ref] ref, parg: String val, ptree: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellDu"},{"location":"pony-libxml2-LibXML2/#parameters_690","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref parg: String val ptree: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_744","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshellpwd","text":"[Source] fun box xmlShellPwd( pctxt: NullablePointer[Xmlshellctxt ref] ref, pbuffer: String val, pnode: NullablePointer[Xmlnode ref] ref, pnode2: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlShellPwd"},{"location":"pony-libxml2-LibXML2/#parameters_691","text":"pctxt: NullablePointer [ Xmlshellctxt ref] ref pbuffer: String val pnode: NullablePointer [ Xmlnode ref] ref pnode2: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_745","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlshell","text":"[Source] fun box xmlShell( pdoc: NullablePointer[Xmldoc ref] tag, pfilename: String val, pinput: Pointer[FUNCTIONPOINTER val] ref, poutput: NullablePointer[IoFile ref] ref) : None val","title":"xmlShell"},{"location":"pony-libxml2-LibXML2/#parameters_692","text":"pdoc: NullablePointer [ Xmldoc ref] tag pfilename: String val pinput: Pointer [ FUNCTIONPOINTER val] ref poutput: NullablePointer [ IoFile ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_746","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmltaglookup","text":"[Source] fun box htmlTagLookup( ptag: String val) : NullablePointer[Htmlelemdesc ref] ref","title":"htmlTagLookup"},{"location":"pony-libxml2-LibXML2/#parameters_693","text":"ptag: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_747","text":"NullablePointer [ Htmlelemdesc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlentitylookup","text":"[Source] fun box htmlEntityLookup( pname: String val) : NullablePointer[Htmlentitydesc ref] ref","title":"htmlEntityLookup"},{"location":"pony-libxml2-LibXML2/#parameters_694","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_748","text":"NullablePointer [ Htmlentitydesc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlentityvaluelookup","text":"[Source] fun box htmlEntityValueLookup( pvalue: U32 val) : NullablePointer[Htmlentitydesc ref] ref","title":"htmlEntityValueLookup"},{"location":"pony-libxml2-LibXML2/#parameters_695","text":"pvalue: U32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_749","text":"NullablePointer [ Htmlentitydesc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlisautoclosed","text":"[Source] fun box htmlIsAutoClosed( pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"htmlIsAutoClosed"},{"location":"pony-libxml2-LibXML2/#parameters_696","text":"pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_750","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlautoclosetag","text":"[Source] fun box htmlAutoCloseTag( pdoc: NullablePointer[Xmldoc ref] tag, pname: String val, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"htmlAutoCloseTag"},{"location":"pony-libxml2-LibXML2/#parameters_697","text":"pdoc: NullablePointer [ Xmldoc ref] tag pname: String val pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_751","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlparseentityref","text":"[Source] fun box htmlParseEntityRef( pctxt: NullablePointer[Xmlparserctxt ref] ref, pstr: Pointer[Pointer[U8 val] tag] ref) : NullablePointer[Htmlentitydesc ref] ref","title":"htmlParseEntityRef"},{"location":"pony-libxml2-LibXML2/#parameters_698","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pstr: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_752","text":"NullablePointer [ Htmlentitydesc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlparsecharref","text":"[Source] fun box htmlParseCharRef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"htmlParseCharRef"},{"location":"pony-libxml2-LibXML2/#parameters_699","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_753","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlparseelement","text":"[Source] fun box htmlParseElement( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"htmlParseElement"},{"location":"pony-libxml2-LibXML2/#parameters_700","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_754","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnewparserctxt","text":"[Source] fun box htmlNewParserCtxt() : NullablePointer[Xmlparserctxt ref] ref","title":"htmlNewParserCtxt"},{"location":"pony-libxml2-LibXML2/#returns_755","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlcreatememoryparserctxt","text":"[Source] fun box htmlCreateMemoryParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlparserctxt ref] ref","title":"htmlCreateMemoryParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_701","text":"pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_756","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlparsedocument","text":"[Source] fun box htmlParseDocument( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"htmlParseDocument"},{"location":"pony-libxml2-LibXML2/#parameters_702","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_757","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlsaxparsedoc","text":"[Source] fun box htmlSAXParseDoc( pcur: String val, pencoding: String val, psax: NullablePointer[Xmlsaxhandler ref] ref, puserData: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref","title":"htmlSAXParseDoc"},{"location":"pony-libxml2-LibXML2/#parameters_703","text":"pcur: String val pencoding: String val psax: NullablePointer [ Xmlsaxhandler ref] ref puserData: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_758","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlparsedoc","text":"[Source] fun box htmlParseDoc( pcur: String val, pencoding: String val) : NullablePointer[Xmldoc ref] ref","title":"htmlParseDoc"},{"location":"pony-libxml2-LibXML2/#parameters_704","text":"pcur: String val pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_759","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlsaxparsefile","text":"[Source] fun box htmlSAXParseFile( pfilename: String val, pencoding: String val, psax: NullablePointer[Xmlsaxhandler ref] ref, puserData: Pointer[U8 val] ref) : NullablePointer[Xmldoc ref] ref","title":"htmlSAXParseFile"},{"location":"pony-libxml2-LibXML2/#parameters_705","text":"pfilename: String val pencoding: String val psax: NullablePointer [ Xmlsaxhandler ref] ref puserData: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_760","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlparsefile","text":"[Source] fun box htmlParseFile( pfilename: String val, pencoding: String val) : NullablePointer[Xmldoc ref] ref","title":"htmlParseFile"},{"location":"pony-libxml2-LibXML2/#parameters_706","text":"pfilename: String val pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_761","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#utf8tohtml","text":"[Source] fun box utf8ToHtml( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref) : I32 val","title":"utf8ToHtml"},{"location":"pony-libxml2-LibXML2/#parameters_707","text":"pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_762","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlencodeentities","text":"[Source] fun box htmlEncodeEntities( pout: String val, poutlen: Pointer[I32 val] ref, pin: String val, pinlen: Pointer[I32 val] ref, pquoteChar: I32 val) : I32 val","title":"htmlEncodeEntities"},{"location":"pony-libxml2-LibXML2/#parameters_708","text":"pout: String val poutlen: Pointer [ I32 val] ref pin: String val pinlen: Pointer [ I32 val] ref pquoteChar: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_763","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlisscriptattribute","text":"[Source] fun box htmlIsScriptAttribute( pname: String val) : I32 val","title":"htmlIsScriptAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_709","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_764","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlhandleomittedelem","text":"[Source] fun box htmlHandleOmittedElem( pval: I32 val) : I32 val","title":"htmlHandleOmittedElem"},{"location":"pony-libxml2-LibXML2/#parameters_710","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_765","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlcreatepushparserctxt","text":"[Source] fun box htmlCreatePushParserCtxt( psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref, pchunk: String val, psize: I32 val, pfilename: String val, penc: I32 val) : NullablePointer[Xmlparserctxt ref] ref","title":"htmlCreatePushParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_711","text":"psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref pchunk: String val psize: I32 val pfilename: String val penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_766","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlparsechunk","text":"[Source] fun box htmlParseChunk( pctxt: NullablePointer[Xmlparserctxt ref] ref, pchunk: String val, psize: I32 val, pterminate: I32 val) : I32 val","title":"htmlParseChunk"},{"location":"pony-libxml2-LibXML2/#parameters_712","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pchunk: String val psize: I32 val pterminate: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_767","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlfreeparserctxt","text":"[Source] fun box htmlFreeParserCtxt( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"htmlFreeParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_713","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_768","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlctxtreset","text":"[Source] fun box htmlCtxtReset( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"htmlCtxtReset"},{"location":"pony-libxml2-LibXML2/#parameters_714","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_769","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlctxtuseoptions","text":"[Source] fun box htmlCtxtUseOptions( pctxt: NullablePointer[Xmlparserctxt ref] ref, poptions: I32 val) : I32 val","title":"htmlCtxtUseOptions"},{"location":"pony-libxml2-LibXML2/#parameters_715","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_770","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlreaddoc","text":"[Source] fun box htmlReadDoc( pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlReadDoc"},{"location":"pony-libxml2-LibXML2/#parameters_716","text":"pcur: String val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_771","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlreadfile","text":"[Source] fun box htmlReadFile( pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlReadFile"},{"location":"pony-libxml2-LibXML2/#parameters_717","text":"pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_772","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlreadmemory","text":"[Source] fun box htmlReadMemory( pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlReadMemory"},{"location":"pony-libxml2-LibXML2/#parameters_718","text":"pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_773","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlreadfd","text":"[Source] fun box htmlReadFd( pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlReadFd"},{"location":"pony-libxml2-LibXML2/#parameters_719","text":"pfd: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_774","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlreadio","text":"[Source] fun box htmlReadIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlReadIO"},{"location":"pony-libxml2-LibXML2/#parameters_720","text":"pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_775","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlctxtreaddoc","text":"[Source] fun box htmlCtxtReadDoc( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlCtxtReadDoc"},{"location":"pony-libxml2-LibXML2/#parameters_721","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pcur: String val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_776","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlctxtreadfile","text":"[Source] fun box htmlCtxtReadFile( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlCtxtReadFile"},{"location":"pony-libxml2-LibXML2/#parameters_722","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pfilename: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_777","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlctxtreadmemory","text":"[Source] fun box htmlCtxtReadMemory( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlCtxtReadMemory"},{"location":"pony-libxml2-LibXML2/#parameters_723","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_778","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlctxtreadfd","text":"[Source] fun box htmlCtxtReadFd( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlCtxtReadFd"},{"location":"pony-libxml2-LibXML2/#parameters_724","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pfd: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_779","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlctxtreadio","text":"[Source] fun box htmlCtxtReadIO( pctxt: NullablePointer[Xmlparserctxt ref] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmldoc ref] ref","title":"htmlCtxtReadIO"},{"location":"pony-libxml2-LibXML2/#parameters_725","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_780","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnewdoc","text":"[Source] fun box htmlNewDoc( pURI: String val, pExternalID: String val) : NullablePointer[Xmldoc ref] ref","title":"htmlNewDoc"},{"location":"pony-libxml2-LibXML2/#parameters_726","text":"pURI: String val pExternalID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_781","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnewdocnodtd","text":"[Source] fun box htmlNewDocNoDtD( pURI: String val, pExternalID: String val) : NullablePointer[Xmldoc ref] ref","title":"htmlNewDocNoDtD"},{"location":"pony-libxml2-LibXML2/#parameters_727","text":"pURI: String val pExternalID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_782","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlgetmetaencoding","text":"[Source] fun box htmlGetMetaEncoding( pdoc: NullablePointer[Xmldoc ref] tag) : String val","title":"htmlGetMetaEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_728","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_783","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlsetmetaencoding","text":"[Source] fun box htmlSetMetaEncoding( pdoc: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val","title":"htmlSetMetaEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_729","text":"pdoc: NullablePointer [ Xmldoc ref] tag pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_784","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmldocdumpmemory","text":"[Source] fun box htmlDocDumpMemory( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref) : None val","title":"htmlDocDumpMemory"},{"location":"pony-libxml2-LibXML2/#parameters_730","text":"pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_785","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmldocdumpmemoryformat","text":"[Source] fun box htmlDocDumpMemoryFormat( pcur: NullablePointer[Xmldoc ref] tag, pmem: Pointer[Pointer[U8 val] tag] ref, psize: Pointer[I32 val] ref, pformat: I32 val) : None val","title":"htmlDocDumpMemoryFormat"},{"location":"pony-libxml2-LibXML2/#parameters_731","text":"pcur: NullablePointer [ Xmldoc ref] tag pmem: Pointer [ Pointer [ U8 val] tag] ref psize: Pointer [ I32 val] ref pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_786","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmldocdump","text":"[Source] fun box htmlDocDump( pf: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmldoc ref] tag) : I32 val","title":"htmlDocDump"},{"location":"pony-libxml2-LibXML2/#parameters_732","text":"pf: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_787","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlsavefile","text":"[Source] fun box htmlSaveFile( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag) : I32 val","title":"htmlSaveFile"},{"location":"pony-libxml2-LibXML2/#parameters_733","text":"pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_788","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnodedump","text":"[Source] fun box htmlNodeDump( pbuf: NullablePointer[Xmlbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : I32 val","title":"htmlNodeDump"},{"location":"pony-libxml2-LibXML2/#parameters_734","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_789","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnodedumpfile","text":"[Source] fun box htmlNodeDumpFile( pout: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref) : None val","title":"htmlNodeDumpFile"},{"location":"pony-libxml2-LibXML2/#parameters_735","text":"pout: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_790","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnodedumpfileformat","text":"[Source] fun box htmlNodeDumpFileFormat( pout: NullablePointer[IoFile ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, pencoding: String val, pformat: I32 val) : I32 val","title":"htmlNodeDumpFileFormat"},{"location":"pony-libxml2-LibXML2/#parameters_736","text":"pout: NullablePointer [ IoFile ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref pencoding: String val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_791","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlsavefileenc","text":"[Source] fun box htmlSaveFileEnc( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : I32 val","title":"htmlSaveFileEnc"},{"location":"pony-libxml2-LibXML2/#parameters_737","text":"pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_792","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlsavefileformat","text":"[Source] fun box htmlSaveFileFormat( pfilename: String val, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : I32 val","title":"htmlSaveFileFormat"},{"location":"pony-libxml2-LibXML2/#parameters_738","text":"pfilename: String val pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_793","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnodedumpformatoutput","text":"[Source] fun box htmlNodeDumpFormatOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, pencoding: String val, pformat: I32 val) : None val","title":"htmlNodeDumpFormatOutput"},{"location":"pony-libxml2-LibXML2/#parameters_739","text":"pbuf: NullablePointer [ Xmloutputbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref pencoding: String val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_794","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmldoccontentdumpoutput","text":"[Source] fun box htmlDocContentDumpOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val) : None val","title":"htmlDocContentDumpOutput"},{"location":"pony-libxml2-LibXML2/#parameters_740","text":"pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_795","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmldoccontentdumpformatoutput","text":"[Source] fun box htmlDocContentDumpFormatOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pcur: NullablePointer[Xmldoc ref] tag, pencoding: String val, pformat: I32 val) : None val","title":"htmlDocContentDumpFormatOutput"},{"location":"pony-libxml2-LibXML2/#parameters_741","text":"pbuf: NullablePointer [ Xmloutputbuffer ref] ref pcur: NullablePointer [ Xmldoc ref] tag pencoding: String val pformat: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_796","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlnodedumpoutput","text":"[Source] fun box htmlNodeDumpOutput( pbuf: NullablePointer[Xmloutputbuffer ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pcur: NullablePointer[Xmlnode ref] ref, pencoding: String val) : None val","title":"htmlNodeDumpOutput"},{"location":"pony-libxml2-LibXML2/#parameters_742","text":"pbuf: NullablePointer [ Xmloutputbuffer ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pcur: NullablePointer [ Xmlnode ref] ref pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_797","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlisbooleanattr","text":"[Source] fun box htmlIsBooleanAttr( pname: String val) : I32 val","title":"htmlIsBooleanAttr"},{"location":"pony-libxml2-LibXML2/#parameters_743","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_798","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpinit","text":"[Source] fun box xmlNanoFTPInit() : None val","title":"xmlNanoFTPInit"},{"location":"pony-libxml2-LibXML2/#returns_799","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpcleanup","text":"[Source] fun box xmlNanoFTPCleanup() : None val","title":"xmlNanoFTPCleanup"},{"location":"pony-libxml2-LibXML2/#returns_800","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpnewctxt","text":"[Source] fun box xmlNanoFTPNewCtxt( pURL: String val) : String val","title":"xmlNanoFTPNewCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_744","text":"pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_801","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpfreectxt","text":"[Source] fun box xmlNanoFTPFreeCtxt( pctx: Pointer[U8 val] ref) : None val","title":"xmlNanoFTPFreeCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_745","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_802","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpconnectto","text":"[Source] fun box xmlNanoFTPConnectTo( pserver: String val, pport: I32 val) : String val","title":"xmlNanoFTPConnectTo"},{"location":"pony-libxml2-LibXML2/#parameters_746","text":"pserver: String val pport: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_803","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpopen","text":"[Source] fun box xmlNanoFTPOpen( pURL: String val) : String val","title":"xmlNanoFTPOpen"},{"location":"pony-libxml2-LibXML2/#parameters_747","text":"pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_804","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpconnect","text":"[Source] fun box xmlNanoFTPConnect( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoFTPConnect"},{"location":"pony-libxml2-LibXML2/#parameters_748","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_805","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpclose","text":"[Source] fun box xmlNanoFTPClose( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoFTPClose"},{"location":"pony-libxml2-LibXML2/#parameters_749","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_806","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpquit","text":"[Source] fun box xmlNanoFTPQuit( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoFTPQuit"},{"location":"pony-libxml2-LibXML2/#parameters_750","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_807","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpscanproxy","text":"[Source] fun box xmlNanoFTPScanProxy( pURL: String val) : None val","title":"xmlNanoFTPScanProxy"},{"location":"pony-libxml2-LibXML2/#parameters_751","text":"pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_808","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpproxy","text":"[Source] fun box xmlNanoFTPProxy( phost: String val, pport: I32 val, puser: String val, ppasswd: String val, ptype: I32 val) : None val","title":"xmlNanoFTPProxy"},{"location":"pony-libxml2-LibXML2/#parameters_752","text":"phost: String val pport: I32 val puser: String val ppasswd: String val ptype: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_809","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpupdateurl","text":"[Source] fun box xmlNanoFTPUpdateURL( pctx: Pointer[U8 val] ref, pURL: String val) : I32 val","title":"xmlNanoFTPUpdateURL"},{"location":"pony-libxml2-LibXML2/#parameters_753","text":"pctx: Pointer [ U8 val] ref pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_810","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpgetresponse","text":"[Source] fun box xmlNanoFTPGetResponse( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoFTPGetResponse"},{"location":"pony-libxml2-LibXML2/#parameters_754","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_811","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpcheckresponse","text":"[Source] fun box xmlNanoFTPCheckResponse( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoFTPCheckResponse"},{"location":"pony-libxml2-LibXML2/#parameters_755","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_812","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpcwd","text":"[Source] fun box xmlNanoFTPCwd( pctx: Pointer[U8 val] ref, pdirectory: String val) : I32 val","title":"xmlNanoFTPCwd"},{"location":"pony-libxml2-LibXML2/#parameters_756","text":"pctx: Pointer [ U8 val] ref pdirectory: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_813","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpdele","text":"[Source] fun box xmlNanoFTPDele( pctx: Pointer[U8 val] ref, pfile: String val) : I32 val","title":"xmlNanoFTPDele"},{"location":"pony-libxml2-LibXML2/#parameters_757","text":"pctx: Pointer [ U8 val] ref pfile: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_814","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpgetconnection","text":"[Source] fun box xmlNanoFTPGetConnection( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoFTPGetConnection"},{"location":"pony-libxml2-LibXML2/#parameters_758","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_815","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpcloseconnection","text":"[Source] fun box xmlNanoFTPCloseConnection( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoFTPCloseConnection"},{"location":"pony-libxml2-LibXML2/#parameters_759","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_816","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftplist","text":"[Source] fun box xmlNanoFTPList( pctx: Pointer[U8 val] ref, pcallback: Pointer[FUNCTIONPOINTER val] ref, puserData: Pointer[U8 val] ref, pfilename: String val) : I32 val","title":"xmlNanoFTPList"},{"location":"pony-libxml2-LibXML2/#parameters_760","text":"pctx: Pointer [ U8 val] ref pcallback: Pointer [ FUNCTIONPOINTER val] ref puserData: Pointer [ U8 val] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_817","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpgetsocket","text":"[Source] fun box xmlNanoFTPGetSocket( pctx: Pointer[U8 val] ref, pfilename: String val) : I32 val","title":"xmlNanoFTPGetSocket"},{"location":"pony-libxml2-LibXML2/#parameters_761","text":"pctx: Pointer [ U8 val] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_818","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpget","text":"[Source] fun box xmlNanoFTPGet( pctx: Pointer[U8 val] ref, pcallback: Pointer[FUNCTIONPOINTER val] ref, puserData: Pointer[U8 val] ref, pfilename: String val) : I32 val","title":"xmlNanoFTPGet"},{"location":"pony-libxml2-LibXML2/#parameters_762","text":"pctx: Pointer [ U8 val] ref pcallback: Pointer [ FUNCTIONPOINTER val] ref puserData: Pointer [ U8 val] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_819","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanoftpread","text":"[Source] fun box xmlNanoFTPRead( pctx: Pointer[U8 val] ref, pdest: Pointer[U8 val] ref, plen: I32 val) : I32 val","title":"xmlNanoFTPRead"},{"location":"pony-libxml2-LibXML2/#parameters_763","text":"pctx: Pointer [ U8 val] ref pdest: Pointer [ U8 val] ref plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_820","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpinit","text":"[Source] fun box xmlNanoHTTPInit() : None val","title":"xmlNanoHTTPInit"},{"location":"pony-libxml2-LibXML2/#returns_821","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpcleanup","text":"[Source] fun box xmlNanoHTTPCleanup() : None val","title":"xmlNanoHTTPCleanup"},{"location":"pony-libxml2-LibXML2/#returns_822","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpscanproxy","text":"[Source] fun box xmlNanoHTTPScanProxy( pURL: String val) : None val","title":"xmlNanoHTTPScanProxy"},{"location":"pony-libxml2-LibXML2/#parameters_764","text":"pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_823","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpfetch","text":"[Source] fun box xmlNanoHTTPFetch( pURL: String val, pfilename: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref) : I32 val","title":"xmlNanoHTTPFetch"},{"location":"pony-libxml2-LibXML2/#parameters_765","text":"pURL: String val pfilename: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_824","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpmethod","text":"[Source] fun box xmlNanoHTTPMethod( pURL: String val, pmethod: String val, pinput: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref, pheaders: String val, pilen: I32 val) : String val","title":"xmlNanoHTTPMethod"},{"location":"pony-libxml2-LibXML2/#parameters_766","text":"pURL: String val pmethod: String val pinput: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref pheaders: String val pilen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_825","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpmethodredir","text":"[Source] fun box xmlNanoHTTPMethodRedir( pURL: String val, pmethod: String val, pinput: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref, predir: Pointer[Pointer[U8 val] tag] ref, pheaders: String val, pilen: I32 val) : String val","title":"xmlNanoHTTPMethodRedir"},{"location":"pony-libxml2-LibXML2/#parameters_767","text":"pURL: String val pmethod: String val pinput: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref predir: Pointer [ Pointer [ U8 val] tag] ref pheaders: String val pilen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_826","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpopen","text":"[Source] fun box xmlNanoHTTPOpen( pURL: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref) : String val","title":"xmlNanoHTTPOpen"},{"location":"pony-libxml2-LibXML2/#parameters_768","text":"pURL: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_827","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpopenredir","text":"[Source] fun box xmlNanoHTTPOpenRedir( pURL: String val, pcontentType: Pointer[Pointer[U8 val] tag] ref, predir: Pointer[Pointer[U8 val] tag] ref) : String val","title":"xmlNanoHTTPOpenRedir"},{"location":"pony-libxml2-LibXML2/#parameters_769","text":"pURL: String val pcontentType: Pointer [ Pointer [ U8 val] tag] ref predir: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_828","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpreturncode","text":"[Source] fun box xmlNanoHTTPReturnCode( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoHTTPReturnCode"},{"location":"pony-libxml2-LibXML2/#parameters_770","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_829","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpauthheader","text":"[Source] fun box xmlNanoHTTPAuthHeader( pctx: Pointer[U8 val] ref) : String val","title":"xmlNanoHTTPAuthHeader"},{"location":"pony-libxml2-LibXML2/#parameters_771","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_830","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpredir","text":"[Source] fun box xmlNanoHTTPRedir( pctx: Pointer[U8 val] ref) : String val","title":"xmlNanoHTTPRedir"},{"location":"pony-libxml2-LibXML2/#parameters_772","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_831","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpcontentlength","text":"[Source] fun box xmlNanoHTTPContentLength( pctx: Pointer[U8 val] ref) : I32 val","title":"xmlNanoHTTPContentLength"},{"location":"pony-libxml2-LibXML2/#parameters_773","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_832","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpencoding","text":"[Source] fun box xmlNanoHTTPEncoding( pctx: Pointer[U8 val] ref) : String val","title":"xmlNanoHTTPEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_774","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_833","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpmimetype","text":"[Source] fun box xmlNanoHTTPMimeType( pctx: Pointer[U8 val] ref) : String val","title":"xmlNanoHTTPMimeType"},{"location":"pony-libxml2-LibXML2/#parameters_775","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_834","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpread","text":"[Source] fun box xmlNanoHTTPRead( pctx: Pointer[U8 val] ref, pdest: Pointer[U8 val] ref, plen: I32 val) : I32 val","title":"xmlNanoHTTPRead"},{"location":"pony-libxml2-LibXML2/#parameters_776","text":"pctx: Pointer [ U8 val] ref pdest: Pointer [ U8 val] ref plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_835","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpsave","text":"[Source] fun box xmlNanoHTTPSave( pctxt: Pointer[U8 val] ref, pfilename: String val) : I32 val","title":"xmlNanoHTTPSave"},{"location":"pony-libxml2-LibXML2/#parameters_777","text":"pctxt: Pointer [ U8 val] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_836","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnanohttpclose","text":"[Source] fun box xmlNanoHTTPClose( pctx: Pointer[U8 val] ref) : None val","title":"xmlNanoHTTPClose"},{"location":"pony-libxml2-LibXML2/#parameters_778","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_837","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlisletter","text":"[Source] fun box xmlIsLetter( pc: I32 val) : I32 val","title":"xmlIsLetter"},{"location":"pony-libxml2-LibXML2/#parameters_779","text":"pc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_838","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreatefileparserctxt","text":"[Source] fun box xmlCreateFileParserCtxt( pfilename: String val) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlCreateFileParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_780","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_839","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreateurlparserctxt","text":"[Source] fun box xmlCreateURLParserCtxt( pfilename: String val, poptions: I32 val) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlCreateURLParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_781","text":"pfilename: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_840","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreatememoryparserctxt","text":"[Source] fun box xmlCreateMemoryParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlCreateMemoryParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_782","text":"pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_841","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreateentityparserctxt","text":"[Source] fun box xmlCreateEntityParserCtxt( pURL: String val, pID: String val, pbase: String val) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlCreateEntityParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_783","text":"pURL: String val pID: String val pbase: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_842","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlswitchencoding","text":"[Source] fun box xmlSwitchEncoding( pctxt: NullablePointer[Xmlparserctxt ref] ref, penc: I32 val) : I32 val","title":"xmlSwitchEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_784","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref penc: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_843","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlswitchtoencoding","text":"[Source] fun box xmlSwitchToEncoding( pctxt: NullablePointer[Xmlparserctxt ref] ref, phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : I32 val","title":"xmlSwitchToEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_785","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref phandler: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_844","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlswitchinputencoding","text":"[Source] fun box xmlSwitchInputEncoding( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinput: NullablePointer[Xmlparserinput ref] ref, phandler: NullablePointer[Xmlcharencodinghandler ref] ref) : I32 val","title":"xmlSwitchInputEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_786","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pinput: NullablePointer [ Xmlparserinput ref] ref phandler: NullablePointer [ Xmlcharencodinghandler ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_845","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewstringinputstream","text":"[Source] fun box xmlNewStringInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref, pbuffer: String val) : NullablePointer[Xmlparserinput ref] ref","title":"xmlNewStringInputStream"},{"location":"pony-libxml2-LibXML2/#parameters_787","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pbuffer: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_846","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewentityinputstream","text":"[Source] fun box xmlNewEntityInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref, pentity: NullablePointer[Xmlentity ref] ref) : NullablePointer[Xmlparserinput ref] ref","title":"xmlNewEntityInputStream"},{"location":"pony-libxml2-LibXML2/#parameters_788","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pentity: NullablePointer [ Xmlentity ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_847","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpushinput","text":"[Source] fun box xmlPushInput( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinput: NullablePointer[Xmlparserinput ref] ref) : I32 val","title":"xmlPushInput"},{"location":"pony-libxml2-LibXML2/#parameters_789","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pinput: NullablePointer [ Xmlparserinput ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_848","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpopinput","text":"[Source] fun box xmlPopInput( pctxt: NullablePointer[Xmlparserctxt ref] ref) : U8 val","title":"xmlPopInput"},{"location":"pony-libxml2-LibXML2/#parameters_790","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_849","text":"U8 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeinputstream","text":"[Source] fun box xmlFreeInputStream( pinput: NullablePointer[Xmlparserinput ref] ref) : None val","title":"xmlFreeInputStream"},{"location":"pony-libxml2-LibXML2/#parameters_791","text":"pinput: NullablePointer [ Xmlparserinput ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_850","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewinputfromfile","text":"[Source] fun box xmlNewInputFromFile( pctxt: NullablePointer[Xmlparserctxt ref] ref, pfilename: String val) : NullablePointer[Xmlparserinput ref] ref","title":"xmlNewInputFromFile"},{"location":"pony-libxml2-LibXML2/#parameters_792","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_851","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewinputstream","text":"[Source] fun box xmlNewInputStream( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref","title":"xmlNewInputStream"},{"location":"pony-libxml2-LibXML2/#parameters_793","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_852","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsplitqname","text":"[Source] fun box xmlSplitQName( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, pprefix: Pointer[Pointer[U8 val] tag] ref) : String val","title":"xmlSplitQName"},{"location":"pony-libxml2-LibXML2/#parameters_794","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val pprefix: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_853","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsename","text":"[Source] fun box xmlParseName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseName"},{"location":"pony-libxml2-LibXML2/#parameters_795","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_854","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsenmtoken","text":"[Source] fun box xmlParseNmtoken( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseNmtoken"},{"location":"pony-libxml2-LibXML2/#parameters_796","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_855","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseentityvalue","text":"[Source] fun box xmlParseEntityValue( pctxt: NullablePointer[Xmlparserctxt ref] ref, porig: Pointer[Pointer[U8 val] tag] ref) : String val","title":"xmlParseEntityValue"},{"location":"pony-libxml2-LibXML2/#parameters_797","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref porig: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_856","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseattvalue","text":"[Source] fun box xmlParseAttValue( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseAttValue"},{"location":"pony-libxml2-LibXML2/#parameters_798","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_857","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsesystemliteral","text":"[Source] fun box xmlParseSystemLiteral( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseSystemLiteral"},{"location":"pony-libxml2-LibXML2/#parameters_799","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_858","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsepubidliteral","text":"[Source] fun box xmlParsePubidLiteral( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParsePubidLiteral"},{"location":"pony-libxml2-LibXML2/#parameters_800","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_859","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsechardata","text":"[Source] fun box xmlParseCharData( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcdata: I32 val) : None val","title":"xmlParseCharData"},{"location":"pony-libxml2-LibXML2/#parameters_801","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pcdata: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_860","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseexternalid","text":"[Source] fun box xmlParseExternalID( pctxt: NullablePointer[Xmlparserctxt ref] ref, ppublicID: Pointer[Pointer[U8 val] tag] ref, pstrict: I32 val) : String val","title":"xmlParseExternalID"},{"location":"pony-libxml2-LibXML2/#parameters_802","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref ppublicID: Pointer [ Pointer [ U8 val] tag] ref pstrict: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_861","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsecomment","text":"[Source] fun box xmlParseComment( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseComment"},{"location":"pony-libxml2-LibXML2/#parameters_803","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_862","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsepitarget","text":"[Source] fun box xmlParsePITarget( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParsePITarget"},{"location":"pony-libxml2-LibXML2/#parameters_804","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_863","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsepi","text":"[Source] fun box xmlParsePI( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParsePI"},{"location":"pony-libxml2-LibXML2/#parameters_805","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_864","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsenotationdecl","text":"[Source] fun box xmlParseNotationDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseNotationDecl"},{"location":"pony-libxml2-LibXML2/#parameters_806","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_865","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseentitydecl","text":"[Source] fun box xmlParseEntityDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseEntityDecl"},{"location":"pony-libxml2-LibXML2/#parameters_807","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_866","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsedefaultdecl","text":"[Source] fun box xmlParseDefaultDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: Pointer[Pointer[U8 val] tag] ref) : I32 val","title":"xmlParseDefaultDecl"},{"location":"pony-libxml2-LibXML2/#parameters_808","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_867","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsenotationtype","text":"[Source] fun box xmlParseNotationType( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlenumeration ref] ref","title":"xmlParseNotationType"},{"location":"pony-libxml2-LibXML2/#parameters_809","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_868","text":"NullablePointer [ Xmlenumeration ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseenumerationtype","text":"[Source] fun box xmlParseEnumerationType( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlenumeration ref] ref","title":"xmlParseEnumerationType"},{"location":"pony-libxml2-LibXML2/#parameters_810","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_869","text":"NullablePointer [ Xmlenumeration ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseenumeratedtype","text":"[Source] fun box xmlParseEnumeratedType( pctxt: NullablePointer[Xmlparserctxt ref] ref, ptree: Pointer[NullablePointer[Xmlenumeration ref] ref] ref) : I32 val","title":"xmlParseEnumeratedType"},{"location":"pony-libxml2-LibXML2/#parameters_811","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref ptree: Pointer [ NullablePointer [ Xmlenumeration ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_870","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseattributetype","text":"[Source] fun box xmlParseAttributeType( pctxt: NullablePointer[Xmlparserctxt ref] ref, ptree: Pointer[NullablePointer[Xmlenumeration ref] ref] ref) : I32 val","title":"xmlParseAttributeType"},{"location":"pony-libxml2-LibXML2/#parameters_812","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref ptree: Pointer [ NullablePointer [ Xmlenumeration ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_871","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseattributelistdecl","text":"[Source] fun box xmlParseAttributeListDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseAttributeListDecl"},{"location":"pony-libxml2-LibXML2/#parameters_813","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_872","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseelementmixedcontentdecl","text":"[Source] fun box xmlParseElementMixedContentDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinputchk: I32 val) : NullablePointer[Xmlelementcontent ref] ref","title":"xmlParseElementMixedContentDecl"},{"location":"pony-libxml2-LibXML2/#parameters_814","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pinputchk: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_873","text":"NullablePointer [ Xmlelementcontent ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseelementchildrencontentdecl","text":"[Source] fun box xmlParseElementChildrenContentDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pinputchk: I32 val) : NullablePointer[Xmlelementcontent ref] ref","title":"xmlParseElementChildrenContentDecl"},{"location":"pony-libxml2-LibXML2/#parameters_815","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pinputchk: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_874","text":"NullablePointer [ Xmlelementcontent ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseelementcontentdecl","text":"[Source] fun box xmlParseElementContentDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref, pname: String val, presult: Pointer[NullablePointer[Xmlelementcontent ref] ref] ref) : I32 val","title":"xmlParseElementContentDecl"},{"location":"pony-libxml2-LibXML2/#parameters_816","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pname: String val presult: Pointer [ NullablePointer [ Xmlelementcontent ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_875","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseelementdecl","text":"[Source] fun box xmlParseElementDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"xmlParseElementDecl"},{"location":"pony-libxml2-LibXML2/#parameters_817","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_876","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsemarkupdecl","text":"[Source] fun box xmlParseMarkupDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseMarkupDecl"},{"location":"pony-libxml2-LibXML2/#parameters_818","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_877","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsecharref","text":"[Source] fun box xmlParseCharRef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"xmlParseCharRef"},{"location":"pony-libxml2-LibXML2/#parameters_819","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_878","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseentityref","text":"[Source] fun box xmlParseEntityRef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlentity ref] ref","title":"xmlParseEntityRef"},{"location":"pony-libxml2-LibXML2/#parameters_820","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_879","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsereference","text":"[Source] fun box xmlParseReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseReference"},{"location":"pony-libxml2-LibXML2/#parameters_821","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_880","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsepereference","text":"[Source] fun box xmlParsePEReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParsePEReference"},{"location":"pony-libxml2-LibXML2/#parameters_822","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_881","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsedoctypedecl","text":"[Source] fun box xmlParseDocTypeDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseDocTypeDecl"},{"location":"pony-libxml2-LibXML2/#parameters_823","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_882","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseattribute","text":"[Source] fun box xmlParseAttribute( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: Pointer[Pointer[U8 val] tag] ref) : String val","title":"xmlParseAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_824","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_883","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsestarttag","text":"[Source] fun box xmlParseStartTag( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseStartTag"},{"location":"pony-libxml2-LibXML2/#parameters_825","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_884","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseendtag","text":"[Source] fun box xmlParseEndTag( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseEndTag"},{"location":"pony-libxml2-LibXML2/#parameters_826","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_885","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsecdsect","text":"[Source] fun box xmlParseCDSect( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseCDSect"},{"location":"pony-libxml2-LibXML2/#parameters_827","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_886","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsecontent","text":"[Source] fun box xmlParseContent( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseContent"},{"location":"pony-libxml2-LibXML2/#parameters_828","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_887","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseelement","text":"[Source] fun box xmlParseElement( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseElement"},{"location":"pony-libxml2-LibXML2/#parameters_829","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_888","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseversionnum","text":"[Source] fun box xmlParseVersionNum( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseVersionNum"},{"location":"pony-libxml2-LibXML2/#parameters_830","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_889","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseversioninfo","text":"[Source] fun box xmlParseVersionInfo( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseVersionInfo"},{"location":"pony-libxml2-LibXML2/#parameters_831","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_890","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseencname","text":"[Source] fun box xmlParseEncName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseEncName"},{"location":"pony-libxml2-LibXML2/#parameters_832","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_891","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseencodingdecl","text":"[Source] fun box xmlParseEncodingDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseEncodingDecl"},{"location":"pony-libxml2-LibXML2/#parameters_833","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_892","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsesddecl","text":"[Source] fun box xmlParseSDDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"xmlParseSDDecl"},{"location":"pony-libxml2-LibXML2/#parameters_834","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_893","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsexmldecl","text":"[Source] fun box xmlParseXMLDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseXMLDecl"},{"location":"pony-libxml2-LibXML2/#parameters_835","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_894","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsetextdecl","text":"[Source] fun box xmlParseTextDecl( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseTextDecl"},{"location":"pony-libxml2-LibXML2/#parameters_836","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_895","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsemisc","text":"[Source] fun box xmlParseMisc( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseMisc"},{"location":"pony-libxml2-LibXML2/#parameters_837","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_896","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseexternalsubset","text":"[Source] fun box xmlParseExternalSubset( pctxt: NullablePointer[Xmlparserctxt ref] ref, pExternalID: String val, pSystemID: String val) : None val","title":"xmlParseExternalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_838","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_897","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstringdecodeentities","text":"[Source] fun box xmlStringDecodeEntities( pctxt: NullablePointer[Xmlparserctxt ref] ref, pstr: String val, pwhat: I32 val, pend: U8 val, pend2: U8 val, pend3: U8 val) : String val","title":"xmlStringDecodeEntities"},{"location":"pony-libxml2-LibXML2/#parameters_839","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pstr: String val pwhat: I32 val pend: U8 val pend2: U8 val pend3: U8 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_898","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstringlendecodeentities","text":"[Source] fun box xmlStringLenDecodeEntities( pctxt: NullablePointer[Xmlparserctxt ref] ref, pstr: String val, plen: I32 val, pwhat: I32 val, pend: U8 val, pend2: U8 val, pend3: U8 val) : String val","title":"xmlStringLenDecodeEntities"},{"location":"pony-libxml2-LibXML2/#parameters_840","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pstr: String val plen: I32 val pwhat: I32 val pend: U8 val pend2: U8 val pend3: U8 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_899","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#nodepush","text":"[Source] fun box nodePush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: NullablePointer[Xmlnode ref] ref) : I32 val","title":"nodePush"},{"location":"pony-libxml2-LibXML2/#parameters_841","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_900","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#nodepop","text":"[Source] fun box nodePop( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlnode ref] ref","title":"nodePop"},{"location":"pony-libxml2-LibXML2/#parameters_842","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_901","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#inputpush","text":"[Source] fun box inputPush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: NullablePointer[Xmlparserinput ref] ref) : I32 val","title":"inputPush"},{"location":"pony-libxml2-LibXML2/#parameters_843","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: NullablePointer [ Xmlparserinput ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_902","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#inputpop","text":"[Source] fun box inputPop( pctxt: NullablePointer[Xmlparserctxt ref] ref) : NullablePointer[Xmlparserinput ref] ref","title":"inputPop"},{"location":"pony-libxml2-LibXML2/#parameters_844","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_903","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#namepop","text":"[Source] fun box namePop( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"namePop"},{"location":"pony-libxml2-LibXML2/#parameters_845","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_904","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#namepush","text":"[Source] fun box namePush( pctxt: NullablePointer[Xmlparserctxt ref] ref, pvalue: String val) : I32 val","title":"namePush"},{"location":"pony-libxml2-LibXML2/#parameters_846","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_905","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlskipblankchars","text":"[Source] fun box xmlSkipBlankChars( pctxt: NullablePointer[Xmlparserctxt ref] ref) : I32 val","title":"xmlSkipBlankChars"},{"location":"pony-libxml2-LibXML2/#parameters_847","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_906","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstringcurrentchar","text":"[Source] fun box xmlStringCurrentChar( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcur: String val, plen: Pointer[I32 val] ref) : I32 val","title":"xmlStringCurrentChar"},{"location":"pony-libxml2-LibXML2/#parameters_848","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pcur: String val plen: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_907","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserhandlepereference","text":"[Source] fun box xmlParserHandlePEReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParserHandlePEReference"},{"location":"pony-libxml2-LibXML2/#parameters_849","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_908","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlchecklanguageid","text":"[Source] fun box xmlCheckLanguageID( plang: String val) : I32 val","title":"xmlCheckLanguageID"},{"location":"pony-libxml2-LibXML2/#parameters_850","text":"plang: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_909","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcurrentchar","text":"[Source] fun box xmlCurrentChar( pctxt: NullablePointer[Xmlparserctxt ref] ref, plen: Pointer[I32 val] ref) : I32 val","title":"xmlCurrentChar"},{"location":"pony-libxml2-LibXML2/#parameters_851","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref plen: Pointer [ I32 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_910","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopycharmultibyte","text":"[Source] fun box xmlCopyCharMultiByte( pout: String val, pval: I32 val) : I32 val","title":"xmlCopyCharMultiByte"},{"location":"pony-libxml2-LibXML2/#parameters_852","text":"pout: String val pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_911","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcopychar","text":"[Source] fun box xmlCopyChar( plen: I32 val, pout: String val, pval: I32 val) : I32 val","title":"xmlCopyChar"},{"location":"pony-libxml2-LibXML2/#parameters_853","text":"plen: I32 val pout: String val pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_912","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnextchar","text":"[Source] fun box xmlNextChar( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlNextChar"},{"location":"pony-libxml2-LibXML2/#parameters_854","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_913","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserinputshrink","text":"[Source] fun box xmlParserInputShrink( pin: NullablePointer[Xmlparserinput ref] ref) : None val","title":"xmlParserInputShrink"},{"location":"pony-libxml2-LibXML2/#parameters_855","text":"pin: NullablePointer [ Xmlparserinput ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_914","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlinitautoclose","text":"[Source] fun box htmlInitAutoClose() : None val","title":"htmlInitAutoClose"},{"location":"pony-libxml2-LibXML2/#returns_915","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#htmlcreatefileparserctxt","text":"[Source] fun box htmlCreateFileParserCtxt( pfilename: String val, pencoding: String val) : NullablePointer[Xmlparserctxt ref] ref","title":"htmlCreateFileParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_856","text":"pfilename: String val pencoding: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_916","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsetentityreferencefunc","text":"[Source] fun box xmlSetEntityReferenceFunc( pfunc: Pointer[FUNCTIONPOINTER val] ref) : None val","title":"xmlSetEntityReferenceFunc"},{"location":"pony-libxml2-LibXML2/#parameters_857","text":"pfunc: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_917","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsequotedstring","text":"[Source] fun box xmlParseQuotedString( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlParseQuotedString"},{"location":"pony-libxml2-LibXML2/#parameters_858","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_918","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparsenamespace","text":"[Source] fun box xmlParseNamespace( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParseNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_859","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_919","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnamespaceparsensdef","text":"[Source] fun box xmlNamespaceParseNSDef( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlNamespaceParseNSDef"},{"location":"pony-libxml2-LibXML2/#parameters_860","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_920","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlscanname","text":"[Source] fun box xmlScanName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlScanName"},{"location":"pony-libxml2-LibXML2/#parameters_861","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_921","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnamespaceparsencname","text":"[Source] fun box xmlNamespaceParseNCName( pctxt: NullablePointer[Xmlparserctxt ref] ref) : String val","title":"xmlNamespaceParseNCName"},{"location":"pony-libxml2-LibXML2/#parameters_862","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_922","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparserhandlereference","text":"[Source] fun box xmlParserHandleReference( pctxt: NullablePointer[Xmlparserctxt ref] ref) : None val","title":"xmlParserHandleReference"},{"location":"pony-libxml2-LibXML2/#parameters_863","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_923","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnamespaceparseqname","text":"[Source] fun box xmlNamespaceParseQName( pctxt: NullablePointer[Xmlparserctxt ref] ref, pprefix: Pointer[Pointer[U8 val] tag] ref) : String val","title":"xmlNamespaceParseQName"},{"location":"pony-libxml2-LibXML2/#parameters_864","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pprefix: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_924","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmldecodeentities","text":"[Source] fun box xmlDecodeEntities( pctxt: NullablePointer[Xmlparserctxt ref] ref, plen: I32 val, pwhat: I32 val, pend: U8 val, pend2: U8 val, pend3: U8 val) : String val","title":"xmlDecodeEntities"},{"location":"pony-libxml2-LibXML2/#parameters_865","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref plen: I32 val pwhat: I32 val pend: U8 val pend2: U8 val pend3: U8 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_925","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlhandleentity","text":"[Source] fun box xmlHandleEntity( pctxt: NullablePointer[Xmlparserctxt ref] ref, pentity: NullablePointer[Xmlentity ref] ref) : None val","title":"xmlHandleEntity"},{"location":"pony-libxml2-LibXML2/#parameters_866","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pentity: NullablePointer [ Xmlentity ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_926","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreepattern","text":"[Source] fun box xmlFreePattern( pcomp: NullablePointer[Xmlpattern ref] ref) : None val","title":"xmlFreePattern"},{"location":"pony-libxml2-LibXML2/#parameters_867","text":"pcomp: NullablePointer [ Xmlpattern ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_927","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreepatternlist","text":"[Source] fun box xmlFreePatternList( pcomp: NullablePointer[Xmlpattern ref] ref) : None val","title":"xmlFreePatternList"},{"location":"pony-libxml2-LibXML2/#parameters_868","text":"pcomp: NullablePointer [ Xmlpattern ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_928","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpatterncompile","text":"[Source] fun box xmlPatterncompile( ppattern: String val, pdict: NullablePointer[Xmldict ref] ref, pflags: I32 val, pnamespaces: Pointer[Pointer[U8 val] tag] ref) : NullablePointer[Xmlpattern ref] ref","title":"xmlPatterncompile"},{"location":"pony-libxml2-LibXML2/#parameters_869","text":"ppattern: String val pdict: NullablePointer [ Xmldict ref] ref pflags: I32 val pnamespaces: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_929","text":"NullablePointer [ Xmlpattern ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpatternmatch","text":"[Source] fun box xmlPatternMatch( pcomp: NullablePointer[Xmlpattern ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlPatternMatch"},{"location":"pony-libxml2-LibXML2/#parameters_870","text":"pcomp: NullablePointer [ Xmlpattern ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_930","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpatternstreamable","text":"[Source] fun box xmlPatternStreamable( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val","title":"xmlPatternStreamable"},{"location":"pony-libxml2-LibXML2/#parameters_871","text":"pcomp: NullablePointer [ Xmlpattern ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_931","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpatternmaxdepth","text":"[Source] fun box xmlPatternMaxDepth( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val","title":"xmlPatternMaxDepth"},{"location":"pony-libxml2-LibXML2/#parameters_872","text":"pcomp: NullablePointer [ Xmlpattern ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_932","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpatternmindepth","text":"[Source] fun box xmlPatternMinDepth( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val","title":"xmlPatternMinDepth"},{"location":"pony-libxml2-LibXML2/#parameters_873","text":"pcomp: NullablePointer [ Xmlpattern ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_933","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpatternfromroot","text":"[Source] fun box xmlPatternFromRoot( pcomp: NullablePointer[Xmlpattern ref] ref) : I32 val","title":"xmlPatternFromRoot"},{"location":"pony-libxml2-LibXML2/#parameters_874","text":"pcomp: NullablePointer [ Xmlpattern ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_934","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpatterngetstreamctxt","text":"[Source] fun box xmlPatternGetStreamCtxt( pcomp: NullablePointer[Xmlpattern ref] ref) : NullablePointer[Xmlstreamctxt ref] ref","title":"xmlPatternGetStreamCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_875","text":"pcomp: NullablePointer [ Xmlpattern ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_935","text":"NullablePointer [ Xmlstreamctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreestreamctxt","text":"[Source] fun box xmlFreeStreamCtxt( pstream: NullablePointer[Xmlstreamctxt ref] ref) : None val","title":"xmlFreeStreamCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_876","text":"pstream: NullablePointer [ Xmlstreamctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_936","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstreampushnode","text":"[Source] fun box xmlStreamPushNode( pstream: NullablePointer[Xmlstreamctxt ref] ref, pname: String val, pns: String val, pnodeType: I32 val) : I32 val","title":"xmlStreamPushNode"},{"location":"pony-libxml2-LibXML2/#parameters_877","text":"pstream: NullablePointer [ Xmlstreamctxt ref] ref pname: String val pns: String val pnodeType: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_937","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstreampush","text":"[Source] fun box xmlStreamPush( pstream: NullablePointer[Xmlstreamctxt ref] ref, pname: String val, pns: String val) : I32 val","title":"xmlStreamPush"},{"location":"pony-libxml2-LibXML2/#parameters_878","text":"pstream: NullablePointer [ Xmlstreamctxt ref] ref pname: String val pns: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_938","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstreampushattr","text":"[Source] fun box xmlStreamPushAttr( pstream: NullablePointer[Xmlstreamctxt ref] ref, pname: String val, pns: String val) : I32 val","title":"xmlStreamPushAttr"},{"location":"pony-libxml2-LibXML2/#parameters_879","text":"pstream: NullablePointer [ Xmlstreamctxt ref] ref pname: String val pns: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_939","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstreampop","text":"[Source] fun box xmlStreamPop( pstream: NullablePointer[Xmlstreamctxt ref] ref) : I32 val","title":"xmlStreamPop"},{"location":"pony-libxml2-LibXML2/#parameters_880","text":"pstream: NullablePointer [ Xmlstreamctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_940","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlstreamwantsanynode","text":"[Source] fun box xmlStreamWantsAnyNode( pstream: NullablePointer[Xmlstreamctxt ref] ref) : I32 val","title":"xmlStreamWantsAnyNode"},{"location":"pony-libxml2-LibXML2/#parameters_881","text":"pstream: NullablePointer [ Xmlstreamctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_941","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxnginittypes","text":"[Source] fun box xmlRelaxNGInitTypes() : I32 val","title":"xmlRelaxNGInitTypes"},{"location":"pony-libxml2-LibXML2/#returns_942","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngcleanuptypes","text":"[Source] fun box xmlRelaxNGCleanupTypes() : None val","title":"xmlRelaxNGCleanupTypes"},{"location":"pony-libxml2-LibXML2/#returns_943","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngnewparserctxt","text":"[Source] fun box xmlRelaxNGNewParserCtxt( pURL: String val) : NullablePointer[Xmlrelaxngparserctxt ref] ref","title":"xmlRelaxNGNewParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_882","text":"pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_944","text":"NullablePointer [ Xmlrelaxngparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngnewmemparserctxt","text":"[Source] fun box xmlRelaxNGNewMemParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlrelaxngparserctxt ref] ref","title":"xmlRelaxNGNewMemParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_883","text":"pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_945","text":"NullablePointer [ Xmlrelaxngparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngnewdocparserctxt","text":"[Source] fun box xmlRelaxNGNewDocParserCtxt( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlrelaxngparserctxt ref] ref","title":"xmlRelaxNGNewDocParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_884","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_946","text":"NullablePointer [ Xmlrelaxngparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxparsersetflag","text":"[Source] fun box xmlRelaxParserSetFlag( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, pflag: I32 val) : I32 val","title":"xmlRelaxParserSetFlag"},{"location":"pony-libxml2-LibXML2/#parameters_885","text":"pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref pflag: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_947","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngfreeparserctxt","text":"[Source] fun box xmlRelaxNGFreeParserCtxt( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref) : None val","title":"xmlRelaxNGFreeParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_886","text":"pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_948","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngsetparsererrors","text":"[Source] fun box xmlRelaxNGSetParserErrors( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlRelaxNGSetParserErrors"},{"location":"pony-libxml2-LibXML2/#parameters_887","text":"pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_949","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxnggetparsererrors","text":"[Source] fun box xmlRelaxNGGetParserErrors( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val","title":"xmlRelaxNGGetParserErrors"},{"location":"pony-libxml2-LibXML2/#parameters_888","text":"pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_950","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngsetparserstructurederrors","text":"[Source] fun box xmlRelaxNGSetParserStructuredErrors( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlRelaxNGSetParserStructuredErrors"},{"location":"pony-libxml2-LibXML2/#parameters_889","text":"pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_951","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngparse","text":"[Source] fun box xmlRelaxNGParse( pctxt: NullablePointer[Xmlrelaxngparserctxt ref] ref) : NullablePointer[Xmlrelaxng ref] ref","title":"xmlRelaxNGParse"},{"location":"pony-libxml2-LibXML2/#parameters_890","text":"pctxt: NullablePointer [ Xmlrelaxngparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_952","text":"NullablePointer [ Xmlrelaxng ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngfree","text":"[Source] fun box xmlRelaxNGFree( pschema: NullablePointer[Xmlrelaxng ref] ref) : None val","title":"xmlRelaxNGFree"},{"location":"pony-libxml2-LibXML2/#parameters_891","text":"pschema: NullablePointer [ Xmlrelaxng ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_953","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngdump","text":"[Source] fun box xmlRelaxNGDump( poutput: NullablePointer[IoFile ref] ref, pschema: NullablePointer[Xmlrelaxng ref] ref) : None val","title":"xmlRelaxNGDump"},{"location":"pony-libxml2-LibXML2/#parameters_892","text":"poutput: NullablePointer [ IoFile ref] ref pschema: NullablePointer [ Xmlrelaxng ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_954","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngdumptree","text":"[Source] fun box xmlRelaxNGDumpTree( poutput: NullablePointer[IoFile ref] ref, pschema: NullablePointer[Xmlrelaxng ref] ref) : None val","title":"xmlRelaxNGDumpTree"},{"location":"pony-libxml2-LibXML2/#parameters_893","text":"poutput: NullablePointer [ IoFile ref] ref pschema: NullablePointer [ Xmlrelaxng ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_955","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngsetvaliderrors","text":"[Source] fun box xmlRelaxNGSetValidErrors( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlRelaxNGSetValidErrors"},{"location":"pony-libxml2-LibXML2/#parameters_894","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_956","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxnggetvaliderrors","text":"[Source] fun box xmlRelaxNGGetValidErrors( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val","title":"xmlRelaxNGGetValidErrors"},{"location":"pony-libxml2-LibXML2/#parameters_895","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_957","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngsetvalidstructurederrors","text":"[Source] fun box xmlRelaxNGSetValidStructuredErrors( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlRelaxNGSetValidStructuredErrors"},{"location":"pony-libxml2-LibXML2/#parameters_896","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_958","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngnewvalidctxt","text":"[Source] fun box xmlRelaxNGNewValidCtxt( pschema: NullablePointer[Xmlrelaxng ref] ref) : NullablePointer[Xmlrelaxngvalidctxt ref] ref","title":"xmlRelaxNGNewValidCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_897","text":"pschema: NullablePointer [ Xmlrelaxng ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_959","text":"NullablePointer [ Xmlrelaxngvalidctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngfreevalidctxt","text":"[Source] fun box xmlRelaxNGFreeValidCtxt( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref) : None val","title":"xmlRelaxNGFreeValidCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_898","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_960","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngvalidatedoc","text":"[Source] fun box xmlRelaxNGValidateDoc( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlRelaxNGValidateDoc"},{"location":"pony-libxml2-LibXML2/#parameters_899","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_961","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngvalidatepushelement","text":"[Source] fun box xmlRelaxNGValidatePushElement( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlRelaxNGValidatePushElement"},{"location":"pony-libxml2-LibXML2/#parameters_900","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_962","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngvalidatepushcdata","text":"[Source] fun box xmlRelaxNGValidatePushCData( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdata: String val, plen: I32 val) : I32 val","title":"xmlRelaxNGValidatePushCData"},{"location":"pony-libxml2-LibXML2/#parameters_901","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdata: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_963","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngvalidatepopelement","text":"[Source] fun box xmlRelaxNGValidatePopElement( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlRelaxNGValidatePopElement"},{"location":"pony-libxml2-LibXML2/#parameters_902","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_964","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlrelaxngvalidatefullelement","text":"[Source] fun box xmlRelaxNGValidateFullElement( pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlRelaxNGValidateFullElement"},{"location":"pony-libxml2-LibXML2/#parameters_903","text":"pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_965","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#getpublicid","text":"[Source] fun box getPublicId( pctx: Pointer[U8 val] ref) : String val","title":"getPublicId"},{"location":"pony-libxml2-LibXML2/#parameters_904","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_966","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#getsystemid","text":"[Source] fun box getSystemId( pctx: Pointer[U8 val] ref) : String val","title":"getSystemId"},{"location":"pony-libxml2-LibXML2/#parameters_905","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_967","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#setdocumentlocator","text":"[Source] fun box setDocumentLocator( pctx: Pointer[U8 val] ref, ploc: NullablePointer[Xmlsaxlocator ref] ref) : None val","title":"setDocumentLocator"},{"location":"pony-libxml2-LibXML2/#parameters_906","text":"pctx: Pointer [ U8 val] ref ploc: NullablePointer [ Xmlsaxlocator ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_968","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#getlinenumber","text":"[Source] fun box getLineNumber( pctx: Pointer[U8 val] ref) : I32 val","title":"getLineNumber"},{"location":"pony-libxml2-LibXML2/#parameters_907","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_969","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#getcolumnnumber","text":"[Source] fun box getColumnNumber( pctx: Pointer[U8 val] ref) : I32 val","title":"getColumnNumber"},{"location":"pony-libxml2-LibXML2/#parameters_908","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_970","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#isstandalone","text":"[Source] fun box isStandalone( pctx: Pointer[U8 val] ref) : I32 val","title":"isStandalone"},{"location":"pony-libxml2-LibXML2/#parameters_909","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_971","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#hasinternalsubset","text":"[Source] fun box hasInternalSubset( pctx: Pointer[U8 val] ref) : I32 val","title":"hasInternalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_910","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_972","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#hasexternalsubset","text":"[Source] fun box hasExternalSubset( pctx: Pointer[U8 val] ref) : I32 val","title":"hasExternalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_911","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_973","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#internalsubset","text":"[Source] fun box internalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val","title":"internalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_912","text":"pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_974","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#externalsubset","text":"[Source] fun box externalSubset( pctx: Pointer[U8 val] ref, pname: String val, pExternalID: String val, pSystemID: String val) : None val","title":"externalSubset"},{"location":"pony-libxml2-LibXML2/#parameters_913","text":"pctx: Pointer [ U8 val] ref pname: String val pExternalID: String val pSystemID: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_975","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#getentity","text":"[Source] fun box getEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref","title":"getEntity"},{"location":"pony-libxml2-LibXML2/#parameters_914","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_976","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#getparameterentity","text":"[Source] fun box getParameterEntity( pctx: Pointer[U8 val] ref, pname: String val) : NullablePointer[Xmlentity ref] ref","title":"getParameterEntity"},{"location":"pony-libxml2-LibXML2/#parameters_915","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_977","text":"NullablePointer [ Xmlentity ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#resolveentity","text":"[Source] fun box resolveEntity( pctx: Pointer[U8 val] ref, ppublicId: String val, psystemId: String val) : NullablePointer[Xmlparserinput ref] ref","title":"resolveEntity"},{"location":"pony-libxml2-LibXML2/#parameters_916","text":"pctx: Pointer [ U8 val] ref ppublicId: String val psystemId: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_978","text":"NullablePointer [ Xmlparserinput ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#entitydecl","text":"[Source] fun box entityDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, ppublicId: String val, psystemId: String val, pcontent: String val) : None val","title":"entityDecl"},{"location":"pony-libxml2-LibXML2/#parameters_917","text":"pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val ppublicId: String val psystemId: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_979","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#attributedecl","text":"[Source] fun box attributeDecl( pctx: Pointer[U8 val] ref, pelem: String val, pfullname: String val, ptype: I32 val, pdef: I32 val, pdefaultValue: String val, ptree: NullablePointer[Xmlenumeration ref] ref) : None val","title":"attributeDecl"},{"location":"pony-libxml2-LibXML2/#parameters_918","text":"pctx: Pointer [ U8 val] ref pelem: String val pfullname: String val ptype: I32 val pdef: I32 val pdefaultValue: String val ptree: NullablePointer [ Xmlenumeration ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_980","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#elementdecl","text":"[Source] fun box elementDecl( pctx: Pointer[U8 val] ref, pname: String val, ptype: I32 val, pcontent: NullablePointer[Xmlelementcontent ref] ref) : None val","title":"elementDecl"},{"location":"pony-libxml2-LibXML2/#parameters_919","text":"pctx: Pointer [ U8 val] ref pname: String val ptype: I32 val pcontent: NullablePointer [ Xmlelementcontent ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_981","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#notationdecl","text":"[Source] fun box notationDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val) : None val","title":"notationDecl"},{"location":"pony-libxml2-LibXML2/#parameters_920","text":"pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_982","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#unparsedentitydecl","text":"[Source] fun box unparsedEntityDecl( pctx: Pointer[U8 val] ref, pname: String val, ppublicId: String val, psystemId: String val, pnotationName: String val) : None val","title":"unparsedEntityDecl"},{"location":"pony-libxml2-LibXML2/#parameters_921","text":"pctx: Pointer [ U8 val] ref pname: String val ppublicId: String val psystemId: String val pnotationName: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_983","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#startdocument","text":"[Source] fun box startDocument( pctx: Pointer[U8 val] ref) : None val","title":"startDocument"},{"location":"pony-libxml2-LibXML2/#parameters_922","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_984","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#enddocument","text":"[Source] fun box endDocument( pctx: Pointer[U8 val] ref) : None val","title":"endDocument"},{"location":"pony-libxml2-LibXML2/#parameters_923","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_985","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#attribute","text":"[Source] fun box attribute( pctx: Pointer[U8 val] ref, pfullname: String val, pvalue: String val) : None val","title":"attribute"},{"location":"pony-libxml2-LibXML2/#parameters_924","text":"pctx: Pointer [ U8 val] ref pfullname: String val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_986","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#startelement","text":"[Source] fun box startElement( pctx: Pointer[U8 val] ref, pfullname: String val, patts: Pointer[Pointer[U8 val] tag] ref) : None val","title":"startElement"},{"location":"pony-libxml2-LibXML2/#parameters_925","text":"pctx: Pointer [ U8 val] ref pfullname: String val patts: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_987","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#endelement","text":"[Source] fun box endElement( pctx: Pointer[U8 val] ref, pname: String val) : None val","title":"endElement"},{"location":"pony-libxml2-LibXML2/#parameters_926","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_988","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#reference","text":"[Source] fun box reference( pctx: Pointer[U8 val] ref, pname: String val) : None val","title":"reference"},{"location":"pony-libxml2-LibXML2/#parameters_927","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_989","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#characters","text":"[Source] fun box characters( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val","title":"characters"},{"location":"pony-libxml2-LibXML2/#parameters_928","text":"pctx: Pointer [ U8 val] ref pch: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_990","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#ignorablewhitespace","text":"[Source] fun box ignorableWhitespace( pctx: Pointer[U8 val] ref, pch: String val, plen: I32 val) : None val","title":"ignorableWhitespace"},{"location":"pony-libxml2-LibXML2/#parameters_929","text":"pctx: Pointer [ U8 val] ref pch: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_991","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#processinginstruction","text":"[Source] fun box processingInstruction( pctx: Pointer[U8 val] ref, ptarget: String val, pdata: String val) : None val","title":"processingInstruction"},{"location":"pony-libxml2-LibXML2/#parameters_930","text":"pctx: Pointer [ U8 val] ref ptarget: String val pdata: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_992","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#globalnamespace","text":"[Source] fun box globalNamespace( pctx: Pointer[U8 val] ref, phref: String val, pprefix: String val) : None val","title":"globalNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_931","text":"pctx: Pointer [ U8 val] ref phref: String val pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_993","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#setnamespace","text":"[Source] fun box setNamespace( pctx: Pointer[U8 val] ref, pname: String val) : None val","title":"setNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_932","text":"pctx: Pointer [ U8 val] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_994","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#getnamespace","text":"[Source] fun box getNamespace( pctx: Pointer[U8 val] ref) : NullablePointer[Xmlns ref] ref","title":"getNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_933","text":"pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_995","text":"NullablePointer [ Xmlns ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#checknamespace","text":"[Source] fun box checkNamespace( pctx: Pointer[U8 val] ref, pnameSpace: String val) : I32 val","title":"checkNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_934","text":"pctx: Pointer [ U8 val] ref pnameSpace: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_996","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#namespacedecl","text":"[Source] fun box namespaceDecl( pctx: Pointer[U8 val] ref, phref: String val, pprefix: String val) : None val","title":"namespaceDecl"},{"location":"pony-libxml2-LibXML2/#parameters_935","text":"pctx: Pointer [ U8 val] ref phref: String val pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_997","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#comment","text":"[Source] fun box comment( pctx: Pointer[U8 val] ref, pvalue: String val) : None val","title":"comment"},{"location":"pony-libxml2-LibXML2/#parameters_936","text":"pctx: Pointer [ U8 val] ref pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_998","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#cdatablock","text":"[Source] fun box cdataBlock( pctx: Pointer[U8 val] ref, pvalue: String val, plen: I32 val) : None val","title":"cdataBlock"},{"location":"pony-libxml2-LibXML2/#parameters_937","text":"pctx: Pointer [ U8 val] ref pvalue: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_999","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#initxmldefaultsaxhandler","text":"[Source] fun box initxmlDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandlerv1 ref] ref, pwarning: I32 val) : None val","title":"initxmlDefaultSAXHandler"},{"location":"pony-libxml2-LibXML2/#parameters_938","text":"phdlr: NullablePointer [ Xmlsaxhandlerv1 ref] ref pwarning: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1000","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#inithtmldefaultsaxhandler","text":"[Source] fun box inithtmlDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandlerv1 ref] ref) : None val","title":"inithtmlDefaultSAXHandler"},{"location":"pony-libxml2-LibXML2/#parameters_939","text":"phdlr: NullablePointer [ Xmlsaxhandlerv1 ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1001","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#initdocbdefaultsaxhandler","text":"[Source] fun box initdocbDefaultSAXHandler( phdlr: NullablePointer[Xmlsaxhandlerv1 ref] ref) : None val","title":"initdocbDefaultSAXHandler"},{"location":"pony-libxml2-LibXML2/#parameters_940","text":"phdlr: NullablePointer [ Xmlsaxhandlerv1 ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1002","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemafreetype","text":"[Source] fun box xmlSchemaFreeType( ptype: NullablePointer[Xmlschematype ref] ref) : None val","title":"xmlSchemaFreeType"},{"location":"pony-libxml2-LibXML2/#parameters_941","text":"ptype: NullablePointer [ Xmlschematype ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1003","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemafreewildcard","text":"[Source] fun box xmlSchemaFreeWildcard( pwildcard: NullablePointer[Xmlschemawildcard ref] ref) : None val","title":"xmlSchemaFreeWildcard"},{"location":"pony-libxml2-LibXML2/#parameters_942","text":"pwildcard: NullablePointer [ Xmlschemawildcard ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1004","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronnewparserctxt","text":"[Source] fun box xmlSchematronNewParserCtxt( pURL: String val) : NullablePointer[Xmlschematronparserctxt ref] ref","title":"xmlSchematronNewParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_943","text":"pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1005","text":"NullablePointer [ Xmlschematronparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronnewmemparserctxt","text":"[Source] fun box xmlSchematronNewMemParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlschematronparserctxt ref] ref","title":"xmlSchematronNewMemParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_944","text":"pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1006","text":"NullablePointer [ Xmlschematronparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronnewdocparserctxt","text":"[Source] fun box xmlSchematronNewDocParserCtxt( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlschematronparserctxt ref] ref","title":"xmlSchematronNewDocParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_945","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1007","text":"NullablePointer [ Xmlschematronparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronfreeparserctxt","text":"[Source] fun box xmlSchematronFreeParserCtxt( pctxt: NullablePointer[Xmlschematronparserctxt ref] ref) : None val","title":"xmlSchematronFreeParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_946","text":"pctxt: NullablePointer [ Xmlschematronparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1008","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronparse","text":"[Source] fun box xmlSchematronParse( pctxt: NullablePointer[Xmlschematronparserctxt ref] ref) : NullablePointer[Xmlschematron ref] ref","title":"xmlSchematronParse"},{"location":"pony-libxml2-LibXML2/#parameters_947","text":"pctxt: NullablePointer [ Xmlschematronparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1009","text":"NullablePointer [ Xmlschematron ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronfree","text":"[Source] fun box xmlSchematronFree( pschema: NullablePointer[Xmlschematron ref] ref) : None val","title":"xmlSchematronFree"},{"location":"pony-libxml2-LibXML2/#parameters_948","text":"pschema: NullablePointer [ Xmlschematron ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1010","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronsetvalidstructurederrors","text":"[Source] fun box xmlSchematronSetValidStructuredErrors( pctxt: NullablePointer[Xmlschematronvalidctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlSchematronSetValidStructuredErrors"},{"location":"pony-libxml2-LibXML2/#parameters_949","text":"pctxt: NullablePointer [ Xmlschematronvalidctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1011","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronnewvalidctxt","text":"[Source] fun box xmlSchematronNewValidCtxt( pschema: NullablePointer[Xmlschematron ref] ref, poptions: I32 val) : NullablePointer[Xmlschematronvalidctxt ref] ref","title":"xmlSchematronNewValidCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_950","text":"pschema: NullablePointer [ Xmlschematron ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1012","text":"NullablePointer [ Xmlschematronvalidctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronfreevalidctxt","text":"[Source] fun box xmlSchematronFreeValidCtxt( pctxt: NullablePointer[Xmlschematronvalidctxt ref] ref) : None val","title":"xmlSchematronFreeValidCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_951","text":"pctxt: NullablePointer [ Xmlschematronvalidctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1013","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschematronvalidatedoc","text":"[Source] fun box xmlSchematronValidateDoc( pctxt: NullablePointer[Xmlschematronvalidctxt ref] ref, pinstance: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlSchematronValidateDoc"},{"location":"pony-libxml2-LibXML2/#parameters_952","text":"pctxt: NullablePointer [ Xmlschematronvalidctxt ref] ref pinstance: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1014","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcreateuri","text":"[Source] fun box xmlCreateURI() : NullablePointer[Xmluri ref] ref","title":"xmlCreateURI"},{"location":"pony-libxml2-LibXML2/#returns_1015","text":"NullablePointer [ Xmluri ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuilduri","text":"[Source] fun box xmlBuildURI( pURI: String val, pbase: String val) : String val","title":"xmlBuildURI"},{"location":"pony-libxml2-LibXML2/#parameters_953","text":"pURI: String val pbase: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1016","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlbuildrelativeuri","text":"[Source] fun box xmlBuildRelativeURI( pURI: String val, pbase: String val) : String val","title":"xmlBuildRelativeURI"},{"location":"pony-libxml2-LibXML2/#parameters_954","text":"pURI: String val pbase: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1017","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseuri","text":"[Source] fun box xmlParseURI( pstr: String val) : NullablePointer[Xmluri ref] ref","title":"xmlParseURI"},{"location":"pony-libxml2-LibXML2/#parameters_955","text":"pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1018","text":"NullablePointer [ Xmluri ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseuriraw","text":"[Source] fun box xmlParseURIRaw( pstr: String val, praw: I32 val) : NullablePointer[Xmluri ref] ref","title":"xmlParseURIRaw"},{"location":"pony-libxml2-LibXML2/#parameters_956","text":"pstr: String val praw: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1019","text":"NullablePointer [ Xmluri ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlparseurireference","text":"[Source] fun box xmlParseURIReference( puri: NullablePointer[Xmluri ref] ref, pstr: String val) : I32 val","title":"xmlParseURIReference"},{"location":"pony-libxml2-LibXML2/#parameters_957","text":"puri: NullablePointer [ Xmluri ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1020","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaveuri","text":"[Source] fun box xmlSaveUri( puri: NullablePointer[Xmluri ref] ref) : String val","title":"xmlSaveUri"},{"location":"pony-libxml2-LibXML2/#parameters_958","text":"puri: NullablePointer [ Xmluri ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1021","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlprinturi","text":"[Source] fun box xmlPrintURI( pstream: NullablePointer[IoFile ref] ref, puri: NullablePointer[Xmluri ref] ref) : None val","title":"xmlPrintURI"},{"location":"pony-libxml2-LibXML2/#parameters_959","text":"pstream: NullablePointer [ IoFile ref] ref puri: NullablePointer [ Xmluri ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1022","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmluriescapestr","text":"[Source] fun box xmlURIEscapeStr( pstr: String val, plist: String val) : String val","title":"xmlURIEscapeStr"},{"location":"pony-libxml2-LibXML2/#parameters_960","text":"pstr: String val plist: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1023","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmluriunescapestring","text":"[Source] fun box xmlURIUnescapeString( pstr: String val, plen: I32 val, ptarget: String val) : String val","title":"xmlURIUnescapeString"},{"location":"pony-libxml2-LibXML2/#parameters_961","text":"pstr: String val plen: I32 val ptarget: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1024","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnormalizeuripath","text":"[Source] fun box xmlNormalizeURIPath( ppath: String val) : I32 val","title":"xmlNormalizeURIPath"},{"location":"pony-libxml2-LibXML2/#parameters_962","text":"ppath: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1025","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmluriescape","text":"[Source] fun box xmlURIEscape( pstr: String val) : String val","title":"xmlURIEscape"},{"location":"pony-libxml2-LibXML2/#parameters_963","text":"pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1026","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreeuri","text":"[Source] fun box xmlFreeURI( puri: NullablePointer[Xmluri ref] ref) : None val","title":"xmlFreeURI"},{"location":"pony-libxml2-LibXML2/#parameters_964","text":"puri: NullablePointer [ Xmluri ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1027","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlcanonicpath","text":"[Source] fun box xmlCanonicPath( ppath: String val) : String val","title":"xmlCanonicPath"},{"location":"pony-libxml2-LibXML2/#parameters_965","text":"ppath: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1028","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlpathtouri","text":"[Source] fun box xmlPathToURI( ppath: String val) : String val","title":"xmlPathToURI"},{"location":"pony-libxml2-LibXML2/#parameters_966","text":"ppath: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1029","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludeprocess","text":"[Source] fun box xmlXIncludeProcess( pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlXIncludeProcess"},{"location":"pony-libxml2-LibXML2/#parameters_967","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1030","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludeprocessflags","text":"[Source] fun box xmlXIncludeProcessFlags( pdoc: NullablePointer[Xmldoc ref] tag, pflags: I32 val) : I32 val","title":"xmlXIncludeProcessFlags"},{"location":"pony-libxml2-LibXML2/#parameters_968","text":"pdoc: NullablePointer [ Xmldoc ref] tag pflags: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1031","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludeprocessflagsdata","text":"[Source] fun box xmlXIncludeProcessFlagsData( pdoc: NullablePointer[Xmldoc ref] tag, pflags: I32 val, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlXIncludeProcessFlagsData"},{"location":"pony-libxml2-LibXML2/#parameters_969","text":"pdoc: NullablePointer [ Xmldoc ref] tag pflags: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1032","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludeprocesstreeflagsdata","text":"[Source] fun box xmlXIncludeProcessTreeFlagsData( ptree: NullablePointer[Xmlnode ref] ref, pflags: I32 val, pdata: Pointer[U8 val] ref) : I32 val","title":"xmlXIncludeProcessTreeFlagsData"},{"location":"pony-libxml2-LibXML2/#parameters_970","text":"ptree: NullablePointer [ Xmlnode ref] ref pflags: I32 val pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1033","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludeprocesstree","text":"[Source] fun box xmlXIncludeProcessTree( ptree: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlXIncludeProcessTree"},{"location":"pony-libxml2-LibXML2/#parameters_971","text":"ptree: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1034","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludeprocesstreeflags","text":"[Source] fun box xmlXIncludeProcessTreeFlags( ptree: NullablePointer[Xmlnode ref] ref, pflags: I32 val) : I32 val","title":"xmlXIncludeProcessTreeFlags"},{"location":"pony-libxml2-LibXML2/#parameters_972","text":"ptree: NullablePointer [ Xmlnode ref] ref pflags: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1035","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludenewcontext","text":"[Source] fun box xmlXIncludeNewContext( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlxincludectxt ref] ref","title":"xmlXIncludeNewContext"},{"location":"pony-libxml2-LibXML2/#parameters_973","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1036","text":"NullablePointer [ Xmlxincludectxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludesetflags","text":"[Source] fun box xmlXIncludeSetFlags( pctxt: NullablePointer[Xmlxincludectxt ref] ref, pflags: I32 val) : I32 val","title":"xmlXIncludeSetFlags"},{"location":"pony-libxml2-LibXML2/#parameters_974","text":"pctxt: NullablePointer [ Xmlxincludectxt ref] ref pflags: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1037","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludefreecontext","text":"[Source] fun box xmlXIncludeFreeContext( pctxt: NullablePointer[Xmlxincludectxt ref] ref) : None val","title":"xmlXIncludeFreeContext"},{"location":"pony-libxml2-LibXML2/#parameters_975","text":"pctxt: NullablePointer [ Xmlxincludectxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1038","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxincludeprocessnode","text":"[Source] fun box xmlXIncludeProcessNode( pctxt: NullablePointer[Xmlxincludectxt ref] ref, ptree: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlXIncludeProcessNode"},{"location":"pony-libxml2-LibXML2/#parameters_976","text":"pctxt: NullablePointer [ Xmlxincludectxt ref] ref ptree: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1039","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmoduleopen","text":"[Source] fun box xmlModuleOpen( pfilename: String val, poptions: I32 val) : NullablePointer[Xmlmodule ref] ref","title":"xmlModuleOpen"},{"location":"pony-libxml2-LibXML2/#parameters_977","text":"pfilename: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1040","text":"NullablePointer [ Xmlmodule ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmodulesymbol","text":"[Source] fun box xmlModuleSymbol( pmodule: NullablePointer[Xmlmodule ref] ref, pname: String val, presult: Pointer[Pointer[U8 val] ref] ref) : I32 val","title":"xmlModuleSymbol"},{"location":"pony-libxml2-LibXML2/#parameters_978","text":"pmodule: NullablePointer [ Xmlmodule ref] ref pname: String val presult: Pointer [ Pointer [ U8 val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1041","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmoduleclose","text":"[Source] fun box xmlModuleClose( pmodule: NullablePointer[Xmlmodule ref] ref) : I32 val","title":"xmlModuleClose"},{"location":"pony-libxml2-LibXML2/#parameters_979","text":"pmodule: NullablePointer [ Xmlmodule ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1042","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlmodulefree","text":"[Source] fun box xmlModuleFree( pmodule: NullablePointer[Xmlmodule ref] ref) : I32 val","title":"xmlModuleFree"},{"location":"pony-libxml2-LibXML2/#parameters_980","text":"pmodule: NullablePointer [ Xmlmodule ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1043","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewparserctxt","text":"[Source] fun box xmlSchemaNewParserCtxt( pURL: String val) : NullablePointer[Xmlschemaparserctxt ref] ref","title":"xmlSchemaNewParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_981","text":"pURL: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1044","text":"NullablePointer [ Xmlschemaparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewmemparserctxt","text":"[Source] fun box xmlSchemaNewMemParserCtxt( pbuffer: String val, psize: I32 val) : NullablePointer[Xmlschemaparserctxt ref] ref","title":"xmlSchemaNewMemParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_982","text":"pbuffer: String val psize: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1045","text":"NullablePointer [ Xmlschemaparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewdocparserctxt","text":"[Source] fun box xmlSchemaNewDocParserCtxt( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmlschemaparserctxt ref] ref","title":"xmlSchemaNewDocParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_983","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1046","text":"NullablePointer [ Xmlschemaparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemafreeparserctxt","text":"[Source] fun box xmlSchemaFreeParserCtxt( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref) : None val","title":"xmlSchemaFreeParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_984","text":"pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1047","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemasetparsererrors","text":"[Source] fun box xmlSchemaSetParserErrors( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlSchemaSetParserErrors"},{"location":"pony-libxml2-LibXML2/#parameters_985","text":"pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1048","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemasetparserstructurederrors","text":"[Source] fun box xmlSchemaSetParserStructuredErrors( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlSchemaSetParserStructuredErrors"},{"location":"pony-libxml2-LibXML2/#parameters_986","text":"pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1049","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetparsererrors","text":"[Source] fun box xmlSchemaGetParserErrors( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val","title":"xmlSchemaGetParserErrors"},{"location":"pony-libxml2-LibXML2/#parameters_987","text":"pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1050","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemaisvalid","text":"[Source] fun box xmlSchemaIsValid( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : I32 val","title":"xmlSchemaIsValid"},{"location":"pony-libxml2-LibXML2/#parameters_988","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1051","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemaparse","text":"[Source] fun box xmlSchemaParse( pctxt: NullablePointer[Xmlschemaparserctxt ref] ref) : NullablePointer[Xmlschema ref] ref","title":"xmlSchemaParse"},{"location":"pony-libxml2-LibXML2/#parameters_989","text":"pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1052","text":"NullablePointer [ Xmlschema ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemafree","text":"[Source] fun box xmlSchemaFree( pschema: NullablePointer[Xmlschema ref] ref) : None val","title":"xmlSchemaFree"},{"location":"pony-libxml2-LibXML2/#parameters_990","text":"pschema: NullablePointer [ Xmlschema ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1053","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemadump","text":"[Source] fun box xmlSchemaDump( poutput: NullablePointer[IoFile ref] ref, pschema: NullablePointer[Xmlschema ref] ref) : None val","title":"xmlSchemaDump"},{"location":"pony-libxml2-LibXML2/#parameters_991","text":"poutput: NullablePointer [ IoFile ref] ref pschema: NullablePointer [ Xmlschema ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1054","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemasetvaliderrors","text":"[Source] fun box xmlSchemaSetValidErrors( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, perr: Pointer[FUNCTIONPOINTER val] ref, pwarn: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlSchemaSetValidErrors"},{"location":"pony-libxml2-LibXML2/#parameters_992","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref perr: Pointer [ FUNCTIONPOINTER val] ref pwarn: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1055","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemasetvalidstructurederrors","text":"[Source] fun box xmlSchemaSetValidStructuredErrors( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pserror: Pointer[FUNCTIONPOINTER val] ref, pctx: Pointer[U8 val] ref) : None val","title":"xmlSchemaSetValidStructuredErrors"},{"location":"pony-libxml2-LibXML2/#parameters_993","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pserror: Pointer [ FUNCTIONPOINTER val] ref pctx: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1056","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetvaliderrors","text":"[Source] fun box xmlSchemaGetValidErrors( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, perr: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pwarn: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, pctx: Pointer[Pointer[U8 val] ref] ref) : I32 val","title":"xmlSchemaGetValidErrors"},{"location":"pony-libxml2-LibXML2/#parameters_994","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref perr: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pwarn: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref pctx: Pointer [ Pointer [ U8 val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1057","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemasetvalidoptions","text":"[Source] fun box xmlSchemaSetValidOptions( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, poptions: I32 val) : I32 val","title":"xmlSchemaSetValidOptions"},{"location":"pony-libxml2-LibXML2/#parameters_995","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1058","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatesetfilename","text":"[Source] fun box xmlSchemaValidateSetFilename( pvctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pfilename: String val) : None val","title":"xmlSchemaValidateSetFilename"},{"location":"pony-libxml2-LibXML2/#parameters_996","text":"pvctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1059","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidctxtgetoptions","text":"[Source] fun box xmlSchemaValidCtxtGetOptions( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : I32 val","title":"xmlSchemaValidCtxtGetOptions"},{"location":"pony-libxml2-LibXML2/#parameters_997","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1060","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewvalidctxt","text":"[Source] fun box xmlSchemaNewValidCtxt( pschema: NullablePointer[Xmlschema ref] ref) : NullablePointer[Xmlschemavalidctxt ref] ref","title":"xmlSchemaNewValidCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_998","text":"pschema: NullablePointer [ Xmlschema ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1061","text":"NullablePointer [ Xmlschemavalidctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemafreevalidctxt","text":"[Source] fun box xmlSchemaFreeValidCtxt( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : None val","title":"xmlSchemaFreeValidCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_999","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1062","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatedoc","text":"[Source] fun box xmlSchemaValidateDoc( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pinstance: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlSchemaValidateDoc"},{"location":"pony-libxml2-LibXML2/#parameters_1000","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pinstance: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1063","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidateoneelement","text":"[Source] fun box xmlSchemaValidateOneElement( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pelem: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlSchemaValidateOneElement"},{"location":"pony-libxml2-LibXML2/#parameters_1001","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pelem: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1064","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatestream","text":"[Source] fun box xmlSchemaValidateStream( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, penc: I32 val, psax: NullablePointer[Xmlsaxhandler ref] ref, puser_data: Pointer[U8 val] ref) : I32 val","title":"xmlSchemaValidateStream"},{"location":"pony-libxml2-LibXML2/#parameters_1002","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref penc: I32 val psax: NullablePointer [ Xmlsaxhandler ref] ref puser_data: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1065","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatefile","text":"[Source] fun box xmlSchemaValidateFile( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pfilename: String val, poptions: I32 val) : I32 val","title":"xmlSchemaValidateFile"},{"location":"pony-libxml2-LibXML2/#parameters_1003","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pfilename: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1066","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidctxtgetparserctxt","text":"[Source] fun box xmlSchemaValidCtxtGetParserCtxt( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref) : NullablePointer[Xmlparserctxt ref] ref","title":"xmlSchemaValidCtxtGetParserCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_1004","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1067","text":"NullablePointer [ Xmlparserctxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemasaxplug","text":"[Source] fun box xmlSchemaSAXPlug( pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, psax: Pointer[NullablePointer[Xmlsaxhandler ref] ref] ref, puser_data: Pointer[Pointer[U8 val] ref] ref) : NullablePointer[Xmlschemasaxplug ref] ref","title":"xmlSchemaSAXPlug"},{"location":"pony-libxml2-LibXML2/#parameters_1005","text":"pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref psax: Pointer [ NullablePointer [ Xmlsaxhandler ref] ref] ref puser_data: Pointer [ Pointer [ U8 val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1068","text":"NullablePointer [ Xmlschemasaxplug ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemasaxunplug","text":"[Source] fun box xmlSchemaSAXUnplug( pplug: NullablePointer[Xmlschemasaxplug ref] ref) : I32 val","title":"xmlSchemaSAXUnplug"},{"location":"pony-libxml2-LibXML2/#parameters_1006","text":"pplug: NullablePointer [ Xmlschemasaxplug ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1069","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatesetlocator","text":"[Source] fun box xmlSchemaValidateSetLocator( pvctxt: NullablePointer[Xmlschemavalidctxt ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, pctxt: Pointer[U8 val] ref) : None val","title":"xmlSchemaValidateSetLocator"},{"location":"pony-libxml2-LibXML2/#parameters_1007","text":"pvctxt: NullablePointer [ Xmlschemavalidctxt ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref pctxt: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1070","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextreader","text":"[Source] fun box xmlNewTextReader( pinput: NullablePointer[Xmlparserinputbuffer ref] ref, pURI: String val) : NullablePointer[Xmltextreader ref] ref","title":"xmlNewTextReader"},{"location":"pony-libxml2-LibXML2/#parameters_1008","text":"pinput: NullablePointer [ Xmlparserinputbuffer ref] ref pURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1071","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextreaderfilename","text":"[Source] fun box xmlNewTextReaderFilename( pURI: String val) : NullablePointer[Xmltextreader ref] ref","title":"xmlNewTextReaderFilename"},{"location":"pony-libxml2-LibXML2/#parameters_1009","text":"pURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1072","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreetextreader","text":"[Source] fun box xmlFreeTextReader( preader: NullablePointer[Xmltextreader ref] ref) : None val","title":"xmlFreeTextReader"},{"location":"pony-libxml2-LibXML2/#parameters_1010","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1073","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadersetup","text":"[Source] fun box xmlTextReaderSetup( preader: NullablePointer[Xmltextreader ref] ref, pinput: NullablePointer[Xmlparserinputbuffer ref] ref, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val","title":"xmlTextReaderSetup"},{"location":"pony-libxml2-LibXML2/#parameters_1011","text":"preader: NullablePointer [ Xmltextreader ref] ref pinput: NullablePointer [ Xmlparserinputbuffer ref] ref pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1074","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderread","text":"[Source] fun box xmlTextReaderRead( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderRead"},{"location":"pony-libxml2-LibXML2/#parameters_1012","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1075","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderreadinnerxml","text":"[Source] fun box xmlTextReaderReadInnerXml( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderReadInnerXml"},{"location":"pony-libxml2-LibXML2/#parameters_1013","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1076","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderreadouterxml","text":"[Source] fun box xmlTextReaderReadOuterXml( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderReadOuterXml"},{"location":"pony-libxml2-LibXML2/#parameters_1014","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1077","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderreadstring","text":"[Source] fun box xmlTextReaderReadString( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderReadString"},{"location":"pony-libxml2-LibXML2/#parameters_1015","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1078","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderreadattributevalue","text":"[Source] fun box xmlTextReaderReadAttributeValue( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderReadAttributeValue"},{"location":"pony-libxml2-LibXML2/#parameters_1016","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1079","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderattributecount","text":"[Source] fun box xmlTextReaderAttributeCount( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderAttributeCount"},{"location":"pony-libxml2-LibXML2/#parameters_1017","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1080","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderdepth","text":"[Source] fun box xmlTextReaderDepth( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderDepth"},{"location":"pony-libxml2-LibXML2/#parameters_1018","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1081","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderhasattributes","text":"[Source] fun box xmlTextReaderHasAttributes( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderHasAttributes"},{"location":"pony-libxml2-LibXML2/#parameters_1019","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1082","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderhasvalue","text":"[Source] fun box xmlTextReaderHasValue( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderHasValue"},{"location":"pony-libxml2-LibXML2/#parameters_1020","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1083","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderisdefault","text":"[Source] fun box xmlTextReaderIsDefault( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderIsDefault"},{"location":"pony-libxml2-LibXML2/#parameters_1021","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1084","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderisemptyelement","text":"[Source] fun box xmlTextReaderIsEmptyElement( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderIsEmptyElement"},{"location":"pony-libxml2-LibXML2/#parameters_1022","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1085","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadernodetype","text":"[Source] fun box xmlTextReaderNodeType( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderNodeType"},{"location":"pony-libxml2-LibXML2/#parameters_1023","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1086","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderquotechar","text":"[Source] fun box xmlTextReaderQuoteChar( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderQuoteChar"},{"location":"pony-libxml2-LibXML2/#parameters_1024","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1087","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderreadstate","text":"[Source] fun box xmlTextReaderReadState( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderReadState"},{"location":"pony-libxml2-LibXML2/#parameters_1025","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1088","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderisnamespacedecl","text":"[Source] fun box xmlTextReaderIsNamespaceDecl( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderIsNamespaceDecl"},{"location":"pony-libxml2-LibXML2/#parameters_1026","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1089","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstbaseuri","text":"[Source] fun box xmlTextReaderConstBaseUri( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstBaseUri"},{"location":"pony-libxml2-LibXML2/#parameters_1027","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1090","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstlocalname","text":"[Source] fun box xmlTextReaderConstLocalName( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstLocalName"},{"location":"pony-libxml2-LibXML2/#parameters_1028","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1091","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstname","text":"[Source] fun box xmlTextReaderConstName( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstName"},{"location":"pony-libxml2-LibXML2/#parameters_1029","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1092","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstnamespaceuri","text":"[Source] fun box xmlTextReaderConstNamespaceUri( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstNamespaceUri"},{"location":"pony-libxml2-LibXML2/#parameters_1030","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1093","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstprefix","text":"[Source] fun box xmlTextReaderConstPrefix( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstPrefix"},{"location":"pony-libxml2-LibXML2/#parameters_1031","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1094","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstxmllang","text":"[Source] fun box xmlTextReaderConstXmlLang( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstXmlLang"},{"location":"pony-libxml2-LibXML2/#parameters_1032","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1095","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconststring","text":"[Source] fun box xmlTextReaderConstString( preader: NullablePointer[Xmltextreader ref] ref, pstr: String val) : String val","title":"xmlTextReaderConstString"},{"location":"pony-libxml2-LibXML2/#parameters_1033","text":"preader: NullablePointer [ Xmltextreader ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1096","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstvalue","text":"[Source] fun box xmlTextReaderConstValue( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstValue"},{"location":"pony-libxml2-LibXML2/#parameters_1034","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1097","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderbaseuri","text":"[Source] fun box xmlTextReaderBaseUri( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderBaseUri"},{"location":"pony-libxml2-LibXML2/#parameters_1035","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1098","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderlocalname","text":"[Source] fun box xmlTextReaderLocalName( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderLocalName"},{"location":"pony-libxml2-LibXML2/#parameters_1036","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1099","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadername","text":"[Source] fun box xmlTextReaderName( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderName"},{"location":"pony-libxml2-LibXML2/#parameters_1037","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1100","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadernamespaceuri","text":"[Source] fun box xmlTextReaderNamespaceUri( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderNamespaceUri"},{"location":"pony-libxml2-LibXML2/#parameters_1038","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1101","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderprefix","text":"[Source] fun box xmlTextReaderPrefix( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderPrefix"},{"location":"pony-libxml2-LibXML2/#parameters_1039","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1102","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderxmllang","text":"[Source] fun box xmlTextReaderXmlLang( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderXmlLang"},{"location":"pony-libxml2-LibXML2/#parameters_1040","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1103","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadervalue","text":"[Source] fun box xmlTextReaderValue( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderValue"},{"location":"pony-libxml2-LibXML2/#parameters_1041","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1104","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderclose","text":"[Source] fun box xmlTextReaderClose( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderClose"},{"location":"pony-libxml2-LibXML2/#parameters_1042","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1105","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergetattributeno","text":"[Source] fun box xmlTextReaderGetAttributeNo( preader: NullablePointer[Xmltextreader ref] ref, pno: I32 val) : String val","title":"xmlTextReaderGetAttributeNo"},{"location":"pony-libxml2-LibXML2/#parameters_1043","text":"preader: NullablePointer [ Xmltextreader ref] ref pno: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1106","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergetattribute","text":"[Source] fun box xmlTextReaderGetAttribute( preader: NullablePointer[Xmltextreader ref] ref, pname: String val) : String val","title":"xmlTextReaderGetAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1044","text":"preader: NullablePointer [ Xmltextreader ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1107","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergetattributens","text":"[Source] fun box xmlTextReaderGetAttributeNs( preader: NullablePointer[Xmltextreader ref] ref, plocalName: String val, pnamespaceURI: String val) : String val","title":"xmlTextReaderGetAttributeNs"},{"location":"pony-libxml2-LibXML2/#parameters_1045","text":"preader: NullablePointer [ Xmltextreader ref] ref plocalName: String val pnamespaceURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1108","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergetremainder","text":"[Source] fun box xmlTextReaderGetRemainder( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlparserinputbuffer ref] ref","title":"xmlTextReaderGetRemainder"},{"location":"pony-libxml2-LibXML2/#parameters_1046","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1109","text":"NullablePointer [ Xmlparserinputbuffer ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderlookupnamespace","text":"[Source] fun box xmlTextReaderLookupNamespace( preader: NullablePointer[Xmltextreader ref] ref, pprefix: String val) : String val","title":"xmlTextReaderLookupNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_1047","text":"preader: NullablePointer [ Xmltextreader ref] ref pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1110","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadermovetoattributeno","text":"[Source] fun box xmlTextReaderMoveToAttributeNo( preader: NullablePointer[Xmltextreader ref] ref, pno: I32 val) : I32 val","title":"xmlTextReaderMoveToAttributeNo"},{"location":"pony-libxml2-LibXML2/#parameters_1048","text":"preader: NullablePointer [ Xmltextreader ref] ref pno: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1111","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadermovetoattribute","text":"[Source] fun box xmlTextReaderMoveToAttribute( preader: NullablePointer[Xmltextreader ref] ref, pname: String val) : I32 val","title":"xmlTextReaderMoveToAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1049","text":"preader: NullablePointer [ Xmltextreader ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1112","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadermovetoattributens","text":"[Source] fun box xmlTextReaderMoveToAttributeNs( preader: NullablePointer[Xmltextreader ref] ref, plocalName: String val, pnamespaceURI: String val) : I32 val","title":"xmlTextReaderMoveToAttributeNs"},{"location":"pony-libxml2-LibXML2/#parameters_1050","text":"preader: NullablePointer [ Xmltextreader ref] ref plocalName: String val pnamespaceURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1113","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadermovetofirstattribute","text":"[Source] fun box xmlTextReaderMoveToFirstAttribute( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderMoveToFirstAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1051","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1114","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadermovetonextattribute","text":"[Source] fun box xmlTextReaderMoveToNextAttribute( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderMoveToNextAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1052","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1115","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadermovetoelement","text":"[Source] fun box xmlTextReaderMoveToElement( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderMoveToElement"},{"location":"pony-libxml2-LibXML2/#parameters_1053","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1116","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadernormalization","text":"[Source] fun box xmlTextReaderNormalization( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderNormalization"},{"location":"pony-libxml2-LibXML2/#parameters_1054","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1117","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstencoding","text":"[Source] fun box xmlTextReaderConstEncoding( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstEncoding"},{"location":"pony-libxml2-LibXML2/#parameters_1055","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1118","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadersetparserprop","text":"[Source] fun box xmlTextReaderSetParserProp( preader: NullablePointer[Xmltextreader ref] ref, pprop: I32 val, pvalue: I32 val) : I32 val","title":"xmlTextReaderSetParserProp"},{"location":"pony-libxml2-LibXML2/#parameters_1056","text":"preader: NullablePointer [ Xmltextreader ref] ref pprop: I32 val pvalue: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1119","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergetparserprop","text":"[Source] fun box xmlTextReaderGetParserProp( preader: NullablePointer[Xmltextreader ref] ref, pprop: I32 val) : I32 val","title":"xmlTextReaderGetParserProp"},{"location":"pony-libxml2-LibXML2/#parameters_1057","text":"preader: NullablePointer [ Xmltextreader ref] ref pprop: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1120","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadercurrentnode","text":"[Source] fun box xmlTextReaderCurrentNode( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlTextReaderCurrentNode"},{"location":"pony-libxml2-LibXML2/#parameters_1058","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1121","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergetparserlinenumber","text":"[Source] fun box xmlTextReaderGetParserLineNumber( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderGetParserLineNumber"},{"location":"pony-libxml2-LibXML2/#parameters_1059","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1122","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergetparsercolumnnumber","text":"[Source] fun box xmlTextReaderGetParserColumnNumber( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderGetParserColumnNumber"},{"location":"pony-libxml2-LibXML2/#parameters_1060","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1123","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderpreserve","text":"[Source] fun box xmlTextReaderPreserve( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlTextReaderPreserve"},{"location":"pony-libxml2-LibXML2/#parameters_1061","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1124","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderpreservepattern","text":"[Source] fun box xmlTextReaderPreservePattern( preader: NullablePointer[Xmltextreader ref] ref, ppattern: String val, pnamespaces: Pointer[Pointer[U8 val] tag] ref) : I32 val","title":"xmlTextReaderPreservePattern"},{"location":"pony-libxml2-LibXML2/#parameters_1062","text":"preader: NullablePointer [ Xmltextreader ref] ref ppattern: String val pnamespaces: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1125","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadercurrentdoc","text":"[Source] fun box xmlTextReaderCurrentDoc( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmldoc ref] ref","title":"xmlTextReaderCurrentDoc"},{"location":"pony-libxml2-LibXML2/#parameters_1063","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1126","text":"NullablePointer [ Xmldoc ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderexpand","text":"[Source] fun box xmlTextReaderExpand( preader: NullablePointer[Xmltextreader ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlTextReaderExpand"},{"location":"pony-libxml2-LibXML2/#parameters_1064","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1127","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadernext","text":"[Source] fun box xmlTextReaderNext( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderNext"},{"location":"pony-libxml2-LibXML2/#parameters_1065","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1128","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadernextsibling","text":"[Source] fun box xmlTextReaderNextSibling( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderNextSibling"},{"location":"pony-libxml2-LibXML2/#parameters_1066","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1129","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderisvalid","text":"[Source] fun box xmlTextReaderIsValid( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderIsValid"},{"location":"pony-libxml2-LibXML2/#parameters_1067","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1130","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderrelaxngvalidate","text":"[Source] fun box xmlTextReaderRelaxNGValidate( preader: NullablePointer[Xmltextreader ref] ref, prng: String val) : I32 val","title":"xmlTextReaderRelaxNGValidate"},{"location":"pony-libxml2-LibXML2/#parameters_1068","text":"preader: NullablePointer [ Xmltextreader ref] ref prng: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1131","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderrelaxngvalidatectxt","text":"[Source] fun box xmlTextReaderRelaxNGValidateCtxt( preader: NullablePointer[Xmltextreader ref] ref, pctxt: NullablePointer[Xmlrelaxngvalidctxt ref] ref, poptions: I32 val) : I32 val","title":"xmlTextReaderRelaxNGValidateCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_1069","text":"preader: NullablePointer [ Xmltextreader ref] ref pctxt: NullablePointer [ Xmlrelaxngvalidctxt ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1132","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderrelaxngsetschema","text":"[Source] fun box xmlTextReaderRelaxNGSetSchema( preader: NullablePointer[Xmltextreader ref] ref, pschema: NullablePointer[Xmlrelaxng ref] ref) : I32 val","title":"xmlTextReaderRelaxNGSetSchema"},{"location":"pony-libxml2-LibXML2/#parameters_1070","text":"preader: NullablePointer [ Xmltextreader ref] ref pschema: NullablePointer [ Xmlrelaxng ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1133","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderschemavalidate","text":"[Source] fun box xmlTextReaderSchemaValidate( preader: NullablePointer[Xmltextreader ref] ref, pxsd: String val) : I32 val","title":"xmlTextReaderSchemaValidate"},{"location":"pony-libxml2-LibXML2/#parameters_1071","text":"preader: NullablePointer [ Xmltextreader ref] ref pxsd: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1134","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderschemavalidatectxt","text":"[Source] fun box xmlTextReaderSchemaValidateCtxt( preader: NullablePointer[Xmltextreader ref] ref, pctxt: NullablePointer[Xmlschemavalidctxt ref] ref, poptions: I32 val) : I32 val","title":"xmlTextReaderSchemaValidateCtxt"},{"location":"pony-libxml2-LibXML2/#parameters_1072","text":"preader: NullablePointer [ Xmltextreader ref] ref pctxt: NullablePointer [ Xmlschemavalidctxt ref] ref poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1135","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadersetschema","text":"[Source] fun box xmlTextReaderSetSchema( preader: NullablePointer[Xmltextreader ref] ref, pschema: NullablePointer[Xmlschema ref] ref) : I32 val","title":"xmlTextReaderSetSchema"},{"location":"pony-libxml2-LibXML2/#parameters_1073","text":"preader: NullablePointer [ Xmltextreader ref] ref pschema: NullablePointer [ Xmlschema ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1136","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderconstxmlversion","text":"[Source] fun box xmlTextReaderConstXmlVersion( preader: NullablePointer[Xmltextreader ref] ref) : String val","title":"xmlTextReaderConstXmlVersion"},{"location":"pony-libxml2-LibXML2/#parameters_1074","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1137","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderstandalone","text":"[Source] fun box xmlTextReaderStandalone( preader: NullablePointer[Xmltextreader ref] ref) : I32 val","title":"xmlTextReaderStandalone"},{"location":"pony-libxml2-LibXML2/#parameters_1075","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1138","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderbyteconsumed","text":"[Source] fun box xmlTextReaderByteConsumed( preader: NullablePointer[Xmltextreader ref] ref) : I64 val","title":"xmlTextReaderByteConsumed"},{"location":"pony-libxml2-LibXML2/#parameters_1076","text":"preader: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1139","text":"I64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreaderwalker","text":"[Source] fun box xmlReaderWalker( pdoc: NullablePointer[Xmldoc ref] tag) : NullablePointer[Xmltextreader ref] ref","title":"xmlReaderWalker"},{"location":"pony-libxml2-LibXML2/#parameters_1077","text":"pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1140","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreaderfordoc","text":"[Source] fun box xmlReaderForDoc( pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref","title":"xmlReaderForDoc"},{"location":"pony-libxml2-LibXML2/#parameters_1078","text":"pcur: String val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1141","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreaderforfile","text":"[Source] fun box xmlReaderForFile( pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref","title":"xmlReaderForFile"},{"location":"pony-libxml2-LibXML2/#parameters_1079","text":"pfilename: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1142","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreaderformemory","text":"[Source] fun box xmlReaderForMemory( pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref","title":"xmlReaderForMemory"},{"location":"pony-libxml2-LibXML2/#parameters_1080","text":"pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1143","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreaderforfd","text":"[Source] fun box xmlReaderForFd( pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref","title":"xmlReaderForFd"},{"location":"pony-libxml2-LibXML2/#parameters_1081","text":"pfd: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1144","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreaderforio","text":"[Source] fun box xmlReaderForIO( pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmltextreader ref] ref","title":"xmlReaderForIO"},{"location":"pony-libxml2-LibXML2/#parameters_1082","text":"pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1145","text":"NullablePointer [ Xmltextreader ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadernewwalker","text":"[Source] fun box xmlReaderNewWalker( preader: NullablePointer[Xmltextreader ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I32 val","title":"xmlReaderNewWalker"},{"location":"pony-libxml2-LibXML2/#parameters_1083","text":"preader: NullablePointer [ Xmltextreader ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1146","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadernewdoc","text":"[Source] fun box xmlReaderNewDoc( preader: NullablePointer[Xmltextreader ref] ref, pcur: String val, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val","title":"xmlReaderNewDoc"},{"location":"pony-libxml2-LibXML2/#parameters_1084","text":"preader: NullablePointer [ Xmltextreader ref] ref pcur: String val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1147","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadernewfile","text":"[Source] fun box xmlReaderNewFile( preader: NullablePointer[Xmltextreader ref] ref, pfilename: String val, pencoding: String val, poptions: I32 val) : I32 val","title":"xmlReaderNewFile"},{"location":"pony-libxml2-LibXML2/#parameters_1085","text":"preader: NullablePointer [ Xmltextreader ref] ref pfilename: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1148","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadernewmemory","text":"[Source] fun box xmlReaderNewMemory( preader: NullablePointer[Xmltextreader ref] ref, pbuffer: String val, psize: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val","title":"xmlReaderNewMemory"},{"location":"pony-libxml2-LibXML2/#parameters_1086","text":"preader: NullablePointer [ Xmltextreader ref] ref pbuffer: String val psize: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1149","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadernewfd","text":"[Source] fun box xmlReaderNewFd( preader: NullablePointer[Xmltextreader ref] ref, pfd: I32 val, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val","title":"xmlReaderNewFd"},{"location":"pony-libxml2-LibXML2/#parameters_1087","text":"preader: NullablePointer [ Xmltextreader ref] ref pfd: I32 val pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1150","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlreadernewio","text":"[Source] fun box xmlReaderNewIO( preader: NullablePointer[Xmltextreader ref] ref, pioread: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pURL: String val, pencoding: String val, poptions: I32 val) : I32 val","title":"xmlReaderNewIO"},{"location":"pony-libxml2-LibXML2/#parameters_1088","text":"preader: NullablePointer [ Xmltextreader ref] ref pioread: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pURL: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1151","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderlocatorlinenumber","text":"[Source] fun box xmlTextReaderLocatorLineNumber( plocator: Pointer[U8 val] ref) : I32 val","title":"xmlTextReaderLocatorLineNumber"},{"location":"pony-libxml2-LibXML2/#parameters_1089","text":"plocator: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1152","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderlocatorbaseuri","text":"[Source] fun box xmlTextReaderLocatorBaseURI( plocator: Pointer[U8 val] ref) : String val","title":"xmlTextReaderLocatorBaseURI"},{"location":"pony-libxml2-LibXML2/#parameters_1090","text":"plocator: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1153","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreaderseterrorhandler","text":"[Source] fun box xmlTextReaderSetErrorHandler( preader: NullablePointer[Xmltextreader ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, parg: Pointer[U8 val] ref) : None val","title":"xmlTextReaderSetErrorHandler"},{"location":"pony-libxml2-LibXML2/#parameters_1091","text":"preader: NullablePointer [ Xmltextreader ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref parg: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1154","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadersetstructurederrorhandler","text":"[Source] fun box xmlTextReaderSetStructuredErrorHandler( preader: NullablePointer[Xmltextreader ref] ref, pf: Pointer[FUNCTIONPOINTER val] ref, parg: Pointer[U8 val] ref) : None val","title":"xmlTextReaderSetStructuredErrorHandler"},{"location":"pony-libxml2-LibXML2/#parameters_1092","text":"preader: NullablePointer [ Xmltextreader ref] ref pf: Pointer [ FUNCTIONPOINTER val] ref parg: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1155","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextreadergeterrorhandler","text":"[Source] fun box xmlTextReaderGetErrorHandler( preader: NullablePointer[Xmltextreader ref] ref, pf: Pointer[Pointer[FUNCTIONPOINTER val] ref] ref, parg: Pointer[Pointer[U8 val] ref] ref) : None val","title":"xmlTextReaderGetErrorHandler"},{"location":"pony-libxml2-LibXML2/#parameters_1093","text":"preader: NullablePointer [ Xmltextreader ref] ref pf: Pointer [ Pointer [ FUNCTIONPOINTER val] ref] ref parg: Pointer [ Pointer [ U8 val] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1156","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavetofd","text":"[Source] fun box xmlSaveToFd( pfd: I32 val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref","title":"xmlSaveToFd"},{"location":"pony-libxml2-LibXML2/#parameters_1094","text":"pfd: I32 val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1157","text":"NullablePointer [ Xmlsavectxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavetofilename","text":"[Source] fun box xmlSaveToFilename( pfilename: String val, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref","title":"xmlSaveToFilename"},{"location":"pony-libxml2-LibXML2/#parameters_1095","text":"pfilename: String val pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1158","text":"NullablePointer [ Xmlsavectxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavetobuffer","text":"[Source] fun box xmlSaveToBuffer( pbuffer: NullablePointer[Xmlbuffer ref] ref, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref","title":"xmlSaveToBuffer"},{"location":"pony-libxml2-LibXML2/#parameters_1096","text":"pbuffer: NullablePointer [ Xmlbuffer ref] ref pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1159","text":"NullablePointer [ Xmlsavectxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavetoio","text":"[Source] fun box xmlSaveToIO( piowrite: Pointer[FUNCTIONPOINTER val] ref, pioclose: Pointer[FUNCTIONPOINTER val] ref, pioctx: Pointer[U8 val] ref, pencoding: String val, poptions: I32 val) : NullablePointer[Xmlsavectxt ref] ref","title":"xmlSaveToIO"},{"location":"pony-libxml2-LibXML2/#parameters_1097","text":"piowrite: Pointer [ FUNCTIONPOINTER val] ref pioclose: Pointer [ FUNCTIONPOINTER val] ref pioctx: Pointer [ U8 val] ref pencoding: String val poptions: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1160","text":"NullablePointer [ Xmlsavectxt ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavedoc","text":"[Source] fun box xmlSaveDoc( pctxt: NullablePointer[Xmlsavectxt ref] ref, pdoc: NullablePointer[Xmldoc ref] tag) : I64 val","title":"xmlSaveDoc"},{"location":"pony-libxml2-LibXML2/#parameters_1098","text":"pctxt: NullablePointer [ Xmlsavectxt ref] ref pdoc: NullablePointer [ Xmldoc ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1161","text":"I64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavetree","text":"[Source] fun box xmlSaveTree( pctxt: NullablePointer[Xmlsavectxt ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I64 val","title":"xmlSaveTree"},{"location":"pony-libxml2-LibXML2/#parameters_1099","text":"pctxt: NullablePointer [ Xmlsavectxt ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1162","text":"I64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaveflush","text":"[Source] fun box xmlSaveFlush( pctxt: NullablePointer[Xmlsavectxt ref] ref) : I32 val","title":"xmlSaveFlush"},{"location":"pony-libxml2-LibXML2/#parameters_1100","text":"pctxt: NullablePointer [ Xmlsavectxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1163","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsaveclose","text":"[Source] fun box xmlSaveClose( pctxt: NullablePointer[Xmlsavectxt ref] ref) : I32 val","title":"xmlSaveClose"},{"location":"pony-libxml2-LibXML2/#parameters_1101","text":"pctxt: NullablePointer [ Xmlsavectxt ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1164","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavesetescape","text":"[Source] fun box xmlSaveSetEscape( pctxt: NullablePointer[Xmlsavectxt ref] ref, pescape: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlSaveSetEscape"},{"location":"pony-libxml2-LibXML2/#parameters_1102","text":"pctxt: NullablePointer [ Xmlsavectxt ref] ref pescape: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1165","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlsavesetattrescape","text":"[Source] fun box xmlSaveSetAttrEscape( pctxt: NullablePointer[Xmlsavectxt ref] ref, pescape: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlSaveSetAttrEscape"},{"location":"pony-libxml2-LibXML2/#parameters_1103","text":"pctxt: NullablePointer [ Xmlsavectxt ref] ref pescape: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1166","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemainittypes","text":"[Source] fun box xmlSchemaInitTypes() : None val","title":"xmlSchemaInitTypes"},{"location":"pony-libxml2-LibXML2/#returns_1167","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemacleanuptypes","text":"[Source] fun box xmlSchemaCleanupTypes() : None val","title":"xmlSchemaCleanupTypes"},{"location":"pony-libxml2-LibXML2/#returns_1168","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetpredefinedtype","text":"[Source] fun box xmlSchemaGetPredefinedType( pname: String val, pns: String val) : NullablePointer[Xmlschematype ref] ref","title":"xmlSchemaGetPredefinedType"},{"location":"pony-libxml2-LibXML2/#parameters_1104","text":"pname: String val pns: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1169","text":"NullablePointer [ Xmlschematype ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatepredefinedtype","text":"[Source] fun box xmlSchemaValidatePredefinedType( ptype: NullablePointer[Xmlschematype ref] ref, pvalue: String val, pval: Pointer[NullablePointer[Xmlschemaval ref] ref] ref) : I32 val","title":"xmlSchemaValidatePredefinedType"},{"location":"pony-libxml2-LibXML2/#parameters_1105","text":"ptype: NullablePointer [ Xmlschematype ref] ref pvalue: String val pval: Pointer [ NullablePointer [ Xmlschemaval ref] ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1170","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalpredeftypenode","text":"[Source] fun box xmlSchemaValPredefTypeNode( ptype: NullablePointer[Xmlschematype ref] ref, pvalue: String val, pval: Pointer[NullablePointer[Xmlschemaval ref] ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlSchemaValPredefTypeNode"},{"location":"pony-libxml2-LibXML2/#parameters_1106","text":"ptype: NullablePointer [ Xmlschematype ref] ref pvalue: String val pval: Pointer [ NullablePointer [ Xmlschemaval ref] ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1171","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatefacet","text":"[Source] fun box xmlSchemaValidateFacet( pbase: NullablePointer[Xmlschematype ref] ref, pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref) : I32 val","title":"xmlSchemaValidateFacet"},{"location":"pony-libxml2-LibXML2/#parameters_1107","text":"pbase: NullablePointer [ Xmlschematype ref] ref pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1172","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatefacetwhtsp","text":"[Source] fun box xmlSchemaValidateFacetWhtsp( pfacet: NullablePointer[Xmlschemafacet ref] ref, pfws: I32 val, pvalType: I32 val, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref, pws: I32 val) : I32 val","title":"xmlSchemaValidateFacetWhtsp"},{"location":"pony-libxml2-LibXML2/#parameters_1108","text":"pfacet: NullablePointer [ Xmlschemafacet ref] ref pfws: I32 val pvalType: I32 val pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref pws: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1173","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemafreevalue","text":"[Source] fun box xmlSchemaFreeValue( pval: NullablePointer[Xmlschemaval ref] ref) : None val","title":"xmlSchemaFreeValue"},{"location":"pony-libxml2-LibXML2/#parameters_1109","text":"pval: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1174","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewfacet","text":"[Source] fun box xmlSchemaNewFacet() : NullablePointer[Xmlschemafacet ref] ref","title":"xmlSchemaNewFacet"},{"location":"pony-libxml2-LibXML2/#returns_1175","text":"NullablePointer [ Xmlschemafacet ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemacheckfacet","text":"[Source] fun box xmlSchemaCheckFacet( pfacet: NullablePointer[Xmlschemafacet ref] ref, ptypeDecl: NullablePointer[Xmlschematype ref] ref, pctxt: NullablePointer[Xmlschemaparserctxt ref] ref, pname: String val) : I32 val","title":"xmlSchemaCheckFacet"},{"location":"pony-libxml2-LibXML2/#parameters_1110","text":"pfacet: NullablePointer [ Xmlschemafacet ref] ref ptypeDecl: NullablePointer [ Xmlschematype ref] ref pctxt: NullablePointer [ Xmlschemaparserctxt ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1176","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemafreefacet","text":"[Source] fun box xmlSchemaFreeFacet( pfacet: NullablePointer[Xmlschemafacet ref] ref) : None val","title":"xmlSchemaFreeFacet"},{"location":"pony-libxml2-LibXML2/#parameters_1111","text":"pfacet: NullablePointer [ Xmlschemafacet ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1177","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemacomparevalues","text":"[Source] fun box xmlSchemaCompareValues( px: NullablePointer[Xmlschemaval ref] ref, py: NullablePointer[Xmlschemaval ref] ref) : I32 val","title":"xmlSchemaCompareValues"},{"location":"pony-libxml2-LibXML2/#parameters_1112","text":"px: NullablePointer [ Xmlschemaval ref] ref py: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1178","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetbuiltinlistsimpletypeitemtype","text":"[Source] fun box xmlSchemaGetBuiltInListSimpleTypeItemType( ptype: NullablePointer[Xmlschematype ref] ref) : NullablePointer[Xmlschematype ref] ref","title":"xmlSchemaGetBuiltInListSimpleTypeItemType"},{"location":"pony-libxml2-LibXML2/#parameters_1113","text":"ptype: NullablePointer [ Xmlschematype ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1179","text":"NullablePointer [ Xmlschematype ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatelistsimpletypefacet","text":"[Source] fun box xmlSchemaValidateListSimpleTypeFacet( pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalue: String val, pactualLen: U64 val, pexpectedLen: Pointer[U64 val] ref) : I32 val","title":"xmlSchemaValidateListSimpleTypeFacet"},{"location":"pony-libxml2-LibXML2/#parameters_1114","text":"pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalue: String val pactualLen: U64 val pexpectedLen: Pointer [ U64 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1180","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetbuiltintype","text":"[Source] fun box xmlSchemaGetBuiltInType( ptype: I32 val) : NullablePointer[Xmlschematype ref] ref","title":"xmlSchemaGetBuiltInType"},{"location":"pony-libxml2-LibXML2/#parameters_1115","text":"ptype: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1181","text":"NullablePointer [ Xmlschematype ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemaisbuiltintypefacet","text":"[Source] fun box xmlSchemaIsBuiltInTypeFacet( ptype: NullablePointer[Xmlschematype ref] ref, pfacetType: I32 val) : I32 val","title":"xmlSchemaIsBuiltInTypeFacet"},{"location":"pony-libxml2-LibXML2/#parameters_1116","text":"ptype: NullablePointer [ Xmlschematype ref] ref pfacetType: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1182","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemacollapsestring","text":"[Source] fun box xmlSchemaCollapseString( pvalue: String val) : String val","title":"xmlSchemaCollapseString"},{"location":"pony-libxml2-LibXML2/#parameters_1117","text":"pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1183","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemawhitespacereplace","text":"[Source] fun box xmlSchemaWhiteSpaceReplace( pvalue: String val) : String val","title":"xmlSchemaWhiteSpaceReplace"},{"location":"pony-libxml2-LibXML2/#parameters_1118","text":"pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1184","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetfacetvalueasulong","text":"[Source] fun box xmlSchemaGetFacetValueAsULong( pfacet: NullablePointer[Xmlschemafacet ref] ref) : U64 val","title":"xmlSchemaGetFacetValueAsULong"},{"location":"pony-libxml2-LibXML2/#parameters_1119","text":"pfacet: NullablePointer [ Xmlschemafacet ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1185","text":"U64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatelengthfacet","text":"[Source] fun box xmlSchemaValidateLengthFacet( ptype: NullablePointer[Xmlschematype ref] ref, pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref, plength: Pointer[U64 val] ref) : I32 val","title":"xmlSchemaValidateLengthFacet"},{"location":"pony-libxml2-LibXML2/#parameters_1120","text":"ptype: NullablePointer [ Xmlschematype ref] ref pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref plength: Pointer [ U64 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1186","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalidatelengthfacetwhtsp","text":"[Source] fun box xmlSchemaValidateLengthFacetWhtsp( pfacet: NullablePointer[Xmlschemafacet ref] ref, pvalType: I32 val, pvalue: String val, pval: NullablePointer[Xmlschemaval ref] ref, plength: Pointer[U64 val] ref, pws: I32 val) : I32 val","title":"xmlSchemaValidateLengthFacetWhtsp"},{"location":"pony-libxml2-LibXML2/#parameters_1121","text":"pfacet: NullablePointer [ Xmlschemafacet ref] ref pvalType: I32 val pvalue: String val pval: NullablePointer [ Xmlschemaval ref] ref plength: Pointer [ U64 val] ref pws: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1187","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalpredeftypenodenonorm","text":"[Source] fun box xmlSchemaValPredefTypeNodeNoNorm( ptype: NullablePointer[Xmlschematype ref] ref, pvalue: String val, pval: Pointer[NullablePointer[Xmlschemaval ref] ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlSchemaValPredefTypeNodeNoNorm"},{"location":"pony-libxml2-LibXML2/#parameters_1122","text":"ptype: NullablePointer [ Xmlschematype ref] ref pvalue: String val pval: Pointer [ NullablePointer [ Xmlschemaval ref] ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1188","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetcanonvalue","text":"[Source] fun box xmlSchemaGetCanonValue( pval: NullablePointer[Xmlschemaval ref] ref, pretValue: Pointer[Pointer[U8 val] tag] ref) : I32 val","title":"xmlSchemaGetCanonValue"},{"location":"pony-libxml2-LibXML2/#parameters_1123","text":"pval: NullablePointer [ Xmlschemaval ref] ref pretValue: Pointer [ Pointer [ U8 val] tag] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1189","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetcanonvaluewhtsp","text":"[Source] fun box xmlSchemaGetCanonValueWhtsp( pval: NullablePointer[Xmlschemaval ref] ref, pretValue: Pointer[Pointer[U8 val] tag] ref, pws: I32 val) : I32 val","title":"xmlSchemaGetCanonValueWhtsp"},{"location":"pony-libxml2-LibXML2/#parameters_1124","text":"pval: NullablePointer [ Xmlschemaval ref] ref pretValue: Pointer [ Pointer [ U8 val] tag] ref pws: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1190","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavalueappend","text":"[Source] fun box xmlSchemaValueAppend( pprev: NullablePointer[Xmlschemaval ref] ref, pcur: NullablePointer[Xmlschemaval ref] ref) : I32 val","title":"xmlSchemaValueAppend"},{"location":"pony-libxml2-LibXML2/#parameters_1125","text":"pprev: NullablePointer [ Xmlschemaval ref] ref pcur: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1191","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavaluegetnext","text":"[Source] fun box xmlSchemaValueGetNext( pcur: NullablePointer[Xmlschemaval ref] ref) : NullablePointer[Xmlschemaval ref] ref","title":"xmlSchemaValueGetNext"},{"location":"pony-libxml2-LibXML2/#parameters_1126","text":"pcur: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1192","text":"NullablePointer [ Xmlschemaval ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavaluegetasstring","text":"[Source] fun box xmlSchemaValueGetAsString( pval: NullablePointer[Xmlschemaval ref] ref) : String val","title":"xmlSchemaValueGetAsString"},{"location":"pony-libxml2-LibXML2/#parameters_1127","text":"pval: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1193","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemavaluegetasboolean","text":"[Source] fun box xmlSchemaValueGetAsBoolean( pval: NullablePointer[Xmlschemaval ref] ref) : I32 val","title":"xmlSchemaValueGetAsBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_1128","text":"pval: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1194","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewstringvalue","text":"[Source] fun box xmlSchemaNewStringValue( ptype: I32 val, pvalue: String val) : NullablePointer[Xmlschemaval ref] ref","title":"xmlSchemaNewStringValue"},{"location":"pony-libxml2-LibXML2/#parameters_1129","text":"ptype: I32 val pvalue: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1195","text":"NullablePointer [ Xmlschemaval ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewnotationvalue","text":"[Source] fun box xmlSchemaNewNOTATIONValue( pname: String val, pns: String val) : NullablePointer[Xmlschemaval ref] ref","title":"xmlSchemaNewNOTATIONValue"},{"location":"pony-libxml2-LibXML2/#parameters_1130","text":"pname: String val pns: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1196","text":"NullablePointer [ Xmlschemaval ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemanewqnamevalue","text":"[Source] fun box xmlSchemaNewQNameValue( pnamespaceName: String val, plocalName: String val) : NullablePointer[Xmlschemaval ref] ref","title":"xmlSchemaNewQNameValue"},{"location":"pony-libxml2-LibXML2/#parameters_1131","text":"pnamespaceName: String val plocalName: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1197","text":"NullablePointer [ Xmlschemaval ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemacomparevalueswhtsp","text":"[Source] fun box xmlSchemaCompareValuesWhtsp( px: NullablePointer[Xmlschemaval ref] ref, pxws: I32 val, py: NullablePointer[Xmlschemaval ref] ref, pyws: I32 val) : I32 val","title":"xmlSchemaCompareValuesWhtsp"},{"location":"pony-libxml2-LibXML2/#parameters_1132","text":"px: NullablePointer [ Xmlschemaval ref] ref pxws: I32 val py: NullablePointer [ Xmlschemaval ref] ref pyws: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1198","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemacopyvalue","text":"[Source] fun box xmlSchemaCopyValue( pval: NullablePointer[Xmlschemaval ref] ref) : NullablePointer[Xmlschemaval ref] ref","title":"xmlSchemaCopyValue"},{"location":"pony-libxml2-LibXML2/#parameters_1133","text":"pval: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1199","text":"NullablePointer [ Xmlschemaval ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlschemagetvaltype","text":"[Source] fun box xmlSchemaGetValType( pval: NullablePointer[Xmlschemaval ref] ref) : I32 val","title":"xmlSchemaGetValType"},{"location":"pony-libxml2-LibXML2/#parameters_1134","text":"pval: NullablePointer [ Xmlschemaval ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1200","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisaegeannumbers","text":"[Source] fun box xmlUCSIsAegeanNumbers( pcode: I32 val) : I32 val","title":"xmlUCSIsAegeanNumbers"},{"location":"pony-libxml2-LibXML2/#parameters_1135","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1201","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisalphabeticpresentationforms","text":"[Source] fun box xmlUCSIsAlphabeticPresentationForms( pcode: I32 val) : I32 val","title":"xmlUCSIsAlphabeticPresentationForms"},{"location":"pony-libxml2-LibXML2/#parameters_1136","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1202","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisarabic","text":"[Source] fun box xmlUCSIsArabic( pcode: I32 val) : I32 val","title":"xmlUCSIsArabic"},{"location":"pony-libxml2-LibXML2/#parameters_1137","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1203","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisarabicpresentationformsa","text":"[Source] fun box xmlUCSIsArabicPresentationFormsA( pcode: I32 val) : I32 val","title":"xmlUCSIsArabicPresentationFormsA"},{"location":"pony-libxml2-LibXML2/#parameters_1138","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1204","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisarabicpresentationformsb","text":"[Source] fun box xmlUCSIsArabicPresentationFormsB( pcode: I32 val) : I32 val","title":"xmlUCSIsArabicPresentationFormsB"},{"location":"pony-libxml2-LibXML2/#parameters_1139","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1205","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisarmenian","text":"[Source] fun box xmlUCSIsArmenian( pcode: I32 val) : I32 val","title":"xmlUCSIsArmenian"},{"location":"pony-libxml2-LibXML2/#parameters_1140","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1206","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisarrows","text":"[Source] fun box xmlUCSIsArrows( pcode: I32 val) : I32 val","title":"xmlUCSIsArrows"},{"location":"pony-libxml2-LibXML2/#parameters_1141","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1207","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisbasiclatin","text":"[Source] fun box xmlUCSIsBasicLatin( pcode: I32 val) : I32 val","title":"xmlUCSIsBasicLatin"},{"location":"pony-libxml2-LibXML2/#parameters_1142","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1208","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisbengali","text":"[Source] fun box xmlUCSIsBengali( pcode: I32 val) : I32 val","title":"xmlUCSIsBengali"},{"location":"pony-libxml2-LibXML2/#parameters_1143","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1209","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisblockelements","text":"[Source] fun box xmlUCSIsBlockElements( pcode: I32 val) : I32 val","title":"xmlUCSIsBlockElements"},{"location":"pony-libxml2-LibXML2/#parameters_1144","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1210","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisbopomofo","text":"[Source] fun box xmlUCSIsBopomofo( pcode: I32 val) : I32 val","title":"xmlUCSIsBopomofo"},{"location":"pony-libxml2-LibXML2/#parameters_1145","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1211","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisbopomofoextended","text":"[Source] fun box xmlUCSIsBopomofoExtended( pcode: I32 val) : I32 val","title":"xmlUCSIsBopomofoExtended"},{"location":"pony-libxml2-LibXML2/#parameters_1146","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1212","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisboxdrawing","text":"[Source] fun box xmlUCSIsBoxDrawing( pcode: I32 val) : I32 val","title":"xmlUCSIsBoxDrawing"},{"location":"pony-libxml2-LibXML2/#parameters_1147","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1213","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisbraillepatterns","text":"[Source] fun box xmlUCSIsBraillePatterns( pcode: I32 val) : I32 val","title":"xmlUCSIsBraillePatterns"},{"location":"pony-libxml2-LibXML2/#parameters_1148","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1214","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisbuhid","text":"[Source] fun box xmlUCSIsBuhid( pcode: I32 val) : I32 val","title":"xmlUCSIsBuhid"},{"location":"pony-libxml2-LibXML2/#parameters_1149","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1215","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisbyzantinemusicalsymbols","text":"[Source] fun box xmlUCSIsByzantineMusicalSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsByzantineMusicalSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1150","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1216","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkcompatibility","text":"[Source] fun box xmlUCSIsCJKCompatibility( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKCompatibility"},{"location":"pony-libxml2-LibXML2/#parameters_1151","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1217","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkcompatibilityforms","text":"[Source] fun box xmlUCSIsCJKCompatibilityForms( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKCompatibilityForms"},{"location":"pony-libxml2-LibXML2/#parameters_1152","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1218","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkcompatibilityideographs","text":"[Source] fun box xmlUCSIsCJKCompatibilityIdeographs( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKCompatibilityIdeographs"},{"location":"pony-libxml2-LibXML2/#parameters_1153","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1219","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkcompatibilityideographssupplement","text":"[Source] fun box xmlUCSIsCJKCompatibilityIdeographsSupplement( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKCompatibilityIdeographsSupplement"},{"location":"pony-libxml2-LibXML2/#parameters_1154","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1220","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkradicalssupplement","text":"[Source] fun box xmlUCSIsCJKRadicalsSupplement( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKRadicalsSupplement"},{"location":"pony-libxml2-LibXML2/#parameters_1155","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1221","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjksymbolsandpunctuation","text":"[Source] fun box xmlUCSIsCJKSymbolsandPunctuation( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKSymbolsandPunctuation"},{"location":"pony-libxml2-LibXML2/#parameters_1156","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1222","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkunifiedideographs","text":"[Source] fun box xmlUCSIsCJKUnifiedIdeographs( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKUnifiedIdeographs"},{"location":"pony-libxml2-LibXML2/#parameters_1157","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1223","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkunifiedideographsextensiona","text":"[Source] fun box xmlUCSIsCJKUnifiedIdeographsExtensionA( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKUnifiedIdeographsExtensionA"},{"location":"pony-libxml2-LibXML2/#parameters_1158","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1224","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscjkunifiedideographsextensionb","text":"[Source] fun box xmlUCSIsCJKUnifiedIdeographsExtensionB( pcode: I32 val) : I32 val","title":"xmlUCSIsCJKUnifiedIdeographsExtensionB"},{"location":"pony-libxml2-LibXML2/#parameters_1159","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1225","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsischerokee","text":"[Source] fun box xmlUCSIsCherokee( pcode: I32 val) : I32 val","title":"xmlUCSIsCherokee"},{"location":"pony-libxml2-LibXML2/#parameters_1160","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1226","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscombiningdiacriticalmarks","text":"[Source] fun box xmlUCSIsCombiningDiacriticalMarks( pcode: I32 val) : I32 val","title":"xmlUCSIsCombiningDiacriticalMarks"},{"location":"pony-libxml2-LibXML2/#parameters_1161","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1227","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscombiningdiacriticalmarksforsymbols","text":"[Source] fun box xmlUCSIsCombiningDiacriticalMarksforSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsCombiningDiacriticalMarksforSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1162","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1228","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscombininghalfmarks","text":"[Source] fun box xmlUCSIsCombiningHalfMarks( pcode: I32 val) : I32 val","title":"xmlUCSIsCombiningHalfMarks"},{"location":"pony-libxml2-LibXML2/#parameters_1163","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1229","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscombiningmarksforsymbols","text":"[Source] fun box xmlUCSIsCombiningMarksforSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsCombiningMarksforSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1164","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1230","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscontrolpictures","text":"[Source] fun box xmlUCSIsControlPictures( pcode: I32 val) : I32 val","title":"xmlUCSIsControlPictures"},{"location":"pony-libxml2-LibXML2/#parameters_1165","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1231","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscurrencysymbols","text":"[Source] fun box xmlUCSIsCurrencySymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsCurrencySymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1166","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1232","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscypriotsyllabary","text":"[Source] fun box xmlUCSIsCypriotSyllabary( pcode: I32 val) : I32 val","title":"xmlUCSIsCypriotSyllabary"},{"location":"pony-libxml2-LibXML2/#parameters_1167","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1233","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscyrillic","text":"[Source] fun box xmlUCSIsCyrillic( pcode: I32 val) : I32 val","title":"xmlUCSIsCyrillic"},{"location":"pony-libxml2-LibXML2/#parameters_1168","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1234","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscyrillicsupplement","text":"[Source] fun box xmlUCSIsCyrillicSupplement( pcode: I32 val) : I32 val","title":"xmlUCSIsCyrillicSupplement"},{"location":"pony-libxml2-LibXML2/#parameters_1169","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1235","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisdeseret","text":"[Source] fun box xmlUCSIsDeseret( pcode: I32 val) : I32 val","title":"xmlUCSIsDeseret"},{"location":"pony-libxml2-LibXML2/#parameters_1170","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1236","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisdevanagari","text":"[Source] fun box xmlUCSIsDevanagari( pcode: I32 val) : I32 val","title":"xmlUCSIsDevanagari"},{"location":"pony-libxml2-LibXML2/#parameters_1171","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1237","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisdingbats","text":"[Source] fun box xmlUCSIsDingbats( pcode: I32 val) : I32 val","title":"xmlUCSIsDingbats"},{"location":"pony-libxml2-LibXML2/#parameters_1172","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1238","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisenclosedalphanumerics","text":"[Source] fun box xmlUCSIsEnclosedAlphanumerics( pcode: I32 val) : I32 val","title":"xmlUCSIsEnclosedAlphanumerics"},{"location":"pony-libxml2-LibXML2/#parameters_1173","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1239","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisenclosedcjklettersandmonths","text":"[Source] fun box xmlUCSIsEnclosedCJKLettersandMonths( pcode: I32 val) : I32 val","title":"xmlUCSIsEnclosedCJKLettersandMonths"},{"location":"pony-libxml2-LibXML2/#parameters_1174","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1240","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisethiopic","text":"[Source] fun box xmlUCSIsEthiopic( pcode: I32 val) : I32 val","title":"xmlUCSIsEthiopic"},{"location":"pony-libxml2-LibXML2/#parameters_1175","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1241","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgeneralpunctuation","text":"[Source] fun box xmlUCSIsGeneralPunctuation( pcode: I32 val) : I32 val","title":"xmlUCSIsGeneralPunctuation"},{"location":"pony-libxml2-LibXML2/#parameters_1176","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1242","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgeometricshapes","text":"[Source] fun box xmlUCSIsGeometricShapes( pcode: I32 val) : I32 val","title":"xmlUCSIsGeometricShapes"},{"location":"pony-libxml2-LibXML2/#parameters_1177","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1243","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgeorgian","text":"[Source] fun box xmlUCSIsGeorgian( pcode: I32 val) : I32 val","title":"xmlUCSIsGeorgian"},{"location":"pony-libxml2-LibXML2/#parameters_1178","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1244","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgothic","text":"[Source] fun box xmlUCSIsGothic( pcode: I32 val) : I32 val","title":"xmlUCSIsGothic"},{"location":"pony-libxml2-LibXML2/#parameters_1179","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1245","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgreek","text":"[Source] fun box xmlUCSIsGreek( pcode: I32 val) : I32 val","title":"xmlUCSIsGreek"},{"location":"pony-libxml2-LibXML2/#parameters_1180","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1246","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgreekextended","text":"[Source] fun box xmlUCSIsGreekExtended( pcode: I32 val) : I32 val","title":"xmlUCSIsGreekExtended"},{"location":"pony-libxml2-LibXML2/#parameters_1181","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1247","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgreekandcoptic","text":"[Source] fun box xmlUCSIsGreekandCoptic( pcode: I32 val) : I32 val","title":"xmlUCSIsGreekandCoptic"},{"location":"pony-libxml2-LibXML2/#parameters_1182","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1248","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgujarati","text":"[Source] fun box xmlUCSIsGujarati( pcode: I32 val) : I32 val","title":"xmlUCSIsGujarati"},{"location":"pony-libxml2-LibXML2/#parameters_1183","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1249","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisgurmukhi","text":"[Source] fun box xmlUCSIsGurmukhi( pcode: I32 val) : I32 val","title":"xmlUCSIsGurmukhi"},{"location":"pony-libxml2-LibXML2/#parameters_1184","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1250","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishalfwidthandfullwidthforms","text":"[Source] fun box xmlUCSIsHalfwidthandFullwidthForms( pcode: I32 val) : I32 val","title":"xmlUCSIsHalfwidthandFullwidthForms"},{"location":"pony-libxml2-LibXML2/#parameters_1185","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1251","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishangulcompatibilityjamo","text":"[Source] fun box xmlUCSIsHangulCompatibilityJamo( pcode: I32 val) : I32 val","title":"xmlUCSIsHangulCompatibilityJamo"},{"location":"pony-libxml2-LibXML2/#parameters_1186","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1252","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishanguljamo","text":"[Source] fun box xmlUCSIsHangulJamo( pcode: I32 val) : I32 val","title":"xmlUCSIsHangulJamo"},{"location":"pony-libxml2-LibXML2/#parameters_1187","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1253","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishangulsyllables","text":"[Source] fun box xmlUCSIsHangulSyllables( pcode: I32 val) : I32 val","title":"xmlUCSIsHangulSyllables"},{"location":"pony-libxml2-LibXML2/#parameters_1188","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1254","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishanunoo","text":"[Source] fun box xmlUCSIsHanunoo( pcode: I32 val) : I32 val","title":"xmlUCSIsHanunoo"},{"location":"pony-libxml2-LibXML2/#parameters_1189","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1255","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishebrew","text":"[Source] fun box xmlUCSIsHebrew( pcode: I32 val) : I32 val","title":"xmlUCSIsHebrew"},{"location":"pony-libxml2-LibXML2/#parameters_1190","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1256","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishighprivateusesurrogates","text":"[Source] fun box xmlUCSIsHighPrivateUseSurrogates( pcode: I32 val) : I32 val","title":"xmlUCSIsHighPrivateUseSurrogates"},{"location":"pony-libxml2-LibXML2/#parameters_1191","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1257","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishighsurrogates","text":"[Source] fun box xmlUCSIsHighSurrogates( pcode: I32 val) : I32 val","title":"xmlUCSIsHighSurrogates"},{"location":"pony-libxml2-LibXML2/#parameters_1192","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1258","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsishiragana","text":"[Source] fun box xmlUCSIsHiragana( pcode: I32 val) : I32 val","title":"xmlUCSIsHiragana"},{"location":"pony-libxml2-LibXML2/#parameters_1193","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1259","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisipaextensions","text":"[Source] fun box xmlUCSIsIPAExtensions( pcode: I32 val) : I32 val","title":"xmlUCSIsIPAExtensions"},{"location":"pony-libxml2-LibXML2/#parameters_1194","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1260","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisideographicdescriptioncharacters","text":"[Source] fun box xmlUCSIsIdeographicDescriptionCharacters( pcode: I32 val) : I32 val","title":"xmlUCSIsIdeographicDescriptionCharacters"},{"location":"pony-libxml2-LibXML2/#parameters_1195","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1261","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiskanbun","text":"[Source] fun box xmlUCSIsKanbun( pcode: I32 val) : I32 val","title":"xmlUCSIsKanbun"},{"location":"pony-libxml2-LibXML2/#parameters_1196","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1262","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiskangxiradicals","text":"[Source] fun box xmlUCSIsKangxiRadicals( pcode: I32 val) : I32 val","title":"xmlUCSIsKangxiRadicals"},{"location":"pony-libxml2-LibXML2/#parameters_1197","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1263","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiskannada","text":"[Source] fun box xmlUCSIsKannada( pcode: I32 val) : I32 val","title":"xmlUCSIsKannada"},{"location":"pony-libxml2-LibXML2/#parameters_1198","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1264","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiskatakana","text":"[Source] fun box xmlUCSIsKatakana( pcode: I32 val) : I32 val","title":"xmlUCSIsKatakana"},{"location":"pony-libxml2-LibXML2/#parameters_1199","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1265","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiskatakanaphoneticextensions","text":"[Source] fun box xmlUCSIsKatakanaPhoneticExtensions( pcode: I32 val) : I32 val","title":"xmlUCSIsKatakanaPhoneticExtensions"},{"location":"pony-libxml2-LibXML2/#parameters_1200","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1266","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiskhmer","text":"[Source] fun box xmlUCSIsKhmer( pcode: I32 val) : I32 val","title":"xmlUCSIsKhmer"},{"location":"pony-libxml2-LibXML2/#parameters_1201","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1267","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiskhmersymbols","text":"[Source] fun box xmlUCSIsKhmerSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsKhmerSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1202","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1268","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislao","text":"[Source] fun box xmlUCSIsLao( pcode: I32 val) : I32 val","title":"xmlUCSIsLao"},{"location":"pony-libxml2-LibXML2/#parameters_1203","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1269","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislatin1supplement","text":"[Source] fun box xmlUCSIsLatin1Supplement( pcode: I32 val) : I32 val","title":"xmlUCSIsLatin1Supplement"},{"location":"pony-libxml2-LibXML2/#parameters_1204","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1270","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislatinextendeda","text":"[Source] fun box xmlUCSIsLatinExtendedA( pcode: I32 val) : I32 val","title":"xmlUCSIsLatinExtendedA"},{"location":"pony-libxml2-LibXML2/#parameters_1205","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1271","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislatinextendedb","text":"[Source] fun box xmlUCSIsLatinExtendedB( pcode: I32 val) : I32 val","title":"xmlUCSIsLatinExtendedB"},{"location":"pony-libxml2-LibXML2/#parameters_1206","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1272","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislatinextendedadditional","text":"[Source] fun box xmlUCSIsLatinExtendedAdditional( pcode: I32 val) : I32 val","title":"xmlUCSIsLatinExtendedAdditional"},{"location":"pony-libxml2-LibXML2/#parameters_1207","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1273","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisletterlikesymbols","text":"[Source] fun box xmlUCSIsLetterlikeSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsLetterlikeSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1208","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1274","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislimbu","text":"[Source] fun box xmlUCSIsLimbu( pcode: I32 val) : I32 val","title":"xmlUCSIsLimbu"},{"location":"pony-libxml2-LibXML2/#parameters_1209","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1275","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislinearbideograms","text":"[Source] fun box xmlUCSIsLinearBIdeograms( pcode: I32 val) : I32 val","title":"xmlUCSIsLinearBIdeograms"},{"location":"pony-libxml2-LibXML2/#parameters_1210","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1276","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislinearbsyllabary","text":"[Source] fun box xmlUCSIsLinearBSyllabary( pcode: I32 val) : I32 val","title":"xmlUCSIsLinearBSyllabary"},{"location":"pony-libxml2-LibXML2/#parameters_1211","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1277","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsislowsurrogates","text":"[Source] fun box xmlUCSIsLowSurrogates( pcode: I32 val) : I32 val","title":"xmlUCSIsLowSurrogates"},{"location":"pony-libxml2-LibXML2/#parameters_1212","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1278","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismalayalam","text":"[Source] fun box xmlUCSIsMalayalam( pcode: I32 val) : I32 val","title":"xmlUCSIsMalayalam"},{"location":"pony-libxml2-LibXML2/#parameters_1213","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1279","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismathematicalalphanumericsymbols","text":"[Source] fun box xmlUCSIsMathematicalAlphanumericSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsMathematicalAlphanumericSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1214","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1280","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismathematicaloperators","text":"[Source] fun box xmlUCSIsMathematicalOperators( pcode: I32 val) : I32 val","title":"xmlUCSIsMathematicalOperators"},{"location":"pony-libxml2-LibXML2/#parameters_1215","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1281","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismiscellaneousmathematicalsymbolsa","text":"[Source] fun box xmlUCSIsMiscellaneousMathematicalSymbolsA( pcode: I32 val) : I32 val","title":"xmlUCSIsMiscellaneousMathematicalSymbolsA"},{"location":"pony-libxml2-LibXML2/#parameters_1216","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1282","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismiscellaneousmathematicalsymbolsb","text":"[Source] fun box xmlUCSIsMiscellaneousMathematicalSymbolsB( pcode: I32 val) : I32 val","title":"xmlUCSIsMiscellaneousMathematicalSymbolsB"},{"location":"pony-libxml2-LibXML2/#parameters_1217","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1283","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismiscellaneoussymbols","text":"[Source] fun box xmlUCSIsMiscellaneousSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsMiscellaneousSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1218","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1284","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismiscellaneoussymbolsandarrows","text":"[Source] fun box xmlUCSIsMiscellaneousSymbolsandArrows( pcode: I32 val) : I32 val","title":"xmlUCSIsMiscellaneousSymbolsandArrows"},{"location":"pony-libxml2-LibXML2/#parameters_1219","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1285","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismiscellaneoustechnical","text":"[Source] fun box xmlUCSIsMiscellaneousTechnical( pcode: I32 val) : I32 val","title":"xmlUCSIsMiscellaneousTechnical"},{"location":"pony-libxml2-LibXML2/#parameters_1220","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1286","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismongolian","text":"[Source] fun box xmlUCSIsMongolian( pcode: I32 val) : I32 val","title":"xmlUCSIsMongolian"},{"location":"pony-libxml2-LibXML2/#parameters_1221","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1287","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismusicalsymbols","text":"[Source] fun box xmlUCSIsMusicalSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsMusicalSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1222","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1288","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsismyanmar","text":"[Source] fun box xmlUCSIsMyanmar( pcode: I32 val) : I32 val","title":"xmlUCSIsMyanmar"},{"location":"pony-libxml2-LibXML2/#parameters_1223","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1289","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisnumberforms","text":"[Source] fun box xmlUCSIsNumberForms( pcode: I32 val) : I32 val","title":"xmlUCSIsNumberForms"},{"location":"pony-libxml2-LibXML2/#parameters_1224","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1290","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisogham","text":"[Source] fun box xmlUCSIsOgham( pcode: I32 val) : I32 val","title":"xmlUCSIsOgham"},{"location":"pony-libxml2-LibXML2/#parameters_1225","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1291","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisolditalic","text":"[Source] fun box xmlUCSIsOldItalic( pcode: I32 val) : I32 val","title":"xmlUCSIsOldItalic"},{"location":"pony-libxml2-LibXML2/#parameters_1226","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1292","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisopticalcharacterrecognition","text":"[Source] fun box xmlUCSIsOpticalCharacterRecognition( pcode: I32 val) : I32 val","title":"xmlUCSIsOpticalCharacterRecognition"},{"location":"pony-libxml2-LibXML2/#parameters_1227","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1293","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisoriya","text":"[Source] fun box xmlUCSIsOriya( pcode: I32 val) : I32 val","title":"xmlUCSIsOriya"},{"location":"pony-libxml2-LibXML2/#parameters_1228","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1294","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisosmanya","text":"[Source] fun box xmlUCSIsOsmanya( pcode: I32 val) : I32 val","title":"xmlUCSIsOsmanya"},{"location":"pony-libxml2-LibXML2/#parameters_1229","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1295","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisphoneticextensions","text":"[Source] fun box xmlUCSIsPhoneticExtensions( pcode: I32 val) : I32 val","title":"xmlUCSIsPhoneticExtensions"},{"location":"pony-libxml2-LibXML2/#parameters_1230","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1296","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisprivateuse","text":"[Source] fun box xmlUCSIsPrivateUse( pcode: I32 val) : I32 val","title":"xmlUCSIsPrivateUse"},{"location":"pony-libxml2-LibXML2/#parameters_1231","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1297","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisprivateusearea","text":"[Source] fun box xmlUCSIsPrivateUseArea( pcode: I32 val) : I32 val","title":"xmlUCSIsPrivateUseArea"},{"location":"pony-libxml2-LibXML2/#parameters_1232","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1298","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisrunic","text":"[Source] fun box xmlUCSIsRunic( pcode: I32 val) : I32 val","title":"xmlUCSIsRunic"},{"location":"pony-libxml2-LibXML2/#parameters_1233","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1299","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisshavian","text":"[Source] fun box xmlUCSIsShavian( pcode: I32 val) : I32 val","title":"xmlUCSIsShavian"},{"location":"pony-libxml2-LibXML2/#parameters_1234","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1300","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissinhala","text":"[Source] fun box xmlUCSIsSinhala( pcode: I32 val) : I32 val","title":"xmlUCSIsSinhala"},{"location":"pony-libxml2-LibXML2/#parameters_1235","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1301","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissmallformvariants","text":"[Source] fun box xmlUCSIsSmallFormVariants( pcode: I32 val) : I32 val","title":"xmlUCSIsSmallFormVariants"},{"location":"pony-libxml2-LibXML2/#parameters_1236","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1302","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisspacingmodifierletters","text":"[Source] fun box xmlUCSIsSpacingModifierLetters( pcode: I32 val) : I32 val","title":"xmlUCSIsSpacingModifierLetters"},{"location":"pony-libxml2-LibXML2/#parameters_1237","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1303","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisspecials","text":"[Source] fun box xmlUCSIsSpecials( pcode: I32 val) : I32 val","title":"xmlUCSIsSpecials"},{"location":"pony-libxml2-LibXML2/#parameters_1238","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1304","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissuperscriptsandsubscripts","text":"[Source] fun box xmlUCSIsSuperscriptsandSubscripts( pcode: I32 val) : I32 val","title":"xmlUCSIsSuperscriptsandSubscripts"},{"location":"pony-libxml2-LibXML2/#parameters_1239","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1305","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissupplementalarrowsa","text":"[Source] fun box xmlUCSIsSupplementalArrowsA( pcode: I32 val) : I32 val","title":"xmlUCSIsSupplementalArrowsA"},{"location":"pony-libxml2-LibXML2/#parameters_1240","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1306","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissupplementalarrowsb","text":"[Source] fun box xmlUCSIsSupplementalArrowsB( pcode: I32 val) : I32 val","title":"xmlUCSIsSupplementalArrowsB"},{"location":"pony-libxml2-LibXML2/#parameters_1241","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1307","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissupplementalmathematicaloperators","text":"[Source] fun box xmlUCSIsSupplementalMathematicalOperators( pcode: I32 val) : I32 val","title":"xmlUCSIsSupplementalMathematicalOperators"},{"location":"pony-libxml2-LibXML2/#parameters_1242","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1308","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissupplementaryprivateuseareaa","text":"[Source] fun box xmlUCSIsSupplementaryPrivateUseAreaA( pcode: I32 val) : I32 val","title":"xmlUCSIsSupplementaryPrivateUseAreaA"},{"location":"pony-libxml2-LibXML2/#parameters_1243","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1309","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissupplementaryprivateuseareab","text":"[Source] fun box xmlUCSIsSupplementaryPrivateUseAreaB( pcode: I32 val) : I32 val","title":"xmlUCSIsSupplementaryPrivateUseAreaB"},{"location":"pony-libxml2-LibXML2/#parameters_1244","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1310","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsissyriac","text":"[Source] fun box xmlUCSIsSyriac( pcode: I32 val) : I32 val","title":"xmlUCSIsSyriac"},{"location":"pony-libxml2-LibXML2/#parameters_1245","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1311","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistagalog","text":"[Source] fun box xmlUCSIsTagalog( pcode: I32 val) : I32 val","title":"xmlUCSIsTagalog"},{"location":"pony-libxml2-LibXML2/#parameters_1246","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1312","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistagbanwa","text":"[Source] fun box xmlUCSIsTagbanwa( pcode: I32 val) : I32 val","title":"xmlUCSIsTagbanwa"},{"location":"pony-libxml2-LibXML2/#parameters_1247","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1313","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistags","text":"[Source] fun box xmlUCSIsTags( pcode: I32 val) : I32 val","title":"xmlUCSIsTags"},{"location":"pony-libxml2-LibXML2/#parameters_1248","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1314","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistaile","text":"[Source] fun box xmlUCSIsTaiLe( pcode: I32 val) : I32 val","title":"xmlUCSIsTaiLe"},{"location":"pony-libxml2-LibXML2/#parameters_1249","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1315","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistaixuanjingsymbols","text":"[Source] fun box xmlUCSIsTaiXuanJingSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsTaiXuanJingSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1250","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1316","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistamil","text":"[Source] fun box xmlUCSIsTamil( pcode: I32 val) : I32 val","title":"xmlUCSIsTamil"},{"location":"pony-libxml2-LibXML2/#parameters_1251","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1317","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistelugu","text":"[Source] fun box xmlUCSIsTelugu( pcode: I32 val) : I32 val","title":"xmlUCSIsTelugu"},{"location":"pony-libxml2-LibXML2/#parameters_1252","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1318","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisthaana","text":"[Source] fun box xmlUCSIsThaana( pcode: I32 val) : I32 val","title":"xmlUCSIsThaana"},{"location":"pony-libxml2-LibXML2/#parameters_1253","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1319","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisthai","text":"[Source] fun box xmlUCSIsThai( pcode: I32 val) : I32 val","title":"xmlUCSIsThai"},{"location":"pony-libxml2-LibXML2/#parameters_1254","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1320","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsistibetan","text":"[Source] fun box xmlUCSIsTibetan( pcode: I32 val) : I32 val","title":"xmlUCSIsTibetan"},{"location":"pony-libxml2-LibXML2/#parameters_1255","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1321","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisugaritic","text":"[Source] fun box xmlUCSIsUgaritic( pcode: I32 val) : I32 val","title":"xmlUCSIsUgaritic"},{"location":"pony-libxml2-LibXML2/#parameters_1256","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1322","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisunifiedcanadianaboriginalsyllabics","text":"[Source] fun box xmlUCSIsUnifiedCanadianAboriginalSyllabics( pcode: I32 val) : I32 val","title":"xmlUCSIsUnifiedCanadianAboriginalSyllabics"},{"location":"pony-libxml2-LibXML2/#parameters_1257","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1323","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisvariationselectors","text":"[Source] fun box xmlUCSIsVariationSelectors( pcode: I32 val) : I32 val","title":"xmlUCSIsVariationSelectors"},{"location":"pony-libxml2-LibXML2/#parameters_1258","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1324","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisvariationselectorssupplement","text":"[Source] fun box xmlUCSIsVariationSelectorsSupplement( pcode: I32 val) : I32 val","title":"xmlUCSIsVariationSelectorsSupplement"},{"location":"pony-libxml2-LibXML2/#parameters_1259","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1325","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisyiradicals","text":"[Source] fun box xmlUCSIsYiRadicals( pcode: I32 val) : I32 val","title":"xmlUCSIsYiRadicals"},{"location":"pony-libxml2-LibXML2/#parameters_1260","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1326","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisyisyllables","text":"[Source] fun box xmlUCSIsYiSyllables( pcode: I32 val) : I32 val","title":"xmlUCSIsYiSyllables"},{"location":"pony-libxml2-LibXML2/#parameters_1261","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1327","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisyijinghexagramsymbols","text":"[Source] fun box xmlUCSIsYijingHexagramSymbols( pcode: I32 val) : I32 val","title":"xmlUCSIsYijingHexagramSymbols"},{"location":"pony-libxml2-LibXML2/#parameters_1262","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1328","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsisblock","text":"[Source] fun box xmlUCSIsBlock( pcode: I32 val, pblock: String val) : I32 val","title":"xmlUCSIsBlock"},{"location":"pony-libxml2-LibXML2/#parameters_1263","text":"pcode: I32 val pblock: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1329","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatc","text":"[Source] fun box xmlUCSIsCatC( pcode: I32 val) : I32 val","title":"xmlUCSIsCatC"},{"location":"pony-libxml2-LibXML2/#parameters_1264","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1330","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatcc","text":"[Source] fun box xmlUCSIsCatCc( pcode: I32 val) : I32 val","title":"xmlUCSIsCatCc"},{"location":"pony-libxml2-LibXML2/#parameters_1265","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1331","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatcf","text":"[Source] fun box xmlUCSIsCatCf( pcode: I32 val) : I32 val","title":"xmlUCSIsCatCf"},{"location":"pony-libxml2-LibXML2/#parameters_1266","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1332","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatco","text":"[Source] fun box xmlUCSIsCatCo( pcode: I32 val) : I32 val","title":"xmlUCSIsCatCo"},{"location":"pony-libxml2-LibXML2/#parameters_1267","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1333","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatcs","text":"[Source] fun box xmlUCSIsCatCs( pcode: I32 val) : I32 val","title":"xmlUCSIsCatCs"},{"location":"pony-libxml2-LibXML2/#parameters_1268","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1334","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatl","text":"[Source] fun box xmlUCSIsCatL( pcode: I32 val) : I32 val","title":"xmlUCSIsCatL"},{"location":"pony-libxml2-LibXML2/#parameters_1269","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1335","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatll","text":"[Source] fun box xmlUCSIsCatLl( pcode: I32 val) : I32 val","title":"xmlUCSIsCatLl"},{"location":"pony-libxml2-LibXML2/#parameters_1270","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1336","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatlm","text":"[Source] fun box xmlUCSIsCatLm( pcode: I32 val) : I32 val","title":"xmlUCSIsCatLm"},{"location":"pony-libxml2-LibXML2/#parameters_1271","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1337","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatlo","text":"[Source] fun box xmlUCSIsCatLo( pcode: I32 val) : I32 val","title":"xmlUCSIsCatLo"},{"location":"pony-libxml2-LibXML2/#parameters_1272","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1338","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatlt","text":"[Source] fun box xmlUCSIsCatLt( pcode: I32 val) : I32 val","title":"xmlUCSIsCatLt"},{"location":"pony-libxml2-LibXML2/#parameters_1273","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1339","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatlu","text":"[Source] fun box xmlUCSIsCatLu( pcode: I32 val) : I32 val","title":"xmlUCSIsCatLu"},{"location":"pony-libxml2-LibXML2/#parameters_1274","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1340","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatm","text":"[Source] fun box xmlUCSIsCatM( pcode: I32 val) : I32 val","title":"xmlUCSIsCatM"},{"location":"pony-libxml2-LibXML2/#parameters_1275","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1341","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatmc","text":"[Source] fun box xmlUCSIsCatMc( pcode: I32 val) : I32 val","title":"xmlUCSIsCatMc"},{"location":"pony-libxml2-LibXML2/#parameters_1276","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1342","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatme","text":"[Source] fun box xmlUCSIsCatMe( pcode: I32 val) : I32 val","title":"xmlUCSIsCatMe"},{"location":"pony-libxml2-LibXML2/#parameters_1277","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1343","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatmn","text":"[Source] fun box xmlUCSIsCatMn( pcode: I32 val) : I32 val","title":"xmlUCSIsCatMn"},{"location":"pony-libxml2-LibXML2/#parameters_1278","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1344","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatn","text":"[Source] fun box xmlUCSIsCatN( pcode: I32 val) : I32 val","title":"xmlUCSIsCatN"},{"location":"pony-libxml2-LibXML2/#parameters_1279","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1345","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatnd","text":"[Source] fun box xmlUCSIsCatNd( pcode: I32 val) : I32 val","title":"xmlUCSIsCatNd"},{"location":"pony-libxml2-LibXML2/#parameters_1280","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1346","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatnl","text":"[Source] fun box xmlUCSIsCatNl( pcode: I32 val) : I32 val","title":"xmlUCSIsCatNl"},{"location":"pony-libxml2-LibXML2/#parameters_1281","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1347","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatno","text":"[Source] fun box xmlUCSIsCatNo( pcode: I32 val) : I32 val","title":"xmlUCSIsCatNo"},{"location":"pony-libxml2-LibXML2/#parameters_1282","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1348","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatp","text":"[Source] fun box xmlUCSIsCatP( pcode: I32 val) : I32 val","title":"xmlUCSIsCatP"},{"location":"pony-libxml2-LibXML2/#parameters_1283","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1349","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatpc","text":"[Source] fun box xmlUCSIsCatPc( pcode: I32 val) : I32 val","title":"xmlUCSIsCatPc"},{"location":"pony-libxml2-LibXML2/#parameters_1284","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1350","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatpd","text":"[Source] fun box xmlUCSIsCatPd( pcode: I32 val) : I32 val","title":"xmlUCSIsCatPd"},{"location":"pony-libxml2-LibXML2/#parameters_1285","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1351","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatpe","text":"[Source] fun box xmlUCSIsCatPe( pcode: I32 val) : I32 val","title":"xmlUCSIsCatPe"},{"location":"pony-libxml2-LibXML2/#parameters_1286","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1352","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatpf","text":"[Source] fun box xmlUCSIsCatPf( pcode: I32 val) : I32 val","title":"xmlUCSIsCatPf"},{"location":"pony-libxml2-LibXML2/#parameters_1287","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1353","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatpi","text":"[Source] fun box xmlUCSIsCatPi( pcode: I32 val) : I32 val","title":"xmlUCSIsCatPi"},{"location":"pony-libxml2-LibXML2/#parameters_1288","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1354","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatpo","text":"[Source] fun box xmlUCSIsCatPo( pcode: I32 val) : I32 val","title":"xmlUCSIsCatPo"},{"location":"pony-libxml2-LibXML2/#parameters_1289","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1355","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatps","text":"[Source] fun box xmlUCSIsCatPs( pcode: I32 val) : I32 val","title":"xmlUCSIsCatPs"},{"location":"pony-libxml2-LibXML2/#parameters_1290","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1356","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscats","text":"[Source] fun box xmlUCSIsCatS( pcode: I32 val) : I32 val","title":"xmlUCSIsCatS"},{"location":"pony-libxml2-LibXML2/#parameters_1291","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1357","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatsc","text":"[Source] fun box xmlUCSIsCatSc( pcode: I32 val) : I32 val","title":"xmlUCSIsCatSc"},{"location":"pony-libxml2-LibXML2/#parameters_1292","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1358","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatsk","text":"[Source] fun box xmlUCSIsCatSk( pcode: I32 val) : I32 val","title":"xmlUCSIsCatSk"},{"location":"pony-libxml2-LibXML2/#parameters_1293","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1359","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatsm","text":"[Source] fun box xmlUCSIsCatSm( pcode: I32 val) : I32 val","title":"xmlUCSIsCatSm"},{"location":"pony-libxml2-LibXML2/#parameters_1294","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1360","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatso","text":"[Source] fun box xmlUCSIsCatSo( pcode: I32 val) : I32 val","title":"xmlUCSIsCatSo"},{"location":"pony-libxml2-LibXML2/#parameters_1295","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1361","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatz","text":"[Source] fun box xmlUCSIsCatZ( pcode: I32 val) : I32 val","title":"xmlUCSIsCatZ"},{"location":"pony-libxml2-LibXML2/#parameters_1296","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1362","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatzl","text":"[Source] fun box xmlUCSIsCatZl( pcode: I32 val) : I32 val","title":"xmlUCSIsCatZl"},{"location":"pony-libxml2-LibXML2/#parameters_1297","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1363","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatzp","text":"[Source] fun box xmlUCSIsCatZp( pcode: I32 val) : I32 val","title":"xmlUCSIsCatZp"},{"location":"pony-libxml2-LibXML2/#parameters_1298","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1364","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscatzs","text":"[Source] fun box xmlUCSIsCatZs( pcode: I32 val) : I32 val","title":"xmlUCSIsCatZs"},{"location":"pony-libxml2-LibXML2/#parameters_1299","text":"pcode: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1365","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlucsiscat","text":"[Source] fun box xmlUCSIsCat( pcode: I32 val, pcat: String val) : I32 val","title":"xmlUCSIsCat"},{"location":"pony-libxml2-LibXML2/#parameters_1300","text":"pcode: I32 val pcat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1366","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextwriter","text":"[Source] fun box xmlNewTextWriter( pout: NullablePointer[Xmloutputbuffer ref] ref) : NullablePointer[Xmltextwriter ref] ref","title":"xmlNewTextWriter"},{"location":"pony-libxml2-LibXML2/#parameters_1301","text":"pout: NullablePointer [ Xmloutputbuffer ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1367","text":"NullablePointer [ Xmltextwriter ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextwriterfilename","text":"[Source] fun box xmlNewTextWriterFilename( puri: String val, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref","title":"xmlNewTextWriterFilename"},{"location":"pony-libxml2-LibXML2/#parameters_1302","text":"puri: String val pcompression: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1368","text":"NullablePointer [ Xmltextwriter ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextwritermemory","text":"[Source] fun box xmlNewTextWriterMemory( pbuf: NullablePointer[Xmlbuffer ref] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref","title":"xmlNewTextWriterMemory"},{"location":"pony-libxml2-LibXML2/#parameters_1303","text":"pbuf: NullablePointer [ Xmlbuffer ref] ref pcompression: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1369","text":"NullablePointer [ Xmltextwriter ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextwriterpushparser","text":"[Source] fun box xmlNewTextWriterPushParser( pctxt: NullablePointer[Xmlparserctxt ref] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref","title":"xmlNewTextWriterPushParser"},{"location":"pony-libxml2-LibXML2/#parameters_1304","text":"pctxt: NullablePointer [ Xmlparserctxt ref] ref pcompression: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1370","text":"NullablePointer [ Xmltextwriter ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextwriterdoc","text":"[Source] fun box xmlNewTextWriterDoc( pdoc: Pointer[NullablePointer[Xmldoc ref] tag] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref","title":"xmlNewTextWriterDoc"},{"location":"pony-libxml2-LibXML2/#parameters_1305","text":"pdoc: Pointer [ NullablePointer [ Xmldoc ref] tag] ref pcompression: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1371","text":"NullablePointer [ Xmltextwriter ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlnewtextwritertree","text":"[Source] fun box xmlNewTextWriterTree( pdoc: NullablePointer[Xmldoc ref] tag, pnode: NullablePointer[Xmlnode ref] ref, pcompression: I32 val) : NullablePointer[Xmltextwriter ref] ref","title":"xmlNewTextWriterTree"},{"location":"pony-libxml2-LibXML2/#parameters_1306","text":"pdoc: NullablePointer [ Xmldoc ref] tag pnode: NullablePointer [ Xmlnode ref] ref pcompression: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1372","text":"NullablePointer [ Xmltextwriter ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlfreetextwriter","text":"[Source] fun box xmlFreeTextWriter( pwriter: NullablePointer[Xmltextwriter ref] ref) : None val","title":"xmlFreeTextWriter"},{"location":"pony-libxml2-LibXML2/#parameters_1307","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1373","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartdocument","text":"[Source] fun box xmlTextWriterStartDocument( pwriter: NullablePointer[Xmltextwriter ref] ref, pversion: String val, pencoding: String val, pstandalone: String val) : I32 val","title":"xmlTextWriterStartDocument"},{"location":"pony-libxml2-LibXML2/#parameters_1308","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pversion: String val pencoding: String val pstandalone: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1374","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterenddocument","text":"[Source] fun box xmlTextWriterEndDocument( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndDocument"},{"location":"pony-libxml2-LibXML2/#parameters_1309","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1375","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartcomment","text":"[Source] fun box xmlTextWriterStartComment( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterStartComment"},{"location":"pony-libxml2-LibXML2/#parameters_1310","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1376","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterendcomment","text":"[Source] fun box xmlTextWriterEndComment( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndComment"},{"location":"pony-libxml2-LibXML2/#parameters_1311","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1377","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatcomment","text":"[Source] fun box xmlTextWriterWriteFormatComment( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatComment"},{"location":"pony-libxml2-LibXML2/#parameters_1312","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1378","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatcomment","text":"[Source] fun box xmlTextWriterWriteVFormatComment( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatComment"},{"location":"pony-libxml2-LibXML2/#parameters_1313","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1379","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritecomment","text":"[Source] fun box xmlTextWriterWriteComment( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val","title":"xmlTextWriterWriteComment"},{"location":"pony-libxml2-LibXML2/#parameters_1314","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1380","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartelement","text":"[Source] fun box xmlTextWriterStartElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val","title":"xmlTextWriterStartElement"},{"location":"pony-libxml2-LibXML2/#parameters_1315","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1381","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartelementns","text":"[Source] fun box xmlTextWriterStartElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val) : I32 val","title":"xmlTextWriterStartElementNS"},{"location":"pony-libxml2-LibXML2/#parameters_1316","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1382","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterendelement","text":"[Source] fun box xmlTextWriterEndElement( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndElement"},{"location":"pony-libxml2-LibXML2/#parameters_1317","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1383","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterfullendelement","text":"[Source] fun box xmlTextWriterFullEndElement( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterFullEndElement"},{"location":"pony-libxml2-LibXML2/#parameters_1318","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1384","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatelement","text":"[Source] fun box xmlTextWriterWriteFormatElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatElement"},{"location":"pony-libxml2-LibXML2/#parameters_1319","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1385","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatelement","text":"[Source] fun box xmlTextWriterWriteVFormatElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatElement"},{"location":"pony-libxml2-LibXML2/#parameters_1320","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1386","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteelement","text":"[Source] fun box xmlTextWriterWriteElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteElement"},{"location":"pony-libxml2-LibXML2/#parameters_1321","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1387","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatelementns","text":"[Source] fun box xmlTextWriterWriteFormatElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatElementNS"},{"location":"pony-libxml2-LibXML2/#parameters_1322","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1388","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatelementns","text":"[Source] fun box xmlTextWriterWriteVFormatElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatElementNS"},{"location":"pony-libxml2-LibXML2/#parameters_1323","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1389","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteelementns","text":"[Source] fun box xmlTextWriterWriteElementNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteElementNS"},{"location":"pony-libxml2-LibXML2/#parameters_1324","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1390","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatraw","text":"[Source] fun box xmlTextWriterWriteFormatRaw( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatRaw"},{"location":"pony-libxml2-LibXML2/#parameters_1325","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1391","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatraw","text":"[Source] fun box xmlTextWriterWriteVFormatRaw( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatRaw"},{"location":"pony-libxml2-LibXML2/#parameters_1326","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1392","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriterawlen","text":"[Source] fun box xmlTextWriterWriteRawLen( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val, plen: I32 val) : I32 val","title":"xmlTextWriterWriteRawLen"},{"location":"pony-libxml2-LibXML2/#parameters_1327","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1393","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteraw","text":"[Source] fun box xmlTextWriterWriteRaw( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val","title":"xmlTextWriterWriteRaw"},{"location":"pony-libxml2-LibXML2/#parameters_1328","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1394","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatstring","text":"[Source] fun box xmlTextWriterWriteFormatString( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatString"},{"location":"pony-libxml2-LibXML2/#parameters_1329","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1395","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatstring","text":"[Source] fun box xmlTextWriterWriteVFormatString( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatString"},{"location":"pony-libxml2-LibXML2/#parameters_1330","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1396","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritestring","text":"[Source] fun box xmlTextWriterWriteString( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val","title":"xmlTextWriterWriteString"},{"location":"pony-libxml2-LibXML2/#parameters_1331","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1397","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritebase64","text":"[Source] fun box xmlTextWriterWriteBase64( pwriter: NullablePointer[Xmltextwriter ref] ref, pdata: String val, pstart: I32 val, plen: I32 val) : I32 val","title":"xmlTextWriterWriteBase64"},{"location":"pony-libxml2-LibXML2/#parameters_1332","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pdata: String val pstart: I32 val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1398","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritebinhex","text":"[Source] fun box xmlTextWriterWriteBinHex( pwriter: NullablePointer[Xmltextwriter ref] ref, pdata: String val, pstart: I32 val, plen: I32 val) : I32 val","title":"xmlTextWriterWriteBinHex"},{"location":"pony-libxml2-LibXML2/#parameters_1333","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pdata: String val pstart: I32 val plen: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1399","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartattribute","text":"[Source] fun box xmlTextWriterStartAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val","title":"xmlTextWriterStartAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1334","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1400","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartattributens","text":"[Source] fun box xmlTextWriterStartAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val) : I32 val","title":"xmlTextWriterStartAttributeNS"},{"location":"pony-libxml2-LibXML2/#parameters_1335","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1401","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterendattribute","text":"[Source] fun box xmlTextWriterEndAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1336","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1402","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatattribute","text":"[Source] fun box xmlTextWriterWriteFormatAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1337","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1403","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatattribute","text":"[Source] fun box xmlTextWriterWriteVFormatAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1338","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1404","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteattribute","text":"[Source] fun box xmlTextWriterWriteAttribute( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1339","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1405","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatattributens","text":"[Source] fun box xmlTextWriterWriteFormatAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatAttributeNS"},{"location":"pony-libxml2-LibXML2/#parameters_1340","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1406","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatattributens","text":"[Source] fun box xmlTextWriterWriteVFormatAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatAttributeNS"},{"location":"pony-libxml2-LibXML2/#parameters_1341","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1407","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteattributens","text":"[Source] fun box xmlTextWriterWriteAttributeNS( pwriter: NullablePointer[Xmltextwriter ref] ref, pprefix: String val, pname: String val, pnamespaceURI: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteAttributeNS"},{"location":"pony-libxml2-LibXML2/#parameters_1342","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pprefix: String val pname: String val pnamespaceURI: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1408","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartpi","text":"[Source] fun box xmlTextWriterStartPI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val) : I32 val","title":"xmlTextWriterStartPI"},{"location":"pony-libxml2-LibXML2/#parameters_1343","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1409","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterendpi","text":"[Source] fun box xmlTextWriterEndPI( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndPI"},{"location":"pony-libxml2-LibXML2/#parameters_1344","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1410","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatpi","text":"[Source] fun box xmlTextWriterWriteFormatPI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatPI"},{"location":"pony-libxml2-LibXML2/#parameters_1345","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1411","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatpi","text":"[Source] fun box xmlTextWriterWriteVFormatPI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatPI"},{"location":"pony-libxml2-LibXML2/#parameters_1346","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1412","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritepi","text":"[Source] fun box xmlTextWriterWritePI( pwriter: NullablePointer[Xmltextwriter ref] ref, ptarget: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWritePI"},{"location":"pony-libxml2-LibXML2/#parameters_1347","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ptarget: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1413","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartcdata","text":"[Source] fun box xmlTextWriterStartCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterStartCDATA"},{"location":"pony-libxml2-LibXML2/#parameters_1348","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1414","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterendcdata","text":"[Source] fun box xmlTextWriterEndCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndCDATA"},{"location":"pony-libxml2-LibXML2/#parameters_1349","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1415","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatcdata","text":"[Source] fun box xmlTextWriterWriteFormatCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatCDATA"},{"location":"pony-libxml2-LibXML2/#parameters_1350","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1416","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatcdata","text":"[Source] fun box xmlTextWriterWriteVFormatCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatCDATA"},{"location":"pony-libxml2-LibXML2/#parameters_1351","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1417","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritecdata","text":"[Source] fun box xmlTextWriterWriteCDATA( pwriter: NullablePointer[Xmltextwriter ref] ref, pcontent: String val) : I32 val","title":"xmlTextWriterWriteCDATA"},{"location":"pony-libxml2-LibXML2/#parameters_1352","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1418","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartdtd","text":"[Source] fun box xmlTextWriterStartDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val) : I32 val","title":"xmlTextWriterStartDTD"},{"location":"pony-libxml2-LibXML2/#parameters_1353","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1419","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterenddtd","text":"[Source] fun box xmlTextWriterEndDTD( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndDTD"},{"location":"pony-libxml2-LibXML2/#parameters_1354","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1420","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatdtd","text":"[Source] fun box xmlTextWriterWriteFormatDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatDTD"},{"location":"pony-libxml2-LibXML2/#parameters_1355","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1421","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatdtd","text":"[Source] fun box xmlTextWriterWriteVFormatDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatDTD"},{"location":"pony-libxml2-LibXML2/#parameters_1356","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1422","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtd","text":"[Source] fun box xmlTextWriterWriteDTD( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val, psubset: String val) : I32 val","title":"xmlTextWriterWriteDTD"},{"location":"pony-libxml2-LibXML2/#parameters_1357","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val psubset: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1423","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartdtdelement","text":"[Source] fun box xmlTextWriterStartDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val","title":"xmlTextWriterStartDTDElement"},{"location":"pony-libxml2-LibXML2/#parameters_1358","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1424","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterenddtdelement","text":"[Source] fun box xmlTextWriterEndDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndDTDElement"},{"location":"pony-libxml2-LibXML2/#parameters_1359","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1425","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatdtdelement","text":"[Source] fun box xmlTextWriterWriteFormatDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatDTDElement"},{"location":"pony-libxml2-LibXML2/#parameters_1360","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1426","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatdtdelement","text":"[Source] fun box xmlTextWriterWriteVFormatDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatDTDElement"},{"location":"pony-libxml2-LibXML2/#parameters_1361","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1427","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtdelement","text":"[Source] fun box xmlTextWriterWriteDTDElement( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteDTDElement"},{"location":"pony-libxml2-LibXML2/#parameters_1362","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1428","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartdtdattlist","text":"[Source] fun box xmlTextWriterStartDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val) : I32 val","title":"xmlTextWriterStartDTDAttlist"},{"location":"pony-libxml2-LibXML2/#parameters_1363","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1429","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterenddtdattlist","text":"[Source] fun box xmlTextWriterEndDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndDTDAttlist"},{"location":"pony-libxml2-LibXML2/#parameters_1364","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1430","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatdtdattlist","text":"[Source] fun box xmlTextWriterWriteFormatDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatDTDAttlist"},{"location":"pony-libxml2-LibXML2/#parameters_1365","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1431","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatdtdattlist","text":"[Source] fun box xmlTextWriterWriteVFormatDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatDTDAttlist"},{"location":"pony-libxml2-LibXML2/#parameters_1366","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1432","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtdattlist","text":"[Source] fun box xmlTextWriterWriteDTDAttlist( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteDTDAttlist"},{"location":"pony-libxml2-LibXML2/#parameters_1367","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1433","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterstartdtdentity","text":"[Source] fun box xmlTextWriterStartDTDEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val) : I32 val","title":"xmlTextWriterStartDTDEntity"},{"location":"pony-libxml2-LibXML2/#parameters_1368","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1434","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterenddtdentity","text":"[Source] fun box xmlTextWriterEndDTDEntity( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterEndDTDEntity"},{"location":"pony-libxml2-LibXML2/#parameters_1369","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1435","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwriteformatdtdinternalentity","text":"[Source] fun box xmlTextWriterWriteFormatDTDInternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, pformat: String val) : I32 val","title":"xmlTextWriterWriteFormatDTDInternalEntity"},{"location":"pony-libxml2-LibXML2/#parameters_1370","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val pformat: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1436","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritevformatdtdinternalentity","text":"[Source] fun box xmlTextWriterWriteVFormatDTDInternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, pformat: String val, pargptr: NullablePointer[VaListTag ref] ref) : I32 val","title":"xmlTextWriterWriteVFormatDTDInternalEntity"},{"location":"pony-libxml2-LibXML2/#parameters_1371","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val pformat: String val pargptr: NullablePointer [ VaListTag ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1437","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtdinternalentity","text":"[Source] fun box xmlTextWriterWriteDTDInternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteDTDInternalEntity"},{"location":"pony-libxml2-LibXML2/#parameters_1372","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1438","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtdexternalentity","text":"[Source] fun box xmlTextWriterWriteDTDExternalEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, ppubid: String val, psysid: String val, pndataid: String val) : I32 val","title":"xmlTextWriterWriteDTDExternalEntity"},{"location":"pony-libxml2-LibXML2/#parameters_1373","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val ppubid: String val psysid: String val pndataid: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1439","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtdexternalentitycontents","text":"[Source] fun box xmlTextWriterWriteDTDExternalEntityContents( pwriter: NullablePointer[Xmltextwriter ref] ref, ppubid: String val, psysid: String val, pndataid: String val) : I32 val","title":"xmlTextWriterWriteDTDExternalEntityContents"},{"location":"pony-libxml2-LibXML2/#parameters_1374","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ppubid: String val psysid: String val pndataid: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1440","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtdentity","text":"[Source] fun box xmlTextWriterWriteDTDEntity( pwriter: NullablePointer[Xmltextwriter ref] ref, ppe: I32 val, pname: String val, ppubid: String val, psysid: String val, pndataid: String val, pcontent: String val) : I32 val","title":"xmlTextWriterWriteDTDEntity"},{"location":"pony-libxml2-LibXML2/#parameters_1375","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref ppe: I32 val pname: String val ppubid: String val psysid: String val pndataid: String val pcontent: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1441","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterwritedtdnotation","text":"[Source] fun box xmlTextWriterWriteDTDNotation( pwriter: NullablePointer[Xmltextwriter ref] ref, pname: String val, ppubid: String val, psysid: String val) : I32 val","title":"xmlTextWriterWriteDTDNotation"},{"location":"pony-libxml2-LibXML2/#parameters_1376","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pname: String val ppubid: String val psysid: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1442","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwritersetindent","text":"[Source] fun box xmlTextWriterSetIndent( pwriter: NullablePointer[Xmltextwriter ref] ref, pindent: I32 val) : I32 val","title":"xmlTextWriterSetIndent"},{"location":"pony-libxml2-LibXML2/#parameters_1377","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pindent: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1443","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwritersetindentstring","text":"[Source] fun box xmlTextWriterSetIndentString( pwriter: NullablePointer[Xmltextwriter ref] ref, pstr: String val) : I32 val","title":"xmlTextWriterSetIndentString"},{"location":"pony-libxml2-LibXML2/#parameters_1378","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1444","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwritersetquotechar","text":"[Source] fun box xmlTextWriterSetQuoteChar( pwriter: NullablePointer[Xmltextwriter ref] ref, pquotechar: U8 val) : I32 val","title":"xmlTextWriterSetQuoteChar"},{"location":"pony-libxml2-LibXML2/#parameters_1379","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref pquotechar: U8 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1445","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmltextwriterflush","text":"[Source] fun box xmlTextWriterFlush( pwriter: NullablePointer[Xmltextwriter ref] ref) : I32 val","title":"xmlTextWriterFlush"},{"location":"pony-libxml2-LibXML2/#parameters_1380","text":"pwriter: NullablePointer [ Xmltextwriter ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1446","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathpopboolean","text":"[Source] fun box xmlXPathPopBoolean( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : I32 val","title":"xmlXPathPopBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_1381","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1447","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathpopnumber","text":"[Source] fun box xmlXPathPopNumber( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : F64 val","title":"xmlXPathPopNumber"},{"location":"pony-libxml2-LibXML2/#parameters_1382","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1448","text":"F64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathpopstring","text":"[Source] fun box xmlXPathPopString( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val","title":"xmlXPathPopString"},{"location":"pony-libxml2-LibXML2/#parameters_1383","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1449","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathpopnodeset","text":"[Source] fun box xmlXPathPopNodeSet( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathPopNodeSet"},{"location":"pony-libxml2-LibXML2/#parameters_1384","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1450","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathpopexternal","text":"[Source] fun box xmlXPathPopExternal( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val","title":"xmlXPathPopExternal"},{"location":"pony-libxml2-LibXML2/#parameters_1385","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1451","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregistervariablelookup","text":"[Source] fun box xmlXPathRegisterVariableLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pf: Pointer[FUNCTIONPOINTER val] ref, pdata: Pointer[U8 val] ref) : None val","title":"xmlXPathRegisterVariableLookup"},{"location":"pony-libxml2-LibXML2/#parameters_1386","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pf: Pointer [ FUNCTIONPOINTER val] ref pdata: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1452","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisterfunclookup","text":"[Source] fun box xmlXPathRegisterFuncLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pf: Pointer[FUNCTIONPOINTER val] ref, pfuncCtxt: Pointer[U8 val] ref) : None val","title":"xmlXPathRegisterFuncLookup"},{"location":"pony-libxml2-LibXML2/#parameters_1387","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pf: Pointer [ FUNCTIONPOINTER val] ref pfuncCtxt: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1453","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpatherror","text":"[Source] fun box xmlXPatherror( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pfile: String val, pline: I32 val, pno: I32 val) : None val","title":"xmlXPatherror"},{"location":"pony-libxml2-LibXML2/#parameters_1388","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pfile: String val pline: I32 val pno: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1454","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpatherr","text":"[Source] fun box xmlXPathErr( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, perror: I32 val) : None val","title":"xmlXPathErr"},{"location":"pony-libxml2-LibXML2/#parameters_1389","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref perror: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1455","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathdebugdumpobject","text":"[Source] fun box xmlXPathDebugDumpObject( poutput: NullablePointer[IoFile ref] ref, pcur: NullablePointer[Xmlxpathobject ref] ref, pdepth: I32 val) : None val","title":"xmlXPathDebugDumpObject"},{"location":"pony-libxml2-LibXML2/#parameters_1390","text":"poutput: NullablePointer [ IoFile ref] ref pcur: NullablePointer [ Xmlxpathobject ref] ref pdepth: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1456","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathdebugdumpcompexpr","text":"[Source] fun box xmlXPathDebugDumpCompExpr( poutput: NullablePointer[IoFile ref] ref, pcomp: NullablePointer[Xmlxpathcompexpr ref] ref, pdepth: I32 val) : None val","title":"xmlXPathDebugDumpCompExpr"},{"location":"pony-libxml2-LibXML2/#parameters_1391","text":"poutput: NullablePointer [ IoFile ref] ref pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref pdepth: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1457","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetcontains","text":"[Source] fun box xmlXPathNodeSetContains( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlXPathNodeSetContains"},{"location":"pony-libxml2-LibXML2/#parameters_1392","text":"pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1458","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathdifference","text":"[Source] fun box xmlXPathDifference( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathDifference"},{"location":"pony-libxml2-LibXML2/#parameters_1393","text":"pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1459","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathintersection","text":"[Source] fun box xmlXPathIntersection( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathIntersection"},{"location":"pony-libxml2-LibXML2/#parameters_1394","text":"pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1460","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathdistinctsorted","text":"[Source] fun box xmlXPathDistinctSorted( pnodes: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathDistinctSorted"},{"location":"pony-libxml2-LibXML2/#parameters_1395","text":"pnodes: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1461","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathdistinct","text":"[Source] fun box xmlXPathDistinct( pnodes: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathDistinct"},{"location":"pony-libxml2-LibXML2/#parameters_1396","text":"pnodes: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1462","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathhassamenodes","text":"[Source] fun box xmlXPathHasSameNodes( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : I32 val","title":"xmlXPathHasSameNodes"},{"location":"pony-libxml2-LibXML2/#parameters_1397","text":"pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1463","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodeleadingsorted","text":"[Source] fun box xmlXPathNodeLeadingSorted( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathNodeLeadingSorted"},{"location":"pony-libxml2-LibXML2/#parameters_1398","text":"pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1464","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathleadingsorted","text":"[Source] fun box xmlXPathLeadingSorted( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathLeadingSorted"},{"location":"pony-libxml2-LibXML2/#parameters_1399","text":"pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1465","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodeleading","text":"[Source] fun box xmlXPathNodeLeading( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathNodeLeading"},{"location":"pony-libxml2-LibXML2/#parameters_1400","text":"pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1466","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathleading","text":"[Source] fun box xmlXPathLeading( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathLeading"},{"location":"pony-libxml2-LibXML2/#parameters_1401","text":"pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1467","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodetrailingsorted","text":"[Source] fun box xmlXPathNodeTrailingSorted( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathNodeTrailingSorted"},{"location":"pony-libxml2-LibXML2/#parameters_1402","text":"pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1468","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathtrailingsorted","text":"[Source] fun box xmlXPathTrailingSorted( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathTrailingSorted"},{"location":"pony-libxml2-LibXML2/#parameters_1403","text":"pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1469","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodetrailing","text":"[Source] fun box xmlXPathNodeTrailing( pnodes: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathNodeTrailing"},{"location":"pony-libxml2-LibXML2/#parameters_1404","text":"pnodes: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1470","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathtrailing","text":"[Source] fun box xmlXPathTrailing( pnodes1: NullablePointer[Xmlnodeset ref] ref, pnodes2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathTrailing"},{"location":"pony-libxml2-LibXML2/#parameters_1405","text":"pnodes1: NullablePointer [ Xmlnodeset ref] ref pnodes2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1471","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisterns","text":"[Source] fun box xmlXPathRegisterNs( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pprefix: String val, pns_uri: String val) : I32 val","title":"xmlXPathRegisterNs"},{"location":"pony-libxml2-LibXML2/#parameters_1406","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pprefix: String val pns_uri: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1472","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnslookup","text":"[Source] fun box xmlXPathNsLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pprefix: String val) : String val","title":"xmlXPathNsLookup"},{"location":"pony-libxml2-LibXML2/#parameters_1407","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pprefix: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1473","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisterednscleanup","text":"[Source] fun box xmlXPathRegisteredNsCleanup( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val","title":"xmlXPathRegisteredNsCleanup"},{"location":"pony-libxml2-LibXML2/#parameters_1408","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1474","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisterfunc","text":"[Source] fun box xmlXPathRegisterFunc( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlXPathRegisterFunc"},{"location":"pony-libxml2-LibXML2/#parameters_1409","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1475","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisterfuncns","text":"[Source] fun box xmlXPathRegisterFuncNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val, pf: Pointer[FUNCTIONPOINTER val] ref) : I32 val","title":"xmlXPathRegisterFuncNS"},{"location":"pony-libxml2-LibXML2/#parameters_1410","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val pf: Pointer [ FUNCTIONPOINTER val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1476","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregistervariable","text":"[Source] fun box xmlXPathRegisterVariable( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pvalue: NullablePointer[Xmlxpathobject ref] ref) : I32 val","title":"xmlXPathRegisterVariable"},{"location":"pony-libxml2-LibXML2/#parameters_1411","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pvalue: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1477","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregistervariablens","text":"[Source] fun box xmlXPathRegisterVariableNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val, pvalue: NullablePointer[Xmlxpathobject ref] ref) : I32 val","title":"xmlXPathRegisterVariableNS"},{"location":"pony-libxml2-LibXML2/#parameters_1412","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val pvalue: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1478","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfunctionlookup","text":"[Source] fun box xmlXPathFunctionLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlXPathFunctionLookup"},{"location":"pony-libxml2-LibXML2/#parameters_1413","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1479","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfunctionlookupns","text":"[Source] fun box xmlXPathFunctionLookupNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val) : Pointer[FUNCTIONPOINTER val] ref","title":"xmlXPathFunctionLookupNS"},{"location":"pony-libxml2-LibXML2/#parameters_1414","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1480","text":"Pointer [ FUNCTIONPOINTER val] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisteredfuncscleanup","text":"[Source] fun box xmlXPathRegisteredFuncsCleanup( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val","title":"xmlXPathRegisteredFuncsCleanup"},{"location":"pony-libxml2-LibXML2/#parameters_1415","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1481","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathvariablelookup","text":"[Source] fun box xmlXPathVariableLookup( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathVariableLookup"},{"location":"pony-libxml2-LibXML2/#parameters_1416","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1482","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathvariablelookupns","text":"[Source] fun box xmlXPathVariableLookupNS( pctxt: NullablePointer[Xmlxpathcontext ref] tag, pname: String val, pns_uri: String val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathVariableLookupNS"},{"location":"pony-libxml2-LibXML2/#parameters_1417","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag pname: String val pns_uri: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1483","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisteredvariablescleanup","text":"[Source] fun box xmlXPathRegisteredVariablesCleanup( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val","title":"xmlXPathRegisteredVariablesCleanup"},{"location":"pony-libxml2-LibXML2/#parameters_1418","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1484","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewparsercontext","text":"[Source] fun box xmlXPathNewParserContext( pstr: String val, pctxt: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathparsercontext ref] ref","title":"xmlXPathNewParserContext"},{"location":"pony-libxml2-LibXML2/#parameters_1419","text":"pstr: String val pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1485","text":"NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfreeparsercontext","text":"[Source] fun box xmlXPathFreeParserContext( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathFreeParserContext"},{"location":"pony-libxml2-LibXML2/#parameters_1420","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1486","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#valuepop","text":"[Source] fun box valuePop( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"valuePop"},{"location":"pony-libxml2-LibXML2/#parameters_1421","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1487","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#valuepush","text":"[Source] fun box valuePush( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pvalue: NullablePointer[Xmlxpathobject ref] ref) : I32 val","title":"valuePush"},{"location":"pony-libxml2-LibXML2/#parameters_1422","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pvalue: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1488","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewstring","text":"[Source] fun box xmlXPathNewString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNewString"},{"location":"pony-libxml2-LibXML2/#parameters_1423","text":"pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1489","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewcstring","text":"[Source] fun box xmlXPathNewCString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNewCString"},{"location":"pony-libxml2-LibXML2/#parameters_1424","text":"pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1490","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathwrapstring","text":"[Source] fun box xmlXPathWrapString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathWrapString"},{"location":"pony-libxml2-LibXML2/#parameters_1425","text":"pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1491","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathwrapcstring","text":"[Source] fun box xmlXPathWrapCString( pval: String val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathWrapCString"},{"location":"pony-libxml2-LibXML2/#parameters_1426","text":"pval: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1492","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewfloat","text":"[Source] fun box xmlXPathNewFloat( pval: F64 val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNewFloat"},{"location":"pony-libxml2-LibXML2/#parameters_1427","text":"pval: F64 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1493","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewboolean","text":"[Source] fun box xmlXPathNewBoolean( pval: I32 val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNewBoolean"},{"location":"pony-libxml2-LibXML2/#parameters_1428","text":"pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1494","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewnodeset","text":"[Source] fun box xmlXPathNewNodeSet( pval: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNewNodeSet"},{"location":"pony-libxml2-LibXML2/#parameters_1429","text":"pval: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1495","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewvaluetree","text":"[Source] fun box xmlXPathNewValueTree( pval: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNewValueTree"},{"location":"pony-libxml2-LibXML2/#parameters_1430","text":"pval: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1496","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetadd","text":"[Source] fun box xmlXPathNodeSetAdd( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlXPathNodeSetAdd"},{"location":"pony-libxml2-LibXML2/#parameters_1431","text":"pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1497","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetaddunique","text":"[Source] fun box xmlXPathNodeSetAddUnique( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : I32 val","title":"xmlXPathNodeSetAddUnique"},{"location":"pony-libxml2-LibXML2/#parameters_1432","text":"pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1498","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetaddns","text":"[Source] fun box xmlXPathNodeSetAddNs( pcur: NullablePointer[Xmlnodeset ref] ref, pnode: NullablePointer[Xmlnode ref] ref, pns: NullablePointer[Xmlns ref] ref) : I32 val","title":"xmlXPathNodeSetAddNs"},{"location":"pony-libxml2-LibXML2/#parameters_1433","text":"pcur: NullablePointer [ Xmlnodeset ref] ref pnode: NullablePointer [ Xmlnode ref] ref pns: NullablePointer [ Xmlns ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1499","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetsort","text":"[Source] fun box xmlXPathNodeSetSort( pset: NullablePointer[Xmlnodeset ref] ref) : None val","title":"xmlXPathNodeSetSort"},{"location":"pony-libxml2-LibXML2/#parameters_1434","text":"pset: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1500","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathroot","text":"[Source] fun box xmlXPathRoot( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathRoot"},{"location":"pony-libxml2-LibXML2/#parameters_1435","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1501","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathevalexpr","text":"[Source] fun box xmlXPathEvalExpr( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathEvalExpr"},{"location":"pony-libxml2-LibXML2/#parameters_1436","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1502","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathparsename","text":"[Source] fun box xmlXPathParseName( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val","title":"xmlXPathParseName"},{"location":"pony-libxml2-LibXML2/#parameters_1437","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1503","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathparsencname","text":"[Source] fun box xmlXPathParseNCName( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : String val","title":"xmlXPathParseNCName"},{"location":"pony-libxml2-LibXML2/#parameters_1438","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1504","text":"String val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathstringevalnumber","text":"[Source] fun box xmlXPathStringEvalNumber( pstr: String val) : F64 val","title":"xmlXPathStringEvalNumber"},{"location":"pony-libxml2-LibXML2/#parameters_1439","text":"pstr: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1505","text":"F64 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathevaluatepredicateresult","text":"[Source] fun box xmlXPathEvaluatePredicateResult( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pres: NullablePointer[Xmlxpathobject ref] ref) : I32 val","title":"xmlXPathEvaluatePredicateResult"},{"location":"pony-libxml2-LibXML2/#parameters_1440","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pres: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1506","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathregisterallfunctions","text":"[Source] fun box xmlXPathRegisterAllFunctions( pctxt: NullablePointer[Xmlxpathcontext ref] tag) : None val","title":"xmlXPathRegisterAllFunctions"},{"location":"pony-libxml2-LibXML2/#parameters_1441","text":"pctxt: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1507","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetmerge","text":"[Source] fun box xmlXPathNodeSetMerge( pval1: NullablePointer[Xmlnodeset ref] ref, pval2: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlnodeset ref] ref","title":"xmlXPathNodeSetMerge"},{"location":"pony-libxml2-LibXML2/#parameters_1442","text":"pval1: NullablePointer [ Xmlnodeset ref] ref pval2: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1508","text":"NullablePointer [ Xmlnodeset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetdel","text":"[Source] fun box xmlXPathNodeSetDel( pcur: NullablePointer[Xmlnodeset ref] ref, pval: NullablePointer[Xmlnode ref] ref) : None val","title":"xmlXPathNodeSetDel"},{"location":"pony-libxml2-LibXML2/#parameters_1443","text":"pcur: NullablePointer [ Xmlnodeset ref] ref pval: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1509","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetremove","text":"[Source] fun box xmlXPathNodeSetRemove( pcur: NullablePointer[Xmlnodeset ref] ref, pval: I32 val) : None val","title":"xmlXPathNodeSetRemove"},{"location":"pony-libxml2-LibXML2/#parameters_1444","text":"pcur: NullablePointer [ Xmlnodeset ref] ref pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1510","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnewnodesetlist","text":"[Source] fun box xmlXPathNewNodeSetList( pval: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathNewNodeSetList"},{"location":"pony-libxml2-LibXML2/#parameters_1445","text":"pval: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1511","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathwrapnodeset","text":"[Source] fun box xmlXPathWrapNodeSet( pval: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathWrapNodeSet"},{"location":"pony-libxml2-LibXML2/#parameters_1446","text":"pval: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1512","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathwrapexternal","text":"[Source] fun box xmlXPathWrapExternal( pval: Pointer[U8 val] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPathWrapExternal"},{"location":"pony-libxml2-LibXML2/#parameters_1447","text":"pval: Pointer [ U8 val] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1513","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathequalvalues","text":"[Source] fun box xmlXPathEqualValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : I32 val","title":"xmlXPathEqualValues"},{"location":"pony-libxml2-LibXML2/#parameters_1448","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1514","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnotequalvalues","text":"[Source] fun box xmlXPathNotEqualValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : I32 val","title":"xmlXPathNotEqualValues"},{"location":"pony-libxml2-LibXML2/#parameters_1449","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1515","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcomparevalues","text":"[Source] fun box xmlXPathCompareValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pinf: I32 val, pstrict: I32 val) : I32 val","title":"xmlXPathCompareValues"},{"location":"pony-libxml2-LibXML2/#parameters_1450","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pinf: I32 val pstrict: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1516","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathvalueflipsign","text":"[Source] fun box xmlXPathValueFlipSign( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathValueFlipSign"},{"location":"pony-libxml2-LibXML2/#parameters_1451","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1517","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathaddvalues","text":"[Source] fun box xmlXPathAddValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathAddValues"},{"location":"pony-libxml2-LibXML2/#parameters_1452","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1518","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathsubvalues","text":"[Source] fun box xmlXPathSubValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathSubValues"},{"location":"pony-libxml2-LibXML2/#parameters_1453","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1519","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathmultvalues","text":"[Source] fun box xmlXPathMultValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathMultValues"},{"location":"pony-libxml2-LibXML2/#parameters_1454","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1520","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathdivvalues","text":"[Source] fun box xmlXPathDivValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathDivValues"},{"location":"pony-libxml2-LibXML2/#parameters_1455","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1521","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathmodvalues","text":"[Source] fun box xmlXPathModValues( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPathModValues"},{"location":"pony-libxml2-LibXML2/#parameters_1456","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1522","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathisnodetype","text":"[Source] fun box xmlXPathIsNodeType( pname: String val) : I32 val","title":"xmlXPathIsNodeType"},{"location":"pony-libxml2-LibXML2/#parameters_1457","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1523","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextself","text":"[Source] fun box xmlXPathNextSelf( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextSelf"},{"location":"pony-libxml2-LibXML2/#parameters_1458","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1524","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextchild","text":"[Source] fun box xmlXPathNextChild( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextChild"},{"location":"pony-libxml2-LibXML2/#parameters_1459","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1525","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextdescendant","text":"[Source] fun box xmlXPathNextDescendant( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextDescendant"},{"location":"pony-libxml2-LibXML2/#parameters_1460","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1526","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextdescendantorself","text":"[Source] fun box xmlXPathNextDescendantOrSelf( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextDescendantOrSelf"},{"location":"pony-libxml2-LibXML2/#parameters_1461","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1527","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextparent","text":"[Source] fun box xmlXPathNextParent( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextParent"},{"location":"pony-libxml2-LibXML2/#parameters_1462","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1528","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextancestororself","text":"[Source] fun box xmlXPathNextAncestorOrSelf( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextAncestorOrSelf"},{"location":"pony-libxml2-LibXML2/#parameters_1463","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1529","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextfollowingsibling","text":"[Source] fun box xmlXPathNextFollowingSibling( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextFollowingSibling"},{"location":"pony-libxml2-LibXML2/#parameters_1464","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1530","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextfollowing","text":"[Source] fun box xmlXPathNextFollowing( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextFollowing"},{"location":"pony-libxml2-LibXML2/#parameters_1465","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1531","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextnamespace","text":"[Source] fun box xmlXPathNextNamespace( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextNamespace"},{"location":"pony-libxml2-LibXML2/#parameters_1466","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1532","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextattribute","text":"[Source] fun box xmlXPathNextAttribute( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextAttribute"},{"location":"pony-libxml2-LibXML2/#parameters_1467","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1533","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextpreceding","text":"[Source] fun box xmlXPathNextPreceding( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextPreceding"},{"location":"pony-libxml2-LibXML2/#parameters_1468","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1534","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextancestor","text":"[Source] fun box xmlXPathNextAncestor( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextAncestor"},{"location":"pony-libxml2-LibXML2/#parameters_1469","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1535","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnextprecedingsibling","text":"[Source] fun box xmlXPathNextPrecedingSibling( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pcur: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPathNextPrecedingSibling"},{"location":"pony-libxml2-LibXML2/#parameters_1470","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pcur: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1536","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathlastfunction","text":"[Source] fun box xmlXPathLastFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathLastFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1471","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1537","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathpositionfunction","text":"[Source] fun box xmlXPathPositionFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathPositionFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1472","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1538","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcountfunction","text":"[Source] fun box xmlXPathCountFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathCountFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1473","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1539","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathidfunction","text":"[Source] fun box xmlXPathIdFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathIdFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1474","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1540","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathlocalnamefunction","text":"[Source] fun box xmlXPathLocalNameFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathLocalNameFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1475","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1541","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnamespaceurifunction","text":"[Source] fun box xmlXPathNamespaceURIFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathNamespaceURIFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1476","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1542","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathstringfunction","text":"[Source] fun box xmlXPathStringFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathStringFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1477","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1543","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathstringlengthfunction","text":"[Source] fun box xmlXPathStringLengthFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathStringLengthFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1478","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1544","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathconcatfunction","text":"[Source] fun box xmlXPathConcatFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathConcatFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1479","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1545","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathcontainsfunction","text":"[Source] fun box xmlXPathContainsFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathContainsFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1480","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1546","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathstartswithfunction","text":"[Source] fun box xmlXPathStartsWithFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathStartsWithFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1481","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1547","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathsubstringfunction","text":"[Source] fun box xmlXPathSubstringFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathSubstringFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1482","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1548","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathsubstringbeforefunction","text":"[Source] fun box xmlXPathSubstringBeforeFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathSubstringBeforeFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1483","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1549","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathsubstringafterfunction","text":"[Source] fun box xmlXPathSubstringAfterFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathSubstringAfterFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1484","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1550","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnormalizefunction","text":"[Source] fun box xmlXPathNormalizeFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathNormalizeFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1485","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1551","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathtranslatefunction","text":"[Source] fun box xmlXPathTranslateFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathTranslateFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1486","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1552","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnotfunction","text":"[Source] fun box xmlXPathNotFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathNotFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1487","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1553","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathtruefunction","text":"[Source] fun box xmlXPathTrueFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathTrueFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1488","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1554","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfalsefunction","text":"[Source] fun box xmlXPathFalseFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathFalseFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1489","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1555","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathlangfunction","text":"[Source] fun box xmlXPathLangFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathLangFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1490","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1556","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnumberfunction","text":"[Source] fun box xmlXPathNumberFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathNumberFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1491","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1557","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathsumfunction","text":"[Source] fun box xmlXPathSumFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathSumFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1492","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1558","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathfloorfunction","text":"[Source] fun box xmlXPathFloorFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathFloorFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1493","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1559","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathceilingfunction","text":"[Source] fun box xmlXPathCeilingFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathCeilingFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1494","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1560","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathroundfunction","text":"[Source] fun box xmlXPathRoundFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathRoundFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1495","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1561","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathbooleanfunction","text":"[Source] fun box xmlXPathBooleanFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPathBooleanFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1496","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1562","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxpathnodesetfreens","text":"[Source] fun box xmlXPathNodeSetFreeNs( pns: NullablePointer[Xmlns ref] ref) : None val","title":"xmlXPathNodeSetFreeNs"},{"location":"pony-libxml2-LibXML2/#parameters_1497","text":"pns: NullablePointer [ Xmlns ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1563","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrlocationsetcreate","text":"[Source] fun box xmlXPtrLocationSetCreate( pval: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmllocationset ref] ref","title":"xmlXPtrLocationSetCreate"},{"location":"pony-libxml2-LibXML2/#parameters_1498","text":"pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1564","text":"NullablePointer [ Xmllocationset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrfreelocationset","text":"[Source] fun box xmlXPtrFreeLocationSet( pobj: NullablePointer[Xmllocationset ref] ref) : None val","title":"xmlXPtrFreeLocationSet"},{"location":"pony-libxml2-LibXML2/#parameters_1499","text":"pobj: NullablePointer [ Xmllocationset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1565","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrlocationsetmerge","text":"[Source] fun box xmlXPtrLocationSetMerge( pval1: NullablePointer[Xmllocationset ref] ref, pval2: NullablePointer[Xmllocationset ref] ref) : NullablePointer[Xmllocationset ref] ref","title":"xmlXPtrLocationSetMerge"},{"location":"pony-libxml2-LibXML2/#parameters_1500","text":"pval1: NullablePointer [ Xmllocationset ref] ref pval2: NullablePointer [ Xmllocationset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1566","text":"NullablePointer [ Xmllocationset ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewrange","text":"[Source] fun box xmlXPtrNewRange( pstart: NullablePointer[Xmlnode ref] ref, pstartindex: I32 val, pend: NullablePointer[Xmlnode ref] ref, pendindex: I32 val) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewRange"},{"location":"pony-libxml2-LibXML2/#parameters_1501","text":"pstart: NullablePointer [ Xmlnode ref] ref pstartindex: I32 val pend: NullablePointer [ Xmlnode ref] ref pendindex: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1567","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewrangepoints","text":"[Source] fun box xmlXPtrNewRangePoints( pstart: NullablePointer[Xmlxpathobject ref] ref, pend: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewRangePoints"},{"location":"pony-libxml2-LibXML2/#parameters_1502","text":"pstart: NullablePointer [ Xmlxpathobject ref] ref pend: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1568","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewrangenodepoint","text":"[Source] fun box xmlXPtrNewRangeNodePoint( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewRangeNodePoint"},{"location":"pony-libxml2-LibXML2/#parameters_1503","text":"pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1569","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewrangepointnode","text":"[Source] fun box xmlXPtrNewRangePointNode( pstart: NullablePointer[Xmlxpathobject ref] ref, pend: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewRangePointNode"},{"location":"pony-libxml2-LibXML2/#parameters_1504","text":"pstart: NullablePointer [ Xmlxpathobject ref] ref pend: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1570","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewrangenodes","text":"[Source] fun box xmlXPtrNewRangeNodes( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewRangeNodes"},{"location":"pony-libxml2-LibXML2/#parameters_1505","text":"pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1571","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewlocationsetnodes","text":"[Source] fun box xmlXPtrNewLocationSetNodes( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewLocationSetNodes"},{"location":"pony-libxml2-LibXML2/#parameters_1506","text":"pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1572","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewlocationsetnodeset","text":"[Source] fun box xmlXPtrNewLocationSetNodeSet( pset: NullablePointer[Xmlnodeset ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewLocationSetNodeSet"},{"location":"pony-libxml2-LibXML2/#parameters_1507","text":"pset: NullablePointer [ Xmlnodeset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1573","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewrangenodeobject","text":"[Source] fun box xmlXPtrNewRangeNodeObject( pstart: NullablePointer[Xmlnode ref] ref, pend: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewRangeNodeObject"},{"location":"pony-libxml2-LibXML2/#parameters_1508","text":"pstart: NullablePointer [ Xmlnode ref] ref pend: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1574","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewcollapsedrange","text":"[Source] fun box xmlXPtrNewCollapsedRange( pstart: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrNewCollapsedRange"},{"location":"pony-libxml2-LibXML2/#parameters_1509","text":"pstart: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1575","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrlocationsetadd","text":"[Source] fun box xmlXPtrLocationSetAdd( pcur: NullablePointer[Xmllocationset ref] ref, pval: NullablePointer[Xmlxpathobject ref] ref) : None val","title":"xmlXPtrLocationSetAdd"},{"location":"pony-libxml2-LibXML2/#parameters_1510","text":"pcur: NullablePointer [ Xmllocationset ref] ref pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1576","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrwraplocationset","text":"[Source] fun box xmlXPtrWrapLocationSet( pval: NullablePointer[Xmllocationset ref] ref) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrWrapLocationSet"},{"location":"pony-libxml2-LibXML2/#parameters_1511","text":"pval: NullablePointer [ Xmllocationset ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1577","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrlocationsetdel","text":"[Source] fun box xmlXPtrLocationSetDel( pcur: NullablePointer[Xmllocationset ref] ref, pval: NullablePointer[Xmlxpathobject ref] ref) : None val","title":"xmlXPtrLocationSetDel"},{"location":"pony-libxml2-LibXML2/#parameters_1512","text":"pcur: NullablePointer [ Xmllocationset ref] ref pval: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1578","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrlocationsetremove","text":"[Source] fun box xmlXPtrLocationSetRemove( pcur: NullablePointer[Xmllocationset ref] ref, pval: I32 val) : None val","title":"xmlXPtrLocationSetRemove"},{"location":"pony-libxml2-LibXML2/#parameters_1513","text":"pcur: NullablePointer [ Xmllocationset ref] ref pval: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1579","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrnewcontext","text":"[Source] fun box xmlXPtrNewContext( pdoc: NullablePointer[Xmldoc ref] tag, phere: NullablePointer[Xmlnode ref] ref, porigin: NullablePointer[Xmlnode ref] ref) : NullablePointer[Xmlxpathcontext ref] ref","title":"xmlXPtrNewContext"},{"location":"pony-libxml2-LibXML2/#parameters_1514","text":"pdoc: NullablePointer [ Xmldoc ref] tag phere: NullablePointer [ Xmlnode ref] ref porigin: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1580","text":"NullablePointer [ Xmlxpathcontext ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptreval","text":"[Source] fun box xmlXPtrEval( pstr: String val, pctx: NullablePointer[Xmlxpathcontext ref] tag) : NullablePointer[Xmlxpathobject ref] ref","title":"xmlXPtrEval"},{"location":"pony-libxml2-LibXML2/#parameters_1515","text":"pstr: String val pctx: NullablePointer [ Xmlxpathcontext ref] tag","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1581","text":"NullablePointer [ Xmlxpathobject ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrrangetofunction","text":"[Source] fun box xmlXPtrRangeToFunction( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref, pnargs: I32 val) : None val","title":"xmlXPtrRangeToFunction"},{"location":"pony-libxml2-LibXML2/#parameters_1516","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref pnargs: I32 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1582","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrbuildnodelist","text":"[Source] fun box xmlXPtrBuildNodeList( pobj: NullablePointer[Xmlxpathobject ref] ref) : NullablePointer[Xmlnode ref] ref","title":"xmlXPtrBuildNodeList"},{"location":"pony-libxml2-LibXML2/#parameters_1517","text":"pobj: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1583","text":"NullablePointer [ Xmlnode ref] ref","title":"Returns"},{"location":"pony-libxml2-LibXML2/#xmlxptrevalrangepredicate","text":"[Source] fun box xmlXPtrEvalRangePredicate( pctxt: NullablePointer[Xmlxpathparsercontext ref] ref) : None val","title":"xmlXPtrEvalRangePredicate"},{"location":"pony-libxml2-LibXML2/#parameters_1518","text":"pctxt: NullablePointer [ Xmlxpathparsercontext ref] ref","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1584","text":"None val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#eq","text":"[Source] fun box eq( that: LibXML2 val) : Bool val","title":"eq"},{"location":"pony-libxml2-LibXML2/#parameters_1519","text":"that: LibXML2 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1585","text":"Bool val","title":"Returns"},{"location":"pony-libxml2-LibXML2/#ne","text":"[Source] fun box ne( that: LibXML2 val) : Bool val","title":"ne"},{"location":"pony-libxml2-LibXML2/#parameters_1520","text":"that: LibXML2 val","title":"Parameters"},{"location":"pony-libxml2-LibXML2/#returns_1586","text":"Bool val","title":"Returns"},{"location":"pony-libxml2-VaListTag/","text":"VaListTag \u00b6 [Source] struct ref VaListTag Constructors \u00b6 create \u00b6 [Source] new iso create() : VaListTag iso^ Returns \u00b6 VaListTag iso^","title":"struct VaListTag"},{"location":"pony-libxml2-VaListTag/#valisttag","text":"[Source] struct ref VaListTag","title":"VaListTag"},{"location":"pony-libxml2-VaListTag/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-VaListTag/#create","text":"[Source] new iso create() : VaListTag iso^","title":"create"},{"location":"pony-libxml2-VaListTag/#returns","text":"VaListTag iso^","title":"Returns"},{"location":"pony-libxml2-Xlinkhandler/","text":"Xlinkhandler \u00b6 [Source] struct ref Xlinkhandler Constructors \u00b6 create \u00b6 [Source] new iso create() : Xlinkhandler iso^ Returns \u00b6 Xlinkhandler iso^ Public fields \u00b6 var psimple: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pextended: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xlinkhandler"},{"location":"pony-libxml2-Xlinkhandler/#xlinkhandler","text":"[Source] struct ref Xlinkhandler","title":"Xlinkhandler"},{"location":"pony-libxml2-Xlinkhandler/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xlinkhandler/#create","text":"[Source] new iso create() : Xlinkhandler iso^","title":"create"},{"location":"pony-libxml2-Xlinkhandler/#returns","text":"Xlinkhandler iso^","title":"Returns"},{"location":"pony-libxml2-Xlinkhandler/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xlinkhandler/#var-psimple-pointerfunctionpointer-val-ref","text":"[Source]","title":"var psimple: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xlinkhandler/#var-pextended-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pextended: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xlinkhandler/#var-pset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xml2Doc/","text":"Xml2Doc \u00b6 [Source] class ref Xml2Doc Constructors \u00b6 fromPTR \u00b6 [Source] new ref fromPTR( ptrx: NullablePointer[Xmldoc ref] ref) : Xml2Doc ref^ ? Parameters \u00b6 ptrx: NullablePointer [ Xmldoc ref] ref Returns \u00b6 Xml2Doc ref^ ? parseFile \u00b6 [Source] new ref parseFile( pfilename: String val) : Xml2Doc ref^ ? Parameters \u00b6 pfilename: String val Returns \u00b6 Xml2Doc ref^ ? parseDoc \u00b6 [Source] new ref parseDoc( pcur: String val) : Xml2Doc ref^ ? Parameters \u00b6 pcur: String val Returns \u00b6 Xml2Doc ref^ ? Public fields \u00b6 var ptr': NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var allocated: Bool val \u00b6 [Source] Public Functions \u00b6 getRootElement \u00b6 [Source] fun ref getRootElement() : Xml2node ref ? Returns \u00b6 Xml2node ref ? final \u00b6 [Source] fun ref final() : None val Returns \u00b6 None val Private Functions \u00b6 _final \u00b6 [Source] fun box _final() : None val Returns \u00b6 None val","title":"class Xml2Doc"},{"location":"pony-libxml2-Xml2Doc/#xml2doc","text":"[Source] class ref Xml2Doc","title":"Xml2Doc"},{"location":"pony-libxml2-Xml2Doc/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xml2Doc/#fromptr","text":"[Source] new ref fromPTR( ptrx: NullablePointer[Xmldoc ref] ref) : Xml2Doc ref^ ?","title":"fromPTR"},{"location":"pony-libxml2-Xml2Doc/#parameters","text":"ptrx: NullablePointer [ Xmldoc ref] ref","title":"Parameters"},{"location":"pony-libxml2-Xml2Doc/#returns","text":"Xml2Doc ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2Doc/#parsefile","text":"[Source] new ref parseFile( pfilename: String val) : Xml2Doc ref^ ?","title":"parseFile"},{"location":"pony-libxml2-Xml2Doc/#parameters_1","text":"pfilename: String val","title":"Parameters"},{"location":"pony-libxml2-Xml2Doc/#returns_1","text":"Xml2Doc ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2Doc/#parsedoc","text":"[Source] new ref parseDoc( pcur: String val) : Xml2Doc ref^ ?","title":"parseDoc"},{"location":"pony-libxml2-Xml2Doc/#parameters_2","text":"pcur: String val","title":"Parameters"},{"location":"pony-libxml2-Xml2Doc/#returns_2","text":"Xml2Doc ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2Doc/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xml2Doc/#var-ptr-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var ptr': NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xml2Doc/#var-allocated-bool-val","text":"[Source]","title":"var allocated: Bool val"},{"location":"pony-libxml2-Xml2Doc/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-Xml2Doc/#getrootelement","text":"[Source] fun ref getRootElement() : Xml2node ref ?","title":"getRootElement"},{"location":"pony-libxml2-Xml2Doc/#returns_3","text":"Xml2node ref ?","title":"Returns"},{"location":"pony-libxml2-Xml2Doc/#final","text":"[Source] fun ref final() : None val","title":"final"},{"location":"pony-libxml2-Xml2Doc/#returns_4","text":"None val","title":"Returns"},{"location":"pony-libxml2-Xml2Doc/#private-functions","text":"","title":"Private Functions"},{"location":"pony-libxml2-Xml2Doc/#_final","text":"[Source] fun box _final() : None val","title":"_final"},{"location":"pony-libxml2-Xml2Doc/#returns_5","text":"None val","title":"Returns"},{"location":"pony-libxml2-Xml2attr/","text":"Xml2attr \u00b6 [Source] class ref Xml2attr Constructors \u00b6 fromPTR \u00b6 [Source] new ref fromPTR( ptrx: NullablePointer[Xmlattr ref] ref) : Xml2attr ref^ ? Parameters \u00b6 ptrx: NullablePointer [ Xmlattr ref] ref Returns \u00b6 Xml2attr ref^ ? Public fields \u00b6 var ptr': NullablePointer [ Xmlattr ref] ref \u00b6 [Source] var ptr: Xmlattr ref \u00b6 [Source]","title":"class Xml2attr"},{"location":"pony-libxml2-Xml2attr/#xml2attr","text":"[Source] class ref Xml2attr","title":"Xml2attr"},{"location":"pony-libxml2-Xml2attr/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xml2attr/#fromptr","text":"[Source] new ref fromPTR( ptrx: NullablePointer[Xmlattr ref] ref) : Xml2attr ref^ ?","title":"fromPTR"},{"location":"pony-libxml2-Xml2attr/#parameters","text":"ptrx: NullablePointer [ Xmlattr ref] ref","title":"Parameters"},{"location":"pony-libxml2-Xml2attr/#returns","text":"Xml2attr ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2attr/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xml2attr/#var-ptr-nullablepointerxmlattr-ref-ref","text":"[Source]","title":"var ptr': NullablePointer[Xmlattr ref] ref"},{"location":"pony-libxml2-Xml2attr/#var-ptr-xmlattr-ref","text":"[Source]","title":"var ptr: Xmlattr ref"},{"location":"pony-libxml2-Xml2node/","text":"Xml2node \u00b6 [Source] class ref Xml2node Constructors \u00b6 fromPTR \u00b6 [Source] new ref fromPTR( ptrx: NullablePointer[Xmlnode ref] ref) : Xml2node ref^ ? Parameters \u00b6 ptrx: NullablePointer [ Xmlnode ref] ref Returns \u00b6 Xml2node ref^ ? Public fields \u00b6 var ptr': NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var ptr: Xmlnode ref \u00b6 [Source] Public Functions \u00b6 name \u00b6 [Source] fun ref name() : String val Returns \u00b6 String val hasNsProp \u00b6 [Source] fun ref hasNsProp( pname: String val, pnamespace: String val) : Xml2attr ref ? Parameters \u00b6 pname: String val pnamespace: String val Returns \u00b6 Xml2attr ref ? getLineNo \u00b6 [Source] fun ref getLineNo() : I64 val Returns \u00b6 I64 val getNodePath \u00b6 [Source] fun ref getNodePath() : String val Returns \u00b6 String val xpathCastNodeToString \u00b6 [Source] fun ref xpathCastNodeToString() : String val Returns \u00b6 String val getProp \u00b6 [Source] fun ref getProp( pname: String val) : String val Parameters \u00b6 pname: String val Returns \u00b6 String val getContent \u00b6 [Source] fun ref getContent() : String val Returns \u00b6 String val getLang \u00b6 [Source] fun ref getLang() : String val Returns \u00b6 String val castNodeToString \u00b6 [Source] fun ref castNodeToString() : String val Returns \u00b6 String val dispose \u00b6 [Source] fun ref dispose() : None val Returns \u00b6 None val","title":"class Xml2node"},{"location":"pony-libxml2-Xml2node/#xml2node","text":"[Source] class ref Xml2node","title":"Xml2node"},{"location":"pony-libxml2-Xml2node/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xml2node/#fromptr","text":"[Source] new ref fromPTR( ptrx: NullablePointer[Xmlnode ref] ref) : Xml2node ref^ ?","title":"fromPTR"},{"location":"pony-libxml2-Xml2node/#parameters","text":"ptrx: NullablePointer [ Xmlnode ref] ref","title":"Parameters"},{"location":"pony-libxml2-Xml2node/#returns","text":"Xml2node ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2node/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xml2node/#var-ptr-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var ptr': NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xml2node/#var-ptr-xmlnode-ref","text":"[Source]","title":"var ptr: Xmlnode ref"},{"location":"pony-libxml2-Xml2node/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-Xml2node/#name","text":"[Source] fun ref name() : String val","title":"name"},{"location":"pony-libxml2-Xml2node/#returns_1","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#hasnsprop","text":"[Source] fun ref hasNsProp( pname: String val, pnamespace: String val) : Xml2attr ref ?","title":"hasNsProp"},{"location":"pony-libxml2-Xml2node/#parameters_1","text":"pname: String val pnamespace: String val","title":"Parameters"},{"location":"pony-libxml2-Xml2node/#returns_2","text":"Xml2attr ref ?","title":"Returns"},{"location":"pony-libxml2-Xml2node/#getlineno","text":"[Source] fun ref getLineNo() : I64 val","title":"getLineNo"},{"location":"pony-libxml2-Xml2node/#returns_3","text":"I64 val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#getnodepath","text":"[Source] fun ref getNodePath() : String val","title":"getNodePath"},{"location":"pony-libxml2-Xml2node/#returns_4","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#xpathcastnodetostring","text":"[Source] fun ref xpathCastNodeToString() : String val","title":"xpathCastNodeToString"},{"location":"pony-libxml2-Xml2node/#returns_5","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#getprop","text":"[Source] fun ref getProp( pname: String val) : String val","title":"getProp"},{"location":"pony-libxml2-Xml2node/#parameters_2","text":"pname: String val","title":"Parameters"},{"location":"pony-libxml2-Xml2node/#returns_6","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#getcontent","text":"[Source] fun ref getContent() : String val","title":"getContent"},{"location":"pony-libxml2-Xml2node/#returns_7","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#getlang","text":"[Source] fun ref getLang() : String val","title":"getLang"},{"location":"pony-libxml2-Xml2node/#returns_8","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#castnodetostring","text":"[Source] fun ref castNodeToString() : String val","title":"castNodeToString"},{"location":"pony-libxml2-Xml2node/#returns_9","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2node/#dispose","text":"[Source] fun ref dispose() : None val","title":"dispose"},{"location":"pony-libxml2-Xml2node/#returns_10","text":"None val","title":"Returns"},{"location":"pony-libxml2-Xml2parserinputbuffer/","text":"Xml2parserinputbuffer \u00b6 [Source] class ref Xml2parserinputbuffer Constructors \u00b6 createMem \u00b6 [Source] new ref createMem( str: String val) : Xml2parserinputbuffer ref^ ? Parameters \u00b6 str: String val Returns \u00b6 Xml2parserinputbuffer ref^ ? createFilename \u00b6 [Source] new ref createFilename( uri: String val, encoding: I32 val) : Xml2parserinputbuffer ref^ ? Parameters \u00b6 uri: String val encoding: I32 val Returns \u00b6 Xml2parserinputbuffer ref^ ? Public fields \u00b6 var ptr': NullablePointer [ Xmlparserinputbuffer ref] ref \u00b6 [Source] var ptr: Xmlparserinputbuffer ref \u00b6 [Source] var buffersize: I32 val \u00b6 [Source] Public Functions \u00b6 newTextReader \u00b6 [Source] fun ref newTextReader( pURI: String val) : Xml2textreader ref ? Parameters \u00b6 pURI: String val Returns \u00b6 Xml2textreader ref ?","title":"class Xml2parserinputbuffer"},{"location":"pony-libxml2-Xml2parserinputbuffer/#xml2parserinputbuffer","text":"[Source] class ref Xml2parserinputbuffer","title":"Xml2parserinputbuffer"},{"location":"pony-libxml2-Xml2parserinputbuffer/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xml2parserinputbuffer/#createmem","text":"[Source] new ref createMem( str: String val) : Xml2parserinputbuffer ref^ ?","title":"createMem"},{"location":"pony-libxml2-Xml2parserinputbuffer/#parameters","text":"str: String val","title":"Parameters"},{"location":"pony-libxml2-Xml2parserinputbuffer/#returns","text":"Xml2parserinputbuffer ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2parserinputbuffer/#createfilename","text":"[Source] new ref createFilename( uri: String val, encoding: I32 val) : Xml2parserinputbuffer ref^ ?","title":"createFilename"},{"location":"pony-libxml2-Xml2parserinputbuffer/#parameters_1","text":"uri: String val encoding: I32 val","title":"Parameters"},{"location":"pony-libxml2-Xml2parserinputbuffer/#returns_1","text":"Xml2parserinputbuffer ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2parserinputbuffer/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xml2parserinputbuffer/#var-ptr-nullablepointerxmlparserinputbuffer-ref-ref","text":"[Source]","title":"var ptr': NullablePointer[Xmlparserinputbuffer ref] ref"},{"location":"pony-libxml2-Xml2parserinputbuffer/#var-ptr-xmlparserinputbuffer-ref","text":"[Source]","title":"var ptr: Xmlparserinputbuffer ref"},{"location":"pony-libxml2-Xml2parserinputbuffer/#var-buffersize-i32-val","text":"[Source]","title":"var buffersize: I32 val"},{"location":"pony-libxml2-Xml2parserinputbuffer/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-Xml2parserinputbuffer/#newtextreader","text":"[Source] fun ref newTextReader( pURI: String val) : Xml2textreader ref ?","title":"newTextReader"},{"location":"pony-libxml2-Xml2parserinputbuffer/#parameters_2","text":"pURI: String val","title":"Parameters"},{"location":"pony-libxml2-Xml2parserinputbuffer/#returns_2","text":"Xml2textreader ref ?","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/","text":"Xml2pathobject \u00b6 [Source] class ref Xml2pathobject Constructors \u00b6 fromPTR \u00b6 [Source] new ref fromPTR( ptrx: NullablePointer[Xmlxpathobject ref] ref) : Xml2pathobject ref^ ? Parameters \u00b6 ptrx: NullablePointer [ Xmlxpathobject ref] ref Returns \u00b6 Xml2pathobject ref^ ? Public fields \u00b6 var allocated: Bool val \u00b6 [Source] var ptr': NullablePointer [ Xmlxpathobject ref] ref \u00b6 [Source] var ptr: Xmlxpathobject ref \u00b6 [Source] var nodeset': NullablePointer [ Xmlnodeset ref] ref \u00b6 [Source] var nodeset: Xmlnodeset ref \u00b6 [Source] var nodearray: Array [ Xml2node ref] ref \u00b6 [Source] Public Functions \u00b6 size \u00b6 [Source] fun box size() : USize val ? Returns \u00b6 USize val ? values \u00b6 [Source] fun box values() : ArrayValues[Xml2node ref, this->Array[Xml2node ref] ref] ref^ ? Returns \u00b6 ArrayValues [ Xml2node ref, this-> Array [ Xml2node ref] ref] ref^ ? apply \u00b6 [Source] fun ref apply( index: USize val) : Xml2node ref ? Parameters \u00b6 index: USize val Returns \u00b6 Xml2node ref ? final \u00b6 [Source] fun ref final() : None val Returns \u00b6 None val castNodeSetToString \u00b6 [Source] fun ref castNodeSetToString() : String val Returns \u00b6 String val castToString \u00b6 [Source] fun ref castToString() : String val Returns \u00b6 String val Private Functions \u00b6 _final \u00b6 [Source] fun box _final() : None val Returns \u00b6 None val","title":"class Xml2pathobject"},{"location":"pony-libxml2-Xml2pathobject/#xml2pathobject","text":"[Source] class ref Xml2pathobject","title":"Xml2pathobject"},{"location":"pony-libxml2-Xml2pathobject/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xml2pathobject/#fromptr","text":"[Source] new ref fromPTR( ptrx: NullablePointer[Xmlxpathobject ref] ref) : Xml2pathobject ref^ ?","title":"fromPTR"},{"location":"pony-libxml2-Xml2pathobject/#parameters","text":"ptrx: NullablePointer [ Xmlxpathobject ref] ref","title":"Parameters"},{"location":"pony-libxml2-Xml2pathobject/#returns","text":"Xml2pathobject ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xml2pathobject/#var-allocated-bool-val","text":"[Source]","title":"var allocated: Bool val"},{"location":"pony-libxml2-Xml2pathobject/#var-ptr-nullablepointerxmlxpathobject-ref-ref","text":"[Source]","title":"var ptr': NullablePointer[Xmlxpathobject ref] ref"},{"location":"pony-libxml2-Xml2pathobject/#var-ptr-xmlxpathobject-ref","text":"[Source]","title":"var ptr: Xmlxpathobject ref"},{"location":"pony-libxml2-Xml2pathobject/#var-nodeset-nullablepointerxmlnodeset-ref-ref","text":"[Source]","title":"var nodeset': NullablePointer[Xmlnodeset ref] ref"},{"location":"pony-libxml2-Xml2pathobject/#var-nodeset-xmlnodeset-ref","text":"[Source]","title":"var nodeset: Xmlnodeset ref"},{"location":"pony-libxml2-Xml2pathobject/#var-nodearray-arrayxml2node-ref-ref","text":"[Source]","title":"var nodearray: Array[Xml2node ref] ref"},{"location":"pony-libxml2-Xml2pathobject/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-Xml2pathobject/#size","text":"[Source] fun box size() : USize val ?","title":"size"},{"location":"pony-libxml2-Xml2pathobject/#returns_1","text":"USize val ?","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/#values","text":"[Source] fun box values() : ArrayValues[Xml2node ref, this->Array[Xml2node ref] ref] ref^ ?","title":"values"},{"location":"pony-libxml2-Xml2pathobject/#returns_2","text":"ArrayValues [ Xml2node ref, this-> Array [ Xml2node ref] ref] ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/#apply","text":"[Source] fun ref apply( index: USize val) : Xml2node ref ?","title":"apply"},{"location":"pony-libxml2-Xml2pathobject/#parameters_1","text":"index: USize val","title":"Parameters"},{"location":"pony-libxml2-Xml2pathobject/#returns_3","text":"Xml2node ref ?","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/#final","text":"[Source] fun ref final() : None val","title":"final"},{"location":"pony-libxml2-Xml2pathobject/#returns_4","text":"None val","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/#castnodesettostring","text":"[Source] fun ref castNodeSetToString() : String val","title":"castNodeSetToString"},{"location":"pony-libxml2-Xml2pathobject/#returns_5","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/#casttostring","text":"[Source] fun ref castToString() : String val","title":"castToString"},{"location":"pony-libxml2-Xml2pathobject/#returns_6","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2pathobject/#private-functions","text":"","title":"Private Functions"},{"location":"pony-libxml2-Xml2pathobject/#_final","text":"[Source] fun box _final() : None val","title":"_final"},{"location":"pony-libxml2-Xml2pathobject/#returns_7","text":"None val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/","text":"Xml2textreader \u00b6 [Source] class ref Xml2textreader Constructors \u00b6 fromPTR \u00b6 [Source] new ref fromPTR( ptrx: NullablePointer[Xmltextreader ref] ref) : Xml2textreader ref^ ? Parameters \u00b6 ptrx: NullablePointer [ Xmltextreader ref] ref Returns \u00b6 Xml2textreader ref^ ? Public fields \u00b6 var ptr': NullablePointer [ Xmltextreader ref] ref \u00b6 [Source] var ptr: Xmltextreader ref \u00b6 [Source] Public Functions \u00b6 read \u00b6 [Source] fun ref read() : I32 val Returns \u00b6 I32 val depth \u00b6 [Source] fun ref depth() : I32 val Returns \u00b6 I32 val nodeType \u00b6 [Source] fun ref nodeType() : I32 val Returns \u00b6 I32 val name \u00b6 [Source] fun ref name() : String val Returns \u00b6 String val value \u00b6 [Source] fun ref value() : String val Returns \u00b6 String val isEmptyElement \u00b6 [Source] fun ref isEmptyElement() : I32 val Returns \u00b6 I32 val setParserProp \u00b6 [Source] fun ref setParserProp( pprop: I32 val, pvalue: I32 val) : I32 val Parameters \u00b6 pprop: I32 val pvalue: I32 val Returns \u00b6 I32 val expand \u00b6 [Source] fun ref expand() : Xml2node ref ? Returns \u00b6 Xml2node ref ?","title":"class Xml2textreader"},{"location":"pony-libxml2-Xml2textreader/#xml2textreader","text":"[Source] class ref Xml2textreader","title":"Xml2textreader"},{"location":"pony-libxml2-Xml2textreader/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xml2textreader/#fromptr","text":"[Source] new ref fromPTR( ptrx: NullablePointer[Xmltextreader ref] ref) : Xml2textreader ref^ ?","title":"fromPTR"},{"location":"pony-libxml2-Xml2textreader/#parameters","text":"ptrx: NullablePointer [ Xmltextreader ref] ref","title":"Parameters"},{"location":"pony-libxml2-Xml2textreader/#returns","text":"Xml2textreader ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xml2textreader/#var-ptr-nullablepointerxmltextreader-ref-ref","text":"[Source]","title":"var ptr': NullablePointer[Xmltextreader ref] ref"},{"location":"pony-libxml2-Xml2textreader/#var-ptr-xmltextreader-ref","text":"[Source]","title":"var ptr: Xmltextreader ref"},{"location":"pony-libxml2-Xml2textreader/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-Xml2textreader/#read","text":"[Source] fun ref read() : I32 val","title":"read"},{"location":"pony-libxml2-Xml2textreader/#returns_1","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#depth","text":"[Source] fun ref depth() : I32 val","title":"depth"},{"location":"pony-libxml2-Xml2textreader/#returns_2","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#nodetype","text":"[Source] fun ref nodeType() : I32 val","title":"nodeType"},{"location":"pony-libxml2-Xml2textreader/#returns_3","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#name","text":"[Source] fun ref name() : String val","title":"name"},{"location":"pony-libxml2-Xml2textreader/#returns_4","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#value","text":"[Source] fun ref value() : String val","title":"value"},{"location":"pony-libxml2-Xml2textreader/#returns_5","text":"String val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#isemptyelement","text":"[Source] fun ref isEmptyElement() : I32 val","title":"isEmptyElement"},{"location":"pony-libxml2-Xml2textreader/#returns_6","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#setparserprop","text":"[Source] fun ref setParserProp( pprop: I32 val, pvalue: I32 val) : I32 val","title":"setParserProp"},{"location":"pony-libxml2-Xml2textreader/#parameters_1","text":"pprop: I32 val pvalue: I32 val","title":"Parameters"},{"location":"pony-libxml2-Xml2textreader/#returns_7","text":"I32 val","title":"Returns"},{"location":"pony-libxml2-Xml2textreader/#expand","text":"[Source] fun ref expand() : Xml2node ref ?","title":"expand"},{"location":"pony-libxml2-Xml2textreader/#returns_8","text":"Xml2node ref ?","title":"Returns"},{"location":"pony-libxml2-Xml2xpathcontext/","text":"Xml2xpathcontext \u00b6 [Source] class ref Xml2xpathcontext Constructors \u00b6 create \u00b6 [Source] new ref create( xmldoc: Xml2Doc ref) : Xml2xpathcontext ref^ ? Parameters \u00b6 xmldoc: Xml2Doc ref Returns \u00b6 Xml2xpathcontext ref^ ? Public fields \u00b6 var ptr': NullablePointer [ Xmlxpathcontext ref] ref \u00b6 [Source] var allocated: Bool val \u00b6 [Source] Public Functions \u00b6 xpathEval \u00b6 [Source] fun ref xpathEval( str: String val) : Xml2pathobject ref ? Parameters \u00b6 str: String val Returns \u00b6 Xml2pathobject ref ? xpathSetContextNode \u00b6 [Source] fun ref xpathSetContextNode( xmlnode: Xml2node ref) : I32 val ? Parameters \u00b6 xmlnode: Xml2node ref Returns \u00b6 I32 val ? final \u00b6 [Source] fun ref final() : None val Returns \u00b6 None val Private Functions \u00b6 _final \u00b6 [Source] fun box _final() : None val Returns \u00b6 None val","title":"class Xml2xpathcontext"},{"location":"pony-libxml2-Xml2xpathcontext/#xml2xpathcontext","text":"[Source] class ref Xml2xpathcontext","title":"Xml2xpathcontext"},{"location":"pony-libxml2-Xml2xpathcontext/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xml2xpathcontext/#create","text":"[Source] new ref create( xmldoc: Xml2Doc ref) : Xml2xpathcontext ref^ ?","title":"create"},{"location":"pony-libxml2-Xml2xpathcontext/#parameters","text":"xmldoc: Xml2Doc ref","title":"Parameters"},{"location":"pony-libxml2-Xml2xpathcontext/#returns","text":"Xml2xpathcontext ref^ ?","title":"Returns"},{"location":"pony-libxml2-Xml2xpathcontext/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xml2xpathcontext/#var-ptr-nullablepointerxmlxpathcontext-ref-ref","text":"[Source]","title":"var ptr': NullablePointer[Xmlxpathcontext ref] ref"},{"location":"pony-libxml2-Xml2xpathcontext/#var-allocated-bool-val","text":"[Source]","title":"var allocated: Bool val"},{"location":"pony-libxml2-Xml2xpathcontext/#public-functions","text":"","title":"Public Functions"},{"location":"pony-libxml2-Xml2xpathcontext/#xpatheval","text":"[Source] fun ref xpathEval( str: String val) : Xml2pathobject ref ?","title":"xpathEval"},{"location":"pony-libxml2-Xml2xpathcontext/#parameters_1","text":"str: String val","title":"Parameters"},{"location":"pony-libxml2-Xml2xpathcontext/#returns_1","text":"Xml2pathobject ref ?","title":"Returns"},{"location":"pony-libxml2-Xml2xpathcontext/#xpathsetcontextnode","text":"[Source] fun ref xpathSetContextNode( xmlnode: Xml2node ref) : I32 val ?","title":"xpathSetContextNode"},{"location":"pony-libxml2-Xml2xpathcontext/#parameters_2","text":"xmlnode: Xml2node ref","title":"Parameters"},{"location":"pony-libxml2-Xml2xpathcontext/#returns_2","text":"I32 val ?","title":"Returns"},{"location":"pony-libxml2-Xml2xpathcontext/#final","text":"[Source] fun ref final() : None val","title":"final"},{"location":"pony-libxml2-Xml2xpathcontext/#returns_3","text":"None val","title":"Returns"},{"location":"pony-libxml2-Xml2xpathcontext/#private-functions","text":"","title":"Private Functions"},{"location":"pony-libxml2-Xml2xpathcontext/#_final","text":"[Source] fun box _final() : None val","title":"_final"},{"location":"pony-libxml2-Xml2xpathcontext/#returns_4","text":"None val","title":"Returns"},{"location":"pony-libxml2-Xmlattr/","text":"Xmlattr \u00b6 [Source] struct ref Xmlattr Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlattr iso^ Returns \u00b6 Xmlattr iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pchildren: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var plast: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pnext: NullablePointer [ Xmlattr ref] ref \u00b6 [Source] var pprev: NullablePointer [ Xmlattr ref] ref \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pns: NullablePointer [ Xmlns ref] ref \u00b6 [Source] var patype: I32 val \u00b6 [Source] var ppsvi: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlattr"},{"location":"pony-libxml2-Xmlattr/#xmlattr","text":"[Source] struct ref Xmlattr","title":"Xmlattr"},{"location":"pony-libxml2-Xmlattr/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlattr/#create","text":"[Source] new iso create() : Xmlattr iso^","title":"create"},{"location":"pony-libxml2-Xmlattr/#returns","text":"Xmlattr iso^","title":"Returns"},{"location":"pony-libxml2-Xmlattr/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlattr/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlattr/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlattr/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlattr/#var-pchildren-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pchildren: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlattr/#var-plast-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var plast: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlattr/#var-pparent-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlattr/#var-pnext-nullablepointerxmlattr-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlattr ref] ref"},{"location":"pony-libxml2-Xmlattr/#var-pprev-nullablepointerxmlattr-ref-ref","text":"[Source]","title":"var pprev: NullablePointer[Xmlattr ref] ref"},{"location":"pony-libxml2-Xmlattr/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlattr/#var-pns-nullablepointerxmlns-ref-ref","text":"[Source]","title":"var pns: NullablePointer[Xmlns ref] ref"},{"location":"pony-libxml2-Xmlattr/#var-patype-i32-val","text":"[Source]","title":"var patype: I32 val"},{"location":"pony-libxml2-Xmlattr/#var-ppsvi-pointeru8-val-ref","text":"[Source]","title":"var ppsvi: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlattribute/","text":"Xmlattribute \u00b6 [Source] struct ref Xmlattribute Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlattribute iso^ Returns \u00b6 Xmlattribute iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pchildren: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var plast: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmldtd ref] ref \u00b6 [Source] var pnext: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pprev: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pnexth: NullablePointer [ Xmlattribute ref] ref \u00b6 [Source] var patype: I32 val \u00b6 [Source] var pdef: I32 val \u00b6 [Source] var pdefaultValue: Pointer [ U8 val] tag \u00b6 [Source] var ptree: NullablePointer [ Xmlenumeration ref] ref \u00b6 [Source] var pprefix: Pointer [ U8 val] tag \u00b6 [Source] var pelem: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmlattribute"},{"location":"pony-libxml2-Xmlattribute/#xmlattribute","text":"[Source] struct ref Xmlattribute","title":"Xmlattribute"},{"location":"pony-libxml2-Xmlattribute/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlattribute/#create","text":"[Source] new iso create() : Xmlattribute iso^","title":"create"},{"location":"pony-libxml2-Xmlattribute/#returns","text":"Xmlattribute iso^","title":"Returns"},{"location":"pony-libxml2-Xmlattribute/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlattribute/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlattribute/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlattribute/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlattribute/#var-pchildren-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pchildren: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-plast-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var plast: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-pparent-nullablepointerxmldtd-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmldtd ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-pnext-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-pprev-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pprev: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-pnexth-nullablepointerxmlattribute-ref-ref","text":"[Source]","title":"var pnexth: NullablePointer[Xmlattribute ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-patype-i32-val","text":"[Source]","title":"var patype: I32 val"},{"location":"pony-libxml2-Xmlattribute/#var-pdef-i32-val","text":"[Source]","title":"var pdef: I32 val"},{"location":"pony-libxml2-Xmlattribute/#var-pdefaultvalue-pointeru8-val-tag","text":"[Source]","title":"var pdefaultValue: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlattribute/#var-ptree-nullablepointerxmlenumeration-ref-ref","text":"[Source]","title":"var ptree: NullablePointer[Xmlenumeration ref] ref"},{"location":"pony-libxml2-Xmlattribute/#var-pprefix-pointeru8-val-tag","text":"[Source]","title":"var pprefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlattribute/#var-pelem-pointeru8-val-tag","text":"[Source]","title":"var pelem: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlautomata/","text":"Xmlautomata \u00b6 [Source] struct ref Xmlautomata Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlautomata iso^ Returns \u00b6 Xmlautomata iso^","title":"struct Xmlautomata"},{"location":"pony-libxml2-Xmlautomata/#xmlautomata","text":"[Source] struct ref Xmlautomata","title":"Xmlautomata"},{"location":"pony-libxml2-Xmlautomata/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlautomata/#create","text":"[Source] new iso create() : Xmlautomata iso^","title":"create"},{"location":"pony-libxml2-Xmlautomata/#returns","text":"Xmlautomata iso^","title":"Returns"},{"location":"pony-libxml2-Xmlautomatastate/","text":"Xmlautomatastate \u00b6 [Source] struct ref Xmlautomatastate Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlautomatastate iso^ Returns \u00b6 Xmlautomatastate iso^","title":"struct Xmlautomatastate"},{"location":"pony-libxml2-Xmlautomatastate/#xmlautomatastate","text":"[Source] struct ref Xmlautomatastate","title":"Xmlautomatastate"},{"location":"pony-libxml2-Xmlautomatastate/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlautomatastate/#create","text":"[Source] new iso create() : Xmlautomatastate iso^","title":"create"},{"location":"pony-libxml2-Xmlautomatastate/#returns","text":"Xmlautomatastate iso^","title":"Returns"},{"location":"pony-libxml2-Xmlbuf/","text":"Xmlbuf \u00b6 [Source] struct ref Xmlbuf Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlbuf iso^ Returns \u00b6 Xmlbuf iso^","title":"struct Xmlbuf"},{"location":"pony-libxml2-Xmlbuf/#xmlbuf","text":"[Source] struct ref Xmlbuf","title":"Xmlbuf"},{"location":"pony-libxml2-Xmlbuf/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlbuf/#create","text":"[Source] new iso create() : Xmlbuf iso^","title":"create"},{"location":"pony-libxml2-Xmlbuf/#returns","text":"Xmlbuf iso^","title":"Returns"},{"location":"pony-libxml2-Xmlbuffer/","text":"Xmlbuffer \u00b6 [Source] struct ref Xmlbuffer Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlbuffer iso^ Returns \u00b6 Xmlbuffer iso^ Public fields \u00b6 var pcontent: Pointer [ U8 val] tag \u00b6 [Source] var puse: U32 val \u00b6 [Source] var psize: U32 val \u00b6 [Source] var palloc: I32 val \u00b6 [Source] var pcontentIO: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmlbuffer"},{"location":"pony-libxml2-Xmlbuffer/#xmlbuffer","text":"[Source] struct ref Xmlbuffer","title":"Xmlbuffer"},{"location":"pony-libxml2-Xmlbuffer/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlbuffer/#create","text":"[Source] new iso create() : Xmlbuffer iso^","title":"create"},{"location":"pony-libxml2-Xmlbuffer/#returns","text":"Xmlbuffer iso^","title":"Returns"},{"location":"pony-libxml2-Xmlbuffer/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlbuffer/#var-pcontent-pointeru8-val-tag","text":"[Source]","title":"var pcontent: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlbuffer/#var-puse-u32-val","text":"[Source]","title":"var puse: U32 val"},{"location":"pony-libxml2-Xmlbuffer/#var-psize-u32-val","text":"[Source]","title":"var psize: U32 val"},{"location":"pony-libxml2-Xmlbuffer/#var-palloc-i32-val","text":"[Source]","title":"var palloc: I32 val"},{"location":"pony-libxml2-Xmlbuffer/#var-pcontentio-pointeru8-val-tag","text":"[Source]","title":"var pcontentIO: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlcatalog/","text":"Xmlcatalog \u00b6 [Source] struct ref Xmlcatalog Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlcatalog iso^ Returns \u00b6 Xmlcatalog iso^","title":"struct Xmlcatalog"},{"location":"pony-libxml2-Xmlcatalog/#xmlcatalog","text":"[Source] struct ref Xmlcatalog","title":"Xmlcatalog"},{"location":"pony-libxml2-Xmlcatalog/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlcatalog/#create","text":"[Source] new iso create() : Xmlcatalog iso^","title":"create"},{"location":"pony-libxml2-Xmlcatalog/#returns","text":"Xmlcatalog iso^","title":"Returns"},{"location":"pony-libxml2-Xmlcharencodinghandler/","text":"Xmlcharencodinghandler \u00b6 [Source] struct ref Xmlcharencodinghandler Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlcharencodinghandler iso^ Returns \u00b6 Xmlcharencodinghandler iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var pinput: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var poutput: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var piconv_in: Pointer [ U8 val] ref \u00b6 [Source] var piconv_out: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlcharencodinghandler"},{"location":"pony-libxml2-Xmlcharencodinghandler/#xmlcharencodinghandler","text":"[Source] struct ref Xmlcharencodinghandler","title":"Xmlcharencodinghandler"},{"location":"pony-libxml2-Xmlcharencodinghandler/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlcharencodinghandler/#create","text":"[Source] new iso create() : Xmlcharencodinghandler iso^","title":"create"},{"location":"pony-libxml2-Xmlcharencodinghandler/#returns","text":"Xmlcharencodinghandler iso^","title":"Returns"},{"location":"pony-libxml2-Xmlcharencodinghandler/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlcharencodinghandler/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlcharencodinghandler/#var-pinput-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pinput: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlcharencodinghandler/#var-poutput-pointerfunctionpointer-val-ref","text":"[Source]","title":"var poutput: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlcharencodinghandler/#var-piconv_in-pointeru8-val-ref","text":"[Source]","title":"var piconv_in: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlcharencodinghandler/#var-piconv_out-pointeru8-val-ref","text":"[Source]","title":"var piconv_out: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlchlrange/","text":"Xmlchlrange \u00b6 [Source] struct ref Xmlchlrange Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlchlrange iso^ Returns \u00b6 Xmlchlrange iso^ Public fields \u00b6 var plow: U32 val \u00b6 [Source] var phigh: U32 val \u00b6 [Source]","title":"struct Xmlchlrange"},{"location":"pony-libxml2-Xmlchlrange/#xmlchlrange","text":"[Source] struct ref Xmlchlrange","title":"Xmlchlrange"},{"location":"pony-libxml2-Xmlchlrange/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlchlrange/#create","text":"[Source] new iso create() : Xmlchlrange iso^","title":"create"},{"location":"pony-libxml2-Xmlchlrange/#returns","text":"Xmlchlrange iso^","title":"Returns"},{"location":"pony-libxml2-Xmlchlrange/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlchlrange/#var-plow-u32-val","text":"[Source]","title":"var plow: U32 val"},{"location":"pony-libxml2-Xmlchlrange/#var-phigh-u32-val","text":"[Source]","title":"var phigh: U32 val"},{"location":"pony-libxml2-Xmlchrangegroup/","text":"Xmlchrangegroup \u00b6 [Source] struct ref Xmlchrangegroup Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlchrangegroup iso^ Returns \u00b6 Xmlchrangegroup iso^ Public fields \u00b6 var pnbShortRange: I32 val \u00b6 [Source] var pnbLongRange: I32 val \u00b6 [Source] var pshortRange: NullablePointer [ Xmlchsrange ref] ref \u00b6 [Source] var plongRange: NullablePointer [ Xmlchlrange ref] ref \u00b6 [Source]","title":"struct Xmlchrangegroup"},{"location":"pony-libxml2-Xmlchrangegroup/#xmlchrangegroup","text":"[Source] struct ref Xmlchrangegroup","title":"Xmlchrangegroup"},{"location":"pony-libxml2-Xmlchrangegroup/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlchrangegroup/#create","text":"[Source] new iso create() : Xmlchrangegroup iso^","title":"create"},{"location":"pony-libxml2-Xmlchrangegroup/#returns","text":"Xmlchrangegroup iso^","title":"Returns"},{"location":"pony-libxml2-Xmlchrangegroup/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlchrangegroup/#var-pnbshortrange-i32-val","text":"[Source]","title":"var pnbShortRange: I32 val"},{"location":"pony-libxml2-Xmlchrangegroup/#var-pnblongrange-i32-val","text":"[Source]","title":"var pnbLongRange: I32 val"},{"location":"pony-libxml2-Xmlchrangegroup/#var-pshortrange-nullablepointerxmlchsrange-ref-ref","text":"[Source]","title":"var pshortRange: NullablePointer[Xmlchsrange ref] ref"},{"location":"pony-libxml2-Xmlchrangegroup/#var-plongrange-nullablepointerxmlchlrange-ref-ref","text":"[Source]","title":"var plongRange: NullablePointer[Xmlchlrange ref] ref"},{"location":"pony-libxml2-Xmlchsrange/","text":"Xmlchsrange \u00b6 [Source] struct ref Xmlchsrange Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlchsrange iso^ Returns \u00b6 Xmlchsrange iso^ Public fields \u00b6 var plow: U16 val \u00b6 [Source] var phigh: U16 val \u00b6 [Source]","title":"struct Xmlchsrange"},{"location":"pony-libxml2-Xmlchsrange/#xmlchsrange","text":"[Source] struct ref Xmlchsrange","title":"Xmlchsrange"},{"location":"pony-libxml2-Xmlchsrange/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlchsrange/#create","text":"[Source] new iso create() : Xmlchsrange iso^","title":"create"},{"location":"pony-libxml2-Xmlchsrange/#returns","text":"Xmlchsrange iso^","title":"Returns"},{"location":"pony-libxml2-Xmlchsrange/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlchsrange/#var-plow-u16-val","text":"[Source]","title":"var plow: U16 val"},{"location":"pony-libxml2-Xmlchsrange/#var-phigh-u16-val","text":"[Source]","title":"var phigh: U16 val"},{"location":"pony-libxml2-Xmldict/","text":"Xmldict \u00b6 [Source] struct ref Xmldict Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmldict iso^ Returns \u00b6 Xmldict iso^","title":"struct Xmldict"},{"location":"pony-libxml2-Xmldict/#xmldict","text":"[Source] struct ref Xmldict","title":"Xmldict"},{"location":"pony-libxml2-Xmldict/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmldict/#create","text":"[Source] new iso create() : Xmldict iso^","title":"create"},{"location":"pony-libxml2-Xmldict/#returns","text":"Xmldict iso^","title":"Returns"},{"location":"pony-libxml2-Xmldoc/","text":"Xmldoc \u00b6 [Source] struct ref Xmldoc Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmldoc iso^ Returns \u00b6 Xmldoc iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] ref \u00b6 [Source] var pchildren: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var plast: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pnext: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pprev: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pcompression: I32 val \u00b6 [Source] var pstandalone: I32 val \u00b6 [Source] var pintSubset: NullablePointer [ Xmldtd ref] ref \u00b6 [Source] var pextSubset: NullablePointer [ Xmldtd ref] ref \u00b6 [Source] var poldNs: NullablePointer [ Xmlns ref] ref \u00b6 [Source] var pversion: Pointer [ U8 val] ref \u00b6 [Source] var pencoding: Pointer [ U8 val] ref \u00b6 [Source] var pids: Pointer [ U8 val] ref \u00b6 [Source] var prefs: Pointer [ U8 val] ref \u00b6 [Source] var pURL: Pointer [ U8 val] ref \u00b6 [Source] var pcharset: I32 val \u00b6 [Source] var pdict: NullablePointer [ Xmldict ref] ref \u00b6 [Source] var ppsvi: Pointer [ U8 val] ref \u00b6 [Source] var pparseFlags: I32 val \u00b6 [Source] var pproperties: I32 val \u00b6 [Source]","title":"struct Xmldoc"},{"location":"pony-libxml2-Xmldoc/#xmldoc","text":"[Source] struct ref Xmldoc","title":"Xmldoc"},{"location":"pony-libxml2-Xmldoc/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmldoc/#create","text":"[Source] new iso create() : Xmldoc iso^","title":"create"},{"location":"pony-libxml2-Xmldoc/#returns","text":"Xmldoc iso^","title":"Returns"},{"location":"pony-libxml2-Xmldoc/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmldoc/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmldoc/#var-pname-pointeru8-val-ref","text":"[Source]","title":"var pname: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-pchildren-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pchildren: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-plast-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var plast: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-pparent-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-pnext-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-pprev-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pprev: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-pcompression-i32-val","text":"[Source]","title":"var pcompression: I32 val"},{"location":"pony-libxml2-Xmldoc/#var-pstandalone-i32-val","text":"[Source]","title":"var pstandalone: I32 val"},{"location":"pony-libxml2-Xmldoc/#var-pintsubset-nullablepointerxmldtd-ref-ref","text":"[Source]","title":"var pintSubset: NullablePointer[Xmldtd ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-pextsubset-nullablepointerxmldtd-ref-ref","text":"[Source]","title":"var pextSubset: NullablePointer[Xmldtd ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-poldns-nullablepointerxmlns-ref-ref","text":"[Source]","title":"var poldNs: NullablePointer[Xmlns ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-pversion-pointeru8-val-ref","text":"[Source]","title":"var pversion: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-pencoding-pointeru8-val-ref","text":"[Source]","title":"var pencoding: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-pids-pointeru8-val-ref","text":"[Source]","title":"var pids: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-prefs-pointeru8-val-ref","text":"[Source]","title":"var prefs: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-purl-pointeru8-val-ref","text":"[Source]","title":"var pURL: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-pcharset-i32-val","text":"[Source]","title":"var pcharset: I32 val"},{"location":"pony-libxml2-Xmldoc/#var-pdict-nullablepointerxmldict-ref-ref","text":"[Source]","title":"var pdict: NullablePointer[Xmldict ref] ref"},{"location":"pony-libxml2-Xmldoc/#var-ppsvi-pointeru8-val-ref","text":"[Source]","title":"var ppsvi: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldoc/#var-pparseflags-i32-val","text":"[Source]","title":"var pparseFlags: I32 val"},{"location":"pony-libxml2-Xmldoc/#var-pproperties-i32-val","text":"[Source]","title":"var pproperties: I32 val"},{"location":"pony-libxml2-Xmldomwrapctxt/","text":"Xmldomwrapctxt \u00b6 [Source] struct ref Xmldomwrapctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmldomwrapctxt iso^ Returns \u00b6 Xmldomwrapctxt iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pnamespaceMap: Pointer [ U8 val] ref \u00b6 [Source] var pgetNsForNodeFunc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xmldomwrapctxt"},{"location":"pony-libxml2-Xmldomwrapctxt/#xmldomwrapctxt","text":"[Source] struct ref Xmldomwrapctxt","title":"Xmldomwrapctxt"},{"location":"pony-libxml2-Xmldomwrapctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmldomwrapctxt/#create","text":"[Source] new iso create() : Xmldomwrapctxt iso^","title":"create"},{"location":"pony-libxml2-Xmldomwrapctxt/#returns","text":"Xmldomwrapctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmldomwrapctxt/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmldomwrapctxt/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldomwrapctxt/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmldomwrapctxt/#var-pnamespacemap-pointeru8-val-ref","text":"[Source]","title":"var pnamespaceMap: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldomwrapctxt/#var-pgetnsfornodefunc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetNsForNodeFunc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmldtd/","text":"Xmldtd \u00b6 [Source] struct ref Xmldtd Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmldtd iso^ Returns \u00b6 Xmldtd iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pchildren: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var plast: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pnext: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pprev: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pnotations: Pointer [ U8 val] ref \u00b6 [Source] var pelements: Pointer [ U8 val] ref \u00b6 [Source] var pattributes: Pointer [ U8 val] ref \u00b6 [Source] var pentities: Pointer [ U8 val] ref \u00b6 [Source] var pExternalID: Pointer [ U8 val] tag \u00b6 [Source] var pSystemID: Pointer [ U8 val] tag \u00b6 [Source] var ppentities: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmldtd"},{"location":"pony-libxml2-Xmldtd/#xmldtd","text":"[Source] struct ref Xmldtd","title":"Xmldtd"},{"location":"pony-libxml2-Xmldtd/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmldtd/#create","text":"[Source] new iso create() : Xmldtd iso^","title":"create"},{"location":"pony-libxml2-Xmldtd/#returns","text":"Xmldtd iso^","title":"Returns"},{"location":"pony-libxml2-Xmldtd/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmldtd/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldtd/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmldtd/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmldtd/#var-pchildren-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pchildren: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldtd/#var-plast-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var plast: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldtd/#var-pparent-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmldtd/#var-pnext-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldtd/#var-pprev-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pprev: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmldtd/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmldtd/#var-pnotations-pointeru8-val-ref","text":"[Source]","title":"var pnotations: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldtd/#var-pelements-pointeru8-val-ref","text":"[Source]","title":"var pelements: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldtd/#var-pattributes-pointeru8-val-ref","text":"[Source]","title":"var pattributes: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldtd/#var-pentities-pointeru8-val-ref","text":"[Source]","title":"var pentities: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmldtd/#var-pexternalid-pointeru8-val-tag","text":"[Source]","title":"var pExternalID: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmldtd/#var-psystemid-pointeru8-val-tag","text":"[Source]","title":"var pSystemID: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmldtd/#var-ppentities-pointeru8-val-ref","text":"[Source]","title":"var ppentities: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlelement/","text":"Xmlelement \u00b6 [Source] struct ref Xmlelement Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlelement iso^ Returns \u00b6 Xmlelement iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pchildren: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var plast: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmldtd ref] ref \u00b6 [Source] var pnext: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pprev: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var petype: I32 val \u00b6 [Source] var pcontent: NullablePointer [ Xmlelementcontent ref] ref \u00b6 [Source] var pattributes: NullablePointer [ Xmlattribute ref] ref \u00b6 [Source] var pprefix: Pointer [ U8 val] tag \u00b6 [Source] var pcontModel: NullablePointer [ Xmlregexp ref] ref \u00b6 [Source]","title":"struct Xmlelement"},{"location":"pony-libxml2-Xmlelement/#xmlelement","text":"[Source] struct ref Xmlelement","title":"Xmlelement"},{"location":"pony-libxml2-Xmlelement/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlelement/#create","text":"[Source] new iso create() : Xmlelement iso^","title":"create"},{"location":"pony-libxml2-Xmlelement/#returns","text":"Xmlelement iso^","title":"Returns"},{"location":"pony-libxml2-Xmlelement/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlelement/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlelement/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlelement/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlelement/#var-pchildren-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pchildren: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-plast-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var plast: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-pparent-nullablepointerxmldtd-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmldtd ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-pnext-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-pprev-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pprev: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-petype-i32-val","text":"[Source]","title":"var petype: I32 val"},{"location":"pony-libxml2-Xmlelement/#var-pcontent-nullablepointerxmlelementcontent-ref-ref","text":"[Source]","title":"var pcontent: NullablePointer[Xmlelementcontent ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-pattributes-nullablepointerxmlattribute-ref-ref","text":"[Source]","title":"var pattributes: NullablePointer[Xmlattribute ref] ref"},{"location":"pony-libxml2-Xmlelement/#var-pprefix-pointeru8-val-tag","text":"[Source]","title":"var pprefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlelement/#var-pcontmodel-nullablepointerxmlregexp-ref-ref","text":"[Source]","title":"var pcontModel: NullablePointer[Xmlregexp ref] ref"},{"location":"pony-libxml2-Xmlelementcontent/","text":"Xmlelementcontent \u00b6 [Source] struct ref Xmlelementcontent Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlelementcontent iso^ Returns \u00b6 Xmlelementcontent iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pocur: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pc1: NullablePointer [ Xmlelementcontent ref] ref \u00b6 [Source] var pc2: NullablePointer [ Xmlelementcontent ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmlelementcontent ref] ref \u00b6 [Source] var pprefix: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmlelementcontent"},{"location":"pony-libxml2-Xmlelementcontent/#xmlelementcontent","text":"[Source] struct ref Xmlelementcontent","title":"Xmlelementcontent"},{"location":"pony-libxml2-Xmlelementcontent/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlelementcontent/#create","text":"[Source] new iso create() : Xmlelementcontent iso^","title":"create"},{"location":"pony-libxml2-Xmlelementcontent/#returns","text":"Xmlelementcontent iso^","title":"Returns"},{"location":"pony-libxml2-Xmlelementcontent/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlelementcontent/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlelementcontent/#var-pocur-i32-val","text":"[Source]","title":"var pocur: I32 val"},{"location":"pony-libxml2-Xmlelementcontent/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlelementcontent/#var-pc1-nullablepointerxmlelementcontent-ref-ref","text":"[Source]","title":"var pc1: NullablePointer[Xmlelementcontent ref] ref"},{"location":"pony-libxml2-Xmlelementcontent/#var-pc2-nullablepointerxmlelementcontent-ref-ref","text":"[Source]","title":"var pc2: NullablePointer[Xmlelementcontent ref] ref"},{"location":"pony-libxml2-Xmlelementcontent/#var-pparent-nullablepointerxmlelementcontent-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmlelementcontent ref] ref"},{"location":"pony-libxml2-Xmlelementcontent/#var-pprefix-pointeru8-val-tag","text":"[Source]","title":"var pprefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlentity/","text":"Xmlentity \u00b6 [Source] struct ref Xmlentity Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlentity iso^ Returns \u00b6 Xmlentity iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pchildren: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var plast: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmldtd ref] ref \u00b6 [Source] var pnext: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pprev: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var porig: Pointer [ U8 val] tag \u00b6 [Source] var pcontent: Pointer [ U8 val] tag \u00b6 [Source] var plength: I32 val \u00b6 [Source] var petype: I32 val \u00b6 [Source] var pExternalID: Pointer [ U8 val] tag \u00b6 [Source] var pSystemID: Pointer [ U8 val] tag \u00b6 [Source] var pnexte: NullablePointer [ Xmlentity ref] ref \u00b6 [Source] var pURI: Pointer [ U8 val] tag \u00b6 [Source] var powner: I32 val \u00b6 [Source] var pchecked: I32 val \u00b6 [Source]","title":"struct Xmlentity"},{"location":"pony-libxml2-Xmlentity/#xmlentity","text":"[Source] struct ref Xmlentity","title":"Xmlentity"},{"location":"pony-libxml2-Xmlentity/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlentity/#create","text":"[Source] new iso create() : Xmlentity iso^","title":"create"},{"location":"pony-libxml2-Xmlentity/#returns","text":"Xmlentity iso^","title":"Returns"},{"location":"pony-libxml2-Xmlentity/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlentity/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlentity/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlentity/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlentity/#var-pchildren-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pchildren: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlentity/#var-plast-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var plast: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlentity/#var-pparent-nullablepointerxmldtd-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmldtd ref] ref"},{"location":"pony-libxml2-Xmlentity/#var-pnext-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlentity/#var-pprev-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pprev: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlentity/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlentity/#var-porig-pointeru8-val-tag","text":"[Source]","title":"var porig: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlentity/#var-pcontent-pointeru8-val-tag","text":"[Source]","title":"var pcontent: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlentity/#var-plength-i32-val","text":"[Source]","title":"var plength: I32 val"},{"location":"pony-libxml2-Xmlentity/#var-petype-i32-val","text":"[Source]","title":"var petype: I32 val"},{"location":"pony-libxml2-Xmlentity/#var-pexternalid-pointeru8-val-tag","text":"[Source]","title":"var pExternalID: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlentity/#var-psystemid-pointeru8-val-tag","text":"[Source]","title":"var pSystemID: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlentity/#var-pnexte-nullablepointerxmlentity-ref-ref","text":"[Source]","title":"var pnexte: NullablePointer[Xmlentity ref] ref"},{"location":"pony-libxml2-Xmlentity/#var-puri-pointeru8-val-tag","text":"[Source]","title":"var pURI: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlentity/#var-powner-i32-val","text":"[Source]","title":"var powner: I32 val"},{"location":"pony-libxml2-Xmlentity/#var-pchecked-i32-val","text":"[Source]","title":"var pchecked: I32 val"},{"location":"pony-libxml2-Xmlenumeration/","text":"Xmlenumeration \u00b6 [Source] struct ref Xmlenumeration Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlenumeration iso^ Returns \u00b6 Xmlenumeration iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlenumeration ref] ref \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmlenumeration"},{"location":"pony-libxml2-Xmlenumeration/#xmlenumeration","text":"[Source] struct ref Xmlenumeration","title":"Xmlenumeration"},{"location":"pony-libxml2-Xmlenumeration/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlenumeration/#create","text":"[Source] new iso create() : Xmlenumeration iso^","title":"create"},{"location":"pony-libxml2-Xmlenumeration/#returns","text":"Xmlenumeration iso^","title":"Returns"},{"location":"pony-libxml2-Xmlenumeration/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlenumeration/#var-pnext-nullablepointerxmlenumeration-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlenumeration ref] ref"},{"location":"pony-libxml2-Xmlenumeration/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlerror/","text":"Xmlerror \u00b6 [Source] struct ref Xmlerror Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlerror iso^ Returns \u00b6 Xmlerror iso^ Public fields \u00b6 var pdomain: I32 val \u00b6 [Source] var pcode: I32 val \u00b6 [Source] var pmessage: Pointer [ U8 val] tag \u00b6 [Source] var plevel: I32 val \u00b6 [Source] var pfile: Pointer [ U8 val] tag \u00b6 [Source] var pline: I32 val \u00b6 [Source] var pstr1: Pointer [ U8 val] tag \u00b6 [Source] var pstr2: Pointer [ U8 val] tag \u00b6 [Source] var pstr3: Pointer [ U8 val] tag \u00b6 [Source] var pint1: I32 val \u00b6 [Source] var pint2: I32 val \u00b6 [Source] var pctxt: Pointer [ U8 val] ref \u00b6 [Source] var pnode: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlerror"},{"location":"pony-libxml2-Xmlerror/#xmlerror","text":"[Source] struct ref Xmlerror","title":"Xmlerror"},{"location":"pony-libxml2-Xmlerror/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlerror/#create","text":"[Source] new iso create() : Xmlerror iso^","title":"create"},{"location":"pony-libxml2-Xmlerror/#returns","text":"Xmlerror iso^","title":"Returns"},{"location":"pony-libxml2-Xmlerror/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlerror/#var-pdomain-i32-val","text":"[Source]","title":"var pdomain: I32 val"},{"location":"pony-libxml2-Xmlerror/#var-pcode-i32-val","text":"[Source]","title":"var pcode: I32 val"},{"location":"pony-libxml2-Xmlerror/#var-pmessage-pointeru8-val-tag","text":"[Source]","title":"var pmessage: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlerror/#var-plevel-i32-val","text":"[Source]","title":"var plevel: I32 val"},{"location":"pony-libxml2-Xmlerror/#var-pfile-pointeru8-val-tag","text":"[Source]","title":"var pfile: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlerror/#var-pline-i32-val","text":"[Source]","title":"var pline: I32 val"},{"location":"pony-libxml2-Xmlerror/#var-pstr1-pointeru8-val-tag","text":"[Source]","title":"var pstr1: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlerror/#var-pstr2-pointeru8-val-tag","text":"[Source]","title":"var pstr2: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlerror/#var-pstr3-pointeru8-val-tag","text":"[Source]","title":"var pstr3: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlerror/#var-pint1-i32-val","text":"[Source]","title":"var pint1: I32 val"},{"location":"pony-libxml2-Xmlerror/#var-pint2-i32-val","text":"[Source]","title":"var pint2: I32 val"},{"location":"pony-libxml2-Xmlerror/#var-pctxt-pointeru8-val-ref","text":"[Source]","title":"var pctxt: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlerror/#var-pnode-pointeru8-val-ref","text":"[Source]","title":"var pnode: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlglobalstate/","text":"Xmlglobalstate \u00b6 [Source] struct ref Xmlglobalstate Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlglobalstate iso^ Returns \u00b6 Xmlglobalstate iso^ Public fields \u00b6 var pxmlParserVersion: Pointer [ U8 val] tag \u00b6 [Source] var pxmlDefaultSAXLocator: Xmlsaxlocator ref \u00b6 [Source] var pxmlDefaultSAXHandler: Xmlsaxhandlerv1 ref \u00b6 [Source] var pdocbDefaultSAXHandler: Xmlsaxhandlerv1 ref \u00b6 [Source] var phtmlDefaultSAXHandler: Xmlsaxhandlerv1 ref \u00b6 [Source] var pxmlFree: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlMalloc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlMemStrdup: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlRealloc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlGenericError: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlStructuredError: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlGenericErrorContext: Pointer [ U8 val] ref \u00b6 [Source] var poldXMLWDcompatibility: I32 val \u00b6 [Source] var pxmlBufferAllocScheme: I32 val \u00b6 [Source] var pxmlDefaultBufferSize: I32 val \u00b6 [Source] var pxmlSubstituteEntitiesDefaultValue: I32 val \u00b6 [Source] var pxmlDoValidityCheckingDefaultValue: I32 val \u00b6 [Source] var pxmlGetWarningsDefaultValue: I32 val \u00b6 [Source] var pxmlKeepBlanksDefaultValue: I32 val \u00b6 [Source] var pxmlLineNumbersDefaultValue: I32 val \u00b6 [Source] var pxmlLoadExtDtdDefaultValue: I32 val \u00b6 [Source] var pxmlParserDebugEntities: I32 val \u00b6 [Source] var pxmlPedanticParserDefaultValue: I32 val \u00b6 [Source] var pxmlSaveNoEmptyTags: I32 val \u00b6 [Source] var pxmlIndentTreeOutput: I32 val \u00b6 [Source] var pxmlTreeIndentString: Pointer [ U8 val] tag \u00b6 [Source] var pxmlRegisterNodeDefaultValue: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlDeregisterNodeDefaultValue: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlMallocAtomic: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlLastError: Xmlerror ref \u00b6 [Source] var pxmlParserInputBufferCreateFilenameValue: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlOutputBufferCreateFilenameValue: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pxmlStructuredErrorContext: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlglobalstate"},{"location":"pony-libxml2-Xmlglobalstate/#xmlglobalstate","text":"[Source] struct ref Xmlglobalstate","title":"Xmlglobalstate"},{"location":"pony-libxml2-Xmlglobalstate/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlglobalstate/#create","text":"[Source] new iso create() : Xmlglobalstate iso^","title":"create"},{"location":"pony-libxml2-Xmlglobalstate/#returns","text":"Xmlglobalstate iso^","title":"Returns"},{"location":"pony-libxml2-Xmlglobalstate/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlparserversion-pointeru8-val-tag","text":"[Source]","title":"var pxmlParserVersion: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmldefaultsaxlocator-xmlsaxlocator-ref","text":"[Source]","title":"var pxmlDefaultSAXLocator: Xmlsaxlocator ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmldefaultsaxhandler-xmlsaxhandlerv1-ref","text":"[Source]","title":"var pxmlDefaultSAXHandler: Xmlsaxhandlerv1 ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pdocbdefaultsaxhandler-xmlsaxhandlerv1-ref","text":"[Source]","title":"var pdocbDefaultSAXHandler: Xmlsaxhandlerv1 ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-phtmldefaultsaxhandler-xmlsaxhandlerv1-ref","text":"[Source]","title":"var phtmlDefaultSAXHandler: Xmlsaxhandlerv1 ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlfree-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlFree: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlmalloc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlMalloc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlmemstrdup-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlMemStrdup: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlrealloc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlRealloc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlgenericerror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlGenericError: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlstructurederror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlStructuredError: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlgenericerrorcontext-pointeru8-val-ref","text":"[Source]","title":"var pxmlGenericErrorContext: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-poldxmlwdcompatibility-i32-val","text":"[Source]","title":"var poldXMLWDcompatibility: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlbufferallocscheme-i32-val","text":"[Source]","title":"var pxmlBufferAllocScheme: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmldefaultbuffersize-i32-val","text":"[Source]","title":"var pxmlDefaultBufferSize: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlsubstituteentitiesdefaultvalue-i32-val","text":"[Source]","title":"var pxmlSubstituteEntitiesDefaultValue: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmldovaliditycheckingdefaultvalue-i32-val","text":"[Source]","title":"var pxmlDoValidityCheckingDefaultValue: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlgetwarningsdefaultvalue-i32-val","text":"[Source]","title":"var pxmlGetWarningsDefaultValue: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlkeepblanksdefaultvalue-i32-val","text":"[Source]","title":"var pxmlKeepBlanksDefaultValue: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmllinenumbersdefaultvalue-i32-val","text":"[Source]","title":"var pxmlLineNumbersDefaultValue: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlloadextdtddefaultvalue-i32-val","text":"[Source]","title":"var pxmlLoadExtDtdDefaultValue: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlparserdebugentities-i32-val","text":"[Source]","title":"var pxmlParserDebugEntities: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlpedanticparserdefaultvalue-i32-val","text":"[Source]","title":"var pxmlPedanticParserDefaultValue: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlsavenoemptytags-i32-val","text":"[Source]","title":"var pxmlSaveNoEmptyTags: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlindenttreeoutput-i32-val","text":"[Source]","title":"var pxmlIndentTreeOutput: I32 val"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmltreeindentstring-pointeru8-val-tag","text":"[Source]","title":"var pxmlTreeIndentString: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlregisternodedefaultvalue-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlRegisterNodeDefaultValue: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlderegisternodedefaultvalue-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlDeregisterNodeDefaultValue: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlmallocatomic-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlMallocAtomic: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmllasterror-xmlerror-ref","text":"[Source]","title":"var pxmlLastError: Xmlerror ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlparserinputbuffercreatefilenamevalue-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlParserInputBufferCreateFilenameValue: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmloutputbuffercreatefilenamevalue-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pxmlOutputBufferCreateFilenameValue: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlglobalstate/#var-pxmlstructurederrorcontext-pointeru8-val-ref","text":"[Source]","title":"var pxmlStructuredErrorContext: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlhashtable/","text":"Xmlhashtable \u00b6 [Source] struct ref Xmlhashtable Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlhashtable iso^ Returns \u00b6 Xmlhashtable iso^","title":"struct Xmlhashtable"},{"location":"pony-libxml2-Xmlhashtable/#xmlhashtable","text":"[Source] struct ref Xmlhashtable","title":"Xmlhashtable"},{"location":"pony-libxml2-Xmlhashtable/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlhashtable/#create","text":"[Source] new iso create() : Xmlhashtable iso^","title":"create"},{"location":"pony-libxml2-Xmlhashtable/#returns","text":"Xmlhashtable iso^","title":"Returns"},{"location":"pony-libxml2-Xmlid/","text":"Xmlid \u00b6 [Source] struct ref Xmlid Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlid iso^ Returns \u00b6 Xmlid iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlid ref] ref \u00b6 [Source] var pvalue: Pointer [ U8 val] tag \u00b6 [Source] var pattr: NullablePointer [ Xmlattr ref] ref \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var plineno: I32 val \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source]","title":"struct Xmlid"},{"location":"pony-libxml2-Xmlid/#xmlid","text":"[Source] struct ref Xmlid","title":"Xmlid"},{"location":"pony-libxml2-Xmlid/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlid/#create","text":"[Source] new iso create() : Xmlid iso^","title":"create"},{"location":"pony-libxml2-Xmlid/#returns","text":"Xmlid iso^","title":"Returns"},{"location":"pony-libxml2-Xmlid/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlid/#var-pnext-nullablepointerxmlid-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlid ref] ref"},{"location":"pony-libxml2-Xmlid/#var-pvalue-pointeru8-val-tag","text":"[Source]","title":"var pvalue: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlid/#var-pattr-nullablepointerxmlattr-ref-ref","text":"[Source]","title":"var pattr: NullablePointer[Xmlattr ref] ref"},{"location":"pony-libxml2-Xmlid/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlid/#var-plineno-i32-val","text":"[Source]","title":"var plineno: I32 val"},{"location":"pony-libxml2-Xmlid/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmllink/","text":"Xmllink \u00b6 [Source] struct ref Xmllink Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmllink iso^ Returns \u00b6 Xmllink iso^","title":"struct Xmllink"},{"location":"pony-libxml2-Xmllink/#xmllink","text":"[Source] struct ref Xmllink","title":"Xmllink"},{"location":"pony-libxml2-Xmllink/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmllink/#create","text":"[Source] new iso create() : Xmllink iso^","title":"create"},{"location":"pony-libxml2-Xmllink/#returns","text":"Xmllink iso^","title":"Returns"},{"location":"pony-libxml2-Xmllist/","text":"Xmllist \u00b6 [Source] struct ref Xmllist Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmllist iso^ Returns \u00b6 Xmllist iso^","title":"struct Xmllist"},{"location":"pony-libxml2-Xmllist/#xmllist","text":"[Source] struct ref Xmllist","title":"Xmllist"},{"location":"pony-libxml2-Xmllist/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmllist/#create","text":"[Source] new iso create() : Xmllist iso^","title":"create"},{"location":"pony-libxml2-Xmllist/#returns","text":"Xmllist iso^","title":"Returns"},{"location":"pony-libxml2-Xmllocationset/","text":"Xmllocationset \u00b6 [Source] struct ref Xmllocationset Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmllocationset iso^ Returns \u00b6 Xmllocationset iso^ Public fields \u00b6 var plocNr: I32 val \u00b6 [Source] var plocMax: I32 val \u00b6 [Source] var plocTab: Pointer [ NullablePointer [ Xmlxpathobject ref] ref] ref \u00b6 [Source]","title":"struct Xmllocationset"},{"location":"pony-libxml2-Xmllocationset/#xmllocationset","text":"[Source] struct ref Xmllocationset","title":"Xmllocationset"},{"location":"pony-libxml2-Xmllocationset/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmllocationset/#create","text":"[Source] new iso create() : Xmllocationset iso^","title":"create"},{"location":"pony-libxml2-Xmllocationset/#returns","text":"Xmllocationset iso^","title":"Returns"},{"location":"pony-libxml2-Xmllocationset/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmllocationset/#var-plocnr-i32-val","text":"[Source]","title":"var plocNr: I32 val"},{"location":"pony-libxml2-Xmllocationset/#var-plocmax-i32-val","text":"[Source]","title":"var plocMax: I32 val"},{"location":"pony-libxml2-Xmllocationset/#var-ploctab-pointernullablepointerxmlxpathobject-ref-ref-ref","text":"[Source]","title":"var plocTab: Pointer[NullablePointer[Xmlxpathobject ref] ref] ref"},{"location":"pony-libxml2-Xmlmodule/","text":"Xmlmodule \u00b6 [Source] struct ref Xmlmodule Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlmodule iso^ Returns \u00b6 Xmlmodule iso^","title":"struct Xmlmodule"},{"location":"pony-libxml2-Xmlmodule/#xmlmodule","text":"[Source] struct ref Xmlmodule","title":"Xmlmodule"},{"location":"pony-libxml2-Xmlmodule/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlmodule/#create","text":"[Source] new iso create() : Xmlmodule iso^","title":"create"},{"location":"pony-libxml2-Xmlmodule/#returns","text":"Xmlmodule iso^","title":"Returns"},{"location":"pony-libxml2-Xmlmutex/","text":"Xmlmutex \u00b6 [Source] struct ref Xmlmutex Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlmutex iso^ Returns \u00b6 Xmlmutex iso^","title":"struct Xmlmutex"},{"location":"pony-libxml2-Xmlmutex/#xmlmutex","text":"[Source] struct ref Xmlmutex","title":"Xmlmutex"},{"location":"pony-libxml2-Xmlmutex/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlmutex/#create","text":"[Source] new iso create() : Xmlmutex iso^","title":"create"},{"location":"pony-libxml2-Xmlmutex/#returns","text":"Xmlmutex iso^","title":"Returns"},{"location":"pony-libxml2-Xmlnode/","text":"Xmlnode \u00b6 [Source] struct ref Xmlnode Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlnode iso^ Returns \u00b6 Xmlnode iso^ Public fields \u00b6 var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] ref \u00b6 [Source] var pchildren: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var plast: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pparent: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pnext: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pprev: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pns: NullablePointer [ Xmlns ref] ref \u00b6 [Source] var pcontent: Pointer [ U8 val] tag \u00b6 [Source] var pproperties: NullablePointer [ Xmlattr ref] ref \u00b6 [Source] var pnsDef: NullablePointer [ Xmlns ref] ref \u00b6 [Source] var ppsvi: Pointer [ U8 val] ref \u00b6 [Source] var pline: U16 val \u00b6 [Source] var pextra: U16 val \u00b6 [Source]","title":"struct Xmlnode"},{"location":"pony-libxml2-Xmlnode/#xmlnode","text":"[Source] struct ref Xmlnode","title":"Xmlnode"},{"location":"pony-libxml2-Xmlnode/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlnode/#create","text":"[Source] new iso create() : Xmlnode iso^","title":"create"},{"location":"pony-libxml2-Xmlnode/#returns","text":"Xmlnode iso^","title":"Returns"},{"location":"pony-libxml2-Xmlnode/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlnode/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlnode/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlnode/#var-pname-pointeru8-val-ref","text":"[Source]","title":"var pname: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlnode/#var-pchildren-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pchildren: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-plast-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var plast: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-pparent-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pparent: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-pnext-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-pprev-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pprev: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-pns-nullablepointerxmlns-ref-ref","text":"[Source]","title":"var pns: NullablePointer[Xmlns ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-pcontent-pointeru8-val-tag","text":"[Source]","title":"var pcontent: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlnode/#var-pproperties-nullablepointerxmlattr-ref-ref","text":"[Source]","title":"var pproperties: NullablePointer[Xmlattr ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-pnsdef-nullablepointerxmlns-ref-ref","text":"[Source]","title":"var pnsDef: NullablePointer[Xmlns ref] ref"},{"location":"pony-libxml2-Xmlnode/#var-ppsvi-pointeru8-val-ref","text":"[Source]","title":"var ppsvi: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlnode/#var-pline-u16-val","text":"[Source]","title":"var pline: U16 val"},{"location":"pony-libxml2-Xmlnode/#var-pextra-u16-val","text":"[Source]","title":"var pextra: U16 val"},{"location":"pony-libxml2-Xmlnodeset/","text":"Xmlnodeset \u00b6 [Source] struct ref Xmlnodeset Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlnodeset iso^ Returns \u00b6 Xmlnodeset iso^ Public fields \u00b6 var pnodeNr: I32 val \u00b6 [Source] var pnodeMax: I32 val \u00b6 [Source] var pnodeTab: Pointer [ NullablePointer [ Xmlnode ref] ref] ref \u00b6 [Source]","title":"struct Xmlnodeset"},{"location":"pony-libxml2-Xmlnodeset/#xmlnodeset","text":"[Source] struct ref Xmlnodeset","title":"Xmlnodeset"},{"location":"pony-libxml2-Xmlnodeset/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlnodeset/#create","text":"[Source] new iso create() : Xmlnodeset iso^","title":"create"},{"location":"pony-libxml2-Xmlnodeset/#returns","text":"Xmlnodeset iso^","title":"Returns"},{"location":"pony-libxml2-Xmlnodeset/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlnodeset/#var-pnodenr-i32-val","text":"[Source]","title":"var pnodeNr: I32 val"},{"location":"pony-libxml2-Xmlnodeset/#var-pnodemax-i32-val","text":"[Source]","title":"var pnodeMax: I32 val"},{"location":"pony-libxml2-Xmlnodeset/#var-pnodetab-pointernullablepointerxmlnode-ref-ref-ref","text":"[Source]","title":"var pnodeTab: Pointer[NullablePointer[Xmlnode ref] ref] ref"},{"location":"pony-libxml2-Xmlnotation/","text":"Xmlnotation \u00b6 [Source] struct ref Xmlnotation Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlnotation iso^ Returns \u00b6 Xmlnotation iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var pPublicID: Pointer [ U8 val] tag \u00b6 [Source] var pSystemID: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmlnotation"},{"location":"pony-libxml2-Xmlnotation/#xmlnotation","text":"[Source] struct ref Xmlnotation","title":"Xmlnotation"},{"location":"pony-libxml2-Xmlnotation/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlnotation/#create","text":"[Source] new iso create() : Xmlnotation iso^","title":"create"},{"location":"pony-libxml2-Xmlnotation/#returns","text":"Xmlnotation iso^","title":"Returns"},{"location":"pony-libxml2-Xmlnotation/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlnotation/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlnotation/#var-ppublicid-pointeru8-val-tag","text":"[Source]","title":"var pPublicID: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlnotation/#var-psystemid-pointeru8-val-tag","text":"[Source]","title":"var pSystemID: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlns/","text":"Xmlns \u00b6 [Source] struct ref Xmlns Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlns iso^ Returns \u00b6 Xmlns iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlns ref] ref \u00b6 [Source] var ptype: I32 val \u00b6 [Source] var phref: Pointer [ U8 val] tag \u00b6 [Source] var pprefix: Pointer [ U8 val] tag \u00b6 [Source] var p_private: Pointer [ U8 val] ref \u00b6 [Source] var pcontext: NullablePointer [ Xmldoc ref] ref \u00b6 [Source]","title":"struct Xmlns"},{"location":"pony-libxml2-Xmlns/#xmlns","text":"[Source] struct ref Xmlns","title":"Xmlns"},{"location":"pony-libxml2-Xmlns/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlns/#create","text":"[Source] new iso create() : Xmlns iso^","title":"create"},{"location":"pony-libxml2-Xmlns/#returns","text":"Xmlns iso^","title":"Returns"},{"location":"pony-libxml2-Xmlns/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlns/#var-pnext-nullablepointerxmlns-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlns ref] ref"},{"location":"pony-libxml2-Xmlns/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlns/#var-phref-pointeru8-val-tag","text":"[Source]","title":"var phref: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlns/#var-pprefix-pointeru8-val-tag","text":"[Source]","title":"var pprefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlns/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlns/#var-pcontext-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pcontext: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmloutputbuffer/","text":"Xmloutputbuffer \u00b6 [Source] struct ref Xmloutputbuffer Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmloutputbuffer iso^ Returns \u00b6 Xmloutputbuffer iso^ Public fields \u00b6 var pcontext: Pointer [ U8 val] ref \u00b6 [Source] var pwritecallback: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pclosecallback: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref \u00b6 [Source] var pbuffer: NullablePointer [ Xmlbuf ref] ref \u00b6 [Source] var pconv: NullablePointer [ Xmlbuf ref] ref \u00b6 [Source] var pwritten: I32 val \u00b6 [Source] var perror: I32 val \u00b6 [Source]","title":"struct Xmloutputbuffer"},{"location":"pony-libxml2-Xmloutputbuffer/#xmloutputbuffer","text":"[Source] struct ref Xmloutputbuffer","title":"Xmloutputbuffer"},{"location":"pony-libxml2-Xmloutputbuffer/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmloutputbuffer/#create","text":"[Source] new iso create() : Xmloutputbuffer iso^","title":"create"},{"location":"pony-libxml2-Xmloutputbuffer/#returns","text":"Xmloutputbuffer iso^","title":"Returns"},{"location":"pony-libxml2-Xmloutputbuffer/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmloutputbuffer/#var-pcontext-pointeru8-val-ref","text":"[Source]","title":"var pcontext: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmloutputbuffer/#var-pwritecallback-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pwritecallback: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmloutputbuffer/#var-pclosecallback-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pclosecallback: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmloutputbuffer/#var-pencoder-nullablepointerxmlcharencodinghandler-ref-ref","text":"[Source]","title":"var pencoder: NullablePointer[Xmlcharencodinghandler ref] ref"},{"location":"pony-libxml2-Xmloutputbuffer/#var-pbuffer-nullablepointerxmlbuf-ref-ref","text":"[Source]","title":"var pbuffer: NullablePointer[Xmlbuf ref] ref"},{"location":"pony-libxml2-Xmloutputbuffer/#var-pconv-nullablepointerxmlbuf-ref-ref","text":"[Source]","title":"var pconv: NullablePointer[Xmlbuf ref] ref"},{"location":"pony-libxml2-Xmloutputbuffer/#var-pwritten-i32-val","text":"[Source]","title":"var pwritten: I32 val"},{"location":"pony-libxml2-Xmloutputbuffer/#var-perror-i32-val","text":"[Source]","title":"var perror: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/","text":"Xmlparserctxt \u00b6 [Source] struct ref Xmlparserctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlparserctxt iso^ Returns \u00b6 Xmlparserctxt iso^ Public fields \u00b6 var psax: NullablePointer [ Xmlsaxhandler ref] ref \u00b6 [Source] var puserData: Pointer [ U8 val] ref \u00b6 [Source] var pmyDoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pwellFormed: I32 val \u00b6 [Source] var preplaceEntities: I32 val \u00b6 [Source] var pversion: Pointer [ U8 val] tag \u00b6 [Source] var pencoding: Pointer [ U8 val] tag \u00b6 [Source] var pstandalone: I32 val \u00b6 [Source] var phtml: I32 val \u00b6 [Source] var pinput: NullablePointer [ Xmlparserinput ref] ref \u00b6 [Source] var pinputNr: I32 val \u00b6 [Source] var pinputMax: I32 val \u00b6 [Source] var pinputTab: Pointer [ NullablePointer [ Xmlparserinput ref] ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pnodeNr: I32 val \u00b6 [Source] var pnodeMax: I32 val \u00b6 [Source] var pnodeTab: Pointer [ NullablePointer [ Xmlnode ref] ref] ref \u00b6 [Source] var precord_info: I32 val \u00b6 [Source] var pnode_seq: Xmlparsernodeinfoseq ref \u00b6 [Source] var perrNo: I32 val \u00b6 [Source] var phasExternalSubset: I32 val \u00b6 [Source] var phasPErefs: I32 val \u00b6 [Source] var pexternal: I32 val \u00b6 [Source] var pvalid: I32 val \u00b6 [Source] var pvalidate: I32 val \u00b6 [Source] var pvctxt: Xmlvalidctxt ref \u00b6 [Source] var pinstate: I32 val \u00b6 [Source] var ptoken: I32 val \u00b6 [Source] var pdirectory: Pointer [ U8 val] tag \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pnameNr: I32 val \u00b6 [Source] var pnameMax: I32 val \u00b6 [Source] var pnameTab: Pointer [ Pointer [ U8 val] tag] ref \u00b6 [Source] var pnbChars: I64 val \u00b6 [Source] var pcheckIndex: I64 val \u00b6 [Source] var pkeepBlanks: I32 val \u00b6 [Source] var pdisableSAX: I32 val \u00b6 [Source] var pinSubset: I32 val \u00b6 [Source] var pintSubName: Pointer [ U8 val] tag \u00b6 [Source] var pextSubURI: Pointer [ U8 val] tag \u00b6 [Source] var pextSubSystem: Pointer [ U8 val] tag \u00b6 [Source] var pspace: Pointer [ I32 val] ref \u00b6 [Source] var pspaceNr: I32 val \u00b6 [Source] var pspaceMax: I32 val \u00b6 [Source] var pspaceTab: Pointer [ I32 val] ref \u00b6 [Source] var pdepth: I32 val \u00b6 [Source] var pentity: NullablePointer [ Xmlparserinput ref] ref \u00b6 [Source] var pcharset: I32 val \u00b6 [Source] var pnodelen: I32 val \u00b6 [Source] var pnodemem: I32 val \u00b6 [Source] var ppedantic: I32 val \u00b6 [Source] var p_private: Pointer [ U8 val] ref \u00b6 [Source] var ploadsubset: I32 val \u00b6 [Source] var plinenumbers: I32 val \u00b6 [Source] var pcatalogs: Pointer [ U8 val] ref \u00b6 [Source] var precovery: I32 val \u00b6 [Source] var pprogressive: I32 val \u00b6 [Source] var pdict: NullablePointer [ Xmldict ref] ref \u00b6 [Source] var patts: Pointer [ Pointer [ U8 val] tag] ref \u00b6 [Source] var pmaxatts: I32 val \u00b6 [Source] var pdocdict: I32 val \u00b6 [Source] var pstr_xml: Pointer [ U8 val] tag \u00b6 [Source] var pstr_xmlns: Pointer [ U8 val] tag \u00b6 [Source] var pstr_xml_ns: Pointer [ U8 val] tag \u00b6 [Source] var psax2: I32 val \u00b6 [Source] var pnsNr: I32 val \u00b6 [Source] var pnsMax: I32 val \u00b6 [Source] var pnsTab: Pointer [ Pointer [ U8 val] tag] ref \u00b6 [Source] var pattallocs: Pointer [ I32 val] ref \u00b6 [Source] var ppushTab: Pointer [ Pointer [ U8 val] ref] ref \u00b6 [Source] var pattsDefault: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pattsSpecial: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pnsWellFormed: I32 val \u00b6 [Source] var poptions: I32 val \u00b6 [Source] var pdictNames: I32 val \u00b6 [Source] var pfreeElemsNr: I32 val \u00b6 [Source] var pfreeElems: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pfreeAttrsNr: I32 val \u00b6 [Source] var pfreeAttrs: NullablePointer [ Xmlattr ref] ref \u00b6 [Source] var plastError: Xmlerror ref \u00b6 [Source] var pparseMode: I32 val \u00b6 [Source] var pnbentities: U64 val \u00b6 [Source] var psizeentities: U64 val \u00b6 [Source] var pnodeInfo: NullablePointer [ Xmlparsernodeinfo ref] ref \u00b6 [Source] var pnodeInfoNr: I32 val \u00b6 [Source] var pnodeInfoMax: I32 val \u00b6 [Source] var pnodeInfoTab: NullablePointer [ Xmlparsernodeinfo ref] ref \u00b6 [Source] var pinput_id: I32 val \u00b6 [Source] var psizeentcopy: U64 val \u00b6 [Source]","title":"struct Xmlparserctxt"},{"location":"pony-libxml2-Xmlparserctxt/#xmlparserctxt","text":"[Source] struct ref Xmlparserctxt","title":"Xmlparserctxt"},{"location":"pony-libxml2-Xmlparserctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlparserctxt/#create","text":"[Source] new iso create() : Xmlparserctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlparserctxt/#returns","text":"Xmlparserctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlparserctxt/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlparserctxt/#var-psax-nullablepointerxmlsaxhandler-ref-ref","text":"[Source]","title":"var psax: NullablePointer[Xmlsaxhandler ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-puserdata-pointeru8-val-ref","text":"[Source]","title":"var puserData: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pmydoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pmyDoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pwellformed-i32-val","text":"[Source]","title":"var pwellFormed: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-preplaceentities-i32-val","text":"[Source]","title":"var preplaceEntities: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pversion-pointeru8-val-tag","text":"[Source]","title":"var pversion: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pencoding-pointeru8-val-tag","text":"[Source]","title":"var pencoding: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pstandalone-i32-val","text":"[Source]","title":"var pstandalone: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-phtml-i32-val","text":"[Source]","title":"var phtml: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pinput-nullablepointerxmlparserinput-ref-ref","text":"[Source]","title":"var pinput: NullablePointer[Xmlparserinput ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pinputnr-i32-val","text":"[Source]","title":"var pinputNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pinputmax-i32-val","text":"[Source]","title":"var pinputMax: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pinputtab-pointernullablepointerxmlparserinput-ref-ref-ref","text":"[Source]","title":"var pinputTab: Pointer[NullablePointer[Xmlparserinput ref] ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodenr-i32-val","text":"[Source]","title":"var pnodeNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodemax-i32-val","text":"[Source]","title":"var pnodeMax: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodetab-pointernullablepointerxmlnode-ref-ref-ref","text":"[Source]","title":"var pnodeTab: Pointer[NullablePointer[Xmlnode ref] ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-precord_info-i32-val","text":"[Source]","title":"var precord_info: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnode_seq-xmlparsernodeinfoseq-ref","text":"[Source]","title":"var pnode_seq: Xmlparsernodeinfoseq ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-perrno-i32-val","text":"[Source]","title":"var perrNo: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-phasexternalsubset-i32-val","text":"[Source]","title":"var phasExternalSubset: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-phasperefs-i32-val","text":"[Source]","title":"var phasPErefs: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pexternal-i32-val","text":"[Source]","title":"var pexternal: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pvalid-i32-val","text":"[Source]","title":"var pvalid: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pvalidate-i32-val","text":"[Source]","title":"var pvalidate: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pvctxt-xmlvalidctxt-ref","text":"[Source]","title":"var pvctxt: Xmlvalidctxt ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pinstate-i32-val","text":"[Source]","title":"var pinstate: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-ptoken-i32-val","text":"[Source]","title":"var ptoken: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pdirectory-pointeru8-val-tag","text":"[Source]","title":"var pdirectory: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnamenr-i32-val","text":"[Source]","title":"var pnameNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnamemax-i32-val","text":"[Source]","title":"var pnameMax: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnametab-pointerpointeru8-val-tag-ref","text":"[Source]","title":"var pnameTab: Pointer[Pointer[U8 val] tag] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnbchars-i64-val","text":"[Source]","title":"var pnbChars: I64 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pcheckindex-i64-val","text":"[Source]","title":"var pcheckIndex: I64 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pkeepblanks-i32-val","text":"[Source]","title":"var pkeepBlanks: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pdisablesax-i32-val","text":"[Source]","title":"var pdisableSAX: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pinsubset-i32-val","text":"[Source]","title":"var pinSubset: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pintsubname-pointeru8-val-tag","text":"[Source]","title":"var pintSubName: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pextsuburi-pointeru8-val-tag","text":"[Source]","title":"var pextSubURI: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pextsubsystem-pointeru8-val-tag","text":"[Source]","title":"var pextSubSystem: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pspace-pointeri32-val-ref","text":"[Source]","title":"var pspace: Pointer[I32 val] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pspacenr-i32-val","text":"[Source]","title":"var pspaceNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pspacemax-i32-val","text":"[Source]","title":"var pspaceMax: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pspacetab-pointeri32-val-ref","text":"[Source]","title":"var pspaceTab: Pointer[I32 val] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pdepth-i32-val","text":"[Source]","title":"var pdepth: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pentity-nullablepointerxmlparserinput-ref-ref","text":"[Source]","title":"var pentity: NullablePointer[Xmlparserinput ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pcharset-i32-val","text":"[Source]","title":"var pcharset: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodelen-i32-val","text":"[Source]","title":"var pnodelen: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodemem-i32-val","text":"[Source]","title":"var pnodemem: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-ppedantic-i32-val","text":"[Source]","title":"var ppedantic: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-ploadsubset-i32-val","text":"[Source]","title":"var ploadsubset: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-plinenumbers-i32-val","text":"[Source]","title":"var plinenumbers: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pcatalogs-pointeru8-val-ref","text":"[Source]","title":"var pcatalogs: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-precovery-i32-val","text":"[Source]","title":"var precovery: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pprogressive-i32-val","text":"[Source]","title":"var pprogressive: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pdict-nullablepointerxmldict-ref-ref","text":"[Source]","title":"var pdict: NullablePointer[Xmldict ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-patts-pointerpointeru8-val-tag-ref","text":"[Source]","title":"var patts: Pointer[Pointer[U8 val] tag] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pmaxatts-i32-val","text":"[Source]","title":"var pmaxatts: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pdocdict-i32-val","text":"[Source]","title":"var pdocdict: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pstr_xml-pointeru8-val-tag","text":"[Source]","title":"var pstr_xml: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pstr_xmlns-pointeru8-val-tag","text":"[Source]","title":"var pstr_xmlns: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-pstr_xml_ns-pointeru8-val-tag","text":"[Source]","title":"var pstr_xml_ns: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserctxt/#var-psax2-i32-val","text":"[Source]","title":"var psax2: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnsnr-i32-val","text":"[Source]","title":"var pnsNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnsmax-i32-val","text":"[Source]","title":"var pnsMax: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnstab-pointerpointeru8-val-tag-ref","text":"[Source]","title":"var pnsTab: Pointer[Pointer[U8 val] tag] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pattallocs-pointeri32-val-ref","text":"[Source]","title":"var pattallocs: Pointer[I32 val] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-ppushtab-pointerpointeru8-val-ref-ref","text":"[Source]","title":"var ppushTab: Pointer[Pointer[U8 val] ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pattsdefault-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pattsDefault: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pattsspecial-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pattsSpecial: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnswellformed-i32-val","text":"[Source]","title":"var pnsWellFormed: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-poptions-i32-val","text":"[Source]","title":"var poptions: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pdictnames-i32-val","text":"[Source]","title":"var pdictNames: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pfreeelemsnr-i32-val","text":"[Source]","title":"var pfreeElemsNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pfreeelems-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pfreeElems: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pfreeattrsnr-i32-val","text":"[Source]","title":"var pfreeAttrsNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pfreeattrs-nullablepointerxmlattr-ref-ref","text":"[Source]","title":"var pfreeAttrs: NullablePointer[Xmlattr ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-plasterror-xmlerror-ref","text":"[Source]","title":"var plastError: Xmlerror ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pparsemode-i32-val","text":"[Source]","title":"var pparseMode: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnbentities-u64-val","text":"[Source]","title":"var pnbentities: U64 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-psizeentities-u64-val","text":"[Source]","title":"var psizeentities: U64 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodeinfo-nullablepointerxmlparsernodeinfo-ref-ref","text":"[Source]","title":"var pnodeInfo: NullablePointer[Xmlparsernodeinfo ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodeinfonr-i32-val","text":"[Source]","title":"var pnodeInfoNr: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodeinfomax-i32-val","text":"[Source]","title":"var pnodeInfoMax: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-pnodeinfotab-nullablepointerxmlparsernodeinfo-ref-ref","text":"[Source]","title":"var pnodeInfoTab: NullablePointer[Xmlparsernodeinfo ref] ref"},{"location":"pony-libxml2-Xmlparserctxt/#var-pinput_id-i32-val","text":"[Source]","title":"var pinput_id: I32 val"},{"location":"pony-libxml2-Xmlparserctxt/#var-psizeentcopy-u64-val","text":"[Source]","title":"var psizeentcopy: U64 val"},{"location":"pony-libxml2-Xmlparserinput/","text":"Xmlparserinput \u00b6 [Source] struct ref Xmlparserinput Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlparserinput iso^ Returns \u00b6 Xmlparserinput iso^ Public fields \u00b6 var pbuf: NullablePointer [ Xmlparserinputbuffer ref] ref \u00b6 [Source] var pfilename: Pointer [ U8 val] tag \u00b6 [Source] var pdirectory: Pointer [ U8 val] tag \u00b6 [Source] var pbase: Pointer [ U8 val] tag \u00b6 [Source] var pcur: Pointer [ U8 val] tag \u00b6 [Source] var pend: Pointer [ U8 val] tag \u00b6 [Source] var plength: I32 val \u00b6 [Source] var pline: I32 val \u00b6 [Source] var pcol: I32 val \u00b6 [Source] var pconsumed: U64 val \u00b6 [Source] var pfree: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pencoding: Pointer [ U8 val] tag \u00b6 [Source] var pversion: Pointer [ U8 val] tag \u00b6 [Source] var pstandalone: I32 val \u00b6 [Source] var pid: I32 val \u00b6 [Source]","title":"struct Xmlparserinput"},{"location":"pony-libxml2-Xmlparserinput/#xmlparserinput","text":"[Source] struct ref Xmlparserinput","title":"Xmlparserinput"},{"location":"pony-libxml2-Xmlparserinput/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlparserinput/#create","text":"[Source] new iso create() : Xmlparserinput iso^","title":"create"},{"location":"pony-libxml2-Xmlparserinput/#returns","text":"Xmlparserinput iso^","title":"Returns"},{"location":"pony-libxml2-Xmlparserinput/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlparserinput/#var-pbuf-nullablepointerxmlparserinputbuffer-ref-ref","text":"[Source]","title":"var pbuf: NullablePointer[Xmlparserinputbuffer ref] ref"},{"location":"pony-libxml2-Xmlparserinput/#var-pfilename-pointeru8-val-tag","text":"[Source]","title":"var pfilename: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserinput/#var-pdirectory-pointeru8-val-tag","text":"[Source]","title":"var pdirectory: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserinput/#var-pbase-pointeru8-val-tag","text":"[Source]","title":"var pbase: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserinput/#var-pcur-pointeru8-val-tag","text":"[Source]","title":"var pcur: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserinput/#var-pend-pointeru8-val-tag","text":"[Source]","title":"var pend: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserinput/#var-plength-i32-val","text":"[Source]","title":"var plength: I32 val"},{"location":"pony-libxml2-Xmlparserinput/#var-pline-i32-val","text":"[Source]","title":"var pline: I32 val"},{"location":"pony-libxml2-Xmlparserinput/#var-pcol-i32-val","text":"[Source]","title":"var pcol: I32 val"},{"location":"pony-libxml2-Xmlparserinput/#var-pconsumed-u64-val","text":"[Source]","title":"var pconsumed: U64 val"},{"location":"pony-libxml2-Xmlparserinput/#var-pfree-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pfree: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlparserinput/#var-pencoding-pointeru8-val-tag","text":"[Source]","title":"var pencoding: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserinput/#var-pversion-pointeru8-val-tag","text":"[Source]","title":"var pversion: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlparserinput/#var-pstandalone-i32-val","text":"[Source]","title":"var pstandalone: I32 val"},{"location":"pony-libxml2-Xmlparserinput/#var-pid-i32-val","text":"[Source]","title":"var pid: I32 val"},{"location":"pony-libxml2-Xmlparserinputbuffer/","text":"Xmlparserinputbuffer \u00b6 [Source] struct ref Xmlparserinputbuffer Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlparserinputbuffer iso^ Returns \u00b6 Xmlparserinputbuffer iso^ Public fields \u00b6 var pcontext: Pointer [ U8 val] ref \u00b6 [Source] var preadcallback: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pclosecallback: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pencoder: NullablePointer [ Xmlcharencodinghandler ref] ref \u00b6 [Source] var pbuffer: NullablePointer [ Xmlbuf ref] ref \u00b6 [Source] var praw: NullablePointer [ Xmlbuf ref] ref \u00b6 [Source] var pcompressed: I32 val \u00b6 [Source] var perror: I32 val \u00b6 [Source] var prawconsumed: U64 val \u00b6 [Source]","title":"struct Xmlparserinputbuffer"},{"location":"pony-libxml2-Xmlparserinputbuffer/#xmlparserinputbuffer","text":"[Source] struct ref Xmlparserinputbuffer","title":"Xmlparserinputbuffer"},{"location":"pony-libxml2-Xmlparserinputbuffer/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlparserinputbuffer/#create","text":"[Source] new iso create() : Xmlparserinputbuffer iso^","title":"create"},{"location":"pony-libxml2-Xmlparserinputbuffer/#returns","text":"Xmlparserinputbuffer iso^","title":"Returns"},{"location":"pony-libxml2-Xmlparserinputbuffer/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-pcontext-pointeru8-val-ref","text":"[Source]","title":"var pcontext: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-preadcallback-pointerfunctionpointer-val-ref","text":"[Source]","title":"var preadcallback: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-pclosecallback-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pclosecallback: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-pencoder-nullablepointerxmlcharencodinghandler-ref-ref","text":"[Source]","title":"var pencoder: NullablePointer[Xmlcharencodinghandler ref] ref"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-pbuffer-nullablepointerxmlbuf-ref-ref","text":"[Source]","title":"var pbuffer: NullablePointer[Xmlbuf ref] ref"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-praw-nullablepointerxmlbuf-ref-ref","text":"[Source]","title":"var praw: NullablePointer[Xmlbuf ref] ref"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-pcompressed-i32-val","text":"[Source]","title":"var pcompressed: I32 val"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-perror-i32-val","text":"[Source]","title":"var perror: I32 val"},{"location":"pony-libxml2-Xmlparserinputbuffer/#var-prawconsumed-u64-val","text":"[Source]","title":"var prawconsumed: U64 val"},{"location":"pony-libxml2-Xmlparsernodeinfo/","text":"Xmlparsernodeinfo \u00b6 [Source] struct ref Xmlparsernodeinfo Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlparsernodeinfo iso^ Returns \u00b6 Xmlparsernodeinfo iso^ Public fields \u00b6 var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pbegin_pos: U64 val \u00b6 [Source] var pbegin_line: U64 val \u00b6 [Source] var pend_pos: U64 val \u00b6 [Source] var pend_line: U64 val \u00b6 [Source]","title":"struct Xmlparsernodeinfo"},{"location":"pony-libxml2-Xmlparsernodeinfo/#xmlparsernodeinfo","text":"[Source] struct ref Xmlparsernodeinfo","title":"Xmlparsernodeinfo"},{"location":"pony-libxml2-Xmlparsernodeinfo/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlparsernodeinfo/#create","text":"[Source] new iso create() : Xmlparsernodeinfo iso^","title":"create"},{"location":"pony-libxml2-Xmlparsernodeinfo/#returns","text":"Xmlparsernodeinfo iso^","title":"Returns"},{"location":"pony-libxml2-Xmlparsernodeinfo/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlparsernodeinfo/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlparsernodeinfo/#var-pbegin_pos-u64-val","text":"[Source]","title":"var pbegin_pos: U64 val"},{"location":"pony-libxml2-Xmlparsernodeinfo/#var-pbegin_line-u64-val","text":"[Source]","title":"var pbegin_line: U64 val"},{"location":"pony-libxml2-Xmlparsernodeinfo/#var-pend_pos-u64-val","text":"[Source]","title":"var pend_pos: U64 val"},{"location":"pony-libxml2-Xmlparsernodeinfo/#var-pend_line-u64-val","text":"[Source]","title":"var pend_line: U64 val"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/","text":"Xmlparsernodeinfoseq \u00b6 [Source] struct ref Xmlparsernodeinfoseq Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlparsernodeinfoseq iso^ Returns \u00b6 Xmlparsernodeinfoseq iso^ Public fields \u00b6 var pmaximum: U64 val \u00b6 [Source] var plength: U64 val \u00b6 [Source] var pbuffer: NullablePointer [ Xmlparsernodeinfo ref] ref \u00b6 [Source]","title":"struct Xmlparsernodeinfoseq"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#xmlparsernodeinfoseq","text":"[Source] struct ref Xmlparsernodeinfoseq","title":"Xmlparsernodeinfoseq"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#create","text":"[Source] new iso create() : Xmlparsernodeinfoseq iso^","title":"create"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#returns","text":"Xmlparsernodeinfoseq iso^","title":"Returns"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#var-pmaximum-u64-val","text":"[Source]","title":"var pmaximum: U64 val"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#var-plength-u64-val","text":"[Source]","title":"var plength: U64 val"},{"location":"pony-libxml2-Xmlparsernodeinfoseq/#var-pbuffer-nullablepointerxmlparsernodeinfo-ref-ref","text":"[Source]","title":"var pbuffer: NullablePointer[Xmlparsernodeinfo ref] ref"},{"location":"pony-libxml2-Xmlpattern/","text":"Xmlpattern \u00b6 [Source] struct ref Xmlpattern Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlpattern iso^ Returns \u00b6 Xmlpattern iso^","title":"struct Xmlpattern"},{"location":"pony-libxml2-Xmlpattern/#xmlpattern","text":"[Source] struct ref Xmlpattern","title":"Xmlpattern"},{"location":"pony-libxml2-Xmlpattern/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlpattern/#create","text":"[Source] new iso create() : Xmlpattern iso^","title":"create"},{"location":"pony-libxml2-Xmlpattern/#returns","text":"Xmlpattern iso^","title":"Returns"},{"location":"pony-libxml2-Xmlref/","text":"Xmlref \u00b6 [Source] struct ref Xmlref Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlref iso^ Returns \u00b6 Xmlref iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlref ref] ref \u00b6 [Source] var pvalue: Pointer [ U8 val] tag \u00b6 [Source] var pattr: NullablePointer [ Xmlattr ref] ref \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var plineno: I32 val \u00b6 [Source]","title":"struct Xmlref"},{"location":"pony-libxml2-Xmlref/#xmlref","text":"[Source] struct ref Xmlref","title":"Xmlref"},{"location":"pony-libxml2-Xmlref/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlref/#create","text":"[Source] new iso create() : Xmlref iso^","title":"create"},{"location":"pony-libxml2-Xmlref/#returns","text":"Xmlref iso^","title":"Returns"},{"location":"pony-libxml2-Xmlref/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlref/#var-pnext-nullablepointerxmlref-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlref ref] ref"},{"location":"pony-libxml2-Xmlref/#var-pvalue-pointeru8-val-tag","text":"[Source]","title":"var pvalue: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlref/#var-pattr-nullablepointerxmlattr-ref-ref","text":"[Source]","title":"var pattr: NullablePointer[Xmlattr ref] ref"},{"location":"pony-libxml2-Xmlref/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlref/#var-plineno-i32-val","text":"[Source]","title":"var plineno: I32 val"},{"location":"pony-libxml2-Xmlregexecctxt/","text":"Xmlregexecctxt \u00b6 [Source] struct ref Xmlregexecctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlregexecctxt iso^ Returns \u00b6 Xmlregexecctxt iso^","title":"struct Xmlregexecctxt"},{"location":"pony-libxml2-Xmlregexecctxt/#xmlregexecctxt","text":"[Source] struct ref Xmlregexecctxt","title":"Xmlregexecctxt"},{"location":"pony-libxml2-Xmlregexecctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlregexecctxt/#create","text":"[Source] new iso create() : Xmlregexecctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlregexecctxt/#returns","text":"Xmlregexecctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlregexp/","text":"Xmlregexp \u00b6 [Source] struct ref Xmlregexp Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlregexp iso^ Returns \u00b6 Xmlregexp iso^","title":"struct Xmlregexp"},{"location":"pony-libxml2-Xmlregexp/#xmlregexp","text":"[Source] struct ref Xmlregexp","title":"Xmlregexp"},{"location":"pony-libxml2-Xmlregexp/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlregexp/#create","text":"[Source] new iso create() : Xmlregexp iso^","title":"create"},{"location":"pony-libxml2-Xmlregexp/#returns","text":"Xmlregexp iso^","title":"Returns"},{"location":"pony-libxml2-Xmlrelaxng/","text":"Xmlrelaxng \u00b6 [Source] struct ref Xmlrelaxng Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlrelaxng iso^ Returns \u00b6 Xmlrelaxng iso^","title":"struct Xmlrelaxng"},{"location":"pony-libxml2-Xmlrelaxng/#xmlrelaxng","text":"[Source] struct ref Xmlrelaxng","title":"Xmlrelaxng"},{"location":"pony-libxml2-Xmlrelaxng/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlrelaxng/#create","text":"[Source] new iso create() : Xmlrelaxng iso^","title":"create"},{"location":"pony-libxml2-Xmlrelaxng/#returns","text":"Xmlrelaxng iso^","title":"Returns"},{"location":"pony-libxml2-Xmlrelaxngparserctxt/","text":"Xmlrelaxngparserctxt \u00b6 [Source] struct ref Xmlrelaxngparserctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlrelaxngparserctxt iso^ Returns \u00b6 Xmlrelaxngparserctxt iso^","title":"struct Xmlrelaxngparserctxt"},{"location":"pony-libxml2-Xmlrelaxngparserctxt/#xmlrelaxngparserctxt","text":"[Source] struct ref Xmlrelaxngparserctxt","title":"Xmlrelaxngparserctxt"},{"location":"pony-libxml2-Xmlrelaxngparserctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlrelaxngparserctxt/#create","text":"[Source] new iso create() : Xmlrelaxngparserctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlrelaxngparserctxt/#returns","text":"Xmlrelaxngparserctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlrelaxngvalidctxt/","text":"Xmlrelaxngvalidctxt \u00b6 [Source] struct ref Xmlrelaxngvalidctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlrelaxngvalidctxt iso^ Returns \u00b6 Xmlrelaxngvalidctxt iso^","title":"struct Xmlrelaxngvalidctxt"},{"location":"pony-libxml2-Xmlrelaxngvalidctxt/#xmlrelaxngvalidctxt","text":"[Source] struct ref Xmlrelaxngvalidctxt","title":"Xmlrelaxngvalidctxt"},{"location":"pony-libxml2-Xmlrelaxngvalidctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlrelaxngvalidctxt/#create","text":"[Source] new iso create() : Xmlrelaxngvalidctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlrelaxngvalidctxt/#returns","text":"Xmlrelaxngvalidctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlrmutex/","text":"Xmlrmutex \u00b6 [Source] struct ref Xmlrmutex Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlrmutex iso^ Returns \u00b6 Xmlrmutex iso^","title":"struct Xmlrmutex"},{"location":"pony-libxml2-Xmlrmutex/#xmlrmutex","text":"[Source] struct ref Xmlrmutex","title":"Xmlrmutex"},{"location":"pony-libxml2-Xmlrmutex/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlrmutex/#create","text":"[Source] new iso create() : Xmlrmutex iso^","title":"create"},{"location":"pony-libxml2-Xmlrmutex/#returns","text":"Xmlrmutex iso^","title":"Returns"},{"location":"pony-libxml2-Xmlsavectxt/","text":"Xmlsavectxt \u00b6 [Source] struct ref Xmlsavectxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlsavectxt iso^ Returns \u00b6 Xmlsavectxt iso^","title":"struct Xmlsavectxt"},{"location":"pony-libxml2-Xmlsavectxt/#xmlsavectxt","text":"[Source] struct ref Xmlsavectxt","title":"Xmlsavectxt"},{"location":"pony-libxml2-Xmlsavectxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlsavectxt/#create","text":"[Source] new iso create() : Xmlsavectxt iso^","title":"create"},{"location":"pony-libxml2-Xmlsavectxt/#returns","text":"Xmlsavectxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlsaxhandler/","text":"Xmlsaxhandler \u00b6 [Source] struct ref Xmlsaxhandler Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlsaxhandler iso^ Returns \u00b6 Xmlsaxhandler iso^ Public fields \u00b6 var pinternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pisStandalone: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var phasInternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var phasExternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var presolveEntity: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pgetEntity: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pentityDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pnotationDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pattributeDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pelementDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var punparsedEntityDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var psetDocumentLocator: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pstartDocument: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pendDocument: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pstartElement: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pendElement: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var preference: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pcharacters: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pignorableWhitespace: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pprocessingInstruction: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pcomment: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pwarning: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var perror: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pfatalError: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pgetParameterEntity: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pcdataBlock: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pexternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pinitialized: U32 val \u00b6 [Source] var p_private: Pointer [ U8 val] ref \u00b6 [Source] var pstartElementNs: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pendElementNs: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pserror: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xmlsaxhandler"},{"location":"pony-libxml2-Xmlsaxhandler/#xmlsaxhandler","text":"[Source] struct ref Xmlsaxhandler","title":"Xmlsaxhandler"},{"location":"pony-libxml2-Xmlsaxhandler/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlsaxhandler/#create","text":"[Source] new iso create() : Xmlsaxhandler iso^","title":"create"},{"location":"pony-libxml2-Xmlsaxhandler/#returns","text":"Xmlsaxhandler iso^","title":"Returns"},{"location":"pony-libxml2-Xmlsaxhandler/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pinternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pinternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pisstandalone-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pisStandalone: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-phasinternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var phasInternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-phasexternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var phasExternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-presolveentity-pointerfunctionpointer-val-ref","text":"[Source]","title":"var presolveEntity: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pgetentity-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetEntity: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pentitydecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pentityDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pnotationdecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pnotationDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pattributedecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pattributeDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pelementdecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pelementDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-punparsedentitydecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var punparsedEntityDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-psetdocumentlocator-pointerfunctionpointer-val-ref","text":"[Source]","title":"var psetDocumentLocator: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pstartdocument-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pstartDocument: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-penddocument-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pendDocument: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pstartelement-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pstartElement: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pendelement-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pendElement: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-preference-pointerfunctionpointer-val-ref","text":"[Source]","title":"var preference: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pcharacters-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pcharacters: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pignorablewhitespace-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pignorableWhitespace: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pprocessinginstruction-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pprocessingInstruction: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pcomment-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pcomment: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pwarning-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pwarning: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-perror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var perror: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pfatalerror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pfatalError: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pgetparameterentity-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetParameterEntity: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pcdatablock-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pcdataBlock: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pexternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pexternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pinitialized-u32-val","text":"[Source]","title":"var pinitialized: U32 val"},{"location":"pony-libxml2-Xmlsaxhandler/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pstartelementns-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pstartElementNs: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pendelementns-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pendElementNs: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandler/#var-pserror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pserror: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/","text":"Xmlsaxhandlerv1 \u00b6 [Source] struct ref Xmlsaxhandlerv1 Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlsaxhandlerv1 iso^ Returns \u00b6 Xmlsaxhandlerv1 iso^ Public fields \u00b6 var pinternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pisStandalone: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var phasInternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var phasExternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var presolveEntity: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pgetEntity: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pentityDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pnotationDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pattributeDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pelementDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var punparsedEntityDecl: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var psetDocumentLocator: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pstartDocument: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pendDocument: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pstartElement: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pendElement: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var preference: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pcharacters: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pignorableWhitespace: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pprocessingInstruction: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pcomment: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pwarning: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var perror: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pfatalError: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pgetParameterEntity: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pcdataBlock: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pexternalSubset: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pinitialized: U32 val \u00b6 [Source]","title":"struct Xmlsaxhandlerv1"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#xmlsaxhandlerv1","text":"[Source] struct ref Xmlsaxhandlerv1","title":"Xmlsaxhandlerv1"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#create","text":"[Source] new iso create() : Xmlsaxhandlerv1 iso^","title":"create"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#returns","text":"Xmlsaxhandlerv1 iso^","title":"Returns"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pinternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pinternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pisstandalone-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pisStandalone: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-phasinternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var phasInternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-phasexternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var phasExternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-presolveentity-pointerfunctionpointer-val-ref","text":"[Source]","title":"var presolveEntity: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pgetentity-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetEntity: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pentitydecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pentityDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pnotationdecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pnotationDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pattributedecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pattributeDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pelementdecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pelementDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-punparsedentitydecl-pointerfunctionpointer-val-ref","text":"[Source]","title":"var punparsedEntityDecl: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-psetdocumentlocator-pointerfunctionpointer-val-ref","text":"[Source]","title":"var psetDocumentLocator: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pstartdocument-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pstartDocument: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-penddocument-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pendDocument: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pstartelement-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pstartElement: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pendelement-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pendElement: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-preference-pointerfunctionpointer-val-ref","text":"[Source]","title":"var preference: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pcharacters-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pcharacters: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pignorablewhitespace-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pignorableWhitespace: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pprocessinginstruction-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pprocessingInstruction: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pcomment-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pcomment: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pwarning-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pwarning: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-perror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var perror: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pfatalerror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pfatalError: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pgetparameterentity-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetParameterEntity: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pcdatablock-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pcdataBlock: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pexternalsubset-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pexternalSubset: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxhandlerv1/#var-pinitialized-u32-val","text":"[Source]","title":"var pinitialized: U32 val"},{"location":"pony-libxml2-Xmlsaxlocator/","text":"Xmlsaxlocator \u00b6 [Source] struct ref Xmlsaxlocator Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlsaxlocator iso^ Returns \u00b6 Xmlsaxlocator iso^ Public fields \u00b6 var pgetPublicId: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pgetSystemId: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pgetLineNumber: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pgetColumnNumber: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xmlsaxlocator"},{"location":"pony-libxml2-Xmlsaxlocator/#xmlsaxlocator","text":"[Source] struct ref Xmlsaxlocator","title":"Xmlsaxlocator"},{"location":"pony-libxml2-Xmlsaxlocator/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlsaxlocator/#create","text":"[Source] new iso create() : Xmlsaxlocator iso^","title":"create"},{"location":"pony-libxml2-Xmlsaxlocator/#returns","text":"Xmlsaxlocator iso^","title":"Returns"},{"location":"pony-libxml2-Xmlsaxlocator/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlsaxlocator/#var-pgetpublicid-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetPublicId: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxlocator/#var-pgetsystemid-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetSystemId: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxlocator/#var-pgetlinenumber-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetLineNumber: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlsaxlocator/#var-pgetcolumnnumber-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pgetColumnNumber: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlschema/","text":"Xmlschema \u00b6 [Source] struct ref Xmlschema Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschema iso^ Returns \u00b6 Xmlschema iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var ptargetNamespace: Pointer [ U8 val] tag \u00b6 [Source] var pversion: Pointer [ U8 val] tag \u00b6 [Source] var pid: Pointer [ U8 val] tag \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var pflags: I32 val \u00b6 [Source] var ptypeDecl: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pattrDecl: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pattrgrpDecl: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pelemDecl: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pnotaDecl: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pschemasImports: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var p_private: Pointer [ U8 val] ref \u00b6 [Source] var pgroupDecl: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pdict: NullablePointer [ Xmldict ref] ref \u00b6 [Source] var pincludes: Pointer [ U8 val] ref \u00b6 [Source] var ppreserve: I32 val \u00b6 [Source] var pcounter: I32 val \u00b6 [Source] var pidcDef: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pvolatiles: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlschema"},{"location":"pony-libxml2-Xmlschema/#xmlschema","text":"[Source] struct ref Xmlschema","title":"Xmlschema"},{"location":"pony-libxml2-Xmlschema/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschema/#create","text":"[Source] new iso create() : Xmlschema iso^","title":"create"},{"location":"pony-libxml2-Xmlschema/#returns","text":"Xmlschema iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschema/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschema/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschema/#var-ptargetnamespace-pointeru8-val-tag","text":"[Source]","title":"var ptargetNamespace: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschema/#var-pversion-pointeru8-val-tag","text":"[Source]","title":"var pversion: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschema/#var-pid-pointeru8-val-tag","text":"[Source]","title":"var pid: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschema/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pflags-i32-val","text":"[Source]","title":"var pflags: I32 val"},{"location":"pony-libxml2-Xmlschema/#var-ptypedecl-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var ptypeDecl: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pattrdecl-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pattrDecl: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pattrgrpdecl-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pattrgrpDecl: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pelemdecl-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pelemDecl: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pnotadecl-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pnotaDecl: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pschemasimports-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pschemasImports: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-p_private-pointeru8-val-ref","text":"[Source]","title":"var p_private: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlschema/#var-pgroupdecl-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pgroupDecl: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pdict-nullablepointerxmldict-ref-ref","text":"[Source]","title":"var pdict: NullablePointer[Xmldict ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pincludes-pointeru8-val-ref","text":"[Source]","title":"var pincludes: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlschema/#var-ppreserve-i32-val","text":"[Source]","title":"var ppreserve: I32 val"},{"location":"pony-libxml2-Xmlschema/#var-pcounter-i32-val","text":"[Source]","title":"var pcounter: I32 val"},{"location":"pony-libxml2-Xmlschema/#var-pidcdef-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pidcDef: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlschema/#var-pvolatiles-pointeru8-val-ref","text":"[Source]","title":"var pvolatiles: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlschemaannot/","text":"Xmlschemaannot \u00b6 [Source] struct ref Xmlschemaannot Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemaannot iso^ Returns \u00b6 Xmlschemaannot iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var pcontent: NullablePointer [ Xmlnode ref] ref \u00b6 [Source]","title":"struct Xmlschemaannot"},{"location":"pony-libxml2-Xmlschemaannot/#xmlschemaannot","text":"[Source] struct ref Xmlschemaannot","title":"Xmlschemaannot"},{"location":"pony-libxml2-Xmlschemaannot/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemaannot/#create","text":"[Source] new iso create() : Xmlschemaannot iso^","title":"create"},{"location":"pony-libxml2-Xmlschemaannot/#returns","text":"Xmlschemaannot iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemaannot/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemaannot/#var-pnext-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschemaannot/#var-pcontent-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pcontent: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlschemaattribute/","text":"Xmlschemaattribute \u00b6 [Source] struct ref Xmlschemaattribute Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemaattribute iso^ Returns \u00b6 Xmlschemaattribute iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pnext: NullablePointer [ Xmlschemaattribute ref] ref \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pid: Pointer [ U8 val] tag \u00b6 [Source] var pref: Pointer [ U8 val] tag \u00b6 [Source] var prefNs: Pointer [ U8 val] tag \u00b6 [Source] var ptypeName: Pointer [ U8 val] tag \u00b6 [Source] var ptypeNs: Pointer [ U8 val] tag \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var pbase: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var poccurs: I32 val \u00b6 [Source] var pdefValue: Pointer [ U8 val] tag \u00b6 [Source] var psubtypes: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var ptargetNamespace: Pointer [ U8 val] tag \u00b6 [Source] var pflags: I32 val \u00b6 [Source] var prefPrefix: Pointer [ U8 val] tag \u00b6 [Source] var pdefVal: NullablePointer [ Xmlschemaval ref] ref \u00b6 [Source] var prefDecl: NullablePointer [ Xmlschemaattribute ref] ref \u00b6 [Source]","title":"struct Xmlschemaattribute"},{"location":"pony-libxml2-Xmlschemaattribute/#xmlschemaattribute","text":"[Source] struct ref Xmlschemaattribute","title":"Xmlschemaattribute"},{"location":"pony-libxml2-Xmlschemaattribute/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemaattribute/#create","text":"[Source] new iso create() : Xmlschemaattribute iso^","title":"create"},{"location":"pony-libxml2-Xmlschemaattribute/#returns","text":"Xmlschemaattribute iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemaattribute/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemaattribute/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pnext-nullablepointerxmlschemaattribute-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschemaattribute ref] ref"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pid-pointeru8-val-tag","text":"[Source]","title":"var pid: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pref-pointeru8-val-tag","text":"[Source]","title":"var pref: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-prefns-pointeru8-val-tag","text":"[Source]","title":"var prefNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-ptypename-pointeru8-val-tag","text":"[Source]","title":"var ptypeName: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-ptypens-pointeru8-val-tag","text":"[Source]","title":"var ptypeNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pbase-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var pbase: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschemaattribute/#var-poccurs-i32-val","text":"[Source]","title":"var poccurs: I32 val"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pdefvalue-pointeru8-val-tag","text":"[Source]","title":"var pdefValue: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-psubtypes-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var psubtypes: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlschemaattribute/#var-ptargetnamespace-pointeru8-val-tag","text":"[Source]","title":"var ptargetNamespace: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pflags-i32-val","text":"[Source]","title":"var pflags: I32 val"},{"location":"pony-libxml2-Xmlschemaattribute/#var-prefprefix-pointeru8-val-tag","text":"[Source]","title":"var prefPrefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattribute/#var-pdefval-nullablepointerxmlschemaval-ref-ref","text":"[Source]","title":"var pdefVal: NullablePointer[Xmlschemaval ref] ref"},{"location":"pony-libxml2-Xmlschemaattribute/#var-prefdecl-nullablepointerxmlschemaattribute-ref-ref","text":"[Source]","title":"var prefDecl: NullablePointer[Xmlschemaattribute ref] ref"},{"location":"pony-libxml2-Xmlschemaattributegroup/","text":"Xmlschemaattributegroup \u00b6 [Source] struct ref Xmlschemaattributegroup Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemaattributegroup iso^ Returns \u00b6 Xmlschemaattributegroup iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pnext: NullablePointer [ Xmlschemaattribute ref] ref \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pid: Pointer [ U8 val] tag \u00b6 [Source] var pref: Pointer [ U8 val] tag \u00b6 [Source] var prefNs: Pointer [ U8 val] tag \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var pattributes: NullablePointer [ Xmlschemaattribute ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pflags: I32 val \u00b6 [Source] var pattributeWildcard: NullablePointer [ Xmlschemawildcard ref] ref \u00b6 [Source] var prefPrefix: Pointer [ U8 val] tag \u00b6 [Source] var prefItem: NullablePointer [ Xmlschemaattributegroup ref] ref \u00b6 [Source] var ptargetNamespace: Pointer [ U8 val] tag \u00b6 [Source] var pattrUses: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlschemaattributegroup"},{"location":"pony-libxml2-Xmlschemaattributegroup/#xmlschemaattributegroup","text":"[Source] struct ref Xmlschemaattributegroup","title":"Xmlschemaattributegroup"},{"location":"pony-libxml2-Xmlschemaattributegroup/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemaattributegroup/#create","text":"[Source] new iso create() : Xmlschemaattributegroup iso^","title":"create"},{"location":"pony-libxml2-Xmlschemaattributegroup/#returns","text":"Xmlschemaattributegroup iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemaattributegroup/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pnext-nullablepointerxmlschemaattribute-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschemaattribute ref] ref"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pid-pointeru8-val-tag","text":"[Source]","title":"var pid: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pref-pointeru8-val-tag","text":"[Source]","title":"var pref: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-prefns-pointeru8-val-tag","text":"[Source]","title":"var prefNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pattributes-nullablepointerxmlschemaattribute-ref-ref","text":"[Source]","title":"var pattributes: NullablePointer[Xmlschemaattribute ref] ref"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pflags-i32-val","text":"[Source]","title":"var pflags: I32 val"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pattributewildcard-nullablepointerxmlschemawildcard-ref-ref","text":"[Source]","title":"var pattributeWildcard: NullablePointer[Xmlschemawildcard ref] ref"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-prefprefix-pointeru8-val-tag","text":"[Source]","title":"var prefPrefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-prefitem-nullablepointerxmlschemaattributegroup-ref-ref","text":"[Source]","title":"var prefItem: NullablePointer[Xmlschemaattributegroup ref] ref"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-ptargetnamespace-pointeru8-val-tag","text":"[Source]","title":"var ptargetNamespace: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaattributegroup/#var-pattruses-pointeru8-val-ref","text":"[Source]","title":"var pattrUses: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlschemaattributelink/","text":"Xmlschemaattributelink \u00b6 [Source] struct ref Xmlschemaattributelink Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemaattributelink iso^ Returns \u00b6 Xmlschemaattributelink iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlschemaattributelink ref] ref \u00b6 [Source] var pattr: NullablePointer [ Xmlschemaattribute ref] ref \u00b6 [Source]","title":"struct Xmlschemaattributelink"},{"location":"pony-libxml2-Xmlschemaattributelink/#xmlschemaattributelink","text":"[Source] struct ref Xmlschemaattributelink","title":"Xmlschemaattributelink"},{"location":"pony-libxml2-Xmlschemaattributelink/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemaattributelink/#create","text":"[Source] new iso create() : Xmlschemaattributelink iso^","title":"create"},{"location":"pony-libxml2-Xmlschemaattributelink/#returns","text":"Xmlschemaattributelink iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemaattributelink/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemaattributelink/#var-pnext-nullablepointerxmlschemaattributelink-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschemaattributelink ref] ref"},{"location":"pony-libxml2-Xmlschemaattributelink/#var-pattr-nullablepointerxmlschemaattribute-ref-ref","text":"[Source]","title":"var pattr: NullablePointer[Xmlschemaattribute ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/","text":"Xmlschemaelement \u00b6 [Source] struct ref Xmlschemaelement Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemaelement iso^ Returns \u00b6 Xmlschemaelement iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pnext: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pid: Pointer [ U8 val] tag \u00b6 [Source] var pref: Pointer [ U8 val] tag \u00b6 [Source] var prefNs: Pointer [ U8 val] tag \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var psubtypes: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var pattributes: NullablePointer [ Xmlschemaattribute ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pminOccurs: I32 val \u00b6 [Source] var pmaxOccurs: I32 val \u00b6 [Source] var pflags: I32 val \u00b6 [Source] var ptargetNamespace: Pointer [ U8 val] tag \u00b6 [Source] var pnamedType: Pointer [ U8 val] tag \u00b6 [Source] var pnamedTypeNs: Pointer [ U8 val] tag \u00b6 [Source] var psubstGroup: Pointer [ U8 val] tag \u00b6 [Source] var psubstGroupNs: Pointer [ U8 val] tag \u00b6 [Source] var pscope: Pointer [ U8 val] tag \u00b6 [Source] var pvalue: Pointer [ U8 val] tag \u00b6 [Source] var prefDecl: NullablePointer [ Xmlschemaelement ref] ref \u00b6 [Source] var pcontModel: NullablePointer [ Xmlregexp ref] ref \u00b6 [Source] var pcontentType: I32 val \u00b6 [Source] var prefPrefix: Pointer [ U8 val] tag \u00b6 [Source] var pdefVal: NullablePointer [ Xmlschemaval ref] ref \u00b6 [Source] var pidcs: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlschemaelement"},{"location":"pony-libxml2-Xmlschemaelement/#xmlschemaelement","text":"[Source] struct ref Xmlschemaelement","title":"Xmlschemaelement"},{"location":"pony-libxml2-Xmlschemaelement/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemaelement/#create","text":"[Source] new iso create() : Xmlschemaelement iso^","title":"create"},{"location":"pony-libxml2-Xmlschemaelement/#returns","text":"Xmlschemaelement iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemaelement/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemaelement/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlschemaelement/#var-pnext-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pid-pointeru8-val-tag","text":"[Source]","title":"var pid: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pref-pointeru8-val-tag","text":"[Source]","title":"var pref: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-prefns-pointeru8-val-tag","text":"[Source]","title":"var prefNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-psubtypes-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var psubtypes: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-pattributes-nullablepointerxmlschemaattribute-ref-ref","text":"[Source]","title":"var pattributes: NullablePointer[Xmlschemaattribute ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-pminoccurs-i32-val","text":"[Source]","title":"var pminOccurs: I32 val"},{"location":"pony-libxml2-Xmlschemaelement/#var-pmaxoccurs-i32-val","text":"[Source]","title":"var pmaxOccurs: I32 val"},{"location":"pony-libxml2-Xmlschemaelement/#var-pflags-i32-val","text":"[Source]","title":"var pflags: I32 val"},{"location":"pony-libxml2-Xmlschemaelement/#var-ptargetnamespace-pointeru8-val-tag","text":"[Source]","title":"var ptargetNamespace: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pnamedtype-pointeru8-val-tag","text":"[Source]","title":"var pnamedType: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pnamedtypens-pointeru8-val-tag","text":"[Source]","title":"var pnamedTypeNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-psubstgroup-pointeru8-val-tag","text":"[Source]","title":"var psubstGroup: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-psubstgroupns-pointeru8-val-tag","text":"[Source]","title":"var psubstGroupNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pscope-pointeru8-val-tag","text":"[Source]","title":"var pscope: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pvalue-pointeru8-val-tag","text":"[Source]","title":"var pvalue: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-prefdecl-nullablepointerxmlschemaelement-ref-ref","text":"[Source]","title":"var prefDecl: NullablePointer[Xmlschemaelement ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-pcontmodel-nullablepointerxmlregexp-ref-ref","text":"[Source]","title":"var pcontModel: NullablePointer[Xmlregexp ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-pcontenttype-i32-val","text":"[Source]","title":"var pcontentType: I32 val"},{"location":"pony-libxml2-Xmlschemaelement/#var-prefprefix-pointeru8-val-tag","text":"[Source]","title":"var prefPrefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaelement/#var-pdefval-nullablepointerxmlschemaval-ref-ref","text":"[Source]","title":"var pdefVal: NullablePointer[Xmlschemaval ref] ref"},{"location":"pony-libxml2-Xmlschemaelement/#var-pidcs-pointeru8-val-ref","text":"[Source]","title":"var pidcs: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlschemafacet/","text":"Xmlschemafacet \u00b6 [Source] struct ref Xmlschemafacet Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemafacet iso^ Returns \u00b6 Xmlschemafacet iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pnext: NullablePointer [ Xmlschemafacet ref] ref \u00b6 [Source] var pvalue: Pointer [ U8 val] tag \u00b6 [Source] var pid: Pointer [ U8 val] tag \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pfixed: I32 val \u00b6 [Source] var pwhitespace: I32 val \u00b6 [Source] var pval: NullablePointer [ Xmlschemaval ref] ref \u00b6 [Source] var pregexp: NullablePointer [ Xmlregexp ref] ref \u00b6 [Source]","title":"struct Xmlschemafacet"},{"location":"pony-libxml2-Xmlschemafacet/#xmlschemafacet","text":"[Source] struct ref Xmlschemafacet","title":"Xmlschemafacet"},{"location":"pony-libxml2-Xmlschemafacet/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemafacet/#create","text":"[Source] new iso create() : Xmlschemafacet iso^","title":"create"},{"location":"pony-libxml2-Xmlschemafacet/#returns","text":"Xmlschemafacet iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemafacet/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemafacet/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlschemafacet/#var-pnext-nullablepointerxmlschemafacet-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschemafacet ref] ref"},{"location":"pony-libxml2-Xmlschemafacet/#var-pvalue-pointeru8-val-tag","text":"[Source]","title":"var pvalue: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemafacet/#var-pid-pointeru8-val-tag","text":"[Source]","title":"var pid: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemafacet/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschemafacet/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlschemafacet/#var-pfixed-i32-val","text":"[Source]","title":"var pfixed: I32 val"},{"location":"pony-libxml2-Xmlschemafacet/#var-pwhitespace-i32-val","text":"[Source]","title":"var pwhitespace: I32 val"},{"location":"pony-libxml2-Xmlschemafacet/#var-pval-nullablepointerxmlschemaval-ref-ref","text":"[Source]","title":"var pval: NullablePointer[Xmlschemaval ref] ref"},{"location":"pony-libxml2-Xmlschemafacet/#var-pregexp-nullablepointerxmlregexp-ref-ref","text":"[Source]","title":"var pregexp: NullablePointer[Xmlregexp ref] ref"},{"location":"pony-libxml2-Xmlschemafacetlink/","text":"Xmlschemafacetlink \u00b6 [Source] struct ref Xmlschemafacetlink Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemafacetlink iso^ Returns \u00b6 Xmlschemafacetlink iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlschemafacetlink ref] ref \u00b6 [Source] var pfacet: NullablePointer [ Xmlschemafacet ref] ref \u00b6 [Source]","title":"struct Xmlschemafacetlink"},{"location":"pony-libxml2-Xmlschemafacetlink/#xmlschemafacetlink","text":"[Source] struct ref Xmlschemafacetlink","title":"Xmlschemafacetlink"},{"location":"pony-libxml2-Xmlschemafacetlink/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemafacetlink/#create","text":"[Source] new iso create() : Xmlschemafacetlink iso^","title":"create"},{"location":"pony-libxml2-Xmlschemafacetlink/#returns","text":"Xmlschemafacetlink iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemafacetlink/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemafacetlink/#var-pnext-nullablepointerxmlschemafacetlink-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschemafacetlink ref] ref"},{"location":"pony-libxml2-Xmlschemafacetlink/#var-pfacet-nullablepointerxmlschemafacet-ref-ref","text":"[Source]","title":"var pfacet: NullablePointer[Xmlschemafacet ref] ref"},{"location":"pony-libxml2-Xmlschemanotation/","text":"Xmlschemanotation \u00b6 [Source] struct ref Xmlschemanotation Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemanotation iso^ Returns \u00b6 Xmlschemanotation iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var pidentifier: Pointer [ U8 val] tag \u00b6 [Source] var ptargetNamespace: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmlschemanotation"},{"location":"pony-libxml2-Xmlschemanotation/#xmlschemanotation","text":"[Source] struct ref Xmlschemanotation","title":"Xmlschemanotation"},{"location":"pony-libxml2-Xmlschemanotation/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemanotation/#create","text":"[Source] new iso create() : Xmlschemanotation iso^","title":"create"},{"location":"pony-libxml2-Xmlschemanotation/#returns","text":"Xmlschemanotation iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemanotation/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemanotation/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlschemanotation/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemanotation/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschemanotation/#var-pidentifier-pointeru8-val-tag","text":"[Source]","title":"var pidentifier: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemanotation/#var-ptargetnamespace-pointeru8-val-tag","text":"[Source]","title":"var ptargetNamespace: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemaparserctxt/","text":"Xmlschemaparserctxt \u00b6 [Source] struct ref Xmlschemaparserctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemaparserctxt iso^ Returns \u00b6 Xmlschemaparserctxt iso^","title":"struct Xmlschemaparserctxt"},{"location":"pony-libxml2-Xmlschemaparserctxt/#xmlschemaparserctxt","text":"[Source] struct ref Xmlschemaparserctxt","title":"Xmlschemaparserctxt"},{"location":"pony-libxml2-Xmlschemaparserctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemaparserctxt/#create","text":"[Source] new iso create() : Xmlschemaparserctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlschemaparserctxt/#returns","text":"Xmlschemaparserctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemasaxplug/","text":"Xmlschemasaxplug \u00b6 [Source] struct ref Xmlschemasaxplug Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemasaxplug iso^ Returns \u00b6 Xmlschemasaxplug iso^","title":"struct Xmlschemasaxplug"},{"location":"pony-libxml2-Xmlschemasaxplug/#xmlschemasaxplug","text":"[Source] struct ref Xmlschemasaxplug","title":"Xmlschemasaxplug"},{"location":"pony-libxml2-Xmlschemasaxplug/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemasaxplug/#create","text":"[Source] new iso create() : Xmlschemasaxplug iso^","title":"create"},{"location":"pony-libxml2-Xmlschemasaxplug/#returns","text":"Xmlschemasaxplug iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschematron/","text":"Xmlschematron \u00b6 [Source] struct ref Xmlschematron Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschematron iso^ Returns \u00b6 Xmlschematron iso^","title":"struct Xmlschematron"},{"location":"pony-libxml2-Xmlschematron/#xmlschematron","text":"[Source] struct ref Xmlschematron","title":"Xmlschematron"},{"location":"pony-libxml2-Xmlschematron/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschematron/#create","text":"[Source] new iso create() : Xmlschematron iso^","title":"create"},{"location":"pony-libxml2-Xmlschematron/#returns","text":"Xmlschematron iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschematronparserctxt/","text":"Xmlschematronparserctxt \u00b6 [Source] struct ref Xmlschematronparserctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschematronparserctxt iso^ Returns \u00b6 Xmlschematronparserctxt iso^","title":"struct Xmlschematronparserctxt"},{"location":"pony-libxml2-Xmlschematronparserctxt/#xmlschematronparserctxt","text":"[Source] struct ref Xmlschematronparserctxt","title":"Xmlschematronparserctxt"},{"location":"pony-libxml2-Xmlschematronparserctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschematronparserctxt/#create","text":"[Source] new iso create() : Xmlschematronparserctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlschematronparserctxt/#returns","text":"Xmlschematronparserctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschematronvalidctxt/","text":"Xmlschematronvalidctxt \u00b6 [Source] struct ref Xmlschematronvalidctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschematronvalidctxt iso^ Returns \u00b6 Xmlschematronvalidctxt iso^","title":"struct Xmlschematronvalidctxt"},{"location":"pony-libxml2-Xmlschematronvalidctxt/#xmlschematronvalidctxt","text":"[Source] struct ref Xmlschematronvalidctxt","title":"Xmlschematronvalidctxt"},{"location":"pony-libxml2-Xmlschematronvalidctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschematronvalidctxt/#create","text":"[Source] new iso create() : Xmlschematronvalidctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlschematronvalidctxt/#returns","text":"Xmlschematronvalidctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschematype/","text":"Xmlschematype \u00b6 [Source] struct ref Xmlschematype Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschematype iso^ Returns \u00b6 Xmlschematype iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pnext: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var pname: Pointer [ U8 val] tag \u00b6 [Source] var pid: Pointer [ U8 val] tag \u00b6 [Source] var pref: Pointer [ U8 val] tag \u00b6 [Source] var prefNs: Pointer [ U8 val] tag \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var psubtypes: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var pattributes: NullablePointer [ Xmlschemaattribute ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pminOccurs: I32 val \u00b6 [Source] var pmaxOccurs: I32 val \u00b6 [Source] var pflags: I32 val \u00b6 [Source] var pcontentType: I32 val \u00b6 [Source] var pbase: Pointer [ U8 val] tag \u00b6 [Source] var pbaseNs: Pointer [ U8 val] tag \u00b6 [Source] var pbaseType: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var pfacets: NullablePointer [ Xmlschemafacet ref] ref \u00b6 [Source] var predef: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var precurse: I32 val \u00b6 [Source] var pattributeUses: Pointer [ NullablePointer [ Xmlschemaattributelink ref] ref] ref \u00b6 [Source] var pattributeWildcard: NullablePointer [ Xmlschemawildcard ref] ref \u00b6 [Source] var pbuiltInType: I32 val \u00b6 [Source] var pmemberTypes: NullablePointer [ Xmlschematypelink ref] ref \u00b6 [Source] var pfacetSet: NullablePointer [ Xmlschemafacetlink ref] ref \u00b6 [Source] var prefPrefix: Pointer [ U8 val] tag \u00b6 [Source] var pcontentTypeDef: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source] var pcontModel: NullablePointer [ Xmlregexp ref] ref \u00b6 [Source] var ptargetNamespace: Pointer [ U8 val] tag \u00b6 [Source] var pattrUses: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Xmlschematype"},{"location":"pony-libxml2-Xmlschematype/#xmlschematype","text":"[Source] struct ref Xmlschematype","title":"Xmlschematype"},{"location":"pony-libxml2-Xmlschematype/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschematype/#create","text":"[Source] new iso create() : Xmlschematype iso^","title":"create"},{"location":"pony-libxml2-Xmlschematype/#returns","text":"Xmlschematype iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschematype/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschematype/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlschematype/#var-pnext-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-pid-pointeru8-val-tag","text":"[Source]","title":"var pid: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-pref-pointeru8-val-tag","text":"[Source]","title":"var pref: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-prefns-pointeru8-val-tag","text":"[Source]","title":"var prefNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-psubtypes-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var psubtypes: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pattributes-nullablepointerxmlschemaattribute-ref-ref","text":"[Source]","title":"var pattributes: NullablePointer[Xmlschemaattribute ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pminoccurs-i32-val","text":"[Source]","title":"var pminOccurs: I32 val"},{"location":"pony-libxml2-Xmlschematype/#var-pmaxoccurs-i32-val","text":"[Source]","title":"var pmaxOccurs: I32 val"},{"location":"pony-libxml2-Xmlschematype/#var-pflags-i32-val","text":"[Source]","title":"var pflags: I32 val"},{"location":"pony-libxml2-Xmlschematype/#var-pcontenttype-i32-val","text":"[Source]","title":"var pcontentType: I32 val"},{"location":"pony-libxml2-Xmlschematype/#var-pbase-pointeru8-val-tag","text":"[Source]","title":"var pbase: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-pbasens-pointeru8-val-tag","text":"[Source]","title":"var pbaseNs: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-pbasetype-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var pbaseType: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pfacets-nullablepointerxmlschemafacet-ref-ref","text":"[Source]","title":"var pfacets: NullablePointer[Xmlschemafacet ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-predef-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var predef: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-precurse-i32-val","text":"[Source]","title":"var precurse: I32 val"},{"location":"pony-libxml2-Xmlschematype/#var-pattributeuses-pointernullablepointerxmlschemaattributelink-ref-ref-ref","text":"[Source]","title":"var pattributeUses: Pointer[NullablePointer[Xmlschemaattributelink ref] ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pattributewildcard-nullablepointerxmlschemawildcard-ref-ref","text":"[Source]","title":"var pattributeWildcard: NullablePointer[Xmlschemawildcard ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pbuiltintype-i32-val","text":"[Source]","title":"var pbuiltInType: I32 val"},{"location":"pony-libxml2-Xmlschematype/#var-pmembertypes-nullablepointerxmlschematypelink-ref-ref","text":"[Source]","title":"var pmemberTypes: NullablePointer[Xmlschematypelink ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pfacetset-nullablepointerxmlschemafacetlink-ref-ref","text":"[Source]","title":"var pfacetSet: NullablePointer[Xmlschemafacetlink ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-prefprefix-pointeru8-val-tag","text":"[Source]","title":"var prefPrefix: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-pcontenttypedef-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var pcontentTypeDef: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-pcontmodel-nullablepointerxmlregexp-ref-ref","text":"[Source]","title":"var pcontModel: NullablePointer[Xmlregexp ref] ref"},{"location":"pony-libxml2-Xmlschematype/#var-ptargetnamespace-pointeru8-val-tag","text":"[Source]","title":"var ptargetNamespace: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschematype/#var-pattruses-pointeru8-val-ref","text":"[Source]","title":"var pattrUses: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlschematypelink/","text":"Xmlschematypelink \u00b6 [Source] struct ref Xmlschematypelink Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschematypelink iso^ Returns \u00b6 Xmlschematypelink iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlschematypelink ref] ref \u00b6 [Source] var ptype: NullablePointer [ Xmlschematype ref] ref \u00b6 [Source]","title":"struct Xmlschematypelink"},{"location":"pony-libxml2-Xmlschematypelink/#xmlschematypelink","text":"[Source] struct ref Xmlschematypelink","title":"Xmlschematypelink"},{"location":"pony-libxml2-Xmlschematypelink/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschematypelink/#create","text":"[Source] new iso create() : Xmlschematypelink iso^","title":"create"},{"location":"pony-libxml2-Xmlschematypelink/#returns","text":"Xmlschematypelink iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschematypelink/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschematypelink/#var-pnext-nullablepointerxmlschematypelink-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschematypelink ref] ref"},{"location":"pony-libxml2-Xmlschematypelink/#var-ptype-nullablepointerxmlschematype-ref-ref","text":"[Source]","title":"var ptype: NullablePointer[Xmlschematype ref] ref"},{"location":"pony-libxml2-Xmlschemaval/","text":"Xmlschemaval \u00b6 [Source] struct ref Xmlschemaval Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemaval iso^ Returns \u00b6 Xmlschemaval iso^","title":"struct Xmlschemaval"},{"location":"pony-libxml2-Xmlschemaval/#xmlschemaval","text":"[Source] struct ref Xmlschemaval","title":"Xmlschemaval"},{"location":"pony-libxml2-Xmlschemaval/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemaval/#create","text":"[Source] new iso create() : Xmlschemaval iso^","title":"create"},{"location":"pony-libxml2-Xmlschemaval/#returns","text":"Xmlschemaval iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemavalidctxt/","text":"Xmlschemavalidctxt \u00b6 [Source] struct ref Xmlschemavalidctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemavalidctxt iso^ Returns \u00b6 Xmlschemavalidctxt iso^","title":"struct Xmlschemavalidctxt"},{"location":"pony-libxml2-Xmlschemavalidctxt/#xmlschemavalidctxt","text":"[Source] struct ref Xmlschemavalidctxt","title":"Xmlschemavalidctxt"},{"location":"pony-libxml2-Xmlschemavalidctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemavalidctxt/#create","text":"[Source] new iso create() : Xmlschemavalidctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlschemavalidctxt/#returns","text":"Xmlschemavalidctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemawildcard/","text":"Xmlschemawildcard \u00b6 [Source] struct ref Xmlschemawildcard Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemawildcard iso^ Returns \u00b6 Xmlschemawildcard iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pid: Pointer [ U8 val] tag \u00b6 [Source] var pannot: NullablePointer [ Xmlschemaannot ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pminOccurs: I32 val \u00b6 [Source] var pmaxOccurs: I32 val \u00b6 [Source] var pprocessContents: I32 val \u00b6 [Source] var pany: I32 val \u00b6 [Source] var pnsSet: NullablePointer [ Xmlschemawildcardns ref] ref \u00b6 [Source] var pnegNsSet: NullablePointer [ Xmlschemawildcardns ref] ref \u00b6 [Source] var pflags: I32 val \u00b6 [Source]","title":"struct Xmlschemawildcard"},{"location":"pony-libxml2-Xmlschemawildcard/#xmlschemawildcard","text":"[Source] struct ref Xmlschemawildcard","title":"Xmlschemawildcard"},{"location":"pony-libxml2-Xmlschemawildcard/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemawildcard/#create","text":"[Source] new iso create() : Xmlschemawildcard iso^","title":"create"},{"location":"pony-libxml2-Xmlschemawildcard/#returns","text":"Xmlschemawildcard iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemawildcard/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemawildcard/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pid-pointeru8-val-tag","text":"[Source]","title":"var pid: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pannot-nullablepointerxmlschemaannot-ref-ref","text":"[Source]","title":"var pannot: NullablePointer[Xmlschemaannot ref] ref"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pminoccurs-i32-val","text":"[Source]","title":"var pminOccurs: I32 val"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pmaxoccurs-i32-val","text":"[Source]","title":"var pmaxOccurs: I32 val"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pprocesscontents-i32-val","text":"[Source]","title":"var pprocessContents: I32 val"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pany-i32-val","text":"[Source]","title":"var pany: I32 val"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pnsset-nullablepointerxmlschemawildcardns-ref-ref","text":"[Source]","title":"var pnsSet: NullablePointer[Xmlschemawildcardns ref] ref"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pnegnsset-nullablepointerxmlschemawildcardns-ref-ref","text":"[Source]","title":"var pnegNsSet: NullablePointer[Xmlschemawildcardns ref] ref"},{"location":"pony-libxml2-Xmlschemawildcard/#var-pflags-i32-val","text":"[Source]","title":"var pflags: I32 val"},{"location":"pony-libxml2-Xmlschemawildcardns/","text":"Xmlschemawildcardns \u00b6 [Source] struct ref Xmlschemawildcardns Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlschemawildcardns iso^ Returns \u00b6 Xmlschemawildcardns iso^ Public fields \u00b6 var pnext: NullablePointer [ Xmlschemawildcardns ref] ref \u00b6 [Source] var pvalue: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmlschemawildcardns"},{"location":"pony-libxml2-Xmlschemawildcardns/#xmlschemawildcardns","text":"[Source] struct ref Xmlschemawildcardns","title":"Xmlschemawildcardns"},{"location":"pony-libxml2-Xmlschemawildcardns/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlschemawildcardns/#create","text":"[Source] new iso create() : Xmlschemawildcardns iso^","title":"create"},{"location":"pony-libxml2-Xmlschemawildcardns/#returns","text":"Xmlschemawildcardns iso^","title":"Returns"},{"location":"pony-libxml2-Xmlschemawildcardns/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlschemawildcardns/#var-pnext-nullablepointerxmlschemawildcardns-ref-ref","text":"[Source]","title":"var pnext: NullablePointer[Xmlschemawildcardns ref] ref"},{"location":"pony-libxml2-Xmlschemawildcardns/#var-pvalue-pointeru8-val-tag","text":"[Source]","title":"var pvalue: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlshellctxt/","text":"Xmlshellctxt \u00b6 [Source] struct ref Xmlshellctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlshellctxt iso^ Returns \u00b6 Xmlshellctxt iso^ Public fields \u00b6 var pfilename: Pointer [ U8 val] tag \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var ppctxt: NullablePointer [ Xmlxpathcontext ref] ref \u00b6 [Source] var ploaded: I32 val \u00b6 [Source] var poutput: NullablePointer [ IoFile ref] ref \u00b6 [Source] var pinput: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xmlshellctxt"},{"location":"pony-libxml2-Xmlshellctxt/#xmlshellctxt","text":"[Source] struct ref Xmlshellctxt","title":"Xmlshellctxt"},{"location":"pony-libxml2-Xmlshellctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlshellctxt/#create","text":"[Source] new iso create() : Xmlshellctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlshellctxt/#returns","text":"Xmlshellctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlshellctxt/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlshellctxt/#var-pfilename-pointeru8-val-tag","text":"[Source]","title":"var pfilename: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlshellctxt/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlshellctxt/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlshellctxt/#var-ppctxt-nullablepointerxmlxpathcontext-ref-ref","text":"[Source]","title":"var ppctxt: NullablePointer[Xmlxpathcontext ref] ref"},{"location":"pony-libxml2-Xmlshellctxt/#var-ploaded-i32-val","text":"[Source]","title":"var ploaded: I32 val"},{"location":"pony-libxml2-Xmlshellctxt/#var-poutput-nullablepointeriofile-ref-ref","text":"[Source]","title":"var poutput: NullablePointer[IoFile ref] ref"},{"location":"pony-libxml2-Xmlshellctxt/#var-pinput-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pinput: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlstreamctxt/","text":"Xmlstreamctxt \u00b6 [Source] struct ref Xmlstreamctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlstreamctxt iso^ Returns \u00b6 Xmlstreamctxt iso^","title":"struct Xmlstreamctxt"},{"location":"pony-libxml2-Xmlstreamctxt/#xmlstreamctxt","text":"[Source] struct ref Xmlstreamctxt","title":"Xmlstreamctxt"},{"location":"pony-libxml2-Xmlstreamctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlstreamctxt/#create","text":"[Source] new iso create() : Xmlstreamctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlstreamctxt/#returns","text":"Xmlstreamctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmltextreader/","text":"Xmltextreader \u00b6 [Source] struct ref Xmltextreader Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmltextreader iso^ Returns \u00b6 Xmltextreader iso^","title":"struct Xmltextreader"},{"location":"pony-libxml2-Xmltextreader/#xmltextreader","text":"[Source] struct ref Xmltextreader","title":"Xmltextreader"},{"location":"pony-libxml2-Xmltextreader/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmltextreader/#create","text":"[Source] new iso create() : Xmltextreader iso^","title":"create"},{"location":"pony-libxml2-Xmltextreader/#returns","text":"Xmltextreader iso^","title":"Returns"},{"location":"pony-libxml2-Xmltextwriter/","text":"Xmltextwriter \u00b6 [Source] struct ref Xmltextwriter Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmltextwriter iso^ Returns \u00b6 Xmltextwriter iso^","title":"struct Xmltextwriter"},{"location":"pony-libxml2-Xmltextwriter/#xmltextwriter","text":"[Source] struct ref Xmltextwriter","title":"Xmltextwriter"},{"location":"pony-libxml2-Xmltextwriter/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmltextwriter/#create","text":"[Source] new iso create() : Xmltextwriter iso^","title":"create"},{"location":"pony-libxml2-Xmltextwriter/#returns","text":"Xmltextwriter iso^","title":"Returns"},{"location":"pony-libxml2-Xmluri/","text":"Xmluri \u00b6 [Source] struct ref Xmluri Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmluri iso^ Returns \u00b6 Xmluri iso^ Public fields \u00b6 var pscheme: Pointer [ U8 val] tag \u00b6 [Source] var popaque: Pointer [ U8 val] tag \u00b6 [Source] var pauthority: Pointer [ U8 val] tag \u00b6 [Source] var pserver: Pointer [ U8 val] tag \u00b6 [Source] var puser: Pointer [ U8 val] tag \u00b6 [Source] var pport: I32 val \u00b6 [Source] var ppath: Pointer [ U8 val] tag \u00b6 [Source] var pquery: Pointer [ U8 val] tag \u00b6 [Source] var pfragment: Pointer [ U8 val] tag \u00b6 [Source] var pcleanup: I32 val \u00b6 [Source] var pquery_raw: Pointer [ U8 val] tag \u00b6 [Source]","title":"struct Xmluri"},{"location":"pony-libxml2-Xmluri/#xmluri","text":"[Source] struct ref Xmluri","title":"Xmluri"},{"location":"pony-libxml2-Xmluri/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmluri/#create","text":"[Source] new iso create() : Xmluri iso^","title":"create"},{"location":"pony-libxml2-Xmluri/#returns","text":"Xmluri iso^","title":"Returns"},{"location":"pony-libxml2-Xmluri/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmluri/#var-pscheme-pointeru8-val-tag","text":"[Source]","title":"var pscheme: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-popaque-pointeru8-val-tag","text":"[Source]","title":"var popaque: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-pauthority-pointeru8-val-tag","text":"[Source]","title":"var pauthority: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-pserver-pointeru8-val-tag","text":"[Source]","title":"var pserver: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-puser-pointeru8-val-tag","text":"[Source]","title":"var puser: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-pport-i32-val","text":"[Source]","title":"var pport: I32 val"},{"location":"pony-libxml2-Xmluri/#var-ppath-pointeru8-val-tag","text":"[Source]","title":"var ppath: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-pquery-pointeru8-val-tag","text":"[Source]","title":"var pquery: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-pfragment-pointeru8-val-tag","text":"[Source]","title":"var pfragment: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmluri/#var-pcleanup-i32-val","text":"[Source]","title":"var pcleanup: I32 val"},{"location":"pony-libxml2-Xmluri/#var-pquery_raw-pointeru8-val-tag","text":"[Source]","title":"var pquery_raw: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlvalidctxt/","text":"Xmlvalidctxt \u00b6 [Source] struct ref Xmlvalidctxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlvalidctxt iso^ Returns \u00b6 Xmlvalidctxt iso^ Public fields \u00b6 var puserData: Pointer [ U8 val] ref \u00b6 [Source] var perror: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pwarning: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pnodeNr: I32 val \u00b6 [Source] var pnodeMax: I32 val \u00b6 [Source] var pnodeTab: Pointer [ NullablePointer [ Xmlnode ref] ref] ref \u00b6 [Source] var pfinishDtd: U32 val \u00b6 [Source] var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pvalid: I32 val \u00b6 [Source] var pvstate: NullablePointer [ Xmlvalidstate ref] ref \u00b6 [Source] var pvstateNr: I32 val \u00b6 [Source] var pvstateMax: I32 val \u00b6 [Source] var pvstateTab: NullablePointer [ Xmlvalidstate ref] ref \u00b6 [Source] var pam: NullablePointer [ Xmlautomata ref] ref \u00b6 [Source] var pstate: NullablePointer [ Xmlautomatastate ref] ref \u00b6 [Source]","title":"struct Xmlvalidctxt"},{"location":"pony-libxml2-Xmlvalidctxt/#xmlvalidctxt","text":"[Source] struct ref Xmlvalidctxt","title":"Xmlvalidctxt"},{"location":"pony-libxml2-Xmlvalidctxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlvalidctxt/#create","text":"[Source] new iso create() : Xmlvalidctxt iso^","title":"create"},{"location":"pony-libxml2-Xmlvalidctxt/#returns","text":"Xmlvalidctxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlvalidctxt/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlvalidctxt/#var-puserdata-pointeru8-val-ref","text":"[Source]","title":"var puserData: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-perror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var perror: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pwarning-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pwarning: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pnodenr-i32-val","text":"[Source]","title":"var pnodeNr: I32 val"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pnodemax-i32-val","text":"[Source]","title":"var pnodeMax: I32 val"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pnodetab-pointernullablepointerxmlnode-ref-ref-ref","text":"[Source]","title":"var pnodeTab: Pointer[NullablePointer[Xmlnode ref] ref] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pfinishdtd-u32-val","text":"[Source]","title":"var pfinishDtd: U32 val"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pvalid-i32-val","text":"[Source]","title":"var pvalid: I32 val"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pvstate-nullablepointerxmlvalidstate-ref-ref","text":"[Source]","title":"var pvstate: NullablePointer[Xmlvalidstate ref] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pvstatenr-i32-val","text":"[Source]","title":"var pvstateNr: I32 val"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pvstatemax-i32-val","text":"[Source]","title":"var pvstateMax: I32 val"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pvstatetab-nullablepointerxmlvalidstate-ref-ref","text":"[Source]","title":"var pvstateTab: NullablePointer[Xmlvalidstate ref] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pam-nullablepointerxmlautomata-ref-ref","text":"[Source]","title":"var pam: NullablePointer[Xmlautomata ref] ref"},{"location":"pony-libxml2-Xmlvalidctxt/#var-pstate-nullablepointerxmlautomatastate-ref-ref","text":"[Source]","title":"var pstate: NullablePointer[Xmlautomatastate ref] ref"},{"location":"pony-libxml2-Xmlvalidstate/","text":"Xmlvalidstate \u00b6 [Source] struct ref Xmlvalidstate Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlvalidstate iso^ Returns \u00b6 Xmlvalidstate iso^","title":"struct Xmlvalidstate"},{"location":"pony-libxml2-Xmlvalidstate/#xmlvalidstate","text":"[Source] struct ref Xmlvalidstate","title":"Xmlvalidstate"},{"location":"pony-libxml2-Xmlvalidstate/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlvalidstate/#create","text":"[Source] new iso create() : Xmlvalidstate iso^","title":"create"},{"location":"pony-libxml2-Xmlvalidstate/#returns","text":"Xmlvalidstate iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxincludectxt/","text":"Xmlxincludectxt \u00b6 [Source] struct ref Xmlxincludectxt Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxincludectxt iso^ Returns \u00b6 Xmlxincludectxt iso^","title":"struct Xmlxincludectxt"},{"location":"pony-libxml2-Xmlxincludectxt/#xmlxincludectxt","text":"[Source] struct ref Xmlxincludectxt","title":"Xmlxincludectxt"},{"location":"pony-libxml2-Xmlxincludectxt/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxincludectxt/#create","text":"[Source] new iso create() : Xmlxincludectxt iso^","title":"create"},{"location":"pony-libxml2-Xmlxincludectxt/#returns","text":"Xmlxincludectxt iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathaxis/","text":"Xmlxpathaxis \u00b6 [Source] struct ref Xmlxpathaxis Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathaxis iso^ Returns \u00b6 Xmlxpathaxis iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var pfunc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xmlxpathaxis"},{"location":"pony-libxml2-Xmlxpathaxis/#xmlxpathaxis","text":"[Source] struct ref Xmlxpathaxis","title":"Xmlxpathaxis"},{"location":"pony-libxml2-Xmlxpathaxis/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathaxis/#create","text":"[Source] new iso create() : Xmlxpathaxis iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathaxis/#returns","text":"Xmlxpathaxis iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathaxis/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlxpathaxis/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathaxis/#var-pfunc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pfunc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlxpathcompexpr/","text":"Xmlxpathcompexpr \u00b6 [Source] struct ref Xmlxpathcompexpr Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathcompexpr iso^ Returns \u00b6 Xmlxpathcompexpr iso^","title":"struct Xmlxpathcompexpr"},{"location":"pony-libxml2-Xmlxpathcompexpr/#xmlxpathcompexpr","text":"[Source] struct ref Xmlxpathcompexpr","title":"Xmlxpathcompexpr"},{"location":"pony-libxml2-Xmlxpathcompexpr/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathcompexpr/#create","text":"[Source] new iso create() : Xmlxpathcompexpr iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathcompexpr/#returns","text":"Xmlxpathcompexpr iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathcontext/","text":"Xmlxpathcontext \u00b6 [Source] struct ref Xmlxpathcontext Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathcontext iso^ Returns \u00b6 Xmlxpathcontext iso^ Public fields \u00b6 var pdoc: NullablePointer [ Xmldoc ref] ref \u00b6 [Source] var pnode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pnb_variables_unused: I32 val \u00b6 [Source] var pmax_variables_unused: I32 val \u00b6 [Source] var pvarHash: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pnb_types: I32 val \u00b6 [Source] var pmax_types: I32 val \u00b6 [Source] var ptypes: NullablePointer [ Xmlxpathtype ref] ref \u00b6 [Source] var pnb_funcs_unused: I32 val \u00b6 [Source] var pmax_funcs_unused: I32 val \u00b6 [Source] var pfuncHash: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pnb_axis: I32 val \u00b6 [Source] var pmax_axis: I32 val \u00b6 [Source] var paxis: NullablePointer [ Xmlxpathaxis ref] ref \u00b6 [Source] var pnamespaces: Pointer [ NullablePointer [ Xmlns ref] ref] ref \u00b6 [Source] var pnsNr: I32 val \u00b6 [Source] var puser: Pointer [ U8 val] ref \u00b6 [Source] var pcontextSize: I32 val \u00b6 [Source] var pproximityPosition: I32 val \u00b6 [Source] var pxptr: I32 val \u00b6 [Source] var phere: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var porigin: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pnsHash: NullablePointer [ Xmlhashtable ref] ref \u00b6 [Source] var pvarLookupFunc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pvarLookupData: Pointer [ U8 val] ref \u00b6 [Source] var pextra: Pointer [ U8 val] ref \u00b6 [Source] var pfunction: Pointer [ U8 val] tag \u00b6 [Source] var pfunctionURI: Pointer [ U8 val] tag \u00b6 [Source] var pfuncLookupFunc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var pfuncLookupData: Pointer [ U8 val] ref \u00b6 [Source] var ptmpNsList: Pointer [ NullablePointer [ Xmlns ref] ref] ref \u00b6 [Source] var ptmpNsNr: I32 val \u00b6 [Source] var puserData: Pointer [ U8 val] ref \u00b6 [Source] var perror: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source] var plastError: Xmlerror ref \u00b6 [Source] var pdebugNode: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pdict: NullablePointer [ Xmldict ref] ref \u00b6 [Source] var pflags: I32 val \u00b6 [Source] var pcache: Pointer [ U8 val] ref \u00b6 [Source] var popLimit: U64 val \u00b6 [Source] var popCount: U64 val \u00b6 [Source] var pdepth: I32 val \u00b6 [Source] var pmaxDepth: I32 val \u00b6 [Source] var pmaxParserDepth: I32 val \u00b6 [Source]","title":"struct Xmlxpathcontext"},{"location":"pony-libxml2-Xmlxpathcontext/#xmlxpathcontext","text":"[Source] struct ref Xmlxpathcontext","title":"Xmlxpathcontext"},{"location":"pony-libxml2-Xmlxpathcontext/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathcontext/#create","text":"[Source] new iso create() : Xmlxpathcontext iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathcontext/#returns","text":"Xmlxpathcontext iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathcontext/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pdoc-nullablepointerxmldoc-ref-ref","text":"[Source]","title":"var pdoc: NullablePointer[Xmldoc ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pnode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnb_variables_unused-i32-val","text":"[Source]","title":"var pnb_variables_unused: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pmax_variables_unused-i32-val","text":"[Source]","title":"var pmax_variables_unused: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pvarhash-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pvarHash: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnb_types-i32-val","text":"[Source]","title":"var pnb_types: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pmax_types-i32-val","text":"[Source]","title":"var pmax_types: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-ptypes-nullablepointerxmlxpathtype-ref-ref","text":"[Source]","title":"var ptypes: NullablePointer[Xmlxpathtype ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnb_funcs_unused-i32-val","text":"[Source]","title":"var pnb_funcs_unused: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pmax_funcs_unused-i32-val","text":"[Source]","title":"var pmax_funcs_unused: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pfunchash-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pfuncHash: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnb_axis-i32-val","text":"[Source]","title":"var pnb_axis: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pmax_axis-i32-val","text":"[Source]","title":"var pmax_axis: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-paxis-nullablepointerxmlxpathaxis-ref-ref","text":"[Source]","title":"var paxis: NullablePointer[Xmlxpathaxis ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnamespaces-pointernullablepointerxmlns-ref-ref-ref","text":"[Source]","title":"var pnamespaces: Pointer[NullablePointer[Xmlns ref] ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnsnr-i32-val","text":"[Source]","title":"var pnsNr: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-puser-pointeru8-val-ref","text":"[Source]","title":"var puser: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pcontextsize-i32-val","text":"[Source]","title":"var pcontextSize: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pproximityposition-i32-val","text":"[Source]","title":"var pproximityPosition: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pxptr-i32-val","text":"[Source]","title":"var pxptr: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-phere-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var phere: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-porigin-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var porigin: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pnshash-nullablepointerxmlhashtable-ref-ref","text":"[Source]","title":"var pnsHash: NullablePointer[Xmlhashtable ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pvarlookupfunc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pvarLookupFunc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pvarlookupdata-pointeru8-val-ref","text":"[Source]","title":"var pvarLookupData: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pextra-pointeru8-val-ref","text":"[Source]","title":"var pextra: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pfunction-pointeru8-val-tag","text":"[Source]","title":"var pfunction: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pfunctionuri-pointeru8-val-tag","text":"[Source]","title":"var pfunctionURI: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pfunclookupfunc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pfuncLookupFunc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pfunclookupdata-pointeru8-val-ref","text":"[Source]","title":"var pfuncLookupData: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-ptmpnslist-pointernullablepointerxmlns-ref-ref-ref","text":"[Source]","title":"var ptmpNsList: Pointer[NullablePointer[Xmlns ref] ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-ptmpnsnr-i32-val","text":"[Source]","title":"var ptmpNsNr: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-puserdata-pointeru8-val-ref","text":"[Source]","title":"var puserData: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-perror-pointerfunctionpointer-val-ref","text":"[Source]","title":"var perror: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-plasterror-xmlerror-ref","text":"[Source]","title":"var plastError: Xmlerror ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pdebugnode-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pdebugNode: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pdict-nullablepointerxmldict-ref-ref","text":"[Source]","title":"var pdict: NullablePointer[Xmldict ref] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pflags-i32-val","text":"[Source]","title":"var pflags: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pcache-pointeru8-val-ref","text":"[Source]","title":"var pcache: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathcontext/#var-poplimit-u64-val","text":"[Source]","title":"var popLimit: U64 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-popcount-u64-val","text":"[Source]","title":"var popCount: U64 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pdepth-i32-val","text":"[Source]","title":"var pdepth: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pmaxdepth-i32-val","text":"[Source]","title":"var pmaxDepth: I32 val"},{"location":"pony-libxml2-Xmlxpathcontext/#var-pmaxparserdepth-i32-val","text":"[Source]","title":"var pmaxParserDepth: I32 val"},{"location":"pony-libxml2-Xmlxpathfunct/","text":"Xmlxpathfunct \u00b6 [Source] struct ref Xmlxpathfunct Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathfunct iso^ Returns \u00b6 Xmlxpathfunct iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var pfunc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xmlxpathfunct"},{"location":"pony-libxml2-Xmlxpathfunct/#xmlxpathfunct","text":"[Source] struct ref Xmlxpathfunct","title":"Xmlxpathfunct"},{"location":"pony-libxml2-Xmlxpathfunct/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathfunct/#create","text":"[Source] new iso create() : Xmlxpathfunct iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathfunct/#returns","text":"Xmlxpathfunct iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathfunct/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlxpathfunct/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathfunct/#var-pfunc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pfunc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlxpathobject/","text":"Xmlxpathobject \u00b6 [Source] struct ref Xmlxpathobject Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathobject iso^ Returns \u00b6 Xmlxpathobject iso^ Public fields \u00b6 var ptype: I32 val \u00b6 [Source] var pnodesetval: NullablePointer [ Xmlnodeset ref] ref \u00b6 [Source] var pboolval: I32 val \u00b6 [Source] var pfloatval: F64 val \u00b6 [Source] var pstringval: Pointer [ U8 val] ref \u00b6 [Source] var puser: Pointer [ U8 val] ref \u00b6 [Source] var pindex: I32 val \u00b6 [Source] var puser2: Pointer [ U8 val] ref \u00b6 [Source] var pindex2: I32 val \u00b6 [Source]","title":"struct Xmlxpathobject"},{"location":"pony-libxml2-Xmlxpathobject/#xmlxpathobject","text":"[Source] struct ref Xmlxpathobject","title":"Xmlxpathobject"},{"location":"pony-libxml2-Xmlxpathobject/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathobject/#create","text":"[Source] new iso create() : Xmlxpathobject iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathobject/#returns","text":"Xmlxpathobject iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathobject/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlxpathobject/#var-ptype-i32-val","text":"[Source]","title":"var ptype: I32 val"},{"location":"pony-libxml2-Xmlxpathobject/#var-pnodesetval-nullablepointerxmlnodeset-ref-ref","text":"[Source]","title":"var pnodesetval: NullablePointer[Xmlnodeset ref] ref"},{"location":"pony-libxml2-Xmlxpathobject/#var-pboolval-i32-val","text":"[Source]","title":"var pboolval: I32 val"},{"location":"pony-libxml2-Xmlxpathobject/#var-pfloatval-f64-val","text":"[Source]","title":"var pfloatval: F64 val"},{"location":"pony-libxml2-Xmlxpathobject/#var-pstringval-pointeru8-val-ref","text":"[Source]","title":"var pstringval: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathobject/#var-puser-pointeru8-val-ref","text":"[Source]","title":"var puser: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathobject/#var-pindex-i32-val","text":"[Source]","title":"var pindex: I32 val"},{"location":"pony-libxml2-Xmlxpathobject/#var-puser2-pointeru8-val-ref","text":"[Source]","title":"var puser2: Pointer[U8 val] ref"},{"location":"pony-libxml2-Xmlxpathobject/#var-pindex2-i32-val","text":"[Source]","title":"var pindex2: I32 val"},{"location":"pony-libxml2-Xmlxpathparsercontext/","text":"Xmlxpathparsercontext \u00b6 [Source] struct ref Xmlxpathparsercontext Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathparsercontext iso^ Returns \u00b6 Xmlxpathparsercontext iso^ Public fields \u00b6 var pcur: Pointer [ U8 val] tag \u00b6 [Source] var pbase: Pointer [ U8 val] tag \u00b6 [Source] var perror: I32 val \u00b6 [Source] var pcontext: NullablePointer [ Xmlxpathcontext ref] ref \u00b6 [Source] var pvalue: NullablePointer [ Xmlxpathobject ref] ref \u00b6 [Source] var pvalueNr: I32 val \u00b6 [Source] var pvalueMax: I32 val \u00b6 [Source] var pvalueTab: Pointer [ NullablePointer [ Xmlxpathobject ref] ref] ref \u00b6 [Source] var pcomp: NullablePointer [ Xmlxpathcompexpr ref] ref \u00b6 [Source] var pxptr: I32 val \u00b6 [Source] var pancestor: NullablePointer [ Xmlnode ref] ref \u00b6 [Source] var pvalueFrame: I32 val \u00b6 [Source]","title":"struct Xmlxpathparsercontext"},{"location":"pony-libxml2-Xmlxpathparsercontext/#xmlxpathparsercontext","text":"[Source] struct ref Xmlxpathparsercontext","title":"Xmlxpathparsercontext"},{"location":"pony-libxml2-Xmlxpathparsercontext/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathparsercontext/#create","text":"[Source] new iso create() : Xmlxpathparsercontext iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathparsercontext/#returns","text":"Xmlxpathparsercontext iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathparsercontext/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pcur-pointeru8-val-tag","text":"[Source]","title":"var pcur: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pbase-pointeru8-val-tag","text":"[Source]","title":"var pbase: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-perror-i32-val","text":"[Source]","title":"var perror: I32 val"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pcontext-nullablepointerxmlxpathcontext-ref-ref","text":"[Source]","title":"var pcontext: NullablePointer[Xmlxpathcontext ref] ref"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pvalue-nullablepointerxmlxpathobject-ref-ref","text":"[Source]","title":"var pvalue: NullablePointer[Xmlxpathobject ref] ref"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pvaluenr-i32-val","text":"[Source]","title":"var pvalueNr: I32 val"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pvaluemax-i32-val","text":"[Source]","title":"var pvalueMax: I32 val"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pvaluetab-pointernullablepointerxmlxpathobject-ref-ref-ref","text":"[Source]","title":"var pvalueTab: Pointer[NullablePointer[Xmlxpathobject ref] ref] ref"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pcomp-nullablepointerxmlxpathcompexpr-ref-ref","text":"[Source]","title":"var pcomp: NullablePointer[Xmlxpathcompexpr ref] ref"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pxptr-i32-val","text":"[Source]","title":"var pxptr: I32 val"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pancestor-nullablepointerxmlnode-ref-ref","text":"[Source]","title":"var pancestor: NullablePointer[Xmlnode ref] ref"},{"location":"pony-libxml2-Xmlxpathparsercontext/#var-pvalueframe-i32-val","text":"[Source]","title":"var pvalueFrame: I32 val"},{"location":"pony-libxml2-Xmlxpathtype/","text":"Xmlxpathtype \u00b6 [Source] struct ref Xmlxpathtype Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathtype iso^ Returns \u00b6 Xmlxpathtype iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var pfunc: Pointer [ FUNCTIONPOINTER val] ref \u00b6 [Source]","title":"struct Xmlxpathtype"},{"location":"pony-libxml2-Xmlxpathtype/#xmlxpathtype","text":"[Source] struct ref Xmlxpathtype","title":"Xmlxpathtype"},{"location":"pony-libxml2-Xmlxpathtype/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathtype/#create","text":"[Source] new iso create() : Xmlxpathtype iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathtype/#returns","text":"Xmlxpathtype iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathtype/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlxpathtype/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathtype/#var-pfunc-pointerfunctionpointer-val-ref","text":"[Source]","title":"var pfunc: Pointer[FUNCTIONPOINTER val] ref"},{"location":"pony-libxml2-Xmlxpathvariable/","text":"Xmlxpathvariable \u00b6 [Source] struct ref Xmlxpathvariable Constructors \u00b6 create \u00b6 [Source] new iso create() : Xmlxpathvariable iso^ Returns \u00b6 Xmlxpathvariable iso^ Public fields \u00b6 var pname: Pointer [ U8 val] tag \u00b6 [Source] var pvalue: NullablePointer [ Xmlxpathobject ref] ref \u00b6 [Source]","title":"struct Xmlxpathvariable"},{"location":"pony-libxml2-Xmlxpathvariable/#xmlxpathvariable","text":"[Source] struct ref Xmlxpathvariable","title":"Xmlxpathvariable"},{"location":"pony-libxml2-Xmlxpathvariable/#constructors","text":"","title":"Constructors"},{"location":"pony-libxml2-Xmlxpathvariable/#create","text":"[Source] new iso create() : Xmlxpathvariable iso^","title":"create"},{"location":"pony-libxml2-Xmlxpathvariable/#returns","text":"Xmlxpathvariable iso^","title":"Returns"},{"location":"pony-libxml2-Xmlxpathvariable/#public-fields","text":"","title":"Public fields"},{"location":"pony-libxml2-Xmlxpathvariable/#var-pname-pointeru8-val-tag","text":"[Source]","title":"var pname: Pointer[U8 val] tag"},{"location":"pony-libxml2-Xmlxpathvariable/#var-pvalue-nullablepointerxmlxpathobject-ref-ref","text":"[Source]","title":"var pvalue: NullablePointer[Xmlxpathobject ref] ref"},{"location":"src/builtin/_arithmetic/","text":"primitive _SignedArithmetic fun fld[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => if (y == T.from[U8](0)) or ((x == T.min_value()) and (y == T.from[I8](-1))) then T.from[U8](0) else _SignedUnsafeArithmetic.fld_unsafe[T, U](x, y) end fun mod[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => // stupid special case for division edge cases if (y == T.from[U8](0)) or ((x == T.min_value()) and (y == T.from[I8](-1))) then T.from[U8](0) else _SignedUnsafeArithmetic.mod_unsafe[T, U](x, y) end primitive _SignedUnsafeArithmetic fun fld_unsafe[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => let div_res = x /~ y if ((x xor y) < T.from[U8](0)) and ((div_res *~ y) != x) then div_res - T.from[U8](1) else div_res end fun mod_unsafe[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => x -~ (fld_unsafe[T, U](x, y) *~ y) primitive _UnsignedCheckedArithmetic fun div_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => (x / y, (y == T.from[U8](0))) fun rem_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => (x % y, y == T.from[U8](0)) fun fld_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => div_checked[T](x, y) fun mod_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => rem_checked[T](x, y) primitive _SignedCheckedArithmetic fun _mul_checked[U: UnsignedInteger[U] val, T: (Signed & SignedInteger[T, U] val)](x: T, y: T): (T, Bool) => \"\"\" basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: `@\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y)` Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. \"\"\" let result = x * y if x == T.min_value() then return (result, (y != T.from[I8](0)) and (y != T.from[I8](1))) end if y == T.min_value() then return (result, (x != T.from[I8](0)) and (x != T.from[I8](1))) end let x_neg = x >> (x.bitwidth() - U.from[U8](1)) let x_abs = (x xor x_neg) - x_neg let y_neg = y >> (x.bitwidth() - U.from[U8](1)) let y_abs = (y xor y_neg) - y_neg if ((x_abs < T.from[I8](2)) or (y_abs < T.from[I8](2))) then return (result, false) end if (x_neg == y_neg) then (result, (x_abs > (T.max_value() / y_abs))) else (result, (x_abs > (T.min_value() / -y_abs))) end fun div_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x / y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun rem_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x % y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun fld_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x.fld(y), (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun mod_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x.mod(y), (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) trait _PartialArithmetic fun add_partial[T: (Integer[T] val & Int)](x: T, y: T): T? => (let r: T, let overflow: Bool) = x.addc(y) if overflow then error else r end fun sub_partial[T: (Integer[T] val & Int)](x: T, y: T): T? => (let r: T, let overflow: Bool) = x.subc(y) if overflow then error else r end fun mul_partial[T: (Integer[T] val & Int)](x: T, y: T): T? => (let r: T, let overflow: Bool) = x.mulc(y) if overflow then error else r end primitive _UnsignedPartialArithmetic is _PartialArithmetic fun div_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x /~ y end fun rem_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x %~ y end fun divrem_partial[T: UnsignedInteger[T] val](x: T, y: T): (T, T)? => if (y == T.from[U8](0)) then error else (x /~ y, x %~ y) end fun fld_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x.fld(y) end fun mod_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x.mod(y) end primitive _SignedPartialArithmetic is _PartialArithmetic fun div_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x /~ y end fun rem_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x %~ y end fun divrem_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, T)? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else (x /~ y, x %~ y) end fun fld_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x.fld(y) end fun mod_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x.mod(y) end fun neg_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T): T? => if x == T.min_value() then error else -~x end","title":"_arithmetic.pony"},{"location":"src/builtin/_to_string/","text":"primitive _ToString \"\"\" Worker type providing simple to string conversions for numbers. \"\"\" fun _u64(x: U64, neg: Bool): String iso^ => let table = \"0123456789\" let base: U64 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end if neg then s.push('-') end s .> reverse_in_place() end fun _u128(x: U128, neg: Bool): String iso^ => let table = \"0123456789\" let base: U128 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = (value = value / base) - (value * base) s.push(table(index.usize())?) end end end if neg then s.push('-') end s .> reverse_in_place() end fun _f64(x: F64): String iso^ => recover var s = String(31) var f = String(31) .> append(\"%g\") ifdef windows then @_snprintf[I32](s.cstring(), s.space(), f.cstring(), x) else @snprintf[I32](s.cstring(), s.space(), f.cstring(), x) end s .> recalc() end","title":"_to_string.pony"},{"location":"src/builtin/ambient_auth/","text":"primitive AmbientAuth \"\"\" This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. \"\"\" new _create() => None","title":"ambient_auth.pony"},{"location":"src/builtin/any/","text":"interface tag Any","title":"any.pony"},{"location":"src/builtin/array/","text":"class Array[A] is Seq[A] \"\"\" Contiguous, resizable memory to store elements of type A. ## Usage Creating an Array of String: ```pony let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 ``` Creating an empty Array of String, which may hold at least 10 elements before requesting more space: ```pony let array = Array[String](10) // array.size() == 0 // array.space() >= 10 ``` Accessing elements can be done via the `apply(i: USize): this->A ?` method. The provided index might be out of bounds so `apply` is partial and has to be called within a try-catch block or inside another partial method: ```pony let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end ``` Adding and removing elements to and from the end of the Array can be done via `push` and `pop` methods. You could treat the array as a LIFO stack using those methods: ```pony while (array.size() > 0) do let elem = array.pop()? // do something with element end ``` Modifying the Array can be done via `update`, `insert` and `delete` methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the `values` method: ```pony for element in array.values() do // do something with element end ``` ## Memory allocation Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The `space()` method returns the number of elements an Array can hold. The `size()` method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: | size | space | |------|-------| | 0 | 0 | | 1 | 8 | | 8 | 8 | | 9 | 16 | | 16 | 16 | | 17 | 32 | Call the `compact()` method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. \"\"\" var _size: USize var _alloc: USize var _ptr: Pointer[A] new create(len: USize = 0) => \"\"\" Create an array with zero elements, but space for len elements. \"\"\" _size = 0 if len > 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) else _alloc = 0 _ptr = Pointer[A] end new init(from: A^, len: USize) => \"\"\" Create an array of len elements, all initialised to the given value. \"\"\" _size = len if len > 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) var i: USize = 0 while i < len do _ptr._update(i, from) i = i + 1 end else _alloc = 0 _ptr = Pointer[A] end new from_cpointer(ptr: Pointer[A], len: USize, alloc: USize = 0) => \"\"\" Create an array from a C-style pointer and length. The contents are not copied. \"\"\" if ptr.is_null() then _size = 0 _alloc = 0 else _size = len if alloc > len then _alloc = alloc else _alloc = len end end _ptr = ptr fun _copy_to( ptr: Pointer[this->A!], copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) => \"\"\" Copy copy_len elements from this to that at specified offsets. \"\"\" _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[A] tag => \"\"\" Return the underlying C-style pointer. \"\"\" _ptr._offset(offset) fun size(): USize => \"\"\" The number of elements in the array. \"\"\" _size fun space(): USize => \"\"\" The available space in the array. \"\"\" _alloc fun ref reserve(len: USize) => \"\"\" Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. \"\"\" if _alloc < len then _alloc = len.next_pow2().max(len).max(8) _ptr = _ptr._realloc(_alloc) end fun box _element_size(): USize => \"\"\" Element size in bytes for an element. \"\"\" _ptr._element_size() fun ref compact() => \"\"\" Try to remove unused space, making it available for garbage collection. The request may be ignored. \"\"\" if _size <= (512 / _ptr._element_size()) then if _size.next_pow2() != _alloc.next_pow2() then _alloc = _size.next_pow2() let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end elseif _size < _alloc then _alloc = _size let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end fun ref undefined[B: (A & Real[B] val & Number) = A](len: USize) => \"\"\" Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. \"\"\" reserve(len) _size = len fun box read_u8[B: (A & Real[B] val & U8) = A](offset: USize): U8 ? => \"\"\" Reads a U8 from offset. This is only allowed for an array of U8s. \"\"\" if offset < _size then _ptr._offset(offset)._convert[U8]()._apply(0) else error end fun box read_u16[B: (A & Real[B] val & U8) = A](offset: USize): U16 ? => \"\"\" Reads a U16 from offset. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) <= _size then _ptr._offset(offset)._convert[U16]()._apply(0) else error end fun box read_u32[B: (A & Real[B] val & U8) = A](offset: USize): U32 ? => \"\"\" Reads a U32 from offset. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) <= _size then _ptr._offset(offset)._convert[U32]()._apply(0) else error end fun box read_u64[B: (A & Real[B] val & U8) = A](offset: USize): U64 ? => \"\"\" Reads a U64 from offset. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) <= _size then _ptr._offset(offset)._convert[U64]()._apply(0) else error end fun box read_u128[B: (A & Real[B] val & U8) = A](offset: USize): U128 ? => \"\"\" Reads a U128 from offset. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) <= _size then _ptr._offset(offset)._convert[U128]()._apply(0) else error end fun apply(i: USize): this->A ? => \"\"\" Get the i-th element, raising an error if the index is out of bounds. \"\"\" if i < _size then _ptr._apply(i) else error end fun ref update_u8[B: (A & Real[B] val & U8) = A](offset: USize, value: U8): U8 ? => \"\"\" Write a U8 at offset. This is only allowed for an array of U8s. \"\"\" if offset < _size then _ptr._offset(offset)._convert[U8]()._update(0, value) else error end fun ref update_u16[B: (A & Real[B] val & U8) = A](offset: USize, value: U16): U16 ? => \"\"\" Write a U16 at offset. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) <= _size then _ptr._offset(offset)._convert[U16]()._update(0, value) else error end fun ref update_u32[B: (A & Real[B] val & U8) = A](offset: USize, value: U32): U32 ? => \"\"\" Write a U32 at offset. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) <= _size then _ptr._offset(offset)._convert[U32]()._update(0, value) else error end fun ref update_u64[B: (A & Real[B] val & U8) = A](offset: USize, value: U64): U64 ? => \"\"\" Write a U64 at offset. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) <= _size then _ptr._offset(offset)._convert[U64]()._update(0, value) else error end fun ref update_u128[B: (A & Real[B] val & U8) = A](offset: USize, value: U128): U128 ? => \"\"\" Write a U128 at offset. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) <= _size then _ptr._offset(offset)._convert[U128]()._update(0, value) else error end fun ref update(i: USize, value: A): A^ ? => \"\"\" Change the i-th element, raising an error if the index is out of bounds. \"\"\" if i < _size then _ptr._update(i, consume value) else error end fun ref insert(i: USize, value: A) ? => \"\"\" Insert an element into the array. Elements after this are moved up by one index, extending the array. When inserting right beyond the last element, at index `this.size()`, the element will be appended, similar to `push()`, an insert at index `0` prepends the value to the array. An insert into an index beyond `this.size()` raises an error. ```pony let array = Array[U8](4) // [] array.insert(0, 0xDE)? // prepend: [0xDE] array.insert(array.size(), 0xBE)? // append: [0xDE; 0xBE] array.insert(1, 0xAD)? // insert: [0xDE; 0xAD; 0xBE] array.insert(array.size() + 1, 0xEF)? // error ``` \"\"\" if i <= _size then reserve(_size + 1) _ptr._offset(i)._insert(1, _size - i) _ptr._update(i, consume value) _size = _size + 1 else error end fun ref delete(i: USize): A^ ? => \"\"\" Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. \"\"\" if i < _size then _size = _size - 1 _ptr._offset(i)._delete(1, _size - i) else error end fun ref truncate(len: USize) => \"\"\" Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. \"\"\" _size = _size.min(len) fun ref trim_in_place(from: USize = 0, to: USize = -1) => \"\"\" Trim the array to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new array nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this array and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[A] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): Array[A] val => \"\"\" Return a shared portion of this array, covering `from` until `to`. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' > 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop[B: (A & Any #send) = A](split_point: USize): (Array[A] iso^, Array[A] iso^) => \"\"\" Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements. The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below: ```pony class Example var other: (Example | None) = None let arr: Array[Example] iso = recover let obj1 = Example let obj2 = Example obj1.other = obj2 obj2.other = obj1 [obj1; obj2] end ``` \"\"\" let start_ptr = cpointer(split_point) let size' = _size - _size.min(split_point) let alloc = _alloc - _size.min(split_point) trim_in_place(0, split_point) let right = recover if size' > 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume this, consume right) fun iso unchop(b: Array[A] iso): ((Array[A] iso^, Array[A] iso^) | Array[A] iso^) => \"\"\" Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. \"\"\" if _size == 0 then return consume b end if b.size() == 0 then return consume this end (let unchoppable, let a_left) = if (_size == _alloc) and (cpointer(_size) == b.cpointer()) then (true, true) elseif (b.size() == b.space()) and (b.cpointer(b.size()) == cpointer()) then (true, false) else (false, false) end if not unchoppable then return (consume this, consume b) end if a_left then _alloc = _alloc + b._alloc _size = _size + b._size consume this else b._alloc = b._alloc + _alloc b._size = b._size + _size consume b end fun ref copy_from[B: (A & Real[B] val & U8) = A]( src: Array[U8] box, src_idx: USize, dst_idx: USize, len: USize) => \"\"\" Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. \"\"\" reserve(dst_idx + len) src._ptr._offset(src_idx)._copy_to(_ptr._convert[U8]()._offset(dst_idx), len) if _size < (dst_idx + len) then _size = dst_idx + len end fun copy_to( dst: Array[this->A!], src_idx: USize, dst_idx: USize, len: USize) => \"\"\" Copy len elements from this(src_idx) to dst(dst_idx). \"\"\" dst.reserve(dst_idx + len) _ptr._offset(src_idx)._copy_to(dst._ptr._offset(dst_idx), len) if dst._size < (dst_idx + len) then dst._size = dst_idx + len end fun ref remove(i: USize, n: USize) => \"\"\" Remove n elements from the array, beginning at index i. \"\"\" if i < _size then let count = n.min(_size - i) _size = _size - count _ptr._offset(i)._delete(count, _size - i) end fun ref clear() => \"\"\" Remove all elements from the array. \"\"\" _size = 0 fun ref push_u8[B: (A & Real[B] val & U8) = A](value: U8) => \"\"\" Add a U8 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u8_bytes = U8(0).bytewidth() reserve(_size + u8_bytes) _ptr._offset(_size)._convert[U8]()._update(0, value) _size = _size + u8_bytes fun ref push_u16[B: (A & Real[B] val & U8) = A](value: U16) => \"\"\" Add a U16 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() reserve(_size + u16_bytes) _ptr._offset(_size)._convert[U16]()._update(0, value) _size = _size + u16_bytes fun ref push_u32[B: (A & Real[B] val & U8) = A](value: U32) => \"\"\" Add a U32 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() reserve(_size + u32_bytes) _ptr._offset(_size)._convert[U32]()._update(0, value) _size = _size + u32_bytes fun ref push_u64[B: (A & Real[B] val & U8) = A](value: U64) => \"\"\" Add a U64 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() reserve(_size + u64_bytes) _ptr._offset(_size)._convert[U64]()._update(0, value) _size = _size + u64_bytes fun ref push_u128[B: (A & Real[B] val & U8) = A](value: U128) => \"\"\" Add a U128 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() reserve(_size + u128_bytes) _ptr._offset(_size)._convert[U128]()._update(0, value) _size = _size + u128_bytes fun ref push(value: A) => \"\"\" Add an element to the end of the array. \"\"\" reserve(_size + 1) _ptr._update(_size, consume value) _size = _size + 1 fun ref pop(): A^ ? => \"\"\" Remove an element from the end of the array. The removed element is returned. \"\"\" delete(_size - 1)? fun ref unshift(value: A) => \"\"\" Add an element to the beginning of the array. \"\"\" try insert(0, consume value)? end fun ref shift(): A^ ? => \"\"\" Remove an element from the beginning of the array. The removed element is returned. \"\"\" delete(0)? fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) => \"\"\" Append the elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) var n = USize(0) try while n < copy_len do _ptr._update(_size + n, seq(offset + n)?) n = n + 1 end end _size = _size + n fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated elements to the end of the array, starting from the given offset. \"\"\" var n = USize(0) try while n < offset do if iter.has_next() then iter.next()? else return end n = n + 1 end end n = 0 // If a concrete len is specified, we take the caller at their word // and reserve that much space, even though we can't verify that the // iterator actually has that many elements available. Reserving ahead // of time lets us take a fast path of direct pointer access. if len != -1 then reserve(_size + len) try while n < len do if iter.has_next() then _ptr._update(_size + n, iter.next()?) else break end n = n + 1 end end _size = _size + n else try while n < len do if iter.has_next() then push(iter.next()?) else break end n = n + 1 end end end fun find( value: A!, offset: USize = 0, nth: USize = 0, predicate: {(box->A!, box->A!): Bool} val = {(l, r) => l is r }) : USize ? => \"\"\" Find the `nth` appearance of `value` from the beginning of the array, starting at `offset` and examining higher indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of `value` found, and uses object identity for comparison. \"\"\" var i = offset var n = USize(0) while i < _size do if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end i = i + 1 end error fun contains( value: A!, predicate: {(box->A!, box->A!): Bool} val = {(l: box->A!, r: box->A!): Bool => l is r }) : Bool => \"\"\" Returns true if the array contains `value`, false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as `{(l, r) => l == r}`. \"\"\" var i = USize(0) while i < _size do if predicate(_ptr._apply(i), value) then return true end i = i + 1 end false fun rfind( value: A!, offset: USize = -1, nth: USize = 0, predicate: {(box->A!, box->A!): Bool} val = {(l: box->A!, r: box->A!): Bool => l is r }) : USize ? => \"\"\" Find the `nth` appearance of `value` from the end of the array, starting at `offset` and examining lower indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of `value` found, and uses object identity for comparison. \"\"\" if _size > 0 then var i = if offset >= _size then _size - 1 else offset end var n = USize(0) repeat if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end until (i = i - 1) == 0 end end error fun clone(): Array[this->A!]^ => \"\"\" Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. \"\"\" let out = Array[this->A!](_size) _ptr._copy_to(out._ptr, _size) out._size = _size out fun slice( from: USize = 0, to: USize = -1, step: USize = 1) : Array[this->A!]^ => \"\"\" Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. \"\"\" let out = Array[this->A!] let last = _size.min(to) let len = last - from if (last > from) and (step > 0) then out.reserve((len + (step - 1)) / step) if step == 1 then copy_to(out, from, 0, len) else try var i = from while i < last do out.push(this(i)?) i = i + step end end end end out fun permute(indices: Iterator[USize]): Array[this->A!]^ ? => \"\"\" Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. \"\"\" let out = Array[this->A!] for i in indices do out.push(this(i)?) end out fun reverse(): Array[this->A!]^ => \"\"\" Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. \"\"\" clone() .> reverse_in_place() fun ref reverse_in_place() => \"\"\" Reverse the array in place. \"\"\" if _size > 1 then var i: USize = 0 var j = _size - 1 while i < j do let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, x) i = i + 1 j = j - 1 end end fun ref swap_elements(i: USize, j: USize) ? => \"\"\" Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. \"\"\" if (i >= _size) or (j >= _size) then error end let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, consume x) fun keys(): ArrayKeys[A, this->Array[A]]^ => \"\"\" Return an iterator over the indices in the array. \"\"\" ArrayKeys[A, this->Array[A]](this) fun values(): ArrayValues[A, this->Array[A]]^ => \"\"\" Return an iterator over the values in the array. \"\"\" ArrayValues[A, this->Array[A]](this) fun pairs(): ArrayPairs[A, this->Array[A]]^ => \"\"\" Return an iterator over the (index, value) pairs in the array. \"\"\" ArrayPairs[A, this->Array[A]](this) class ArrayKeys[A, B: Array[A] #read] is Iterator[USize] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): USize => if _i < _array.size() then _i = _i + 1 else _i end class ArrayValues[A, B: Array[A] #read] is Iterator[B->A] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): B->A ? => _array(_i = _i + 1)? fun ref rewind(): ArrayValues[A, B] => _i = 0 this class ArrayPairs[A, B: Array[A] #read] is Iterator[(USize, B->A)] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): (USize, B->A) ? => (_i, _array(_i = _i + 1)?)","title":"array.pony"},{"location":"src/builtin/asio_event/","text":"type AsioEventID is Pointer[AsioEvent] tag interface tag AsioEventNotify be _event_notify(event: AsioEventID, flags: U32, arg: U32) primitive AsioEvent \"\"\" Functions for asynchronous event notification. \"\"\" fun none(): AsioEventID => \"\"\" An empty event. \"\"\" AsioEventID fun readable(flags: U32): Bool => \"\"\" Returns true if the flags contain the readable flag. \"\"\" (flags and (1 << 0)) != 0 fun writeable(flags: U32): Bool => \"\"\" Returns true if the flags contain the writeable flag. \"\"\" (flags and (1 << 1)) != 0 fun disposable(flags: U32): Bool => \"\"\" Returns true if the event should be disposed of. \"\"\" flags == 0 fun oneshotable(flags: U32): Bool => \"\"\" Returns true if the flags contain the oneshot flag. \"\"\" (flags and (1 << 8)) != 0 fun dispose(): U32 => 0 fun read(): U32 => 1 << 0 fun write(): U32 => 1 << 1 fun timer(): U32 => 1 << 2 fun signal(): U32 => 1 << 3 fun read_write(): U32 => read() or write() fun oneshot(): U32 => 1 << 8 fun read_write_oneshot(): U32 => read() or write() or oneshot()","title":"asio_event.pony"},{"location":"src/builtin/bool/","text":"primitive Bool is Stringable new create(from: Bool) => from fun eq(y: Bool): Bool => this == y fun ne(y: Bool): Bool => this != y fun op_and(y: Bool): Bool => this and y fun op_or(y: Bool): Bool => this or y fun op_xor(y: Bool): Bool => this xor y fun op_not(): Bool => not this fun string(): String iso^ => (if this then \"true\" else \"false\" end).string()","title":"bool.pony"},{"location":"src/builtin/compare/","text":"primitive Less is Equatable[Compare] fun string(): String iso^ => \"Less\".string() primitive Equal is Equatable[Compare] fun string(): String iso^ => \"Equal\".string() primitive Greater is Equatable[Compare] fun string(): String iso^ => \"Greater\".string() type Compare is (Less | Equal | Greater) interface HasEq[A] fun eq(that: box->A): Bool interface Equatable[A: Equatable[A] #read] fun eq(that: box->A): Bool => this is that fun ne(that: box->A): Bool => not eq(that) interface Comparable[A: Comparable[A] #read] is Equatable[A] fun lt(that: box->A): Bool fun le(that: box->A): Bool => lt(that) or eq(that) fun ge(that: box->A): Bool => not lt(that) fun gt(that: box->A): Bool => not le(that) fun compare(that: box->A): Compare => if eq(that) then Equal elseif lt(that) then Less else Greater end","title":"compare.pony"},{"location":"src/builtin/disposable_actor/","text":"interface tag DisposableActor \"\"\" An interface used to asynchronously dispose of an actor. \"\"\" be dispose()","title":"disposable_actor.pony"},{"location":"src/builtin/do_not_optimise/","text":"primitive DoNotOptimise \"\"\" Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. \"\"\" fun apply[A](obj: A) => \"\"\" Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. \"\"\" compile_intrinsic fun observe() => \"\"\" Prevent the compiler from optimising out writes to an object marked by the apply function. \"\"\" compile_intrinsic","title":"do_not_optimise.pony"},{"location":"src/builtin/env/","text":"class val Env \"\"\" An environment holds the command line and other values injected into the program by default by the runtime. \"\"\" let root: (AmbientAuth | None) \"\"\" The root capability. Can be `None` for artificially constructed `Env` instances. \"\"\" let input: InputStream \"\"\" Stdin represented as an actor. \"\"\" let out: OutStream \"\"\"Stdout\"\"\" let err: OutStream \"\"\"Stderr\"\"\" let args: Array[String] val \"\"\"The command line used to start the program.\"\"\" let vars: Array[String] val \"\"\"The program's environment variables.\"\"\" let exitcode: {(I32)} val \"\"\" Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. \"\"\" new _create( argc: U32, argv: Pointer[Pointer[U8]] val, envp: Pointer[Pointer[U8]] val) => \"\"\" Builds an environment from the command line. This is done before the Main actor is created. \"\"\" root = AmbientAuth._create() @pony_os_stdout_setup[None]() input = Stdin._create(@pony_os_stdin_setup[Bool]()) out = StdStream._out() err = StdStream._err() args = _strings_from_pointers(argv, argc.usize()) vars = _strings_from_pointers(envp, _count_strings(envp)) exitcode = {(code: I32) => @pony_exitcode[None](code) } new val create( root': (AmbientAuth | None), input': InputStream, out': OutStream, err': OutStream, args': Array[String] val, vars': Array[String] val, exitcode': {(I32)} val) => \"\"\" Build an artificial environment. A root capability may be supplied. \"\"\" root = root' input = input' out = out' err = err' args = args' vars = vars' exitcode = exitcode' fun tag _count_strings(data: Pointer[Pointer[U8]] val): USize => if data.is_null() then return 0 end var i: USize = 0 while let entry = data._apply(i) not entry.is_null() do i = i + 1 end i fun tag _strings_from_pointers( data: Pointer[Pointer[U8]] val, len: USize) : Array[String] iso^ => let array = recover Array[String](len) end var i: USize = 0 while i < len do let entry = data._apply(i = i + 1) array.push(recover String.copy_cstring(entry) end) end array","title":"env.pony"},{"location":"src/builtin/float/","text":"primitive F32 is FloatingPoint[F32] new create(value: F32 = 0) => value new pi() => 3.14159265358979323846 new e() => 2.71828182845904523536 new _nan() => compile_intrinsic new _inf(negative: Bool) => compile_intrinsic new from_bits(i: U32) => compile_intrinsic fun bits(): U32 => compile_intrinsic new from[B: (Number & Real[B] val)](a: B) => a.f32() new min_value() => \"\"\" Minimum negative value representable. \"\"\" from_bits(0xFF7FFFFF) new max_value() => \"\"\" Maximum positive value representable. \"\"\" from_bits(0x7F7FFFFF) new min_normalised() => \"\"\" Minimum positive value representable at full precision (ie a normalised number). \"\"\" from_bits(0x00800000) new epsilon() => \"\"\" Minimum positive value such that (1 + epsilon) != 1. \"\"\" from_bits(0x34000000) fun tag radix(): U8 => \"\"\" Exponent radix. \"\"\" 2 fun tag precision2(): U8 => \"\"\" Mantissa precision in bits. \"\"\" 24 fun tag precision10(): U8 => \"\"\" Mantissa precision in decimal digits. \"\"\" 6 fun tag min_exp2(): I16 => \"\"\" Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -125 fun tag min_exp10(): I16 => \"\"\" Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -37 fun tag max_exp2(): I16 => \"\"\" Maximum exponent value such that (2^exponent) - 1 is representable. \"\"\" 128 fun tag max_exp10(): I16 => \"\"\" Maximum exponent value such that (10^exponent) - 1 is representable. \"\"\" 38 fun abs(): F32 => @\"llvm.fabs.f32\"[F32](this) fun ceil(): F32 => @\"llvm.ceil.f32\"[F32](this) fun floor(): F32 => @\"llvm.floor.f32\"[F32](this) fun round(): F32 => @\"llvm.round.f32\"[F32](this) fun trunc(): F32 => @\"llvm.trunc.f32\"[F32](this) fun min(y: F32): F32 => if this < y then this else y end fun max(y: F32): F32 => if this > y then this else y end fun fld(y: F32): F32 => (this / y).floor() fun fld_unsafe(y: F32): F32 => (this /~ y).floor() fun mod(y: F32): F32 => let r = this % y if r == F32(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun mod_unsafe(y: F32): F32 => let r = this %~ y if r == F32(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun finite(): Bool => \"\"\" Check whether this number is finite, ie not +/-infinity and not NaN. \"\"\" // True if exponent is not all 1s (bits() and 0x7F800000) != 0x7F800000 fun infinite(): Bool => \"\"\" Check whether this number is +/-infinity \"\"\" // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) == 0) // mantissa fun nan(): Bool => \"\"\" Check whether this number is NaN. \"\"\" // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) != 0) // mantissa fun ldexp(x: F32, exponent: I32): F32 => @ldexpf[F32](x, exponent) fun frexp(): (F32, U32) => var exponent: U32 = 0 var mantissa = @frexp[F64](f64(), addressof exponent) (mantissa.f32(), exponent) fun log(): F32 => @\"llvm.log.f32\"[F32](this) fun log2(): F32 => @\"llvm.log2.f32\"[F32](this) fun log10(): F32 => @\"llvm.log10.f32\"[F32](this) fun logb(): F32 => @logbf[F32](this) fun pow(y: F32): F32 => @\"llvm.pow.f32\"[F32](this, y) fun powi(y: I32): F32 => ifdef windows then pow(y.f32()) else @\"llvm.powi.f32\"[F32](this, y) end fun sqrt(): F32 => if this < 0.0 then _nan() else @\"llvm.sqrt.f32\"[F32](this) end fun sqrt_unsafe(): F32 => \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" @\"llvm.sqrt.f32\"[F32](this) fun cbrt(): F32 => @cbrtf[F32](this) fun exp(): F32 => @\"llvm.exp.f32\"[F32](this) fun exp2(): F32 => @\"llvm.exp2.f32\"[F32](this) fun cos(): F32 => @\"llvm.cos.f32\"[F32](this) fun sin(): F32 => @\"llvm.sin.f32\"[F32](this) fun tan(): F32 => @tanf[F32](this) fun cosh(): F32 => @coshf[F32](this) fun sinh(): F32 => @sinhf[F32](this) fun tanh(): F32 => @tanhf[F32](this) fun acos(): F32 => @acosf[F32](this) fun asin(): F32 => @asinf[F32](this) fun atan(): F32 => @atanf[F32](this) fun atan2(y: F32): F32 => @atan2f[F32](this, y) fun acosh(): F32 => @acoshf[F32](this) fun asinh(): F32 => @asinhf[F32](this) fun atanh(): F32 => @atanhf[F32](this) fun copysign(sign: F32): F32 => @\"llvm.copysign.f32\"[F32](this, sign) fun hash(): USize => bits().hash() fun hash64(): U64 => bits().hash64() fun i128(): I128 => f64().i128() fun u128(): U128 => f64().u128() fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().i128_unsafe() fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().u128_unsafe() primitive F64 is FloatingPoint[F64] new create(value: F64 = 0) => value new pi() => 3.14159265358979323846 new e() => 2.71828182845904523536 new _nan() => compile_intrinsic new _inf(negative: Bool) => compile_intrinsic new from_bits(i: U64) => compile_intrinsic fun bits(): U64 => compile_intrinsic new from[B: (Number & Real[B] val)](a: B) => a.f64() new min_value() => \"\"\" Minimum negative value representable. \"\"\" from_bits(0xFFEF_FFFF_FFFF_FFFF) new max_value() => \"\"\" Maximum positive value representable. \"\"\" from_bits(0x7FEF_FFFF_FFFF_FFFF) new min_normalised() => \"\"\" Minimum positive value representable at full precision (ie a normalised number). \"\"\" from_bits(0x0010_0000_0000_0000) new epsilon() => \"\"\" Minimum positive value such that (1 + epsilon) != 1. \"\"\" from_bits(0x3CB0_0000_0000_0000) fun tag radix(): U8 => \"\"\" Exponent radix. \"\"\" 2 fun tag precision2(): U8 => \"\"\" Mantissa precision in bits. \"\"\" 53 fun tag precision10(): U8 => \"\"\" Mantissa precision in decimal digits. \"\"\" 15 fun tag min_exp2(): I16 => \"\"\" Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -1021 fun tag min_exp10(): I16 => \"\"\" Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -307 fun tag max_exp2(): I16 => \"\"\" Maximum exponent value such that (2^exponent) - 1 is representable. \"\"\" 1024 fun tag max_exp10(): I16 => \"\"\" Maximum exponent value such that (10^exponent) - 1 is representable. \"\"\" 308 fun abs(): F64 => @\"llvm.fabs.f64\"[F64](this) fun ceil(): F64 => @\"llvm.ceil.f64\"[F64](this) fun floor(): F64 => @\"llvm.floor.f64\"[F64](this) fun round(): F64 => @\"llvm.round.f64\"[F64](this) fun trunc(): F64 => @\"llvm.trunc.f64\"[F64](this) fun min(y: F64): F64 => if this < y then this else y end fun max(y: F64): F64 => if this > y then this else y end fun fld(y: F64): F64 => (this / y).floor() fun fld_unsafe(y: F64): F64 => (this /~ y).floor() fun mod(y: F64): F64 => let r = this.rem(y) if r == F64(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun mod_unsafe(y: F64): F64 => let r = this %~ y if r == F64(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun finite(): Bool => \"\"\" Check whether this number is finite, ie not +/-infinity and not NaN. \"\"\" // True if exponent is not all 1s (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000 fun infinite(): Bool => \"\"\" Check whether this number is +/-infinity \"\"\" // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0) // mantissa fun nan(): Bool => \"\"\" Check whether this number is NaN. \"\"\" // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0) // mantissa fun ldexp(x: F64, exponent: I32): F64 => @ldexp[F64](x, exponent) fun frexp(): (F64, U32) => var exponent: U32 = 0 var mantissa = @frexp[F64](this, addressof exponent) (mantissa, exponent) fun log(): F64 => @\"llvm.log.f64\"[F64](this) fun log2(): F64 => @\"llvm.log2.f64\"[F64](this) fun log10(): F64 => @\"llvm.log10.f64\"[F64](this) fun logb(): F64 => @logb[F64](this) fun pow(y: F64): F64 => @\"llvm.pow.f64\"[F64](this, y) fun powi(y: I32): F64 => ifdef windows then pow(y.f64()) else @\"llvm.powi.f64\"[F64](this, y) end fun sqrt(): F64 => if this < 0.0 then _nan() else @\"llvm.sqrt.f64\"[F64](this) end fun sqrt_unsafe(): F64 => \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" @\"llvm.sqrt.f64\"[F64](this) fun cbrt(): F64 => @cbrt[F64](this) fun exp(): F64 => @\"llvm.exp.f64\"[F64](this) fun exp2(): F64 => @\"llvm.exp2.f64\"[F64](this) fun cos(): F64 => @\"llvm.cos.f64\"[F64](this) fun sin(): F64 => @\"llvm.sin.f64\"[F64](this) fun tan(): F64 => @tan[F64](this) fun cosh(): F64 => @cosh[F64](this) fun sinh(): F64 => @sinh[F64](this) fun tanh(): F64 => @tanh[F64](this) fun acos(): F64 => @acos[F64](this) fun asin(): F64 => @asin[F64](this) fun atan(): F64 => @atan[F64](this) fun atan2(y: F64): F64 => @atan2[F64](this, y) fun acosh(): F64 => @acosh[F64](this) fun asinh(): F64 => @asinh[F64](this) fun atanh(): F64 => @atanh[F64](this) fun copysign(sign: F64): F64 => @\"llvm.copysign.f64\"[F64](this, sign) fun hash(): USize => bits().hash() fun hash64(): U64 => bits().hash64() fun i128(): I128 => if this > I128.max_value().f64() then return I128.max_value() elseif this < I128.min_value().f64() then return I128.min_value() end let bit = bits() let high = (bit >> 32).u32() let ex = ((high and 0x7FF00000) >> 20) - 1023 if ex < 0 then return 0 end let s = ((high and 0x80000000) >> 31).i128() var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).i128() let ex' = ex.u128() if ex' > 52 then r = r << (ex' - 52) else r = r >> (52 - ex') end (r xor s) - s fun u128(): U128 => if this > U128.max_value().f64() then return U128.max_value() elseif this < U128.min_value().f64() then return U128.min_value() end let bit = bits() let high = (bit >> 32).u32() let ex = ((high and 0x7FF00000) >> 20) - 1023 if (ex < 0) or ((high and 0x80000000) != 0) then return 0 end var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).u128() let ex' = ex.u128() if ex' > 52 then r = r << (ex' - 52) else r = r >> (52 - ex') end r.u128() fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" i128() fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" u128() type Float is (F32 | F64)","title":"float.pony"},{"location":"src/builtin/iterator/","text":"interface Iterator[A] \"\"\" Iterators generate a series of values, one value at a time on each call to `next()`. An Iterator is considered exhausted, once its `has_next()` method returns `false`. Thus every call to `next()` should be preceeded with a call to `has_next()` to check for exhaustiveness. ## Usage Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: ```pony while iterator.has_next() do let elem = iterator.next()? // do something with elem end ``` The `For`-loop provides a more concise way of iteration: ```pony for elem in iterator do // do something with elem end ``` Iteration using `While` is more flexible as it allows to continue iterating if a call to `next()` errors. The `For`-loop does not allow this. ## Implementing Iterators Iterator implementations need to adhere to the following rules to be considered well-behaved: * If the Iterator is exhausted, `has_next()` needs to return `false`. * Once `has_next()` returned `false` it is not allowed to switch back to `true` (Unless the Iterator supports rewinding) * `has_next()` does not change its returned value if `next()` has not been called. That means, that between two calls to `next()` any number of calls to `has_next()` need to return the same value. (Unless the Iterator supports rewinding) * A call to `next()` erroring does not necessarily denote exhaustiveness. ### Example ```pony // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem ``` \"\"\" fun ref has_next(): Bool \"\"\" Returns `true` if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to `next()` is a valid part of this iterator. Returns `false` if this Iterator is exhausted. The behavior of `next()` after this function returned `false` is undefined, it might throw an error or return values which are not part of this Iterator. \"\"\" fun ref next(): A ? \"\"\" Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. \"\"\"","title":"iterator.pony"},{"location":"src/builtin/none/","text":"primitive None is Stringable fun string(): String iso^ => \"None\".string()","title":"none.pony"},{"location":"src/builtin/nullable_pointer/","text":"struct NullablePointer[A] \"\"\" A NullablePointer[A] is used to encode a possibly-null type. It should _only_ be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). \"\"\" new create(that: A) => \"\"\" This re-encodes the type of `that` from A to NullablePointer[A], allowing `that` to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for `that`. \"\"\" compile_intrinsic new none() => \"\"\" This returns a null pointer typed as a NullablePointer[A]. \"\"\" compile_intrinsic fun apply(): this->A ? => \"\"\" This re-encodes the type of `this` from NullablePointer[A] to A, allowing `this` to be assigned to a field of variable of type A. If `this` is a null pointer, an error is raised. \"\"\" compile_intrinsic fun is_none(): Bool => \"\"\" Returns true if `this` is null (ie apply would raise an error). \"\"\" compile_intrinsic","title":"nullable_pointer.pony"},{"location":"src/builtin/platform/","text":"primitive Platform fun bsd(): Bool => freebsd() or dragonfly() or openbsd() fun freebsd(): Bool => compile_intrinsic fun dragonfly(): Bool => compile_intrinsic fun openbsd(): Bool => compile_intrinsic fun linux(): Bool => compile_intrinsic fun osx(): Bool => compile_intrinsic fun posix(): Bool => bsd() or linux() or osx() fun windows(): Bool => compile_intrinsic fun x86(): Bool => compile_intrinsic fun arm(): Bool => compile_intrinsic fun lp64(): Bool => compile_intrinsic fun llp64(): Bool => compile_intrinsic fun ilp32(): Bool => compile_intrinsic fun bigendian(): Bool => compile_intrinsic fun littleendian(): Bool => compile_intrinsic fun native128(): Bool => compile_intrinsic fun debug(): Bool => compile_intrinsic","title":"platform.pony"},{"location":"src/builtin/pointer/","text":"struct Pointer[A] \"\"\" A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. \"\"\" new create() => \"\"\" A null pointer. \"\"\" compile_intrinsic new _alloc(len: USize) => \"\"\" Space for len instances of A. \"\"\" compile_intrinsic fun ref _realloc(len: USize): Pointer[A] => \"\"\" Keep the contents, but reserve space for len instances of A. \"\"\" compile_intrinsic fun tag _unsafe(): Pointer[A] ref => \"\"\" Unsafe change in reference capability. \"\"\" compile_intrinsic fun _convert[B](): this->Pointer[B] => \"\"\" Convert from Pointer[A] to Pointer[B]. \"\"\" compile_intrinsic fun _apply(i: USize): this->A => \"\"\" Retrieve index i. \"\"\" compile_intrinsic fun ref _update(i: USize, value: A!): A^ => \"\"\" Set index i and return the previous value. \"\"\" compile_intrinsic fun _offset(n: USize): this->Pointer[A] => \"\"\" Return a pointer to the n-th element. \"\"\" compile_intrinsic fun tag offset(n: USize): Pointer[A] tag => \"\"\" Return a tag pointer to the n-th element. \"\"\" _unsafe()._offset(n) fun tag _element_size(): USize => \"\"\" Return the size of a single element in an array of type A. \"\"\" compile_intrinsic fun ref _insert(n: USize, len: USize): Pointer[A] => \"\"\" Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. \"\"\" compile_intrinsic fun ref _delete(n: USize, len: USize): A^ => \"\"\" Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. \"\"\" compile_intrinsic fun _copy_to(that: Pointer[this->A!], n: USize): this->Pointer[A] => \"\"\" Copy n elements from this to that. \"\"\" compile_intrinsic fun tag usize(): USize => \"\"\" Convert the pointer into an integer. \"\"\" compile_intrinsic fun tag is_null(): Bool => \"\"\" Return true for a null pointer, false for anything else. \"\"\" compile_intrinsic fun tag eq(that: Pointer[A] tag): Bool => \"\"\" Return true if this address is that address. \"\"\" compile_intrinsic fun tag lt(that: Pointer[A] tag): Bool => \"\"\" Return true if this address is less than that address. \"\"\" compile_intrinsic fun tag ne(that: Pointer[A] tag): Bool => not eq(that) fun tag le(that: Pointer[A] tag): Bool => lt(that) or eq(that) fun tag ge(that: Pointer[A] tag): Bool => not lt(that) fun tag gt(that: Pointer[A] tag): Bool => not le(that) fun tag hash(): USize => \"\"\" Returns a hash of the address. \"\"\" usize().hash() fun tag hash64(): U64 => \"\"\" Returns a 64-bit hash of the address. \"\"\" usize().hash64()","title":"pointer.pony"},{"location":"src/builtin/read_seq/","text":"interface box ReadSeq[A] \"\"\" The readable interface of a sequence. \"\"\" fun size(): USize \"\"\" Returns the number of elements in the sequence. \"\"\" fun apply(i: USize): this->A ? \"\"\" Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. \"\"\" fun values(): Iterator[this->A]^ \"\"\" Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. \"\"\" interface box ReadElement[A] \"\"\" Used to show that a ReadSeq can return an element of a specific unmodified type. \"\"\" fun apply(i: USize): A ?","title":"read_seq.pony"},{"location":"src/builtin/real/","text":"trait val _ArithmeticConvertible fun i8(): I8 => compile_intrinsic fun i16(): I16 => compile_intrinsic fun i32(): I32 => compile_intrinsic fun i64(): I64 => compile_intrinsic fun i128(): I128 => compile_intrinsic fun ilong(): ILong => compile_intrinsic fun isize(): ISize => compile_intrinsic fun u8(): U8 => compile_intrinsic fun u16(): U16 => compile_intrinsic fun u32(): U32 => compile_intrinsic fun u64(): U64 => compile_intrinsic fun u128(): U128 => compile_intrinsic fun ulong(): ULong => compile_intrinsic fun usize(): USize => compile_intrinsic fun f32(): F32 => compile_intrinsic fun f64(): F64 => compile_intrinsic fun i8_unsafe(): I8 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i16_unsafe(): I16 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i32_unsafe(): I32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i64_unsafe(): I64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun ilong_unsafe(): ILong => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun isize_unsafe(): ISize => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u8_unsafe(): U8 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u16_unsafe(): U16 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u32_unsafe(): U32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u64_unsafe(): U64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun ulong_unsafe(): ULong => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun usize_unsafe(): USize => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic trait val Real[A: Real[A] val] is (Stringable & _ArithmeticConvertible & Comparable[A]) new val create(value: A) new val from[B: (Number & Real[B] val)](a: B) new val min_value() new val max_value() fun add(y: A): A => this + y fun sub(y: A): A => this - y fun mul(y: A): A => this * y fun div(y: A): A => \"\"\" Integer division, rounded towards zero. \"\"\" this / y fun divrem(y: A): (A, A) => (this / y, this % y) fun rem(y: A): A => \"\"\" Calculate the remainder after integer division, rounded towards zero (`div`). The result has the sign of the dividend. \"\"\" this % y fun neg(): A => -this fun fld(y: A): A \"\"\" Floored integer division, rounded towards negative infinity. \"\"\" fun mod(y: A): A \"\"\" Calculate the modulo after floored integer division, rounded towards negative infinity (`fld`). The result has the sign of the divisor. \"\"\" fun eq(y: box->A): Bool => this == y fun ne(y: box->A): Bool => this != y fun lt(y: box->A): Bool => this < y fun le(y: box->A): Bool => this <= y fun ge(y: box->A): Bool => this >= y fun gt(y: box->A): Bool => this > y fun min(y: A): A fun max(y: A): A fun hash(): USize => var x = usize() ifdef ilp32 then x = (not x) + (x << 15) x = x xor (x >> 12) x = x + (x << 2) x = x xor (x >> 4) x = (x + (x << 3)) + (x << 11) x = x xor (x >> 16) x else hash64().usize() end fun hash64(): U64 => var x = u64() x = (not x) + (x << 21) x = x xor (x >> 24) x = (x + (x << 3)) + (x << 8) x = x xor (x >> 14) x = (x + (x << 2)) + (x << 4) x = x xor (x >> 28) x = x + (x << 31) x fun _value(): A => compile_intrinsic trait val Integer[A: Integer[A] val] is Real[A] fun add_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this +~ y fun sub_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this -~ y fun mul_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this *~ y fun div_unsafe(y: A): A => \"\"\" Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" this /~ y fun divrem_unsafe(y: A): (A, A) => \"\"\" Calculates the quotient of this number and `y` and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" (this /~ y, this %~ y) fun rem_unsafe(y: A): A => \"\"\" Calculates the remainder of this number divided by `y`. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" this %~ y fun fld_unsafe(y: A): A \"\"\" Floored division, rounded towards negative infinity, as opposed to `div` which rounds towards zero. *Unsafe Operation* If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" fun mod_unsafe(y: A): A \"\"\" Calculates the modulo of this number after floored division by `y`. *Unsafe Operation.* If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" fun add_partial(y: A): A ? \"\"\" Add y to this number. If the operation overflows this function errors. \"\"\" fun sub_partial(y: A): A ? \"\"\" Subtract y from this number. If the operation overflows/underflows this function errors. \"\"\" fun mul_partial(y: A): A ? \"\"\" Multiply y with this number. If the operation overflows this function errors. \"\"\" fun div_partial(y: A): A ? \"\"\" Divides this number by `y`, rounds the result towards zero. If y is `0` or the operation overflows, this function errors. \"\"\" fun rem_partial(y: A): A ? \"\"\" Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is `0` or the operation overflows, this function errors. \"\"\" fun divrem_partial(y: A): (A, A) ? \"\"\" Divides this number by y and calculates the remainder of the operation. If y is `0` or the operation overflows, this function errors. \"\"\" fun fld_partial(y: A): A ? \"\"\" Floored integer division, rounded towards negative infinity. If y is `0` or the operation overflows, this function errors \"\"\" fun mod_partial(y: A): A ? \"\"\" Calculates the modulo of this number and `y` after floored division (`fld`). The result has the sign of the divisor. If y is `0` or the operation overflows, this function errors. \"\"\" fun neg_unsafe(): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" -~this fun addc(y: A): (A, Bool) \"\"\" Add `y` to this integer and return the result and a flag indicating overflow. \"\"\" fun subc(y: A): (A, Bool) \"\"\" Subtract `y` from this integer and return the result and a flag indicating overflow. \"\"\" fun mulc(y: A): (A, Bool) \"\"\" Multiply `y` with this integer and return the result and a flag indicating overflow. \"\"\" fun divc(y: A): (A, Bool) \"\"\" Divide this integer by `y` and return the result and a flag indicating overflow or division by zero. \"\"\" fun remc(y: A): (A, Bool) \"\"\" Calculate the remainder of this number divided by `y` and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. \"\"\" fun fldc(y: A): (A, Bool) \"\"\" Divide this integer by `y` and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. \"\"\" fun modc(y: A): (A, Bool) \"\"\" Calculate the modulo of this number after floored division by `y` and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. \"\"\" fun op_and(y: A): A => this and y fun op_or(y: A): A => this or y fun op_xor(y: A): A => this xor y fun op_not(): A => not this fun bit_reverse(): A \"\"\" Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). \"\"\" fun bswap(): A trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] fun abs(): B fun shl(y: B): A => this << y fun shr(y: B): A => this >> y fun shl_unsafe(y: B): A => \"\"\" Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. \"\"\" this <<~ y fun shr_unsafe(y: B): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this >>~ y fun popcount(): B fun clz(): B fun ctz(): B fun clz_unsafe(): B \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" fun ctz_unsafe(): B \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" fun bitwidth(): B fun bytewidth(): USize fun string(): String iso^ => _ToString._u64(abs().u64(), i64() < 0) trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] fun abs(): A fun shl(y: A): A => this << y fun shr(y: A): A => this >> y // both fld and mod behave the same as div and rem for unsigned integers fun fld(y: A): A => this / y fun fldc(y: A): (A, Bool) => this.divc(y) fun fld_partial(y: A): A ? => this.div_partial(y)? fun fld_unsafe(y: A): A => this.div_unsafe(y) fun mod(y: A): A => this % y fun modc(y: A): (A, Bool) => this.remc(y) fun mod_partial(y: A): A ? => this.rem_partial(y)? fun mod_unsafe(y: A): A => this.rem_unsafe(y) fun shl_unsafe(y: A): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this <<~ y fun shr_unsafe(y: A): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this >>~ y fun rotl(y: A): A => let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this << y') or (this >> (bitwidth() - y')) end fun rotr(y: A): A => let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this >> y') or (this << (bitwidth() - y')) end fun popcount(): A fun clz(): A fun ctz(): A fun clz_unsafe(): A \"\"\" Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. \"\"\" fun ctz_unsafe(): A \"\"\" Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. \"\"\" fun bitwidth(): A fun bytewidth(): USize fun string(): String iso^ => _ToString._u64(u64(), false) trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] new val min_normalised() new val epsilon() fun tag radix(): U8 fun tag precision2(): U8 fun tag precision10(): U8 fun tag min_exp2(): I16 fun tag min_exp10(): I16 fun tag max_exp2(): I16 fun tag max_exp10(): I16 fun add_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this +~ y fun sub_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this -~ y fun mul_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this *~ y fun div_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this /~ y fun fld_unsafe(y: A): A \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" fun divrem_unsafe(y: A): (A, A) => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" (this /~ y, this %~ y) fun rem_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this %~ y fun mod_unsafe(y: A): A \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" fun neg_unsafe(): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" -~this fun eq_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this ==~ y fun ne_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this !=~ y fun lt_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this <~ y fun le_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this <=~ y fun ge_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this >=~ y fun gt_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this >~ y fun abs(): A fun ceil(): A fun floor(): A fun round(): A fun trunc(): A fun finite(): Bool fun infinite(): Bool fun nan(): Bool fun ldexp(x: A, exponent: I32): A fun frexp(): (A, U32) fun log(): A fun log2(): A fun log10(): A fun logb(): A fun pow(y: A): A fun powi(y: I32): A fun sqrt(): A fun sqrt_unsafe(): A \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" fun cbrt(): A fun exp(): A fun exp2(): A fun cos(): A fun sin(): A fun tan(): A fun cosh(): A fun sinh(): A fun tanh(): A fun acos(): A fun asin(): A fun atan(): A fun atan2(y: A): A fun acosh(): A fun asinh(): A fun atanh(): A fun copysign(sign: A): A fun string(): String iso^ => _ToString._f64(f64()) type Number is (Int | Float) type Int is (Signed | Unsigned)","title":"real.pony"},{"location":"src/builtin/runtime_options/","text":"struct RuntimeOptions \"\"\" Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program. The way this is done is by adding the following function to your `Main` actor: ``` fun @runtime_override_defaults(rto: RuntimeOptions) => ``` and then overriding the fields of `rto` (the `RuntimeOptions` instance) as needed. NOTE: Command line arguments still any values set via `@runtime_override_defaults`. The following example overrides the `--ponyhelp` argument to default it to `true` instead of `false` causing the compiled program to always display the Pony runtime help: ``` actor Main new create(env: Env) => env.out.print(\"Hello, world.\") fun @runtime_override_defaults(rto: RuntimeOptions) => rto.ponyhelp = true ``` \"\"\" /* NOTE: if you change any of the field docstrings, update `options.h` in * the runtime to keep them in sync. */ var ponymaxthreads: U32 = 0 \"\"\" Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available. \"\"\" var ponyminthreads: U32 = 0 \"\"\" Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available. \"\"\" var ponynoscale: Bool = false \"\"\" Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads. \"\"\" var ponysuspendthreshold: U32 = 0 \"\"\" Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms. \"\"\" var ponycdinterval: U32 = 100 \"\"\" Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms. \"\"\" var ponygcinitial: USize = 14 \"\"\" Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14. \"\"\" var ponygcfactor: F64 = 2.0 \"\"\" After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0. \"\"\" var ponynoyield: Bool = false \"\"\" Do not yield the CPU when no work is available. \"\"\" var ponynoblock: Bool = false \"\"\" Do not send block messages to the cycle detector. \"\"\" var ponypin: Bool = false \"\"\" Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if `--ponypinasio` is set. \"\"\" var ponypinasio: Bool = false \"\"\" Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires `--ponypin` to be set to have any effect. \"\"\" var ponyversion: Bool = false \"\"\" Print the version of the compiler and exit. \"\"\" var ponyhelp: Bool = false \"\"\" Print the runtime usage options and exit. \"\"\"","title":"runtime_options.pony"},{"location":"src/builtin/seq/","text":"interface Seq[A] \"\"\" A sequence of elements. \"\"\" new create(len: USize = 0) \"\"\" Create a sequence, reserving space for len elements. \"\"\" fun ref reserve(len: USize) \"\"\" Reserve space for len elements. \"\"\" fun size(): USize \"\"\" Returns the number of elements in the sequence. \"\"\" fun apply(i: USize): this->A ? \"\"\" Returns the i-th element of the sequence. Raises an error if the index is out of bounds. \"\"\" fun ref update(i: USize, value: A): A^ ? \"\"\" Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. \"\"\" fun ref clear() \"\"\" Removes all elements from the sequence. \"\"\" fun ref push(value: A) \"\"\" Adds an element to the end of the sequence. \"\"\" fun ref pop(): A^ ? \"\"\" Removes an element from the end of the sequence. \"\"\" fun ref unshift(value: A) \"\"\" Adds an element to the beginning of the sequence. \"\"\" fun ref shift(): A^ ? \"\"\" Removes an element from the beginning of the sequence. \"\"\" fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) \"\"\" Add len elements to the end of the list, starting from the given offset. \"\"\" fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) \"\"\" Add len iterated elements to the end of the list, starting from the given offset. \"\"\" fun ref truncate(len: USize) \"\"\" Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. \"\"\" fun values(): Iterator[this->A]^ \"\"\" Returns an iterator over the elements of the sequence. \"\"\"","title":"seq.pony"},{"location":"src/builtin/signed/","text":"primitive I8 is SignedInteger[I8, U8] new create(value: I8) => value new from[A: (Number & Real[A] val)](a: A) => a.i8() new min_value() => -0x80 new max_value() => 0x7F fun abs(): U8 => if this < 0 then (-this).u8() else this.u8() end fun bit_reverse(): I8 => @\"llvm.bitreverse.i8\"[I8](this) fun bswap(): I8 => this fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this) fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false) fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false) fun clz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i8\"[U8](this, true) fun ctz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i8\"[U8](this, true) fun bitwidth(): U8 => 8 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I8): I8 => if this < y then this else y end fun max(y: I8): I8 => if this > y then this else y end fun fld(y: I8): I8 => _SignedArithmetic.fld[I8, U8](this, y) fun fld_unsafe(y: I8): I8 => _SignedUnsafeArithmetic.fld_unsafe[I8, U8](this, y) fun mod(y: I8): I8 => _SignedArithmetic.mod[I8, U8](this, y) fun mod_unsafe(y: I8): I8 => _SignedUnsafeArithmetic.mod_unsafe[I8, U8](this, y) fun addc(y: I8): (I8, Bool) => @\"llvm.sadd.with.overflow.i8\"[(I8, Bool)](this, y) fun subc(y: I8): (I8, Bool) => @\"llvm.ssub.with.overflow.i8\"[(I8, Bool)](this, y) fun mulc(y: I8): (I8, Bool) => @\"llvm.smul.with.overflow.i8\"[(I8, Bool)](this, y) fun divc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.div_checked[I8, U8](this, y) fun remc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.rem_checked[I8, U8](this, y) fun fldc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.fld_checked[I8, U8](this, y) fun modc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.mod_checked[I8, U8](this, y) fun add_partial(y: I8): I8 ? => _SignedPartialArithmetic.add_partial[I8](this, y)? fun sub_partial(y: I8): I8 ? => _SignedPartialArithmetic.sub_partial[I8](this, y)? fun mul_partial(y: I8): I8 ? => _SignedPartialArithmetic.mul_partial[I8](this, y)? fun div_partial(y: I8): I8 ? => _SignedPartialArithmetic.div_partial[I8, U8](this, y)? fun rem_partial(y: I8): I8 ? => _SignedPartialArithmetic.rem_partial[I8, U8](this, y)? fun divrem_partial(y: I8): (I8, I8) ? => _SignedPartialArithmetic.divrem_partial[I8, U8](this, y)? fun fld_partial(y: I8): I8 ? => _SignedPartialArithmetic.fld_partial[I8, U8](this, y)? fun mod_partial(y: I8): I8 ? => _SignedPartialArithmetic.mod_partial[I8, U8](this, y)? primitive I16 is SignedInteger[I16, U16] new create(value: I16) => value new from[A: (Number & Real[A] val)](a: A) => a.i16() new min_value() => -0x8000 new max_value() => 0x7FFF fun abs(): U16 => if this < 0 then (-this).u16() else this.u16() end fun bit_reverse(): I16 => @\"llvm.bitreverse.i16\"[I16](this) fun bswap(): I16 => @\"llvm.bswap.i16\"[I16](this) fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this) fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false) fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false) fun clz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i16\"[U16](this, true) fun ctz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i16\"[U16](this, true) fun bitwidth(): U16 => 16 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I16): I16 => if this < y then this else y end fun max(y: I16): I16 => if this > y then this else y end fun fld(y: I16): I16 => _SignedArithmetic.fld[I16, U16](this, y) fun fld_unsafe(y: I16): I16 => _SignedUnsafeArithmetic.fld_unsafe[I16, U16](this, y) fun mod(y: I16): I16 => _SignedArithmetic.mod[I16, U16](this, y) fun mod_unsafe(y: I16): I16 => _SignedUnsafeArithmetic.mod_unsafe[I16, U16](this, y) fun addc(y: I16): (I16, Bool) => @\"llvm.sadd.with.overflow.i16\"[(I16, Bool)](this, y) fun subc(y: I16): (I16, Bool) => @\"llvm.ssub.with.overflow.i16\"[(I16, Bool)](this, y) fun mulc(y: I16): (I16, Bool) => @\"llvm.smul.with.overflow.i16\"[(I16, Bool)](this, y) fun divc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.div_checked[I16, U16](this, y) fun remc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.rem_checked[I16, U16](this, y) fun fldc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.fld_checked[I16, U16](this, y) fun modc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.mod_checked[I16, U16](this, y) fun add_partial(y: I16): I16 ? => _SignedPartialArithmetic.add_partial[I16](this, y)? fun sub_partial(y: I16): I16 ? => _SignedPartialArithmetic.sub_partial[I16](this, y)? fun mul_partial(y: I16): I16 ? => _SignedPartialArithmetic.mul_partial[I16](this, y)? fun div_partial(y: I16): I16 ? => _SignedPartialArithmetic.div_partial[I16, U16](this, y)? fun rem_partial(y: I16): I16 ? => _SignedPartialArithmetic.rem_partial[I16, U16](this, y)? fun divrem_partial(y: I16): (I16, I16) ? => _SignedPartialArithmetic.divrem_partial[I16, U16](this, y)? fun fld_partial(y: I16): I16 ? => _SignedPartialArithmetic.fld_partial[I16, U16](this, y)? fun mod_partial(y: I16): I16 ? => _SignedPartialArithmetic.mod_partial[I16, U16](this, y)? primitive I32 is SignedInteger[I32, U32] new create(value: I32) => value new from[A: (Number & Real[A] val)](a: A) => a.i32() new min_value() => -0x8000_0000 new max_value() => 0x7FFF_FFFF fun abs(): U32 => if this < 0 then (-this).u32() else this.u32() end fun bit_reverse(): I32 => @\"llvm.bitreverse.i32\"[I32](this) fun bswap(): I32 => @\"llvm.bswap.i32\"[I32](this) fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this) fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false) fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false) fun clz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i32\"[U32](this, true) fun ctz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i32\"[U32](this, true) fun bitwidth(): U32 => 32 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I32): I32 => if this < y then this else y end fun max(y: I32): I32 => if this > y then this else y end fun fld(y: I32): I32 => _SignedArithmetic.fld[I32, U32](this, y) fun fld_unsafe(y: I32): I32 => _SignedUnsafeArithmetic.fld_unsafe[I32, U32](this, y) fun mod(y: I32): I32 => _SignedArithmetic.mod[I32, U32](this, y) fun mod_unsafe(y: I32): I32 => _SignedUnsafeArithmetic.mod_unsafe[I32, U32](this, y) fun addc(y: I32): (I32, Bool) => @\"llvm.sadd.with.overflow.i32\"[(I32, Bool)](this, y) fun subc(y: I32): (I32, Bool) => @\"llvm.ssub.with.overflow.i32\"[(I32, Bool)](this, y) fun mulc(y: I32): (I32, Bool) => @\"llvm.smul.with.overflow.i32\"[(I32, Bool)](this, y) fun divc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.div_checked[I32, U32](this, y) fun remc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.rem_checked[I32, U32](this, y) fun fldc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.fld_checked[I32, U32](this, y) fun modc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.mod_checked[I32, U32](this, y) fun add_partial(y: I32): I32 ? => _SignedPartialArithmetic.add_partial[I32](this, y)? fun sub_partial(y: I32): I32 ? => _SignedPartialArithmetic.sub_partial[I32](this, y)? fun mul_partial(y: I32): I32 ? => _SignedPartialArithmetic.mul_partial[I32](this, y)? fun div_partial(y: I32): I32 ? => _SignedPartialArithmetic.div_partial[I32, U32](this, y)? fun rem_partial(y: I32): I32 ? => _SignedPartialArithmetic.rem_partial[I32, U32](this, y)? fun divrem_partial(y: I32): (I32, I32) ? => _SignedPartialArithmetic.divrem_partial[I32, U32](this, y)? fun fld_partial(y: I32): I32 ? => _SignedPartialArithmetic.fld_partial[I32, U32](this, y)? fun mod_partial(y: I32): I32 ? => _SignedPartialArithmetic.mod_partial[I32, U32](this, y)? primitive I64 is SignedInteger[I64, U64] new create(value: I64) => value new from[A: (Number & Real[A] val)](a: A) => a.i64() new min_value() => -0x8000_0000_0000_0000 new max_value() => 0x7FFF_FFFF_FFFF_FFFF fun abs(): U64 => if this < 0 then (-this).u64() else this.u64() end fun bit_reverse(): I64 => @\"llvm.bitreverse.i64\"[I64](this) fun bswap(): I64 => @\"llvm.bswap.i64\"[I64](this) fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this) fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false) fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false) fun clz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i64\"[U64](this, true) fun ctz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i64\"[U64](this, true) fun bitwidth(): U64 => 64 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I64): I64 => if this < y then this else y end fun max(y: I64): I64 => if this > y then this else y end fun fld(y: I64): I64 => _SignedArithmetic.fld[I64, U64](this, y) fun fld_unsafe(y: I64): I64 => _SignedUnsafeArithmetic.fld_unsafe[I64, U64](this, y) fun mod(y: I64): I64 => _SignedArithmetic.mod[I64, U64](this, y) fun mod_unsafe(y: I64): I64 => _SignedUnsafeArithmetic.mod_unsafe[I64, U64](this, y) fun hash(): USize => u64().hash() fun addc(y: I64): (I64, Bool) => @\"llvm.sadd.with.overflow.i64\"[(I64, Bool)](this, y) fun subc(y: I64): (I64, Bool) => @\"llvm.ssub.with.overflow.i64\"[(I64, Bool)](this, y) fun mulc(y: I64): (I64, Bool) => _SignedCheckedArithmetic._mul_checked[U64, I64](this, y) fun divc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.div_checked[I64, U64](this, y) fun remc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.rem_checked[I64, U64](this, y) fun fldc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.fld_checked[I64, U64](this, y) fun modc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.mod_checked[I64, U64](this, y) fun add_partial(y: I64): I64 ? => _SignedPartialArithmetic.add_partial[I64](this, y)? fun sub_partial(y: I64): I64 ? => _SignedPartialArithmetic.sub_partial[I64](this, y)? fun mul_partial(y: I64): I64 ? => _SignedPartialArithmetic.mul_partial[I64](this, y)? fun div_partial(y: I64): I64 ? => _SignedPartialArithmetic.div_partial[I64, U64](this, y)? fun rem_partial(y: I64): I64 ? => _SignedPartialArithmetic.rem_partial[I64, U64](this, y)? fun divrem_partial(y: I64): (I64, I64) ? => _SignedPartialArithmetic.divrem_partial[I64, U64](this, y)? fun fld_partial(y: I64): I64 ? => _SignedPartialArithmetic.fld_partial[I64, U64](this, y)? fun mod_partial(y: I64): I64 ? => _SignedPartialArithmetic.mod_partial[I64, U64](this, y)? primitive ILong is SignedInteger[ILong, ULong] new create(value: ILong) => value new from[A: (Number & Real[A] val)](a: A) => a.ilong() new min_value() => ifdef ilp32 or llp64 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() => ifdef ilp32 or llp64 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): ULong => if this < 0 then (-this).ulong() else this.ulong() end fun bit_reverse(): ILong => ifdef ilp32 or llp64 then @\"llvm.bitreverse.i32\"[ILong](this) else @\"llvm.bitreverse.i64\"[ILong](this) end fun bswap(): ILong => ifdef ilp32 or llp64 then @\"llvm.bswap.i32\"[ILong](this) else @\"llvm.bswap.i64\"[ILong](this) end fun popcount(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctpop.i32\"[ULong](this) else @\"llvm.ctpop.i64\"[ULong](this) end fun clz(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, false) else @\"llvm.ctlz.i64\"[ULong](this, false) end fun ctz(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, false) end fun clz_unsafe(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, true) else @\"llvm.ctlz.i64\"[ULong](this, true) end fun ctz_unsafe(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, true) end fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ILong): ILong => if this < y then this else y end fun max(y: ILong): ILong => if this > y then this else y end fun fld(y: ILong): ILong => _SignedArithmetic.fld[ILong, ULong](this, y) fun fld_unsafe(y: ILong): ILong => _SignedUnsafeArithmetic.fld_unsafe[ILong, ULong](this, y) fun mod(y: ILong): ILong => _SignedArithmetic.mod[ILong, ULong](this, y) fun mod_unsafe(y: ILong): ILong => _SignedUnsafeArithmetic.mod_unsafe[ILong, ULong](this, y) fun hash(): USize => ulong().hash() fun addc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then @\"llvm.sadd.with.overflow.i32\"[(ILong, Bool)](this, y) else @\"llvm.sadd.with.overflow.i64\"[(ILong, Bool)](this, y) end fun subc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then @\"llvm.ssub.with.overflow.i32\"[(ILong, Bool)](this, y) else @\"llvm.ssub.with.overflow.i64\"[(ILong, Bool)](this, y) end fun mulc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then @\"llvm.smul.with.overflow.i32\"[(ILong, Bool)](this, y) else _SignedCheckedArithmetic._mul_checked[ULong, ILong](this, y) end fun divc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.div_checked[ILong, ULong](this, y) fun remc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.rem_checked[ILong, ULong](this, y) fun fldc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.fld_checked[ILong, ULong](this, y) fun modc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.mod_checked[ILong, ULong](this, y) fun add_partial(y: ILong): ILong ? => _SignedPartialArithmetic.add_partial[ILong](this, y)? fun sub_partial(y: ILong): ILong ? => _SignedPartialArithmetic.sub_partial[ILong](this, y)? fun mul_partial(y: ILong): ILong ? => _SignedPartialArithmetic.mul_partial[ILong](this, y)? fun div_partial(y: ILong): ILong ? => _SignedPartialArithmetic.div_partial[ILong, ULong](this, y)? fun rem_partial(y: ILong): ILong ? => _SignedPartialArithmetic.rem_partial[ILong, ULong](this, y)? fun divrem_partial(y: ILong): (ILong, ILong) ? => _SignedPartialArithmetic.divrem_partial[ILong, ULong](this, y)? fun fld_partial(y: ILong): ILong ? => _SignedPartialArithmetic.fld_partial[ILong, ULong](this, y)? fun mod_partial(y: ILong): ILong ? => _SignedPartialArithmetic.mod_partial[ILong, ULong](this, y)? primitive ISize is SignedInteger[ISize, USize] new create(value: ISize) => value new from[A: (Number & Real[A] val)](a: A) => a.isize() new min_value() => ifdef ilp32 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() => ifdef ilp32 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): USize => if this < 0 then (-this).usize() else this.usize() end fun bit_reverse(): ISize => ifdef ilp32 then @\"llvm.bitreverse.i32\"[ISize](this) else @\"llvm.bitreverse.i64\"[ISize](this) end fun bswap(): ISize => ifdef ilp32 then @\"llvm.bswap.i32\"[ISize](this) else @\"llvm.bswap.i64\"[ISize](this) end fun popcount(): USize => ifdef ilp32 then @\"llvm.ctpop.i32\"[USize](this) else @\"llvm.ctpop.i64\"[USize](this) end fun clz(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, false) else @\"llvm.ctlz.i64\"[USize](this, false) end fun ctz(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, false) else @\"llvm.cttz.i64\"[USize](this, false) end fun clz_unsafe(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, true) else @\"llvm.ctlz.i64\"[USize](this, true) end fun ctz_unsafe(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, true) else @\"llvm.cttz.i64\"[USize](this, true) end fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ISize): ISize => if this < y then this else y end fun max(y: ISize): ISize => if this > y then this else y end fun fld(y: ISize): ISize => _SignedArithmetic.fld[ISize, USize](this, y) fun fld_unsafe(y: ISize): ISize => _SignedUnsafeArithmetic.fld_unsafe[ISize, USize](this, y) fun mod(y: ISize): ISize => _SignedArithmetic.mod[ISize, USize](this, y) fun mod_unsafe(y: ISize): ISize => _SignedUnsafeArithmetic.mod_unsafe[ISize, USize](this, y) fun addc(y: ISize): (ISize, Bool) => ifdef ilp32 then @\"llvm.sadd.with.overflow.i32\"[(ISize, Bool)](this, y) else @\"llvm.sadd.with.overflow.i64\"[(ISize, Bool)](this, y) end fun subc(y: ISize): (ISize, Bool) => ifdef ilp32 then @\"llvm.ssub.with.overflow.i32\"[(ISize, Bool)](this, y) else @\"llvm.ssub.with.overflow.i64\"[(ISize, Bool)](this, y) end fun mulc(y: ISize): (ISize, Bool) => ifdef ilp32 then @\"llvm.smul.with.overflow.i32\"[(ISize, Bool)](this, y) else _SignedCheckedArithmetic._mul_checked[USize, ISize](this, y) end fun divc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.div_checked[ISize, USize](this, y) fun remc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.rem_checked[ISize, USize](this, y) fun fldc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.fld_checked[ISize, USize](this, y) fun modc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.mod_checked[ISize, USize](this, y) fun add_partial(y: ISize): ISize ? => _SignedPartialArithmetic.add_partial[ISize](this, y)? fun sub_partial(y: ISize): ISize ? => _SignedPartialArithmetic.sub_partial[ISize](this, y)? fun mul_partial(y: ISize): ISize ? => _SignedPartialArithmetic.mul_partial[ISize](this, y)? fun div_partial(y: ISize): ISize ? => _SignedPartialArithmetic.div_partial[ISize, USize](this, y)? fun rem_partial(y: ISize): ISize ? => _SignedPartialArithmetic.rem_partial[ISize, USize](this, y)? fun divrem_partial(y: ISize): (ISize, ISize) ? => _SignedPartialArithmetic.divrem_partial[ISize, USize](this, y)? fun fld_partial(y: ISize): ISize ? => _SignedPartialArithmetic.fld_partial[ISize, USize](this, y)? fun mod_partial(y: ISize): ISize ? => _SignedPartialArithmetic.mod_partial[ISize, USize](this, y)? primitive I128 is SignedInteger[I128, U128] new create(value: I128) => value new from[A: (Number & Real[A] val)](a: A) => a.i128() new min_value() => -0x8000_0000_0000_0000_0000_0000_0000_0000 new max_value() => 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun abs(): U128 => if this < 0 then (-this).u128() else this.u128() end fun bit_reverse(): I128 => @\"llvm.bitreverse.i128\"[I128](this) fun bswap(): I128 => @\"llvm.bswap.i128\"[I128](this) fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this) fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false) fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false) fun clz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i128\"[U128](this, true) fun ctz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i128\"[U128](this, true) fun bitwidth(): U128 => 128 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I128): I128 => if this < y then this else y end fun max(y: I128): I128 => if this > y then this else y end fun fld(y: I128): I128 => _SignedArithmetic.fld[I128, U128](this, y) fun fld_unsafe(y: I128): I128 => _SignedUnsafeArithmetic.fld_unsafe[I128, U128](this, y) fun mod(y: I128): I128 => _SignedArithmetic.mod[I128, U128](this, y) fun mod_unsafe(y: I128): I128 => _SignedUnsafeArithmetic.mod_unsafe[I128, U128](this, y) fun hash(): USize => u128().hash() fun hash64(): U64 => u128().hash64() fun string(): String iso^ => _ToString._u128(abs().u128(), this < 0) fun mul(y: I128): I128 => (u128() * y.u128()).i128() fun divrem(y: I128): (I128, I128) => ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var num: I128 = if this >= 0 then this else -this end var den: I128 = if y >= 0 then y else -y end (let q, let r) = num.u128().divrem(den.u128()) (var q', var r') = (q.i128(), r.i128()) if this < 0 then r' = -r' if y > 0 then q' = -q' end elseif y < 0 then q' = -q' end (q', r') end fun div(y: I128): I128 => ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: I128): I128 => ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: I128): (I128, I128) => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this %~ y else this % y end fun f32(): F32 => f64().f32() fun f64(): F64 => if this < 0 then -(-u128()).f64() else u128().f64() end fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64() fun addc(y: I128): (I128, Bool) => ifdef native128 then @\"llvm.sadd.with.overflow.i128\"[(I128, Bool)](this, y) else let overflow = if y > 0 then (this > (max_value() - y)) else (this < (min_value() - y)) end (this + y, overflow) end fun subc(y: I128): (I128, Bool) => ifdef native128 then @\"llvm.ssub.with.overflow.i128\"[(I128, Bool)](this, y) else let overflow = if y > 0 then (this < (min_value() + y)) else (this > (max_value() + y)) end (this - y, overflow) end fun mulc(y: I128): (I128, Bool) => // using llvm.smul.with.overflow.i128 would require to link // llvm compiler-rt where the function implementing it lives: https://github.com/llvm-mirror/compiler-rt/blob/master/lib/builtins/muloti4.c // See this bug for reference: // the following implementation is more or less exactly was __muloti4 is // doing _SignedCheckedArithmetic._mul_checked[U128, I128](this, y) fun divc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.div_checked[I128, U128](this, y) fun remc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.rem_checked[I128, U128](this, y) fun fldc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.fld_checked[I128, U128](this, y) fun modc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.mod_checked[I128, U128](this, y) fun add_partial(y: I128): I128 ? => _SignedPartialArithmetic.add_partial[I128](this, y)? fun sub_partial(y: I128): I128 ? => _SignedPartialArithmetic.sub_partial[I128](this, y)? fun mul_partial(y: I128): I128 ? => _SignedPartialArithmetic.mul_partial[I128](this, y)? fun div_partial(y: I128): I128 ? => _SignedPartialArithmetic.div_partial[I128, U128](this, y)? fun rem_partial(y: I128): I128 ? => _SignedPartialArithmetic.rem_partial[I128, U128](this, y)? fun divrem_partial(y: I128): (I128, I128) ? => _SignedPartialArithmetic.divrem_partial[I128, U128](this, y)? fun fld_partial(y: I128): I128 ? => _SignedPartialArithmetic.fld_partial[I128, U128](this, y)? fun mod_partial(y: I128): I128 ? => _SignedPartialArithmetic.mod_partial[I128, U128](this, y)? type Signed is (I8 | I16 | I32 | I64 | I128 | ILong | ISize)","title":"signed.pony"},{"location":"src/builtin/source_loc/","text":"interface val SourceLoc \"\"\" Represents a location in a Pony source file, as reported by `__loc`. \"\"\" fun file(): String \"\"\" Name and path of source file. \"\"\" fun type_name(): String \"\"\" Name of nearest class, actor, primitive, struct, interface, or trait. \"\"\" fun method_name(): String \"\"\" Name of containing method. \"\"\" fun line(): USize \"\"\" Line number within file. Line numbers start at 1. \"\"\" fun pos(): USize \"\"\" Character position on line. Character positions start at 1. \"\"\"","title":"source_loc.pony"},{"location":"src/builtin/std_stream/","text":"type ByteSeq is (String | Array[U8] val) interface val ByteSeqIter \"\"\" Accept an iterable collection of String or Array[U8] val. \"\"\" fun values(): Iterator[this->ByteSeq box] interface tag OutStream \"\"\" Asnychronous access to some output stream. \"\"\" be print(data: ByteSeq) \"\"\" Print some bytes and insert a newline afterwards. \"\"\" be write(data: ByteSeq) \"\"\" Print some bytes without inserting a newline afterwards. \"\"\" be printv(data: ByteSeqIter) \"\"\" Print an iterable collection of ByteSeqs. \"\"\" be writev(data: ByteSeqIter) \"\"\" Write an iterable collection of ByteSeqs. \"\"\" be flush() \"\"\" Flush the stream. \"\"\" actor StdStream \"\"\" Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. \"\"\" var _stream: Pointer[None] new _out() => \"\"\" Create an async stream for stdout. \"\"\" _stream = @pony_os_stdout[Pointer[None]]() new _err() => \"\"\" Create an async stream for stderr. \"\"\" _stream = @pony_os_stderr[Pointer[None]]() be print(data: ByteSeq) => \"\"\" Print some bytes and insert a newline afterwards. \"\"\" _print(data) be write(data: ByteSeq) => \"\"\" Print some bytes without inserting a newline afterwards. \"\"\" _write(data) be printv(data: ByteSeqIter) => \"\"\" Print an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _print(bytes) end be writev(data: ByteSeqIter) => \"\"\" Write an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _write(bytes) end be flush() => \"\"\" Flush any data out to the os (ignoring failures). \"\"\" @pony_os_std_flush[None](_stream) fun ref _write(data: ByteSeq) => \"\"\" Write the bytes without explicitly flushing. \"\"\" @pony_os_std_write[None](_stream, data.cpointer(), data.size()) fun ref _print(data: ByteSeq) => \"\"\" Write the bytes and a newline without explicitly flushing. \"\"\" @pony_os_std_print[None](_stream, data.cpointer(), data.size())","title":"std_stream.pony"},{"location":"src/builtin/stdin/","text":"use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) interface InputNotify \"\"\" Notification for data arriving via an input stream. \"\"\" fun ref apply(data: Array[U8] iso) => \"\"\" Called when data is available on the stream. \"\"\" None fun ref dispose() => \"\"\" Called when no more data will arrive on the stream. \"\"\" None interface tag InputStream \"\"\" Asynchronous access to some input stream. \"\"\" be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) \"\"\" Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. \"\"\" be dispose() => \"\"\" Clear the notifier in order to shut down input. \"\"\" None actor Stdin \"\"\" Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an `InputNotify`: ```pony actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) ``` **Note:** For reading user input from a terminal, use the [term](term--index.md) package. \"\"\" var _notify: (InputNotify | None) = None var _chunk_size: USize = 32 var _event: AsioEventID = AsioEvent.none() let _use_event: Bool new _create(use_event: Bool) => \"\"\" Create an asynchronous stdin provider. \"\"\" _use_event = use_event be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) => \"\"\" Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. \"\"\" _set_notify(consume notify) _chunk_size = chunk_size be dispose() => \"\"\" Clear the notifier in order to shut down input. \"\"\" _set_notify(None) fun ref _set_notify(notify: (InputNotify iso | None)) => \"\"\" Set the notifier. \"\"\" if notify is None then if _use_event and not _event.is_null() then // Unsubscribe the event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end elseif _notify is None then if _use_event then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.read(), 0, true) else // Start the read loop. _loop_read() end end try (_notify as InputNotify).dispose() end _notify = consume notify be _loop_read() => \"\"\" If we are able to read from stdin, schedule another read. \"\"\" if _read() then _loop_read() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" When the event fires, read from stdin. \"\"\" if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif (_event is event) and AsioEvent.readable(flags) then _read() end be _read_again() => \"\"\" Resume reading. \"\"\" _read() fun ref _read(): Bool => \"\"\" Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. \"\"\" try let notify = _notify as InputNotify var sum: USize = 0 while true do let chunk_size = _chunk_size var data = recover Array[U8] .> undefined(chunk_size) end var again: Bool = false let len = @pony_os_stdin_read[USize](data.cpointer(), data.size(), addressof again) match len | -1 => // Error, possibly would block. Try again. return true | 0 => // EOF. Close everything, stop reading. _close_event() notify.dispose() _notify = None return false end data.truncate(len) notify(consume data) if not again then // Not allowed to call pony_os_stdin_read again yet, exit loop. return true end sum = sum + len if sum > (1 << 12) then if _use_event then _read_again() end break end end true else // No notifier. Stop reading. _close_event() false end fun ref _close_event() => \"\"\" Close the event. \"\"\" if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end","title":"stdin.pony"},{"location":"src/builtin/string/","text":"use @memcmp[I32](dst: Pointer[U8] box, src: Pointer[U8] box, len: USize) use @memset[Pointer[None]](dst: Pointer[None], set: U32, len: USize) use @memmove[Pointer[None]](dst: Pointer[None], src: Pointer[None], len: USize) use @strtof[F32](nptr: Pointer[U8] box, endptr: Pointer[Pointer[U8] box] ref) use @strtod[F64](nptr: Pointer[U8] box, endptr: Pointer[Pointer[U8] box] ref) use @pony_os_clear_errno[None]() use @pony_os_errno[I32]() class val String is (Seq[U8] & Comparable[String box] & Stringable) \"\"\" A String is an ordered collection of bytes. Strings don't specify an encoding. Example usage of some common String methods: ```pony actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end ``` \"\"\" var _size: USize var _alloc: USize var _ptr: Pointer[U8] new create(len: USize = 0) => \"\"\" An empty string. Enough space for len bytes is reserved. \"\"\" _size = 0 _alloc = len.min(len.max_value() - 1) + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) new val from_array(data: Array[U8] val) => \"\"\" Create a string from an array, reusing the underlying data pointer. \"\"\" _size = data.size() _alloc = data.space() _ptr = data.cpointer()._unsafe() new iso from_iso_array(data: Array[U8] iso) => \"\"\" Create a string from an array, reusing the underlying data pointer \"\"\" _size = data.size() _alloc = data.space() _ptr = (consume data).cpointer()._unsafe() if _alloc > _size then _set(_size, 0) end new from_cpointer(str: Pointer[U8], len: USize, alloc: USize = 0) => \"\"\" Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = alloc.max(_size.min(len.max_value() - 1)) _ptr = str end new from_cstring(str: Pointer[U8]) => \"\"\" Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = str end new copy_cpointer(str: Pointer[U8] box, len: USize) => \"\"\" Create a string by copying a fixed number of bytes from a pointer. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new copy_cstring(str: Pointer[U8] box) => \"\"\" Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new from_utf32(value: U32) => \"\"\" Create a UTF-8 string from a single UTF-32 code point. \"\"\" let encoded = _UTF32Encoder.encode(value) _size = encoded._1 _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, encoded._2) if encoded._1 > 1 then _set(1, encoded._3) if encoded._1 > 2 then _set(2, encoded._4) if encoded._1 > 3 then _set(3, encoded._5) end end end _set(_size, 0) fun ref push_utf32(value: U32) => \"\"\" Push a UTF-32 code point. \"\"\" let encoded = _UTF32Encoder.encode(value) let i = _size _size = _size + encoded._1 reserve(_size) _set(i, encoded._2) if encoded._1 > 1 then _set(i + 1, encoded._3) if encoded._1 > 2 then _set(i + 2, encoded._4) if encoded._1 > 3 then _set(i + 3, encoded._5) end end end _set(_size, 0) fun box _copy_to(ptr: Pointer[U8] ref, copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) => \"\"\" Copy `copy_len` bytes from this to that at specified offsets. \"\"\" _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[U8] tag => \"\"\" Returns a C compatible pointer to the underlying string allocation. \"\"\" _ptr._offset(offset) fun cstring(): Pointer[U8] tag => \"\"\" Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. \"\"\" if is_null_terminated() then return _ptr end let ptr = Pointer[U8]._alloc(_size + 1) _ptr._copy_to(ptr._unsafe(), _size) ptr._update(_size, 0) ptr fun val array(): Array[U8] val => \"\"\" Returns an Array[U8] that reuses the underlying data pointer. \"\"\" recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun iso iso_array(): Array[U8] iso^ => \"\"\" Returns an Array[U8] iso that reuses the underlying data pointer. \"\"\" recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun size(): USize => \"\"\" Returns the length of the string data in bytes. \"\"\" _size fun codepoints(from: ISize = 0, to: ISize = ISize.max_value()): USize => \"\"\" Returns the number of unicode code points in the string between the two offsets. Index range [`from` .. `to`) is half-open. \"\"\" if _size == 0 then return 0 end var i = offset_to_index(from) let j = offset_to_index(to).min(_size) var n = USize(0) while i < j do if (_ptr._apply(i) and 0xC0) != 0x80 then n = n + 1 end i = i + 1 end n fun space(): USize => \"\"\" Returns the space available for data, not including the null terminator. \"\"\" if is_null_terminated() then _alloc - 1 else _alloc end fun ref reserve(len: USize) => \"\"\" Reserve space for len bytes. An additional byte will be reserved for the null terminator. \"\"\" if _alloc <= len then let max = len.max_value() - 1 let min_alloc = len.min(max) + 1 if min_alloc <= (max / 2) then _alloc = min_alloc.next_pow2() else _alloc = min_alloc.min(max) end _ptr = _ptr._realloc(_alloc) end fun ref compact() => \"\"\" Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. \"\"\" if (_size + 1) <= 512 then if (_size + 1).next_pow2() != _alloc.next_pow2() then _alloc = (_size + 1).next_pow2() let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end elseif (_size + 1) < _alloc then _alloc = (_size + 1) let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end fun ref recalc() => \"\"\" Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. \"\"\" var s: USize = 0 while (s < _alloc) and (_ptr._apply(s) > 0) do s = s + 1 end if s != _alloc then _size = s end fun ref truncate(len: USize) => \"\"\" Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. \"\"\" if len >= _alloc then _size = len.min(_alloc) reserve(_alloc + 1) else _size = len.min(_alloc - 1) end _set(_size, 0) fun ref trim_in_place(from: USize = 0, to: USize = -1) => \"\"\" Trim the string to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new string nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this string and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[U8] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): String val => \"\"\" Return a shared portion of this string, covering `from` until `to`. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' > 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (String iso^, String iso^) => \"\"\" Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. \"\"\" let start_ptr = cpointer(split_point) let size' = _size - _size.min(split_point) let alloc = _alloc - _size.min(split_point) trim_in_place(0, split_point) let right = recover if size' > 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume this, consume right) fun iso unchop(b: String iso): ((String iso^, String iso^) | String iso^) => \"\"\" Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. \"\"\" if _size == 0 then return consume b end if b.size() == 0 then return consume this end (let unchoppable, let a_left) = if (_size == _alloc) and (cpointer(_size) == b.cpointer()) then (true, true) elseif (b.size() == b.space()) and (b.cpointer(b.size()) == cpointer()) then (true, false) else (false, false) end if not unchoppable then return (consume this, consume b) end if a_left then _alloc = _alloc + b._alloc _size = _size + b._size consume this else b._alloc = b._alloc + _alloc b._size = b._size + _size consume b end fun is_null_terminated(): Bool => \"\"\" Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. \"\"\" (_alloc > 0) and (_alloc != _size) and (_ptr._apply(_size) == 0) fun utf32(offset: ISize): (U32, U8) ? => \"\"\" Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. \"\"\" let i = offset_to_index(offset) let err: (U32, U8) = (0xFFFD, 1) if i >= _size then error end let c = _ptr._apply(i) if c < 0x80 then // 1-byte (c.u32(), 1) elseif c < 0xC2 then // Stray continuation. err elseif c < 0xE0 then // 2-byte if (i + 1) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) if (c2 and 0xC0) != 0x80 then // Not a continuation byte. err else (((c.u32() << 6) + c2.u32()) - 0x3080, 2) end end elseif c < 0xF0 then // 3-byte. if (i + 2) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xE0) and (c2 < 0xA0)) then err else (((c.u32() << 12) + (c2.u32() << 6) + c3.u32()) - 0xE2080, 3) end end elseif c < 0xF5 then // 4-byte. if (i + 3) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) let c4 = _ptr._apply(i + 3) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or ((c4 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xF0) and (c2 < 0x90)) or // UTF32 would be > 0x10FFFF. ((c == 0xF4) and (c2 >= 0x90)) then err else (((c.u32() << 18) + (c2.u32() << 12) + (c3.u32() << 6) + c4.u32()) - 0x3C82080, 4) end end else // UTF32 would be > 0x10FFFF. err end fun apply(i: USize): U8 ? => \"\"\" Returns the i-th byte. Raise an error if the index is out of bounds. \"\"\" if i < _size then _ptr._apply(i) else error end fun ref update(i: USize, value: U8): U8 ? => \"\"\" Change the i-th byte. Raise an error if the index is out of bounds. \"\"\" if i < _size then _set(i, value) else error end fun at_offset(offset: ISize): U8 ? => \"\"\" Returns the byte at the given offset. Raise an error if the offset is out of bounds. \"\"\" this(offset_to_index(offset))? fun ref update_offset(offset: ISize, value: U8): U8 ? => \"\"\" Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. \"\"\" this(offset_to_index(offset))? = value fun clone(): String iso^ => \"\"\" Returns a copy of the string. The resulting string is null-terminated even if the original is not. \"\"\" let len = _size let str = recover String(len) end _ptr._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str fun repeat_str(num: USize = 1, sep: String = \"\"): String iso^ => \"\"\" Returns a copy of the string repeated `num` times with an optional separator added inbetween repeats. \"\"\" var c = num var str = recover String((_size + sep.size()) * c) end while c > 0 do c = c - 1 str = (consume str)._append(this) if (sep.size() > 0) and (c != 0) then str = (consume str)._append(sep) end end consume str fun mul(num: USize): String iso^ => \"\"\" Returns a copy of the string repeated `num` times. \"\"\" repeat_str(num) fun find(s: String box, offset: ISize = 0, nth: USize = 0): ISize ? => \"\"\" Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. \"\"\" var i = offset_to_index(offset) var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i + 1 end error fun rfind(s: String box, offset: ISize = -1, nth: USize = 0): ISize ? => \"\"\" Return the index of n-th instance of `s` in the string starting from the end. The `offset` represents the highest index to included in the search. Raise an error if there is no n-th occurrence of `s` or `s` is empty. \"\"\" var i = (offset_to_index(offset) + 1) - s._size var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i - 1 end error fun contains(s: String box, offset: ISize = 0, nth: USize = 0): Bool => \"\"\" Returns true if contains s as a substring, false otherwise. \"\"\" var i = offset_to_index(offset) var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return true end i = i + 1 end false fun count(s: String box, offset: ISize = 0): USize => \"\"\" Counts the non-overlapping occurrences of s in the string. \"\"\" let j: ISize = (_size - s.size()).isize() var i: USize = 0 var k = offset if j < 0 then return 0 elseif (j == 0) and (this == s) then return 1 end try while k <= j do k = find(s, k)? + s.size().isize() i = i + 1 end end i fun at(s: String box, offset: ISize = 0): Bool => \"\"\" Returns true if the substring s is present at the given offset. \"\"\" let i = offset_to_index(offset) if (i + s.size()) <= _size then @memcmp(_ptr._offset(i), s._ptr, s._size) == 0 else false end fun ref delete(offset: ISize, len: USize = 1) => \"\"\" Delete len bytes at the supplied offset, compacting the string in place. \"\"\" let i = offset_to_index(offset) if i < _size then let n = len.min(_size - i) _size = _size - n _ptr._offset(i)._delete(n, _size - i) _set(_size, 0) end fun substring(from: ISize, to: ISize = ISize.max_value()): String iso^ => \"\"\" Returns a substring. Index range [`from` .. `to`) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see `trim` and `trim_in_place`. \"\"\" let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start < _size) and (start < finish) then let len = finish - start let str = recover String(len) end _ptr._offset(start)._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str else recover String end end fun lower(): String iso^ => \"\"\" Returns a lower case version of the string. \"\"\" let s = clone() s.lower_in_place() s fun ref lower_in_place() => \"\"\" Transforms the string to lower case. Currently only knows ASCII case. \"\"\" var i: USize = 0 while i < _size do let c = _ptr._apply(i) if (c >= 0x41) and (c <= 0x5A) then _set(i, c + 0x20) end i = i + 1 end fun upper(): String iso^ => \"\"\" Returns an upper case version of the string. Currently only knows ASCII case. \"\"\" let s = clone() s.upper_in_place() s fun ref upper_in_place() => \"\"\" Transforms the string to upper case. \"\"\" var i: USize = 0 while i < _size do let c = _ptr._apply(i) if (c >= 0x61) and (c <= 0x7A) then _set(i, c - 0x20) end i = i + 1 end fun reverse(): String iso^ => \"\"\" Returns a reversed version of the string. \"\"\" let s = clone() s.reverse_in_place() s fun ref reverse_in_place() => \"\"\" Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. \"\"\" if _size > 1 then var i: USize = 0 var j = _size - 1 while i < j do let x = _ptr._apply(i) _set(i, _ptr._apply(j)) _set(j, x) i = i + 1 j = j - 1 end end fun ref push(value: U8) => \"\"\" Add a byte to the end of the string. \"\"\" reserve(_size + 1) _set(_size, value) _size = _size + 1 _set(_size, 0) fun ref pop(): U8 ? => \"\"\" Remove a byte from the end of the string. \"\"\" if _size > 0 then _size = _size - 1 _ptr._offset(_size)._delete(1, 0) else error end fun ref unshift(value: U8) => \"\"\" Adds a byte to the beginning of the string. \"\"\" if value != 0 then reserve(_size + 1) @memmove(_ptr.usize() + 1, _ptr.usize(), _size + 1) _set(0, value) _size = _size + 1 else _set(0, 0) _size = 0 end fun ref shift(): U8 ? => \"\"\" Removes a byte from the beginning of the string. \"\"\" if _size > 0 then let value = _ptr._apply(0) @memmove(_ptr.usize(), _ptr.usize() + 1, _size) _size = _size - 1 value else error end fun ref append(seq: ReadSeq[U8], offset: USize = 0, len: USize = -1) => \"\"\" Append the elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) match seq | let s: (String box | Array[U8] box) => s._copy_to(_ptr, copy_len, offset, _size) _size = _size + copy_len _set(_size, 0) else let cap = copy_len + offset var i = offset try while i < cap do push(seq(i)?) i = i + 1 end end end fun ref concat(iter: Iterator[U8], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated bytes to the end of the string, starting from the given offset. \"\"\" try var n = USize(0) while n < offset do if iter.has_next() then iter.next()? else return end n = n + 1 end n = 0 while n < len do if iter.has_next() then push(iter.next()?) else return end n = n + 1 end end fun ref clear() => \"\"\" Truncate the string to zero length. \"\"\" _set(0, 0) _size = 0 fun insert(offset: ISize, that: String): String iso^ => \"\"\" Returns a version of the string with the given string inserted at the given offset. \"\"\" let s = clone() s.insert_in_place(offset, that) s fun ref insert_in_place(offset: ISize, that: String box) => \"\"\" Inserts the given string at the given offset. Appends the string if the offset is out of bounds. \"\"\" reserve(_size + that._size) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + that._size, _ptr.usize() + index, _size - index) that._ptr._copy_to(_ptr._offset(index), that._size) _size = _size + that._size _set(_size, 0) fun ref insert_byte(offset: ISize, value: U8) => \"\"\" Inserts a byte at the given offset. Appends if the offset is out of bounds. \"\"\" reserve(_size + 1) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + 1, _ptr.usize() + index, _size - index) _set(index, value) _size = _size + 1 _set(_size, 0) fun cut(from: ISize, to: ISize = ISize.max_value()): String iso^ => \"\"\" Returns a version of the string with the given range deleted. Index range [`from` .. `to`) is half-open. \"\"\" let s = clone() s.cut_in_place(from, to) s fun ref cut_in_place(from: ISize, to: ISize = ISize.max_value()) => \"\"\" Cuts the given range out of the string. Index range [`from` .. `to`) is half-open. \"\"\" let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start < _size) and (start < finish) and (finish <= _size) then let fragment_len = finish - start let new_size = _size - fragment_len var i = start while i < new_size do _set(i, _ptr._apply(i + fragment_len)) i = i + 1 end _size = _size - fragment_len _set(_size, 0) end fun ref remove(s: String box): USize => \"\"\" Remove all instances of s from the string. Returns the count of removed instances. \"\"\" var i: ISize = 0 var n: USize = 0 try while true do i = find(s, i)? cut_in_place(i, i + s.size().isize()) n = n + 1 end end n fun ref replace(from: String box, to: String box, n: USize = 0): USize => \"\"\" Replace up to n occurrences of `from` in `this` with `to`. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. \"\"\" let from_len = from.size().isize() let to_len = to.size().isize() var offset = ISize(0) var occur = USize(0) try while true do offset = find(from, offset)? cut_in_place(offset, offset + from_len) insert_in_place(offset, to) offset = offset + to_len occur = occur + 1 if (n > 0) and (occur >= n) then break end end end occur fun split_by( delim: String, n: USize = USize.max_value()) : Array[String] iso^ => \"\"\" Split the string into an array of strings that are delimited by `delim` in the original string. If `n > 0`, then the split count is limited to n. Example: ```pony let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> ``` Adjacent delimiters result in a zero length entry in the array. For example, `\"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"]`. An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of `delim`, use [`split`](#split). \"\"\" let delim_size = ISize.from[USize](delim.size()) let total_size = ISize.from[USize](size()) let result = recover Array[String] end var current = ISize(0) while ((result.size() + 1) < n) and (current < total_size) do try let delim_start = find(delim where offset = current)? result.push(substring(current, delim_start)) current = delim_start + delim_size else break end end result.push(substring(current)) consume result fun split(delim: String = \" \\t\\v\\f\\r\\n\", n: USize = 0): Array[String] iso^ => \"\"\" Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If `n > 0`, then the split count is limited to n. Example: ```pony let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department ``` Adjacent delimiters result in a zero length entry in the array. For example, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`. If you want to split the string with the entire delimiter string `delim`, use [`split_by`](#split_by). \"\"\" let result = recover Array[String] end if _size > 0 then let chars = Array[U32](delim.size()) for rune in delim.runes() do chars.push(rune) end var cur = recover String end var i = USize(0) var occur = USize(0) try while i < _size do (let c, let len) = utf32(i.isize())? if chars.contains(c) then // If we find a delimiter, add the current string to the array. occur = occur + 1 if (n > 0) and (occur >= n) then break end result.push(cur = recover String end) else // Add bytes to the current string. var j = U8(0) while j < len do cur.push(_ptr._apply(i + j.usize())) j = j + 1 end end i = i + len.usize() end end // Add all remaining bytes to the current string. while i < _size do cur.push(_ptr._apply(i)) i = i + 1 end result.push(consume cur) end consume result fun ref strip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all leading and trailing characters from the string that are in s. \"\"\" this .> lstrip(s) .> rstrip(s) fun ref rstrip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. \"\"\" if _size > 0 then let chars = Array[U32](s.size()) var i = _size - 1 var truncate_at = _size for rune in s.runes() do chars.push(rune) end repeat try match utf32(i.isize())? | (0xFFFD, 1) => None | (let c: U32, _) => if not chars.contains(c) then break end truncate_at = i end else break end until (i = i - 1) == 0 end truncate(truncate_at) end fun ref lstrip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all leading characters within the string that are in s. By default, leading whitespace is removed. \"\"\" if _size > 0 then let chars = Array[U32](s.size()) var i = USize(0) for rune in s.runes() do chars.push(rune) end while i < _size do try (let c, let len) = utf32(i.isize())? if not chars.contains(c) then break end i = i + len.usize() else break end end if i > 0 then delete(0, i) end end fun iso _append(s: String box): String iso^ => let len = _size + s._size reserve(len) if s.is_null_terminated() then s._copy_to(_ptr._unsafe(), s._size + 1, 0, _size) else s._copy_to(_ptr._unsafe(), s._size, 0, _size) end _size = len consume this fun add(that: String box): String => \"\"\" Return a string that is a concatenation of this and that. \"\"\" let len = _size + that._size let s = recover String(len) end (consume s)._append(this)._append(that) fun join(data: Iterator[Stringable]): String iso^ => \"\"\" Return a string that is a concatenation of the strings in data, using this as a separator. \"\"\" var buf = recover String end var first = true for v in data do if first then first = false else buf = (consume buf)._append(this) end buf.append(v.string()) end buf fun compare(that: String box): Compare => \"\"\" Lexically compare two strings. \"\"\" compare_sub(that, _size.max(that._size)) fun compare_sub( that: String box, n: USize, offset: ISize = 0, that_offset: ISize = 0, ignore_case: Bool = false) : Compare => \"\"\" Lexically compare at most `n` bytes of the substring of `this` starting at `offset` with the substring of `that` starting at `that_offset`. The comparison is case sensitive unless `ignore_case` is `true`. If the substring of `this` is a proper prefix of the substring of `that`, then `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of `this`, then `this` is `Greater` than `that`. Both `offset` and `that_offset` can be negative, in which case the offsets are computed from the end of the string. If `n + offset` is greater than the length of `this`, or `n + that_offset` is greater than the length of `that`, then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. \"\"\" var j: USize = offset_to_index(offset) var k: USize = that.offset_to_index(that_offset) var i = n.min((_size - j).max(that._size - k)) while i > 0 do // this and that are equal up to this point if j >= _size then // this is shorter return Less elseif k >= that._size then // that is shorter return Greater end let c1 = _ptr._apply(j) let c2 = that._ptr._apply(k) if not ((c1 == c2) or (ignore_case and ((c1 or 0x20) == (c2 or 0x20)) and ((c1 or 0x20) >= 'a') and ((c1 or 0x20) <= 'z'))) then // this and that differ here return if c1.i32() > c2.i32() then Greater else Less end end j = j + 1 k = k + 1 i = i - 1 end Equal fun eq(that: String box): Bool => \"\"\" Returns true if the two strings have the same contents. \"\"\" if _size == that._size then @memcmp(_ptr, that._ptr, _size) == 0 else false end fun lt(that: String box): Bool => \"\"\" Returns true if this is lexically less than that. Needs to be made UTF-8 safe. \"\"\" let len = _size.min(that._size) var i: USize = 0 while i < len do if _ptr._apply(i) < that._ptr._apply(i) then return true elseif _ptr._apply(i) > that._ptr._apply(i) then return false end i = i + 1 end _size < that._size fun le(that: String box): Bool => \"\"\" Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. \"\"\" let len = _size.min(that._size) var i: USize = 0 while i < len do if _ptr._apply(i) < that._ptr._apply(i) then return true elseif _ptr._apply(i) > that._ptr._apply(i) then return false end i = i + 1 end _size <= that._size fun offset_to_index(i: ISize): USize => if i < 0 then i.usize() + _size else i.usize() end fun bool(): Bool ? => match lower() | \"true\" => true | \"false\" => false else error end fun i8(base: U8 = 0): I8 ? => _to_int[I8](base)? fun i16(base: U8 = 0): I16 ? => _to_int[I16](base)? fun i32(base: U8 = 0): I32 ? => _to_int[I32](base)? fun i64(base: U8 = 0): I64 ? => _to_int[I64](base)? fun i128(base: U8 = 0): I128 ? => _to_int[I128](base)? fun ilong(base: U8 = 0): ILong ? => _to_int[ILong](base)? fun isize(base: U8 = 0): ISize ? => _to_int[ISize](base)? fun u8(base: U8 = 0): U8 ? => _to_int[U8](base)? fun u16(base: U8 = 0): U16 ? => _to_int[U16](base)? fun u32(base: U8 = 0): U32 ? => _to_int[U32](base)? fun u64(base: U8 = 0): U64 ? => _to_int[U64](base)? fun u128(base: U8 = 0): U128 ? => _to_int[U128](base)? fun ulong(base: U8 = 0): ULong ? => _to_int[ULong](base)? fun usize(base: U8 = 0): USize ? => _to_int[USize](base)? fun _to_int[A: ((Signed | Unsigned) & Integer[A] val)](base: U8): A ? => \"\"\" Convert the *whole* string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. \"\"\" (let v, let d) = read_int[A](0, base)? // Check the whole string is used if (d == 0) or (d.usize() != _size) then error end v fun read_int[A: ((Signed | Unsigned) & Integer[A] val)]( offset: ISize = 0, base: U8 = 0) : (A, USize /* chars used */) ? => \"\"\" Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. \"\"\" let start_index = offset_to_index(offset) var index = start_index var value: A = 0 var had_digit = false // Check for leading minus let minus = (index < _size) and (_ptr._apply(index) == '-') if minus then if A(-1) > A(0) then // We're reading an unsigned type, negative not allowed, int not found return (0, 0) end index = index + 1 end (let base', let base_chars) = _read_int_base[A](base, index) index = index + base_chars // Process characters while index < _size do let char: A = A(0).from[U8](_ptr._apply(index)) if char == '_' then index = index + 1 continue end let digit = if (char >= '0') and (char <= '9') then char - '0' elseif (char >= 'A') and (char <= 'Z') then (char - 'A') + 10 elseif (char >= 'a') and (char <= 'z') then (char - 'a') + 10 else break end if digit >= base' then break end value = if minus then (value *? base') -? digit else (value *? base') +? digit end had_digit = true index = index + 1 end // Check result if not had_digit then // No integer found return (0, 0) end // Success (value, index - start_index) fun _read_int_base[A: ((Signed | Unsigned) & Integer[A] val)]( base: U8, index: USize) : (A, USize /* chars used */) => \"\"\" Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of single-byte characters in the prefix. \"\"\" if base > 0 then return (A(0).from[U8](base), 0) end // Determine base from prefix if (index + 2) >= _size then // Not enough characters, must be decimal return (10, 0) end let lead_char = _ptr._apply(index) let base_char = _ptr._apply(index + 1) and not 0x20 if (lead_char == '0') and (base_char == 'B') then return (2, 2) end if (lead_char == '0') and (base_char == 'X') then return (16, 2) end // No base specified, default to decimal (10, 0) fun f32(offset: ISize = 0): F32 ? => \"\"\" Convert this string starting at the given offset to a 32-bit floating point number ([F32](builtin-F32.md)). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: ```pony \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true ``` \"\"\" let index = offset_to_index(offset) if index < _size then @pony_os_clear_errno() var endp: Pointer[U8] box = Pointer[U8] let res = @strtof(_ptr._offset(index), addressof endp) let errno: I32 = @pony_os_errno() if (errno != 0) or (endp != _ptr._offset(_size)) then error else res end else error end fun f64(offset: ISize = 0): F64 ? => \"\"\" Convert this string starting at the given offset to a 64-bit floating point number ([F64](builtin-F64.md)). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: ```pony \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true ``` \"\"\" let index = offset_to_index(offset) if index < _size then @pony_os_clear_errno() var endp: Pointer[U8] box = Pointer[U8] let res = @strtod(_ptr._offset(index), addressof endp) let errno: I32 = @pony_os_errno() if (errno != 0) or (endp != _ptr._offset(_size)) then error else res end else error end fun hash(): USize => @ponyint_hash_block[USize](_ptr, _size) fun hash64(): U64 => @ponyint_hash_block64[U64](_ptr, _size) fun string(): String iso^ => clone() fun values(): StringBytes^ => \"\"\" Return an iterator over the bytes in the string. \"\"\" StringBytes(this) fun runes(): StringRunes^ => \"\"\" Return an iterator over the codepoints in the string. \"\"\" StringRunes(this) fun ref _set(i: USize, value: U8): U8 => \"\"\" Unsafe update, used internally. \"\"\" _ptr._update(i, value) class StringBytes is Iterator[U8] let _string: String box var _i: USize new create(string: String box) => _string = string _i = 0 fun has_next(): Bool => _i < _string.size() fun ref next(): U8 ? => _string(_i = _i + 1)? class StringRunes is Iterator[U32] let _string: String box var _i: USize new create(string: String box) => _string = string _i = 0 fun has_next(): Bool => _i < _string.size() fun ref next(): U32 ? => (let rune, let len) = _string.utf32(_i.isize())? _i = _i + len.usize() rune primitive _UTF32Encoder fun encode(value: U32): (USize, U8, U8, U8, U8) => \"\"\" Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. \"\"\" if value < 0x80 then (1, value.u8(), 0, 0, 0) elseif value < 0x800 then ( 2, ((value >> 6) or 0xC0).u8(), ((value and 0x3F) or 0x80).u8(), 0, 0 ) elseif value < 0xD800 then ( 3, ((value >> 12) or 0xE0).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value < 0xE000 then // UTF-16 surrogate pairs are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) elseif value < 0x10000 then ( 3, ((value >> 12) or 0xE0).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value < 0x110000 then ( 4, ((value >> 18) or 0xF0).u8(), (((value >> 12) and 0x3F) or 0x80).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8() ) else // Code points beyond 0x10FFFF are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) end","title":"string.pony"},{"location":"src/builtin/stringable/","text":"interface box Stringable \"\"\" Things that can be turned into a String. \"\"\" fun string(): String iso^ \"\"\" Generate a string representation of this object. \"\"\"","title":"stringable.pony"},{"location":"src/builtin/unsigned/","text":"primitive U8 is UnsignedInteger[U8] new create(value: U8) => value new from[B: (Number & Real[B] val)](a: B) => a.u8() new min_value() => 0 new max_value() => 0xFF fun next_pow2(): U8 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U8 => this fun bit_reverse(): U8 => @\"llvm.bitreverse.i8\"[U8](this) fun bswap(): U8 => this fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this) fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false) fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false) fun clz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i8\"[U8](this, true) fun ctz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i8\"[U8](this, true) fun bitwidth(): U8 => 8 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U8): U8 => if this < y then this else y end fun max(y: U8): U8 => if this > y then this else y end fun addc(y: U8): (U8, Bool) => @\"llvm.uadd.with.overflow.i8\"[(U8, Bool)](this, y) fun subc(y: U8): (U8, Bool) => @\"llvm.usub.with.overflow.i8\"[(U8, Bool)](this, y) fun mulc(y: U8): (U8, Bool) => @\"llvm.umul.with.overflow.i8\"[(U8, Bool)](this, y) fun divc(y: U8): (U8, Bool) => _UnsignedCheckedArithmetic.div_checked[U8](this, y) fun remc(y: U8): (U8, Bool) => _UnsignedCheckedArithmetic.rem_checked[U8](this, y) fun add_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.add_partial[U8](this, y)? fun sub_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.sub_partial[U8](this, y)? fun mul_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.mul_partial[U8](this, y)? fun div_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.div_partial[U8](this, y)? fun rem_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.rem_partial[U8](this, y)? fun divrem_partial(y: U8): (U8, U8) ? => _UnsignedPartialArithmetic.divrem_partial[U8](this, y)? primitive U16 is UnsignedInteger[U16] new create(value: U16) => value new from[A: (Number & Real[A] val)](a: A) => a.u16() new min_value() => 0 new max_value() => 0xFFFF fun next_pow2(): U16 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U16 => this fun bit_reverse(): U16 => @\"llvm.bitreverse.i16\"[U16](this) fun bswap(): U16 => @\"llvm.bswap.i16\"[U16](this) fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this) fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false) fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false) fun clz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i16\"[U16](this, true) fun ctz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i16\"[U16](this, true) fun bitwidth(): U16 => 16 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U16): U16 => if this < y then this else y end fun max(y: U16): U16 => if this > y then this else y end fun addc(y: U16): (U16, Bool) => @\"llvm.uadd.with.overflow.i16\"[(U16, Bool)](this, y) fun subc(y: U16): (U16, Bool) => @\"llvm.usub.with.overflow.i16\"[(U16, Bool)](this, y) fun mulc(y: U16): (U16, Bool) => @\"llvm.umul.with.overflow.i16\"[(U16, Bool)](this, y) fun divc(y: U16): (U16, Bool) => _UnsignedCheckedArithmetic.div_checked[U16](this, y) fun remc(y: U16): (U16, Bool) => _UnsignedCheckedArithmetic.rem_checked[U16](this, y) fun add_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.add_partial[U16](this, y)? fun sub_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.sub_partial[U16](this, y)? fun mul_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.mul_partial[U16](this, y)? fun div_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.div_partial[U16](this, y)? fun rem_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.rem_partial[U16](this, y)? fun divrem_partial(y: U16): (U16, U16) ? => _UnsignedPartialArithmetic.divrem_partial[U16](this, y)? primitive U32 is UnsignedInteger[U32] new create(value: U32) => value new from[A: (Number & Real[A] val)](a: A) => a.u32() new min_value() => 0 new max_value() => 0xFFFF_FFFF fun next_pow2(): U32 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U32 => this fun bit_reverse(): U32 => @\"llvm.bitreverse.i32\"[U32](this) fun bswap(): U32 => @\"llvm.bswap.i32\"[U32](this) fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this) fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false) fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false) fun clz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i32\"[U32](this, true) fun ctz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i32\"[U32](this, true) fun bitwidth(): U32 => 32 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U32): U32 => if this < y then this else y end fun max(y: U32): U32 => if this > y then this else y end fun addc(y: U32): (U32, Bool) => @\"llvm.uadd.with.overflow.i32\"[(U32, Bool)](this, y) fun subc(y: U32): (U32, Bool) => @\"llvm.usub.with.overflow.i32\"[(U32, Bool)](this, y) fun mulc(y: U32): (U32, Bool) => @\"llvm.umul.with.overflow.i32\"[(U32, Bool)](this, y) fun divc(y: U32): (U32, Bool) => _UnsignedCheckedArithmetic.div_checked[U32](this, y) fun remc(y: U32): (U32, Bool) => _UnsignedCheckedArithmetic.rem_checked[U32](this, y) fun add_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.add_partial[U32](this, y)? fun sub_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.sub_partial[U32](this, y)? fun mul_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.mul_partial[U32](this, y)? fun div_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.div_partial[U32](this, y)? fun rem_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.rem_partial[U32](this, y)? fun divrem_partial(y: U32): (U32, U32) ? => _UnsignedPartialArithmetic.divrem_partial[U32](this, y)? primitive U64 is UnsignedInteger[U64] new create(value: U64) => value new from[A: (Number & Real[A] val)](a: A) => a.u64() new min_value() => 0 new max_value() => 0xFFFF_FFFF_FFFF_FFFF fun next_pow2(): U64 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U64 => this fun bit_reverse(): U64 => @\"llvm.bitreverse.i64\"[U64](this) fun bswap(): U64 => @\"llvm.bswap.i64\"[U64](this) fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this) fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false) fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false) fun clz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i64\"[U64](this, true) fun ctz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i64\"[U64](this, true) fun bitwidth(): U64 => 64 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U64): U64 => if this < y then this else y end fun max(y: U64): U64 => if this > y then this else y end fun hash(): USize => ifdef ilp32 then ((this >> 32).u32() xor this.u32()).hash() else usize().hash() end fun addc(y: U64): (U64, Bool) => @\"llvm.uadd.with.overflow.i64\"[(U64, Bool)](this, y) fun subc(y: U64): (U64, Bool) => @\"llvm.usub.with.overflow.i64\"[(U64, Bool)](this, y) fun mulc(y: U64): (U64, Bool) => @\"llvm.umul.with.overflow.i64\"[(U64, Bool)](this, y) fun divc(y: U64): (U64, Bool) => _UnsignedCheckedArithmetic.div_checked[U64](this, y) fun remc(y: U64): (U64, Bool) => _UnsignedCheckedArithmetic.rem_checked[U64](this, y) fun add_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.add_partial[U64](this, y)? fun sub_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.sub_partial[U64](this, y)? fun mul_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.mul_partial[U64](this, y)? fun div_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.div_partial[U64](this, y)? fun rem_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.rem_partial[U64](this, y)? fun divrem_partial(y: U64): (U64, U64) ? => _UnsignedPartialArithmetic.divrem_partial[U64](this, y)? primitive ULong is UnsignedInteger[ULong] new create(value: ULong) => value new from[A: (Number & Real[A] val)](a: A) => a.ulong() new min_value() => 0 new max_value() => ifdef ilp32 or llp64 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): ULong => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): ULong => this fun bit_reverse(): ULong => ifdef ilp32 or llp64 then @\"llvm.bitreverse.i32\"[ULong](this) else @\"llvm.bitreverse.i64\"[ULong](this) end fun bswap(): ULong => ifdef ilp32 or llp64 then @\"llvm.bswap.i32\"[ULong](this) else @\"llvm.bswap.i64\"[ULong](this) end fun popcount(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctpop.i32\"[ULong](this) else @\"llvm.ctpop.i64\"[ULong](this) end fun clz(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, false) else @\"llvm.ctlz.i64\"[ULong](this, false) end fun ctz(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, false) end fun clz_unsafe(): ULong => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, true) else @\"llvm.ctlz.i64\"[ULong](this, true) end fun ctz_unsafe(): ULong => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, true) end fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ULong): ULong => if this < y then this else y end fun max(y: ULong): ULong => if this > y then this else y end fun hash(): USize => ifdef ilp32 or llp64 then u32().hash() else u64().hash() end fun addc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then @\"llvm.uadd.with.overflow.i32\"[(ULong, Bool)](this, y) else @\"llvm.uadd.with.overflow.i64\"[(ULong, Bool)](this, y) end fun subc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then @\"llvm.usub.with.overflow.i32\"[(ULong, Bool)](this, y) else @\"llvm.usub.with.overflow.i64\"[(ULong, Bool)](this, y) end fun mulc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then @\"llvm.umul.with.overflow.i32\"[(ULong, Bool)](this, y) else @\"llvm.umul.with.overflow.i64\"[(ULong, Bool)](this, y) end fun divc(y: ULong): (ULong, Bool) => _UnsignedCheckedArithmetic.div_checked[ULong](this, y) fun remc(y: ULong): (ULong, Bool) => _UnsignedCheckedArithmetic.rem_checked[ULong](this, y) fun add_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.add_partial[ULong](this, y)? fun sub_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.sub_partial[ULong](this, y)? fun mul_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.mul_partial[ULong](this, y)? fun div_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.div_partial[ULong](this, y)? fun rem_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.rem_partial[ULong](this, y)? fun divrem_partial(y: ULong): (ULong, ULong) ? => _UnsignedPartialArithmetic.divrem_partial[ULong](this, y)? primitive USize is UnsignedInteger[USize] new create(value: USize) => value new from[A: (Number & Real[A] val)](a: A) => a.usize() new min_value() => 0 new max_value() => ifdef ilp32 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): USize => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): USize => this fun bit_reverse(): USize => ifdef ilp32 then @\"llvm.bitreverse.i32\"[USize](this) else @\"llvm.bitreverse.i64\"[USize](this) end fun bswap(): USize => ifdef ilp32 then @\"llvm.bswap.i32\"[USize](this) else @\"llvm.bswap.i64\"[USize](this) end fun popcount(): USize => ifdef ilp32 then @\"llvm.ctpop.i32\"[USize](this) else @\"llvm.ctpop.i64\"[USize](this) end fun clz(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, false) else @\"llvm.ctlz.i64\"[USize](this, false) end fun ctz(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, false) else @\"llvm.cttz.i64\"[USize](this, false) end fun clz_unsafe(): USize => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, true) else @\"llvm.ctlz.i64\"[USize](this, true) end fun ctz_unsafe(): USize => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, true) else @\"llvm.cttz.i64\"[USize](this, true) end fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: USize): USize => if this < y then this else y end fun max(y: USize): USize => if this > y then this else y end fun addc(y: USize): (USize, Bool) => ifdef ilp32 then @\"llvm.uadd.with.overflow.i32\"[(USize, Bool)](this, y) else @\"llvm.uadd.with.overflow.i64\"[(USize, Bool)](this, y) end fun subc(y: USize): (USize, Bool) => ifdef ilp32 then @\"llvm.usub.with.overflow.i32\"[(USize, Bool)](this, y) else @\"llvm.usub.with.overflow.i64\"[(USize, Bool)](this, y) end fun mulc(y: USize): (USize, Bool) => ifdef ilp32 then @\"llvm.umul.with.overflow.i32\"[(USize, Bool)](this, y) else @\"llvm.umul.with.overflow.i64\"[(USize, Bool)](this, y) end fun divc(y: USize): (USize, Bool) => _UnsignedCheckedArithmetic.div_checked[USize](this, y) fun remc(y: USize): (USize, Bool) => _UnsignedCheckedArithmetic.rem_checked[USize](this, y) fun add_partial(y: USize): USize ? => _UnsignedPartialArithmetic.add_partial[USize](this, y)? fun sub_partial(y: USize): USize ? => _UnsignedPartialArithmetic.sub_partial[USize](this, y)? fun mul_partial(y: USize): USize ? => _UnsignedPartialArithmetic.mul_partial[USize](this, y)? fun div_partial(y: USize): USize ? => _UnsignedPartialArithmetic.div_partial[USize](this, y)? fun rem_partial(y: USize): USize ? => _UnsignedPartialArithmetic.rem_partial[USize](this, y)? fun divrem_partial(y: USize): (USize, USize) ? => _UnsignedPartialArithmetic.divrem_partial[USize](this, y)? primitive U128 is UnsignedInteger[U128] new create(value: U128) => value new from[A: (Number & Real[A] val)](a: A) => a.u128() new min_value() => 0 new max_value() => 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun next_pow2(): U128 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U128 => this fun bit_reverse(): U128 => @\"llvm.bitreverse.i128\"[U128](this) fun bswap(): U128 => @\"llvm.bswap.i128\"[U128](this) fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this) fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false) fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false) fun clz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i128\"[U128](this, true) fun ctz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i128\"[U128](this, true) fun bitwidth(): U128 => 128 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U128): U128 => if this < y then this else y end fun max(y: U128): U128 => if this > y then this else y end fun hash(): USize => ifdef ilp32 then ((this >> 96).u32() xor (this >> 64).u32() xor (this >> 32).u32() xor this.u32()).hash() else ((this >> 64).u64() xor this.u64()).hash() end fun hash64(): U64 => ((this >> 64).u64() xor this.u64()).hash64() fun string(): String iso^ => _ToString._u128(this, false) fun mul(y: U128): U128 => ifdef native128 then this * y else let x_hi = (this >> 64).u64() let x_lo = this.u64() let y_hi = (y >> 64).u64() let y_lo = y.u64() let mask = U64(0x00000000FFFFFFFF) var lo = (x_lo and mask) * (y_lo and mask) var t = lo >> 32 lo = lo and mask t = t + ((x_lo >> 32) * (y_lo and mask)) lo = lo + ((t and mask) << 32) var hi = t >> 32 t = lo >> 32 lo = lo and mask t = t + ((y_lo >> 32) * (x_lo and mask)) lo = lo + ((t and mask) << 32) hi = hi + (t >> 32) hi = hi + ((x_lo >> 32) * (y_lo >> 32)) hi = hi + (x_hi * y_lo) + (x_lo * y_hi) (hi.u128() << 64) or lo.u128() end fun divrem(y: U128): (U128, U128) => ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var quot: U128 = 0 var qbit: U128 = 1 var num = this var den = y while den.i128() >= 0 do den = den << 1 qbit = qbit << 1 end while qbit != 0 do if den <= num then num = num - den quot = quot + qbit end den = den >> 1 qbit = qbit >> 1 end (quot, num) end fun div(y: U128): U128 => ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: U128): U128 => ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: U128): (U128, U128) => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this %~ y else this % y end fun f32(): F32 => let v = f64() if v > F32.max_value().f64() then F32._inf(false) else v.f32() end fun f64(): F64 => if this == 0 then return 0 end var a = this let sd = bitwidth() - clz() var e = (sd - 1).u64() if sd > 53 then match sd | 54 => a = a << 1 | 55 => None else a = (a >> (sd - 55)) or if (a and (-1 >> ((bitwidth() + 55) - sd))) != 0 then 1 else 0 end end if (a and 4) != 0 then a = a or 1 end a = (a + 1) >> 2 if (a and (1 << 53)) != 0 then a = a >> 1 e = e + 1 end else a = a << (53 - sd) end F64.from_bits(((e + 1023) << 52) or (a.u64() and 0xF_FFFF_FFFF_FFFF)) fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64() fun addc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.uadd.with.overflow.i128\"[(U128, Bool)](this, y) else let overflow = this > (max_value() - y) (this + y, overflow) end fun subc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.usub.with.overflow.i128\"[(U128, Bool)](this, y) else let overflow = this < y (this - y, overflow) end fun mulc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.umul.with.overflow.i128\"[(U128, Bool)](this, y) else let result = this * y let overflow = (this != 0) and ((result / this) != y) (result, overflow) end fun divc(y: U128): (U128, Bool) => _UnsignedCheckedArithmetic.div_checked[U128](this, y) fun remc(y: U128): (U128, Bool) => _UnsignedCheckedArithmetic.rem_checked[U128](this, y) fun add_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.add_partial[U128](this, y)? fun sub_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.sub_partial[U128](this, y)? fun mul_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.mul_partial[U128](this, y)? fun div_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.div_partial[U128](this, y)? fun rem_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.rem_partial[U128](this, y)? fun divrem_partial(y: U128): (U128, U128) ? => _UnsignedPartialArithmetic.divrem_partial[U128](this, y)? type Unsigned is (U8 | U16 | U32 | U64 | U128 | ULong | USize)","title":"unsigned.pony"},{"location":"src/pony-libxml2/functions/","text":"use \"lib:xml2\" primitive LibXML2 fun xmlCheckVersion(pversion: I32): None => var tmpvar: None = @xmlCheckVersion[None](pversion) tmpvar fun xmlStrdup(pcur: String): String => var tmpvar: Pointer[U8] = @xmlStrdup[Pointer[U8]](pcur.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrndup(pcur: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlStrndup[Pointer[U8]](pcur.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCharStrndup(pcur: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlCharStrndup[Pointer[U8]](pcur.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCharStrdup(pcur: String): String => var tmpvar: Pointer[U8] = @xmlCharStrdup[Pointer[U8]](pcur.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrsub(pstr: String, pstart: I32, plen: I32): String => var tmpvar: Pointer[U8] = @xmlStrsub[Pointer[U8]](pstr.cstring(), pstart, plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrchr(pstr: String, pval: U8): String => var tmpvar: Pointer[U8] = @xmlStrchr[Pointer[U8]](pstr.cstring(), pval) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrstr(pstr: String, pval: String): String => var tmpvar: Pointer[U8] = @xmlStrstr[Pointer[U8]](pstr.cstring(), pval.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrcasestr(pstr: String, pval: String): String => var tmpvar: Pointer[U8] = @xmlStrcasestr[Pointer[U8]](pstr.cstring(), pval.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrcmp(pstr1: String, pstr2: String): I32 => var tmpvar: I32 = @xmlStrcmp[I32](pstr1.cstring(), pstr2.cstring()) tmpvar fun xmlStrncmp(pstr1: String, pstr2: String, plen: I32): I32 => var tmpvar: I32 = @xmlStrncmp[I32](pstr1.cstring(), pstr2.cstring(), plen) tmpvar fun xmlStrcasecmp(pstr1: String, pstr2: String): I32 => var tmpvar: I32 = @xmlStrcasecmp[I32](pstr1.cstring(), pstr2.cstring()) tmpvar fun xmlStrncasecmp(pstr1: String, pstr2: String, plen: I32): I32 => var tmpvar: I32 = @xmlStrncasecmp[I32](pstr1.cstring(), pstr2.cstring(), plen) tmpvar fun xmlStrEqual(pstr1: String, pstr2: String): I32 => var tmpvar: I32 = @xmlStrEqual[I32](pstr1.cstring(), pstr2.cstring()) tmpvar fun xmlStrQEqual(ppref: String, pname: String, pstr: String): I32 => var tmpvar: I32 = @xmlStrQEqual[I32](ppref.cstring(), pname.cstring(), pstr.cstring()) tmpvar fun xmlStrlen(pstr: String): I32 => var tmpvar: I32 = @xmlStrlen[I32](pstr.cstring()) tmpvar fun xmlStrcat(pcur: String, padd: String): String => var tmpvar: Pointer[U8] = @xmlStrcat[Pointer[U8]](pcur.cstring(), padd.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrncat(pcur: String, padd: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlStrncat[Pointer[U8]](pcur.cstring(), padd.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrncatNew(pstr1: String, pstr2: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlStrncatNew[Pointer[U8]](pstr1.cstring(), pstr2.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStrPrintf(pbuf: String, plen: I32, pmsg: String): I32 => var tmpvar: I32 = @xmlStrPrintf[I32](pbuf.cstring(), plen, pmsg.cstring()) tmpvar fun xmlStrVPrintf(pbuf: String, plen: I32, pmsg: String, pap: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlStrVPrintf[I32](pbuf.cstring(), plen, pmsg.cstring(), pap) tmpvar fun xmlGetUTF8Char(putf: String, plen: Pointer[I32]): I32 => var tmpvar: I32 = @xmlGetUTF8Char[I32](putf.cstring(), plen) tmpvar fun xmlCheckUTF8(putf: String): I32 => var tmpvar: I32 = @xmlCheckUTF8[I32](putf.cstring()) tmpvar fun xmlUTF8Strsize(putf: String, plen: I32): I32 => var tmpvar: I32 = @xmlUTF8Strsize[I32](putf.cstring(), plen) tmpvar fun xmlUTF8Strndup(putf: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlUTF8Strndup[Pointer[U8]](putf.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlUTF8Strpos(putf: String, ppos: I32): String => var tmpvar: Pointer[U8] = @xmlUTF8Strpos[Pointer[U8]](putf.cstring(), ppos) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlUTF8Strloc(putf: String, putfchar: String): I32 => var tmpvar: I32 = @xmlUTF8Strloc[I32](putf.cstring(), putfchar.cstring()) tmpvar fun xmlUTF8Strsub(putf: String, pstart: I32, plen: I32): String => var tmpvar: Pointer[U8] = @xmlUTF8Strsub[Pointer[U8]](putf.cstring(), pstart, plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlUTF8Strlen(putf: String): I32 => var tmpvar: I32 = @xmlUTF8Strlen[I32](putf.cstring()) tmpvar fun xmlUTF8Size(putf: String): I32 => var tmpvar: I32 = @xmlUTF8Size[I32](putf.cstring()) tmpvar fun xmlUTF8Charcmp(putf1: String, putf2: String): I32 => var tmpvar: I32 = @xmlUTF8Charcmp[I32](putf1.cstring(), putf2.cstring()) tmpvar fun xmlCleanupInputCallbacks(): None => var tmpvar: None = @xmlCleanupInputCallbacks[None]() tmpvar fun xmlPopInputCallbacks(): I32 => var tmpvar: I32 = @xmlPopInputCallbacks[I32]() tmpvar fun xmlRegisterDefaultInputCallbacks(): None => var tmpvar: None = @xmlRegisterDefaultInputCallbacks[None]() tmpvar fun xmlAllocParserInputBuffer(penc: I32): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlAllocParserInputBuffer[NullablePointer[Xmlparserinputbuffer]](penc) tmpvar fun xmlParserInputBufferCreateFilename(pURI: String, penc: I32): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlParserInputBufferCreateFilename[NullablePointer[Xmlparserinputbuffer]](pURI.cstring(), penc) tmpvar fun xmlParserInputBufferCreateFile(pfile: NullablePointer[IoFile], penc: I32): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlParserInputBufferCreateFile[NullablePointer[Xmlparserinputbuffer]](pfile, penc) tmpvar fun xmlParserInputBufferCreateFd(pfd: I32, penc: I32): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlParserInputBufferCreateFd[NullablePointer[Xmlparserinputbuffer]](pfd, penc) tmpvar fun xmlParserInputBufferCreateMem(pmem: String, psize: I32, penc: I32): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlParserInputBufferCreateMem[NullablePointer[Xmlparserinputbuffer]](pmem.cstring(), psize, penc) tmpvar fun xmlParserInputBufferCreateStatic(pmem: String, psize: I32, penc: I32): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlParserInputBufferCreateStatic[NullablePointer[Xmlparserinputbuffer]](pmem.cstring(), psize, penc) tmpvar fun xmlParserInputBufferCreateIO(pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], penc: I32): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlParserInputBufferCreateIO[NullablePointer[Xmlparserinputbuffer]](pioread, pioclose, pioctx, penc) tmpvar fun xmlParserInputBufferRead(pin: NullablePointer[Xmlparserinputbuffer], plen: I32): I32 => var tmpvar: I32 = @xmlParserInputBufferRead[I32](pin, plen) tmpvar fun xmlParserInputBufferGrow(pin: NullablePointer[Xmlparserinputbuffer], plen: I32): I32 => var tmpvar: I32 = @xmlParserInputBufferGrow[I32](pin, plen) tmpvar fun xmlParserInputBufferPush(pin: NullablePointer[Xmlparserinputbuffer], plen: I32, pbuf: String): I32 => var tmpvar: I32 = @xmlParserInputBufferPush[I32](pin, plen, pbuf.cstring()) tmpvar fun xmlFreeParserInputBuffer(pin: NullablePointer[Xmlparserinputbuffer]): None => var tmpvar: None = @xmlFreeParserInputBuffer[None](pin) tmpvar fun xmlParserGetDirectory(pfilename: String): String => var tmpvar: Pointer[U8] = @xmlParserGetDirectory[Pointer[U8]](pfilename.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlRegisterInputCallbacks(pmatchFunc: Pointer[FUNCTIONPOINTER], popenFunc: Pointer[FUNCTIONPOINTER], preadFunc: Pointer[FUNCTIONPOINTER], pcloseFunc: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlRegisterInputCallbacks[I32](pmatchFunc, popenFunc, preadFunc, pcloseFunc) tmpvar fun xmlCleanupOutputCallbacks(): None => var tmpvar: None = @xmlCleanupOutputCallbacks[None]() tmpvar fun xmlRegisterDefaultOutputCallbacks(): None => var tmpvar: None = @xmlRegisterDefaultOutputCallbacks[None]() tmpvar fun xmlAllocOutputBuffer(pencoder: NullablePointer[Xmlcharencodinghandler]): NullablePointer[Xmloutputbuffer] => var tmpvar: NullablePointer[Xmloutputbuffer] = @xmlAllocOutputBuffer[NullablePointer[Xmloutputbuffer]](pencoder) tmpvar fun xmlOutputBufferCreateFilename(pURI: String, pencoder: NullablePointer[Xmlcharencodinghandler], pcompression: I32): NullablePointer[Xmloutputbuffer] => var tmpvar: NullablePointer[Xmloutputbuffer] = @xmlOutputBufferCreateFilename[NullablePointer[Xmloutputbuffer]](pURI.cstring(), pencoder, pcompression) tmpvar fun xmlOutputBufferCreateFile(pfile: NullablePointer[IoFile], pencoder: NullablePointer[Xmlcharencodinghandler]): NullablePointer[Xmloutputbuffer] => var tmpvar: NullablePointer[Xmloutputbuffer] = @xmlOutputBufferCreateFile[NullablePointer[Xmloutputbuffer]](pfile, pencoder) tmpvar fun xmlOutputBufferCreateBuffer(pbuffer: NullablePointer[Xmlbuffer], pencoder: NullablePointer[Xmlcharencodinghandler]): NullablePointer[Xmloutputbuffer] => var tmpvar: NullablePointer[Xmloutputbuffer] = @xmlOutputBufferCreateBuffer[NullablePointer[Xmloutputbuffer]](pbuffer, pencoder) tmpvar fun xmlOutputBufferCreateFd(pfd: I32, pencoder: NullablePointer[Xmlcharencodinghandler]): NullablePointer[Xmloutputbuffer] => var tmpvar: NullablePointer[Xmloutputbuffer] = @xmlOutputBufferCreateFd[NullablePointer[Xmloutputbuffer]](pfd, pencoder) tmpvar fun xmlOutputBufferCreateIO(piowrite: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pencoder: NullablePointer[Xmlcharencodinghandler]): NullablePointer[Xmloutputbuffer] => var tmpvar: NullablePointer[Xmloutputbuffer] = @xmlOutputBufferCreateIO[NullablePointer[Xmloutputbuffer]](piowrite, pioclose, pioctx, pencoder) tmpvar fun xmlOutputBufferGetContent(pout: NullablePointer[Xmloutputbuffer]): String => var tmpvar: Pointer[U8] = @xmlOutputBufferGetContent[Pointer[U8]](pout) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlOutputBufferGetSize(pout: NullablePointer[Xmloutputbuffer]): U64 => var tmpvar: U64 = @xmlOutputBufferGetSize[U64](pout) tmpvar fun xmlOutputBufferWrite(pout: NullablePointer[Xmloutputbuffer], plen: I32, pbuf: String): I32 => var tmpvar: I32 = @xmlOutputBufferWrite[I32](pout, plen, pbuf.cstring()) tmpvar fun xmlOutputBufferWriteString(pout: NullablePointer[Xmloutputbuffer], pstr: String): I32 => var tmpvar: I32 = @xmlOutputBufferWriteString[I32](pout, pstr.cstring()) tmpvar fun xmlOutputBufferWriteEscape(pout: NullablePointer[Xmloutputbuffer], pstr: String, pescaping: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlOutputBufferWriteEscape[I32](pout, pstr.cstring(), pescaping) tmpvar fun xmlOutputBufferFlush(pout: NullablePointer[Xmloutputbuffer]): I32 => var tmpvar: I32 = @xmlOutputBufferFlush[I32](pout) tmpvar fun xmlOutputBufferClose(pout: NullablePointer[Xmloutputbuffer]): I32 => var tmpvar: I32 = @xmlOutputBufferClose[I32](pout) tmpvar fun xmlRegisterOutputCallbacks(pmatchFunc: Pointer[FUNCTIONPOINTER], popenFunc: Pointer[FUNCTIONPOINTER], pwriteFunc: Pointer[FUNCTIONPOINTER], pcloseFunc: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlRegisterOutputCallbacks[I32](pmatchFunc, popenFunc, pwriteFunc, pcloseFunc) tmpvar fun xmlRegisterHTTPPostCallbacks(): None => var tmpvar: None = @xmlRegisterHTTPPostCallbacks[None]() tmpvar fun xmlCheckHTTPInput(pctxt: NullablePointer[Xmlparserctxt], pret: NullablePointer[Xmlparserinput]): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlCheckHTTPInput[NullablePointer[Xmlparserinput]](pctxt, pret) tmpvar fun xmlNoNetExternalEntityLoader(pURL: String, pID: String, pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlNoNetExternalEntityLoader[NullablePointer[Xmlparserinput]](pURL.cstring(), pID.cstring(), pctxt) tmpvar fun xmlNormalizeWindowsPath(ppath: String): String => var tmpvar: Pointer[U8] = @xmlNormalizeWindowsPath[Pointer[U8]](ppath.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCheckFilename(ppath: String): I32 => var tmpvar: I32 = @xmlCheckFilename[I32](ppath.cstring()) tmpvar fun xmlFileMatch(pfilename: String): I32 => var tmpvar: I32 = @xmlFileMatch[I32](pfilename.cstring()) tmpvar fun xmlFileOpen(pfilename: String): String => var tmpvar: Pointer[U8] = @xmlFileOpen[Pointer[U8]](pfilename.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlFileRead(pcontext: Pointer[U8], pbuffer: String, plen: I32): I32 => var tmpvar: I32 = @xmlFileRead[I32](pcontext, pbuffer.cstring(), plen) tmpvar fun xmlFileClose(pcontext: Pointer[U8]): I32 => var tmpvar: I32 = @xmlFileClose[I32](pcontext) tmpvar fun xmlIOHTTPMatch(pfilename: String): I32 => var tmpvar: I32 = @xmlIOHTTPMatch[I32](pfilename.cstring()) tmpvar fun xmlIOHTTPOpen(pfilename: String): String => var tmpvar: Pointer[U8] = @xmlIOHTTPOpen[Pointer[U8]](pfilename.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlIOHTTPOpenW(ppost_uri: String, pcompression: I32): String => var tmpvar: Pointer[U8] = @xmlIOHTTPOpenW[Pointer[U8]](ppost_uri.cstring(), pcompression) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlIOHTTPRead(pcontext: Pointer[U8], pbuffer: String, plen: I32): I32 => var tmpvar: I32 = @xmlIOHTTPRead[I32](pcontext, pbuffer.cstring(), plen) tmpvar fun xmlIOHTTPClose(pcontext: Pointer[U8]): I32 => var tmpvar: I32 = @xmlIOHTTPClose[I32](pcontext) tmpvar fun xmlIOFTPMatch(pfilename: String): I32 => var tmpvar: I32 = @xmlIOFTPMatch[I32](pfilename.cstring()) tmpvar fun xmlIOFTPOpen(pfilename: String): String => var tmpvar: Pointer[U8] = @xmlIOFTPOpen[Pointer[U8]](pfilename.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlIOFTPRead(pcontext: Pointer[U8], pbuffer: String, plen: I32): I32 => var tmpvar: I32 = @xmlIOFTPRead[I32](pcontext, pbuffer.cstring(), plen) tmpvar fun xmlIOFTPClose(pcontext: Pointer[U8]): I32 => var tmpvar: I32 = @xmlIOFTPClose[I32](pcontext) tmpvar fun xmlBufContent(pbuf: NullablePointer[Xmlbuf]): String => var tmpvar: Pointer[U8] = @xmlBufContent[Pointer[U8]](pbuf) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlBufEnd(pbuf: NullablePointer[Xmlbuf]): String => var tmpvar: Pointer[U8] = @xmlBufEnd[Pointer[U8]](pbuf) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlBufUse(pbuf: NullablePointer[Xmlbuf]): U64 => var tmpvar: U64 = @xmlBufUse[U64](pbuf) tmpvar fun xmlBufShrink(pbuf: NullablePointer[Xmlbuf], plen: U64): U64 => var tmpvar: U64 = @xmlBufShrink[U64](pbuf, plen) tmpvar fun xmlValidateNCName(pvalue: String, pspace: I32): I32 => var tmpvar: I32 = @xmlValidateNCName[I32](pvalue.cstring(), pspace) tmpvar fun xmlValidateQName(pvalue: String, pspace: I32): I32 => var tmpvar: I32 = @xmlValidateQName[I32](pvalue.cstring(), pspace) tmpvar fun xmlValidateName(pvalue: String, pspace: I32): I32 => var tmpvar: I32 = @xmlValidateName[I32](pvalue.cstring(), pspace) tmpvar fun xmlValidateNMToken(pvalue: String, pspace: I32): I32 => var tmpvar: I32 = @xmlValidateNMToken[I32](pvalue.cstring(), pspace) tmpvar fun xmlBuildQName(pncname: String, pprefix: String, pmemory: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlBuildQName[Pointer[U8]](pncname.cstring(), pprefix.cstring(), pmemory.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSplitQName2(pname: String, pprefix: Pointer[Pointer[U8] tag]): String => var tmpvar: Pointer[U8] = @xmlSplitQName2[Pointer[U8]](pname.cstring(), pprefix) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSplitQName3(pname: String, plen: Pointer[I32]): String => var tmpvar: Pointer[U8] = @xmlSplitQName3[Pointer[U8]](pname.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSetBufferAllocationScheme(pscheme: I32): None => var tmpvar: None = @xmlSetBufferAllocationScheme[None](pscheme) tmpvar fun xmlGetBufferAllocationScheme(): I32 => var tmpvar: I32 = @xmlGetBufferAllocationScheme[I32]() tmpvar fun xmlBufferCreate(): NullablePointer[Xmlbuffer] => var tmpvar: NullablePointer[Xmlbuffer] = @xmlBufferCreate[NullablePointer[Xmlbuffer]]() tmpvar fun xmlBufferCreateSize(psize: U64): NullablePointer[Xmlbuffer] => var tmpvar: NullablePointer[Xmlbuffer] = @xmlBufferCreateSize[NullablePointer[Xmlbuffer]](psize) tmpvar fun xmlBufferCreateStatic(pmem: Pointer[U8], psize: U64): NullablePointer[Xmlbuffer] => var tmpvar: NullablePointer[Xmlbuffer] = @xmlBufferCreateStatic[NullablePointer[Xmlbuffer]](pmem, psize) tmpvar fun xmlBufferResize(pbuf: NullablePointer[Xmlbuffer], psize: U32): I32 => var tmpvar: I32 = @xmlBufferResize[I32](pbuf, psize) tmpvar fun xmlBufferFree(pbuf: NullablePointer[Xmlbuffer]): None => var tmpvar: None = @xmlBufferFree[None](pbuf) tmpvar fun xmlBufferDump(pfile: NullablePointer[IoFile], pbuf: NullablePointer[Xmlbuffer]): I32 => var tmpvar: I32 = @xmlBufferDump[I32](pfile, pbuf) tmpvar fun xmlBufferAdd(pbuf: NullablePointer[Xmlbuffer], pstr: String, plen: I32): I32 => var tmpvar: I32 = @xmlBufferAdd[I32](pbuf, pstr.cstring(), plen) tmpvar fun xmlBufferAddHead(pbuf: NullablePointer[Xmlbuffer], pstr: String, plen: I32): I32 => var tmpvar: I32 = @xmlBufferAddHead[I32](pbuf, pstr.cstring(), plen) tmpvar fun xmlBufferCat(pbuf: NullablePointer[Xmlbuffer], pstr: String): I32 => var tmpvar: I32 = @xmlBufferCat[I32](pbuf, pstr.cstring()) tmpvar fun xmlBufferCCat(pbuf: NullablePointer[Xmlbuffer], pstr: String): I32 => var tmpvar: I32 = @xmlBufferCCat[I32](pbuf, pstr.cstring()) tmpvar fun xmlBufferShrink(pbuf: NullablePointer[Xmlbuffer], plen: U32): I32 => var tmpvar: I32 = @xmlBufferShrink[I32](pbuf, plen) tmpvar fun xmlBufferGrow(pbuf: NullablePointer[Xmlbuffer], plen: U32): I32 => var tmpvar: I32 = @xmlBufferGrow[I32](pbuf, plen) tmpvar fun xmlBufferEmpty(pbuf: NullablePointer[Xmlbuffer]): None => var tmpvar: None = @xmlBufferEmpty[None](pbuf) tmpvar fun xmlBufferContent(pbuf: NullablePointer[Xmlbuffer]): String => var tmpvar: Pointer[U8] = @xmlBufferContent[Pointer[U8]](pbuf) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlBufferDetach(pbuf: NullablePointer[Xmlbuffer]): String => var tmpvar: Pointer[U8] = @xmlBufferDetach[Pointer[U8]](pbuf) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlBufferSetAllocationScheme(pbuf: NullablePointer[Xmlbuffer], pscheme: I32): None => var tmpvar: None = @xmlBufferSetAllocationScheme[None](pbuf, pscheme) tmpvar fun xmlBufferLength(pbuf: NullablePointer[Xmlbuffer]): I32 => var tmpvar: I32 = @xmlBufferLength[I32](pbuf) tmpvar fun xmlCreateIntSubset(pdoc: NullablePointer[Xmldoc] tag, pname: String, pExternalID: String, pSystemID: String): NullablePointer[Xmldtd] => var tmpvar: NullablePointer[Xmldtd] = @xmlCreateIntSubset[NullablePointer[Xmldtd]](pdoc, pname.cstring(), pExternalID.cstring(), pSystemID.cstring()) tmpvar fun xmlNewDtd(pdoc: NullablePointer[Xmldoc] tag, pname: String, pExternalID: String, pSystemID: String): NullablePointer[Xmldtd] => var tmpvar: NullablePointer[Xmldtd] = @xmlNewDtd[NullablePointer[Xmldtd]](pdoc, pname.cstring(), pExternalID.cstring(), pSystemID.cstring()) tmpvar fun xmlGetIntSubset(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmldtd] => var tmpvar: NullablePointer[Xmldtd] = @xmlGetIntSubset[NullablePointer[Xmldtd]](pdoc) tmpvar fun xmlFreeDtd(pcur: NullablePointer[Xmldtd]): None => var tmpvar: None = @xmlFreeDtd[None](pcur) tmpvar fun xmlNewGlobalNs(pdoc: NullablePointer[Xmldoc] tag, phref: String, pprefix: String): NullablePointer[Xmlns] => var tmpvar: NullablePointer[Xmlns] = @xmlNewGlobalNs[NullablePointer[Xmlns]](pdoc, phref.cstring(), pprefix.cstring()) tmpvar fun xmlNewNs(pnode: NullablePointer[Xmlnode], phref: String, pprefix: String): NullablePointer[Xmlns] => var tmpvar: NullablePointer[Xmlns] = @xmlNewNs[NullablePointer[Xmlns]](pnode, phref.cstring(), pprefix.cstring()) tmpvar fun xmlFreeNs(pcur: NullablePointer[Xmlns]): None => var tmpvar: None = @xmlFreeNs[None](pcur) tmpvar fun xmlFreeNsList(pcur: NullablePointer[Xmlns]): None => var tmpvar: None = @xmlFreeNsList[None](pcur) tmpvar fun xmlNewDoc(pversion: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlNewDoc[NullablePointer[Xmldoc]](pversion.cstring()) tmpvar fun xmlFreeDoc(pcur: NullablePointer[Xmldoc] tag): None => var tmpvar: None = @xmlFreeDoc[None](pcur) tmpvar fun xmlNewDocProp(pdoc: NullablePointer[Xmldoc] tag, pname: String, pvalue: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlNewDocProp[NullablePointer[Xmlattr]](pdoc, pname.cstring(), pvalue.cstring()) tmpvar fun xmlNewProp(pnode: NullablePointer[Xmlnode], pname: String, pvalue: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlNewProp[NullablePointer[Xmlattr]](pnode, pname.cstring(), pvalue.cstring()) tmpvar fun xmlNewNsProp(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pvalue: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlNewNsProp[NullablePointer[Xmlattr]](pnode, pns, pname.cstring(), pvalue.cstring()) tmpvar fun xmlNewNsPropEatName(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pvalue: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlNewNsPropEatName[NullablePointer[Xmlattr]](pnode, pns, pname.cstring(), pvalue.cstring()) tmpvar fun xmlFreePropList(pcur: NullablePointer[Xmlattr]): None => var tmpvar: None = @xmlFreePropList[None](pcur) tmpvar fun xmlFreeProp(pcur: NullablePointer[Xmlattr]): None => var tmpvar: None = @xmlFreeProp[None](pcur) tmpvar fun xmlCopyProp(ptarget: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlattr]): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlCopyProp[NullablePointer[Xmlattr]](ptarget, pcur) tmpvar fun xmlCopyPropList(ptarget: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlattr]): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlCopyPropList[NullablePointer[Xmlattr]](ptarget, pcur) tmpvar fun xmlCopyDtd(pdtd: NullablePointer[Xmldtd]): NullablePointer[Xmldtd] => var tmpvar: NullablePointer[Xmldtd] = @xmlCopyDtd[NullablePointer[Xmldtd]](pdtd) tmpvar fun xmlCopyDoc(pdoc: NullablePointer[Xmldoc] tag, precursive: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlCopyDoc[NullablePointer[Xmldoc]](pdoc, precursive) tmpvar fun xmlNewDocNode(pdoc: NullablePointer[Xmldoc] tag, pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocNode[NullablePointer[Xmlnode]](pdoc, pns, pname.cstring(), pcontent.cstring()) tmpvar fun xmlNewDocNodeEatName(pdoc: NullablePointer[Xmldoc] tag, pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocNodeEatName[NullablePointer[Xmlnode]](pdoc, pns, pname.cstring(), pcontent.cstring()) tmpvar fun xmlNewNode(pns: NullablePointer[Xmlns], pname: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewNode[NullablePointer[Xmlnode]](pns, pname.cstring()) tmpvar fun xmlNewNodeEatName(pns: NullablePointer[Xmlns], pname: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewNodeEatName[NullablePointer[Xmlnode]](pns, pname.cstring()) tmpvar fun xmlNewChild(pparent: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewChild[NullablePointer[Xmlnode]](pparent, pns, pname.cstring(), pcontent.cstring()) tmpvar fun xmlNewDocText(pdoc: NullablePointer[Xmldoc] tag, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocText[NullablePointer[Xmlnode]](pdoc, pcontent.cstring()) tmpvar fun xmlNewText(pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewText[NullablePointer[Xmlnode]](pcontent.cstring()) tmpvar fun xmlNewDocPI(pdoc: NullablePointer[Xmldoc] tag, pname: String, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocPI[NullablePointer[Xmlnode]](pdoc, pname.cstring(), pcontent.cstring()) tmpvar fun xmlNewPI(pname: String, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewPI[NullablePointer[Xmlnode]](pname.cstring(), pcontent.cstring()) tmpvar fun xmlNewDocTextLen(pdoc: NullablePointer[Xmldoc] tag, pcontent: String, plen: I32): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocTextLen[NullablePointer[Xmlnode]](pdoc, pcontent.cstring(), plen) tmpvar fun xmlNewTextLen(pcontent: String, plen: I32): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewTextLen[NullablePointer[Xmlnode]](pcontent.cstring(), plen) tmpvar fun xmlNewDocComment(pdoc: NullablePointer[Xmldoc] tag, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocComment[NullablePointer[Xmlnode]](pdoc, pcontent.cstring()) tmpvar fun xmlNewComment(pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewComment[NullablePointer[Xmlnode]](pcontent.cstring()) tmpvar fun xmlNewCDataBlock(pdoc: NullablePointer[Xmldoc] tag, pcontent: String, plen: I32): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewCDataBlock[NullablePointer[Xmlnode]](pdoc, pcontent.cstring(), plen) tmpvar fun xmlNewCharRef(pdoc: NullablePointer[Xmldoc] tag, pname: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewCharRef[NullablePointer[Xmlnode]](pdoc, pname.cstring()) tmpvar fun xmlNewReference(pdoc: NullablePointer[Xmldoc] tag, pname: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewReference[NullablePointer[Xmlnode]](pdoc, pname.cstring()) tmpvar fun xmlCopyNode(pnode: NullablePointer[Xmlnode], precursive: I32): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlCopyNode[NullablePointer[Xmlnode]](pnode, precursive) tmpvar fun xmlDocCopyNode(pnode: NullablePointer[Xmlnode], pdoc: NullablePointer[Xmldoc] tag, precursive: I32): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlDocCopyNode[NullablePointer[Xmlnode]](pnode, pdoc, precursive) tmpvar fun xmlDocCopyNodeList(pdoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlDocCopyNodeList[NullablePointer[Xmlnode]](pdoc, pnode) tmpvar fun xmlCopyNodeList(pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlCopyNodeList[NullablePointer[Xmlnode]](pnode) tmpvar fun xmlNewTextChild(pparent: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewTextChild[NullablePointer[Xmlnode]](pparent, pns, pname.cstring(), pcontent.cstring()) tmpvar fun xmlNewDocRawNode(pdoc: NullablePointer[Xmldoc] tag, pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocRawNode[NullablePointer[Xmlnode]](pdoc, pns, pname.cstring(), pcontent.cstring()) tmpvar fun xmlNewDocFragment(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNewDocFragment[NullablePointer[Xmlnode]](pdoc) tmpvar fun xmlGetLineNo(pnode: NullablePointer[Xmlnode]): I64 => var tmpvar: I64 = @xmlGetLineNo[I64](pnode) tmpvar fun xmlGetNodePath(pnode: NullablePointer[Xmlnode]): String => var tmpvar: Pointer[U8] = @xmlGetNodePath[Pointer[U8]](pnode) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlDocGetRootElement(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlDocGetRootElement[NullablePointer[Xmlnode]](pdoc) tmpvar fun xmlGetLastChild(pparent: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlGetLastChild[NullablePointer[Xmlnode]](pparent) tmpvar fun xmlNodeIsText(pnode: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlNodeIsText[I32](pnode) tmpvar fun xmlIsBlankNode(pnode: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlIsBlankNode[I32](pnode) tmpvar fun xmlDocSetRootElement(pdoc: NullablePointer[Xmldoc] tag, proot: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlDocSetRootElement[NullablePointer[Xmlnode]](pdoc, proot) tmpvar fun xmlNodeSetName(pcur: NullablePointer[Xmlnode], pname: String): None => var tmpvar: None = @xmlNodeSetName[None](pcur, pname.cstring()) tmpvar fun xmlAddChild(pparent: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlAddChild[NullablePointer[Xmlnode]](pparent, pcur) tmpvar fun xmlAddChildList(pparent: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlAddChildList[NullablePointer[Xmlnode]](pparent, pcur) tmpvar fun xmlReplaceNode(pold: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlReplaceNode[NullablePointer[Xmlnode]](pold, pcur) tmpvar fun xmlAddPrevSibling(pcur: NullablePointer[Xmlnode], pelem: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlAddPrevSibling[NullablePointer[Xmlnode]](pcur, pelem) tmpvar fun xmlAddSibling(pcur: NullablePointer[Xmlnode], pelem: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlAddSibling[NullablePointer[Xmlnode]](pcur, pelem) tmpvar fun xmlAddNextSibling(pcur: NullablePointer[Xmlnode], pelem: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlAddNextSibling[NullablePointer[Xmlnode]](pcur, pelem) tmpvar fun xmlUnlinkNode(pcur: NullablePointer[Xmlnode]): None => var tmpvar: None = @xmlUnlinkNode[None](pcur) tmpvar fun xmlTextMerge(pfirst: NullablePointer[Xmlnode], psecond: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlTextMerge[NullablePointer[Xmlnode]](pfirst, psecond) tmpvar fun xmlTextConcat(pnode: NullablePointer[Xmlnode], pcontent: String, plen: I32): I32 => var tmpvar: I32 = @xmlTextConcat[I32](pnode, pcontent.cstring(), plen) tmpvar fun xmlFreeNodeList(pcur: NullablePointer[Xmlnode]): None => var tmpvar: None = @xmlFreeNodeList[None](pcur) tmpvar fun xmlFreeNode(pcur: NullablePointer[Xmlnode]): None => var tmpvar: None = @xmlFreeNode[None](pcur) tmpvar fun xmlSetTreeDoc(ptree: NullablePointer[Xmlnode], pdoc: NullablePointer[Xmldoc] tag): None => var tmpvar: None = @xmlSetTreeDoc[None](ptree, pdoc) tmpvar fun xmlSetListDoc(plist: NullablePointer[Xmlnode], pdoc: NullablePointer[Xmldoc] tag): None => var tmpvar: None = @xmlSetListDoc[None](plist, pdoc) tmpvar fun xmlSearchNs(pdoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode], pnameSpace: String): NullablePointer[Xmlns] => var tmpvar: NullablePointer[Xmlns] = @xmlSearchNs[NullablePointer[Xmlns]](pdoc, pnode, pnameSpace.cstring()) tmpvar fun xmlSearchNsByHref(pdoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode], phref: String): NullablePointer[Xmlns] => var tmpvar: NullablePointer[Xmlns] = @xmlSearchNsByHref[NullablePointer[Xmlns]](pdoc, pnode, phref.cstring()) tmpvar fun xmlGetNsList(pdoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode]): Pointer[NullablePointer[Xmlns]] => var tmpvar: Pointer[NullablePointer[Xmlns]] = @xmlGetNsList[Pointer[NullablePointer[Xmlns]]](pdoc, pnode) tmpvar fun xmlSetNs(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns]): None => var tmpvar: None = @xmlSetNs[None](pnode, pns) tmpvar fun xmlCopyNamespace(pcur: NullablePointer[Xmlns]): NullablePointer[Xmlns] => var tmpvar: NullablePointer[Xmlns] = @xmlCopyNamespace[NullablePointer[Xmlns]](pcur) tmpvar fun xmlCopyNamespaceList(pcur: NullablePointer[Xmlns]): NullablePointer[Xmlns] => var tmpvar: NullablePointer[Xmlns] = @xmlCopyNamespaceList[NullablePointer[Xmlns]](pcur) tmpvar fun xmlSetProp(pnode: NullablePointer[Xmlnode], pname: String, pvalue: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlSetProp[NullablePointer[Xmlattr]](pnode, pname.cstring(), pvalue.cstring()) tmpvar fun xmlSetNsProp(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pvalue: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlSetNsProp[NullablePointer[Xmlattr]](pnode, pns, pname.cstring(), pvalue.cstring()) tmpvar fun xmlGetNoNsProp(pnode: NullablePointer[Xmlnode], pname: String): String => var tmpvar: Pointer[U8] = @xmlGetNoNsProp[Pointer[U8]](pnode, pname.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlGetProp(pnode: NullablePointer[Xmlnode], pname: String): String => var tmpvar: Pointer[U8] = @xmlGetProp[Pointer[U8]](pnode, pname.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHasProp(pnode: NullablePointer[Xmlnode], pname: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlHasProp[NullablePointer[Xmlattr]](pnode, pname.cstring()) tmpvar fun xmlHasNsProp(pnode: NullablePointer[Xmlnode], pname: String, pnameSpace: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlHasNsProp[NullablePointer[Xmlattr]](pnode, pname.cstring(), pnameSpace.cstring()) tmpvar fun xmlGetNsProp(pnode: NullablePointer[Xmlnode], pname: String, pnameSpace: String): String => var tmpvar: Pointer[U8] = @xmlGetNsProp[Pointer[U8]](pnode, pname.cstring(), pnameSpace.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStringGetNodeList(pdoc: NullablePointer[Xmldoc] tag, pvalue: String): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlStringGetNodeList[NullablePointer[Xmlnode]](pdoc, pvalue.cstring()) tmpvar fun xmlStringLenGetNodeList(pdoc: NullablePointer[Xmldoc] tag, pvalue: String, plen: I32): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlStringLenGetNodeList[NullablePointer[Xmlnode]](pdoc, pvalue.cstring(), plen) tmpvar fun xmlNodeListGetString(pdoc: NullablePointer[Xmldoc] tag, plist: NullablePointer[Xmlnode], pinLine: I32): String => var tmpvar: Pointer[U8] = @xmlNodeListGetString[Pointer[U8]](pdoc, plist, pinLine) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNodeListGetRawString(pdoc: NullablePointer[Xmldoc] tag, plist: NullablePointer[Xmlnode], pinLine: I32): String => var tmpvar: Pointer[U8] = @xmlNodeListGetRawString[Pointer[U8]](pdoc, plist, pinLine) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNodeSetContent(pcur: NullablePointer[Xmlnode], pcontent: String): None => var tmpvar: None = @xmlNodeSetContent[None](pcur, pcontent.cstring()) tmpvar fun xmlNodeSetContentLen(pcur: NullablePointer[Xmlnode], pcontent: String, plen: I32): None => var tmpvar: None = @xmlNodeSetContentLen[None](pcur, pcontent.cstring(), plen) tmpvar fun xmlNodeAddContent(pcur: NullablePointer[Xmlnode], pcontent: String): None => var tmpvar: None = @xmlNodeAddContent[None](pcur, pcontent.cstring()) tmpvar fun xmlNodeAddContentLen(pcur: NullablePointer[Xmlnode], pcontent: String, plen: I32): None => var tmpvar: None = @xmlNodeAddContentLen[None](pcur, pcontent.cstring(), plen) tmpvar fun xmlNodeGetContent(pcur: NullablePointer[Xmlnode]): String => var tmpvar: Pointer[U8] = @xmlNodeGetContent[Pointer[U8]](pcur) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNodeBufGetContent(pbuffer: NullablePointer[Xmlbuffer], pcur: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlNodeBufGetContent[I32](pbuffer, pcur) tmpvar fun xmlBufGetNodeContent(pbuf: NullablePointer[Xmlbuf], pcur: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlBufGetNodeContent[I32](pbuf, pcur) tmpvar fun xmlNodeGetLang(pcur: NullablePointer[Xmlnode]): String => var tmpvar: Pointer[U8] = @xmlNodeGetLang[Pointer[U8]](pcur) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNodeGetSpacePreserve(pcur: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlNodeGetSpacePreserve[I32](pcur) tmpvar fun xmlNodeSetLang(pcur: NullablePointer[Xmlnode], plang: String): None => var tmpvar: None = @xmlNodeSetLang[None](pcur, plang.cstring()) tmpvar fun xmlNodeSetSpacePreserve(pcur: NullablePointer[Xmlnode], pval: I32): None => var tmpvar: None = @xmlNodeSetSpacePreserve[None](pcur, pval) tmpvar fun xmlNodeGetBase(pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode]): String => var tmpvar: Pointer[U8] = @xmlNodeGetBase[Pointer[U8]](pdoc, pcur) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNodeSetBase(pcur: NullablePointer[Xmlnode], puri: String): None => var tmpvar: None = @xmlNodeSetBase[None](pcur, puri.cstring()) tmpvar fun xmlRemoveProp(pcur: NullablePointer[Xmlattr]): I32 => var tmpvar: I32 = @xmlRemoveProp[I32](pcur) tmpvar fun xmlUnsetNsProp(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String): I32 => var tmpvar: I32 = @xmlUnsetNsProp[I32](pnode, pns, pname.cstring()) tmpvar fun xmlUnsetProp(pnode: NullablePointer[Xmlnode], pname: String): I32 => var tmpvar: I32 = @xmlUnsetProp[I32](pnode, pname.cstring()) tmpvar fun xmlBufferWriteChar(pbuf: NullablePointer[Xmlbuffer], pstring: String): None => var tmpvar: None = @xmlBufferWriteChar[None](pbuf, pstring.cstring()) tmpvar fun xmlBufferWriteQuotedString(pbuf: NullablePointer[Xmlbuffer], pstring: String): None => var tmpvar: None = @xmlBufferWriteQuotedString[None](pbuf, pstring.cstring()) tmpvar fun xmlAttrSerializeTxtContent(pbuf: NullablePointer[Xmlbuffer], pdoc: NullablePointer[Xmldoc] tag, pattr: NullablePointer[Xmlattr], pstring: String): None => var tmpvar: None = @xmlAttrSerializeTxtContent[None](pbuf, pdoc, pattr, pstring.cstring()) tmpvar fun xmlReconciliateNs(pdoc: NullablePointer[Xmldoc] tag, ptree: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlReconciliateNs[I32](pdoc, ptree) tmpvar fun xmlDocDumpFormatMemory(pcur: NullablePointer[Xmldoc] tag, pmem: Pointer[Pointer[U8] tag], psize: Pointer[I32], pformat: I32): None => var tmpvar: None = @xmlDocDumpFormatMemory[None](pcur, pmem, psize, pformat) tmpvar fun xmlDocDumpMemory(pcur: NullablePointer[Xmldoc] tag, pmem: Pointer[Pointer[U8] tag], psize: Pointer[I32]): None => var tmpvar: None = @xmlDocDumpMemory[None](pcur, pmem, psize) tmpvar fun xmlDocDumpMemoryEnc(pout_doc: NullablePointer[Xmldoc] tag, pdoc_txt_ptr: Pointer[Pointer[U8] tag], pdoc_txt_len: Pointer[I32], ptxt_encoding: String): None => var tmpvar: None = @xmlDocDumpMemoryEnc[None](pout_doc, pdoc_txt_ptr, pdoc_txt_len, ptxt_encoding.cstring()) tmpvar fun xmlDocDumpFormatMemoryEnc(pout_doc: NullablePointer[Xmldoc] tag, pdoc_txt_ptr: Pointer[Pointer[U8] tag], pdoc_txt_len: Pointer[I32], ptxt_encoding: String, pformat: I32): None => var tmpvar: None = @xmlDocDumpFormatMemoryEnc[None](pout_doc, pdoc_txt_ptr, pdoc_txt_len, ptxt_encoding.cstring(), pformat) tmpvar fun xmlDocFormatDump(pf: NullablePointer[IoFile], pcur: NullablePointer[Xmldoc] tag, pformat: I32): I32 => var tmpvar: I32 = @xmlDocFormatDump[I32](pf, pcur, pformat) tmpvar fun xmlDocDump(pf: NullablePointer[IoFile], pcur: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlDocDump[I32](pf, pcur) tmpvar fun xmlElemDump(pf: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode]): None => var tmpvar: None = @xmlElemDump[None](pf, pdoc, pcur) tmpvar fun xmlSaveFile(pfilename: String, pcur: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlSaveFile[I32](pfilename.cstring(), pcur) tmpvar fun xmlSaveFormatFile(pfilename: String, pcur: NullablePointer[Xmldoc] tag, pformat: I32): I32 => var tmpvar: I32 = @xmlSaveFormatFile[I32](pfilename.cstring(), pcur, pformat) tmpvar fun xmlBufNodeDump(pbuf: NullablePointer[Xmlbuf], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode], plevel: I32, pformat: I32): U64 => var tmpvar: U64 = @xmlBufNodeDump[U64](pbuf, pdoc, pcur, plevel, pformat) tmpvar fun xmlNodeDump(pbuf: NullablePointer[Xmlbuffer], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode], plevel: I32, pformat: I32): I32 => var tmpvar: I32 = @xmlNodeDump[I32](pbuf, pdoc, pcur, plevel, pformat) tmpvar fun xmlSaveFileTo(pbuf: NullablePointer[Xmloutputbuffer], pcur: NullablePointer[Xmldoc] tag, pencoding: String): I32 => var tmpvar: I32 = @xmlSaveFileTo[I32](pbuf, pcur, pencoding.cstring()) tmpvar fun xmlSaveFormatFileTo(pbuf: NullablePointer[Xmloutputbuffer], pcur: NullablePointer[Xmldoc] tag, pencoding: String, pformat: I32): I32 => var tmpvar: I32 = @xmlSaveFormatFileTo[I32](pbuf, pcur, pencoding.cstring(), pformat) tmpvar fun xmlNodeDumpOutput(pbuf: NullablePointer[Xmloutputbuffer], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode], plevel: I32, pformat: I32, pencoding: String): None => var tmpvar: None = @xmlNodeDumpOutput[None](pbuf, pdoc, pcur, plevel, pformat, pencoding.cstring()) tmpvar fun xmlSaveFormatFileEnc(pfilename: String, pcur: NullablePointer[Xmldoc] tag, pencoding: String, pformat: I32): I32 => var tmpvar: I32 = @xmlSaveFormatFileEnc[I32](pfilename.cstring(), pcur, pencoding.cstring(), pformat) tmpvar fun xmlSaveFileEnc(pfilename: String, pcur: NullablePointer[Xmldoc] tag, pencoding: String): I32 => var tmpvar: I32 = @xmlSaveFileEnc[I32](pfilename.cstring(), pcur, pencoding.cstring()) tmpvar fun xmlIsXHTML(psystemID: String, ppublicID: String): I32 => var tmpvar: I32 = @xmlIsXHTML[I32](psystemID.cstring(), ppublicID.cstring()) tmpvar fun xmlGetDocCompressMode(pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlGetDocCompressMode[I32](pdoc) tmpvar fun xmlSetDocCompressMode(pdoc: NullablePointer[Xmldoc] tag, pmode: I32): None => var tmpvar: None = @xmlSetDocCompressMode[None](pdoc, pmode) tmpvar fun xmlGetCompressMode(): I32 => var tmpvar: I32 = @xmlGetCompressMode[I32]() tmpvar fun xmlSetCompressMode(pmode: I32): None => var tmpvar: None = @xmlSetCompressMode[None](pmode) tmpvar fun xmlDOMWrapNewCtxt(): NullablePointer[Xmldomwrapctxt] => var tmpvar: NullablePointer[Xmldomwrapctxt] = @xmlDOMWrapNewCtxt[NullablePointer[Xmldomwrapctxt]]() tmpvar fun xmlDOMWrapFreeCtxt(pctxt: NullablePointer[Xmldomwrapctxt]): None => var tmpvar: None = @xmlDOMWrapFreeCtxt[None](pctxt) tmpvar fun xmlDOMWrapReconcileNamespaces(pctxt: NullablePointer[Xmldomwrapctxt], pelem: NullablePointer[Xmlnode], poptions: I32): I32 => var tmpvar: I32 = @xmlDOMWrapReconcileNamespaces[I32](pctxt, pelem, poptions) tmpvar fun xmlDOMWrapAdoptNode(pctxt: NullablePointer[Xmldomwrapctxt], psourceDoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode], pdestDoc: NullablePointer[Xmldoc] tag, pdestParent: NullablePointer[Xmlnode], poptions: I32): I32 => var tmpvar: I32 = @xmlDOMWrapAdoptNode[I32](pctxt, psourceDoc, pnode, pdestDoc, pdestParent, poptions) tmpvar fun xmlDOMWrapRemoveNode(pctxt: NullablePointer[Xmldomwrapctxt], pdoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode], poptions: I32): I32 => var tmpvar: I32 = @xmlDOMWrapRemoveNode[I32](pctxt, pdoc, pnode, poptions) tmpvar fun xmlDOMWrapCloneNode(pctxt: NullablePointer[Xmldomwrapctxt], psourceDoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode], pclonedNode: Pointer[NullablePointer[Xmlnode]], pdestDoc: NullablePointer[Xmldoc] tag, pdestParent: NullablePointer[Xmlnode], pdeep: I32, poptions: I32): I32 => var tmpvar: I32 = @xmlDOMWrapCloneNode[I32](pctxt, psourceDoc, pnode, pclonedNode, pdestDoc, pdestParent, pdeep, poptions) tmpvar fun xmlChildElementCount(pparent: NullablePointer[Xmlnode]): U64 => var tmpvar: U64 = @xmlChildElementCount[U64](pparent) tmpvar fun xmlNextElementSibling(pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlNextElementSibling[NullablePointer[Xmlnode]](pnode) tmpvar fun xmlFirstElementChild(pparent: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlFirstElementChild[NullablePointer[Xmlnode]](pparent) tmpvar fun xmlLastElementChild(pparent: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlLastElementChild[NullablePointer[Xmlnode]](pparent) tmpvar fun xmlPreviousElementSibling(pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlPreviousElementSibling[NullablePointer[Xmlnode]](pnode) tmpvar fun xmlInitParser(): None => var tmpvar: None = @xmlInitParser[None]() tmpvar fun xmlCleanupParser(): None => var tmpvar: None = @xmlCleanupParser[None]() tmpvar fun xmlParserInputRead(pin: NullablePointer[Xmlparserinput], plen: I32): I32 => var tmpvar: I32 = @xmlParserInputRead[I32](pin, plen) tmpvar fun xmlParserInputGrow(pin: NullablePointer[Xmlparserinput], plen: I32): I32 => var tmpvar: I32 = @xmlParserInputGrow[I32](pin, plen) tmpvar fun xmlParseDoc(pcur: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlParseDoc[NullablePointer[Xmldoc]](pcur.cstring()) tmpvar fun xmlParseFile(pfilename: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlParseFile[NullablePointer[Xmldoc]](pfilename.cstring()) tmpvar fun xmlParseMemory(pbuffer: String, psize: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlParseMemory[NullablePointer[Xmldoc]](pbuffer.cstring(), psize) tmpvar fun xmlSubstituteEntitiesDefault(pval: I32): I32 => var tmpvar: I32 = @xmlSubstituteEntitiesDefault[I32](pval) tmpvar fun xmlKeepBlanksDefault(pval: I32): I32 => var tmpvar: I32 = @xmlKeepBlanksDefault[I32](pval) tmpvar fun xmlStopParser(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlStopParser[None](pctxt) tmpvar fun xmlPedanticParserDefault(pval: I32): I32 => var tmpvar: I32 = @xmlPedanticParserDefault[I32](pval) tmpvar fun xmlLineNumbersDefault(pval: I32): I32 => var tmpvar: I32 = @xmlLineNumbersDefault[I32](pval) tmpvar fun xmlRecoverDoc(pcur: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlRecoverDoc[NullablePointer[Xmldoc]](pcur.cstring()) tmpvar fun xmlRecoverMemory(pbuffer: String, psize: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlRecoverMemory[NullablePointer[Xmldoc]](pbuffer.cstring(), psize) tmpvar fun xmlRecoverFile(pfilename: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlRecoverFile[NullablePointer[Xmldoc]](pfilename.cstring()) tmpvar fun xmlParseDocument(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @xmlParseDocument[I32](pctxt) tmpvar fun xmlParseExtParsedEnt(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @xmlParseExtParsedEnt[I32](pctxt) tmpvar fun xmlSAXUserParseFile(psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pfilename: String): I32 => var tmpvar: I32 = @xmlSAXUserParseFile[I32](psax, puser_data, pfilename.cstring()) tmpvar fun xmlSAXUserParseMemory(psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pbuffer: String, psize: I32): I32 => var tmpvar: I32 = @xmlSAXUserParseMemory[I32](psax, puser_data, pbuffer.cstring(), psize) tmpvar fun xmlSAXParseDoc(psax: NullablePointer[Xmlsaxhandler], pcur: String, precovery: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlSAXParseDoc[NullablePointer[Xmldoc]](psax, pcur.cstring(), precovery) tmpvar fun xmlSAXParseMemory(psax: NullablePointer[Xmlsaxhandler], pbuffer: String, psize: I32, precovery: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlSAXParseMemory[NullablePointer[Xmldoc]](psax, pbuffer.cstring(), psize, precovery) tmpvar fun xmlSAXParseMemoryWithData(psax: NullablePointer[Xmlsaxhandler], pbuffer: String, psize: I32, precovery: I32, pdata: Pointer[U8]): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlSAXParseMemoryWithData[NullablePointer[Xmldoc]](psax, pbuffer.cstring(), psize, precovery, pdata) tmpvar fun xmlSAXParseFile(psax: NullablePointer[Xmlsaxhandler], pfilename: String, precovery: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlSAXParseFile[NullablePointer[Xmldoc]](psax, pfilename.cstring(), precovery) tmpvar fun xmlSAXParseFileWithData(psax: NullablePointer[Xmlsaxhandler], pfilename: String, precovery: I32, pdata: Pointer[U8]): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlSAXParseFileWithData[NullablePointer[Xmldoc]](psax, pfilename.cstring(), precovery, pdata) tmpvar fun xmlSAXParseEntity(psax: NullablePointer[Xmlsaxhandler], pfilename: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlSAXParseEntity[NullablePointer[Xmldoc]](psax, pfilename.cstring()) tmpvar fun xmlParseEntity(pfilename: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlParseEntity[NullablePointer[Xmldoc]](pfilename.cstring()) tmpvar fun xmlSAXParseDTD(psax: NullablePointer[Xmlsaxhandler], pExternalID: String, pSystemID: String): NullablePointer[Xmldtd] => var tmpvar: NullablePointer[Xmldtd] = @xmlSAXParseDTD[NullablePointer[Xmldtd]](psax, pExternalID.cstring(), pSystemID.cstring()) tmpvar fun xmlParseDTD(pExternalID: String, pSystemID: String): NullablePointer[Xmldtd] => var tmpvar: NullablePointer[Xmldtd] = @xmlParseDTD[NullablePointer[Xmldtd]](pExternalID.cstring(), pSystemID.cstring()) tmpvar fun xmlIOParseDTD(psax: NullablePointer[Xmlsaxhandler], pinput: NullablePointer[Xmlparserinputbuffer], penc: I32): NullablePointer[Xmldtd] => var tmpvar: NullablePointer[Xmldtd] = @xmlIOParseDTD[NullablePointer[Xmldtd]](psax, pinput, penc) tmpvar fun xmlParseBalancedChunkMemory(pdoc: NullablePointer[Xmldoc] tag, psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pdepth: I32, pstring: String, plst: Pointer[NullablePointer[Xmlnode]]): I32 => var tmpvar: I32 = @xmlParseBalancedChunkMemory[I32](pdoc, psax, puser_data, pdepth, pstring.cstring(), plst) tmpvar fun xmlParseInNodeContext(pnode: NullablePointer[Xmlnode], pdata: String, pdatalen: I32, poptions: I32, plst: Pointer[NullablePointer[Xmlnode]]): I32 => var tmpvar: I32 = @xmlParseInNodeContext[I32](pnode, pdata.cstring(), pdatalen, poptions, plst) tmpvar fun xmlParseBalancedChunkMemoryRecover(pdoc: NullablePointer[Xmldoc] tag, psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pdepth: I32, pstring: String, plst: Pointer[NullablePointer[Xmlnode]], precover: I32): I32 => var tmpvar: I32 = @xmlParseBalancedChunkMemoryRecover[I32](pdoc, psax, puser_data, pdepth, pstring.cstring(), plst, precover) tmpvar fun xmlParseExternalEntity(pdoc: NullablePointer[Xmldoc] tag, psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pdepth: I32, pURL: String, pID: String, plst: Pointer[NullablePointer[Xmlnode]]): I32 => var tmpvar: I32 = @xmlParseExternalEntity[I32](pdoc, psax, puser_data, pdepth, pURL.cstring(), pID.cstring(), plst) tmpvar fun xmlParseCtxtExternalEntity(pctx: NullablePointer[Xmlparserctxt], pURL: String, pID: String, plst: Pointer[NullablePointer[Xmlnode]]): I32 => var tmpvar: I32 = @xmlParseCtxtExternalEntity[I32](pctx, pURL.cstring(), pID.cstring(), plst) tmpvar fun xmlNewParserCtxt(): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlNewParserCtxt[NullablePointer[Xmlparserctxt]]() tmpvar fun xmlInitParserCtxt(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @xmlInitParserCtxt[I32](pctxt) tmpvar fun xmlClearParserCtxt(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlClearParserCtxt[None](pctxt) tmpvar fun xmlFreeParserCtxt(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlFreeParserCtxt[None](pctxt) tmpvar fun xmlSetupParserForBuffer(pctxt: NullablePointer[Xmlparserctxt], pbuffer: String, pfilename: String): None => var tmpvar: None = @xmlSetupParserForBuffer[None](pctxt, pbuffer.cstring(), pfilename.cstring()) tmpvar fun xmlCreateDocParserCtxt(pcur: String): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlCreateDocParserCtxt[NullablePointer[Xmlparserctxt]](pcur.cstring()) tmpvar fun xmlGetFeaturesList(plen: Pointer[I32], presult: Pointer[Pointer[U8] tag]): I32 => var tmpvar: I32 = @xmlGetFeaturesList[I32](plen, presult) tmpvar fun xmlGetFeature(pctxt: NullablePointer[Xmlparserctxt], pname: String, presult: Pointer[U8]): I32 => var tmpvar: I32 = @xmlGetFeature[I32](pctxt, pname.cstring(), presult) tmpvar fun xmlSetFeature(pctxt: NullablePointer[Xmlparserctxt], pname: String, pvalue: Pointer[U8]): I32 => var tmpvar: I32 = @xmlSetFeature[I32](pctxt, pname.cstring(), pvalue) tmpvar fun xmlCreatePushParserCtxt(psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pchunk: String, psize: I32, pfilename: String): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlCreatePushParserCtxt[NullablePointer[Xmlparserctxt]](psax, puser_data, pchunk.cstring(), psize, pfilename.cstring()) tmpvar fun xmlParseChunk(pctxt: NullablePointer[Xmlparserctxt], pchunk: String, psize: I32, pterminate: I32): I32 => var tmpvar: I32 = @xmlParseChunk[I32](pctxt, pchunk.cstring(), psize, pterminate) tmpvar fun xmlCreateIOParserCtxt(psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], penc: I32): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlCreateIOParserCtxt[NullablePointer[Xmlparserctxt]](psax, puser_data, pioread, pioclose, pioctx, penc) tmpvar fun xmlNewIOInputStream(pctxt: NullablePointer[Xmlparserctxt], pinput: NullablePointer[Xmlparserinputbuffer], penc: I32): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlNewIOInputStream[NullablePointer[Xmlparserinput]](pctxt, pinput, penc) tmpvar fun xmlParserFindNodeInfo(pctxt: NullablePointer[Xmlparserctxt], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlparsernodeinfo] => var tmpvar: NullablePointer[Xmlparsernodeinfo] = @xmlParserFindNodeInfo[NullablePointer[Xmlparsernodeinfo]](pctxt, pnode) tmpvar fun xmlInitNodeInfoSeq(pseq: NullablePointer[Xmlparsernodeinfoseq]): None => var tmpvar: None = @xmlInitNodeInfoSeq[None](pseq) tmpvar fun xmlClearNodeInfoSeq(pseq: NullablePointer[Xmlparsernodeinfoseq]): None => var tmpvar: None = @xmlClearNodeInfoSeq[None](pseq) tmpvar fun xmlParserFindNodeInfoIndex(pseq: NullablePointer[Xmlparsernodeinfoseq], pnode: NullablePointer[Xmlnode]): U64 => var tmpvar: U64 = @xmlParserFindNodeInfoIndex[U64](pseq, pnode) tmpvar fun xmlParserAddNodeInfo(pctxt: NullablePointer[Xmlparserctxt], pinfo: NullablePointer[Xmlparsernodeinfo]): None => var tmpvar: None = @xmlParserAddNodeInfo[None](pctxt, pinfo) tmpvar fun xmlSetExternalEntityLoader(pf: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xmlSetExternalEntityLoader[None](pf) tmpvar fun xmlGetExternalEntityLoader(): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlGetExternalEntityLoader[Pointer[FUNCTIONPOINTER]]() tmpvar fun xmlLoadExternalEntity(pURL: String, pID: String, pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlLoadExternalEntity[NullablePointer[Xmlparserinput]](pURL.cstring(), pID.cstring(), pctxt) tmpvar fun xmlByteConsumed(pctxt: NullablePointer[Xmlparserctxt]): I64 => var tmpvar: I64 = @xmlByteConsumed[I64](pctxt) tmpvar fun xmlCtxtReset(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlCtxtReset[None](pctxt) tmpvar fun xmlCtxtResetPush(pctxt: NullablePointer[Xmlparserctxt], pchunk: String, psize: I32, pfilename: String, pencoding: String): I32 => var tmpvar: I32 = @xmlCtxtResetPush[I32](pctxt, pchunk.cstring(), psize, pfilename.cstring(), pencoding.cstring()) tmpvar fun xmlCtxtUseOptions(pctxt: NullablePointer[Xmlparserctxt], poptions: I32): I32 => var tmpvar: I32 = @xmlCtxtUseOptions[I32](pctxt, poptions) tmpvar fun xmlReadDoc(pcur: String, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlReadDoc[NullablePointer[Xmldoc]](pcur.cstring(), pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReadFile(pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlReadFile[NullablePointer[Xmldoc]](pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReadMemory(pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlReadMemory[NullablePointer[Xmldoc]](pbuffer.cstring(), psize, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReadFd(pfd: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlReadFd[NullablePointer[Xmldoc]](pfd, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReadIO(pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlReadIO[NullablePointer[Xmldoc]](pioread, pioclose, pioctx, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlCtxtReadDoc(pctxt: NullablePointer[Xmlparserctxt], pcur: String, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlCtxtReadDoc[NullablePointer[Xmldoc]](pctxt, pcur.cstring(), pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlCtxtReadFile(pctxt: NullablePointer[Xmlparserctxt], pfilename: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlCtxtReadFile[NullablePointer[Xmldoc]](pctxt, pfilename.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlCtxtReadMemory(pctxt: NullablePointer[Xmlparserctxt], pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlCtxtReadMemory[NullablePointer[Xmldoc]](pctxt, pbuffer.cstring(), psize, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlCtxtReadFd(pctxt: NullablePointer[Xmlparserctxt], pfd: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlCtxtReadFd[NullablePointer[Xmldoc]](pctxt, pfd, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlCtxtReadIO(pctxt: NullablePointer[Xmlparserctxt], pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlCtxtReadIO[NullablePointer[Xmldoc]](pctxt, pioread, pioclose, pioctx, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlHasFeature(pfeature: I32): I32 => var tmpvar: I32 = @xmlHasFeature[I32](pfeature) tmpvar fun xmlInitializePredefinedEntities(): None => var tmpvar: None = @xmlInitializePredefinedEntities[None]() tmpvar fun xmlNewEntity(pdoc: NullablePointer[Xmldoc] tag, pname: String, ptype: I32, pExternalID: String, pSystemID: String, pcontent: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlNewEntity[NullablePointer[Xmlentity]](pdoc, pname.cstring(), ptype, pExternalID.cstring(), pSystemID.cstring(), pcontent.cstring()) tmpvar fun xmlAddDocEntity(pdoc: NullablePointer[Xmldoc] tag, pname: String, ptype: I32, pExternalID: String, pSystemID: String, pcontent: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlAddDocEntity[NullablePointer[Xmlentity]](pdoc, pname.cstring(), ptype, pExternalID.cstring(), pSystemID.cstring(), pcontent.cstring()) tmpvar fun xmlAddDtdEntity(pdoc: NullablePointer[Xmldoc] tag, pname: String, ptype: I32, pExternalID: String, pSystemID: String, pcontent: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlAddDtdEntity[NullablePointer[Xmlentity]](pdoc, pname.cstring(), ptype, pExternalID.cstring(), pSystemID.cstring(), pcontent.cstring()) tmpvar fun xmlGetPredefinedEntity(pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlGetPredefinedEntity[NullablePointer[Xmlentity]](pname.cstring()) tmpvar fun xmlGetDocEntity(pdoc: NullablePointer[Xmldoc] tag, pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlGetDocEntity[NullablePointer[Xmlentity]](pdoc, pname.cstring()) tmpvar fun xmlGetDtdEntity(pdoc: NullablePointer[Xmldoc] tag, pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlGetDtdEntity[NullablePointer[Xmlentity]](pdoc, pname.cstring()) tmpvar fun xmlGetParameterEntity(pdoc: NullablePointer[Xmldoc] tag, pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlGetParameterEntity[NullablePointer[Xmlentity]](pdoc, pname.cstring()) tmpvar fun xmlEncodeEntities(pdoc: NullablePointer[Xmldoc] tag, pinput: String): String => var tmpvar: Pointer[U8] = @xmlEncodeEntities[Pointer[U8]](pdoc, pinput.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlEncodeEntitiesReentrant(pdoc: NullablePointer[Xmldoc] tag, pinput: String): String => var tmpvar: Pointer[U8] = @xmlEncodeEntitiesReentrant[Pointer[U8]](pdoc, pinput.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlEncodeSpecialChars(pdoc: NullablePointer[Xmldoc] tag, pinput: String): String => var tmpvar: Pointer[U8] = @xmlEncodeSpecialChars[Pointer[U8]](pdoc, pinput.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCreateEntitiesTable(): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlCreateEntitiesTable[NullablePointer[Xmlhashtable]]() tmpvar fun xmlCopyEntitiesTable(ptable: NullablePointer[Xmlhashtable]): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlCopyEntitiesTable[NullablePointer[Xmlhashtable]](ptable) tmpvar fun xmlFreeEntitiesTable(ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlFreeEntitiesTable[None](ptable) tmpvar fun xmlDumpEntitiesTable(pbuf: NullablePointer[Xmlbuffer], ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlDumpEntitiesTable[None](pbuf, ptable) tmpvar fun xmlDumpEntityDecl(pbuf: NullablePointer[Xmlbuffer], pent: NullablePointer[Xmlentity]): None => var tmpvar: None = @xmlDumpEntityDecl[None](pbuf, pent) tmpvar fun xmlCleanupPredefinedEntities(): None => var tmpvar: None = @xmlCleanupPredefinedEntities[None]() tmpvar fun xmlRegexpCompile(pregexp: String): NullablePointer[Xmlregexp] => var tmpvar: NullablePointer[Xmlregexp] = @xmlRegexpCompile[NullablePointer[Xmlregexp]](pregexp.cstring()) tmpvar fun xmlRegFreeRegexp(pregexp: NullablePointer[Xmlregexp]): None => var tmpvar: None = @xmlRegFreeRegexp[None](pregexp) tmpvar fun xmlRegexpExec(pcomp: NullablePointer[Xmlregexp], pvalue: String): I32 => var tmpvar: I32 = @xmlRegexpExec[I32](pcomp, pvalue.cstring()) tmpvar fun xmlRegexpPrint(poutput: NullablePointer[IoFile], pregexp: NullablePointer[Xmlregexp]): None => var tmpvar: None = @xmlRegexpPrint[None](poutput, pregexp) tmpvar fun xmlRegexpIsDeterminist(pcomp: NullablePointer[Xmlregexp]): I32 => var tmpvar: I32 = @xmlRegexpIsDeterminist[I32](pcomp) tmpvar fun xmlRegNewExecCtxt(pcomp: NullablePointer[Xmlregexp], pcallback: Pointer[FUNCTIONPOINTER], pdata: Pointer[U8]): NullablePointer[Xmlregexecctxt] => var tmpvar: NullablePointer[Xmlregexecctxt] = @xmlRegNewExecCtxt[NullablePointer[Xmlregexecctxt]](pcomp, pcallback, pdata) tmpvar fun xmlRegFreeExecCtxt(pexec: NullablePointer[Xmlregexecctxt]): None => var tmpvar: None = @xmlRegFreeExecCtxt[None](pexec) tmpvar fun xmlRegExecPushString(pexec: NullablePointer[Xmlregexecctxt], pvalue: String, pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlRegExecPushString[I32](pexec, pvalue.cstring(), pdata) tmpvar fun xmlRegExecPushString2(pexec: NullablePointer[Xmlregexecctxt], pvalue: String, pvalue2: String, pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlRegExecPushString2[I32](pexec, pvalue.cstring(), pvalue2.cstring(), pdata) tmpvar fun xmlRegExecNextValues(pexec: NullablePointer[Xmlregexecctxt], pnbval: Pointer[I32], pnbneg: Pointer[I32], pvalues: Pointer[Pointer[U8] tag], pterminal: Pointer[I32]): I32 => var tmpvar: I32 = @xmlRegExecNextValues[I32](pexec, pnbval, pnbneg, pvalues, pterminal) tmpvar fun xmlRegExecErrInfo(pexec: NullablePointer[Xmlregexecctxt], pstring: Pointer[Pointer[U8] tag], pnbval: Pointer[I32], pnbneg: Pointer[I32], pvalues: Pointer[Pointer[U8] tag], pterminal: Pointer[I32]): I32 => var tmpvar: I32 = @xmlRegExecErrInfo[I32](pexec, pstring, pnbval, pnbneg, pvalues, pterminal) tmpvar fun xmlInitializeDict(): I32 => var tmpvar: I32 = @xmlInitializeDict[I32]() tmpvar fun xmlDictCreate(): NullablePointer[Xmldict] => var tmpvar: NullablePointer[Xmldict] = @xmlDictCreate[NullablePointer[Xmldict]]() tmpvar fun xmlDictSetLimit(pdict: NullablePointer[Xmldict], plimit: U64): U64 => var tmpvar: U64 = @xmlDictSetLimit[U64](pdict, plimit) tmpvar fun xmlDictGetUsage(pdict: NullablePointer[Xmldict]): U64 => var tmpvar: U64 = @xmlDictGetUsage[U64](pdict) tmpvar fun xmlDictCreateSub(psub: NullablePointer[Xmldict]): NullablePointer[Xmldict] => var tmpvar: NullablePointer[Xmldict] = @xmlDictCreateSub[NullablePointer[Xmldict]](psub) tmpvar fun xmlDictReference(pdict: NullablePointer[Xmldict]): I32 => var tmpvar: I32 = @xmlDictReference[I32](pdict) tmpvar fun xmlDictFree(pdict: NullablePointer[Xmldict]): None => var tmpvar: None = @xmlDictFree[None](pdict) tmpvar fun xmlDictLookup(pdict: NullablePointer[Xmldict], pname: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlDictLookup[Pointer[U8]](pdict, pname.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlDictExists(pdict: NullablePointer[Xmldict], pname: String, plen: I32): String => var tmpvar: Pointer[U8] = @xmlDictExists[Pointer[U8]](pdict, pname.cstring(), plen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlDictQLookup(pdict: NullablePointer[Xmldict], pprefix: String, pname: String): String => var tmpvar: Pointer[U8] = @xmlDictQLookup[Pointer[U8]](pdict, pprefix.cstring(), pname.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlDictOwns(pdict: NullablePointer[Xmldict], pstr: String): I32 => var tmpvar: I32 = @xmlDictOwns[I32](pdict, pstr.cstring()) tmpvar fun xmlDictSize(pdict: NullablePointer[Xmldict]): I32 => var tmpvar: I32 = @xmlDictSize[I32](pdict) tmpvar fun xmlDictCleanup(): None => var tmpvar: None = @xmlDictCleanup[None]() tmpvar fun xmlMemSetup(pfreeFunc: Pointer[FUNCTIONPOINTER], pmallocFunc: Pointer[FUNCTIONPOINTER], preallocFunc: Pointer[FUNCTIONPOINTER], pstrdupFunc: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlMemSetup[I32](pfreeFunc, pmallocFunc, preallocFunc, pstrdupFunc) tmpvar fun xmlMemGet(pfreeFunc: Pointer[Pointer[FUNCTIONPOINTER]], pmallocFunc: Pointer[Pointer[FUNCTIONPOINTER]], preallocFunc: Pointer[Pointer[FUNCTIONPOINTER]], pstrdupFunc: Pointer[Pointer[FUNCTIONPOINTER]]): I32 => var tmpvar: I32 = @xmlMemGet[I32](pfreeFunc, pmallocFunc, preallocFunc, pstrdupFunc) tmpvar fun xmlGcMemSetup(pfreeFunc: Pointer[FUNCTIONPOINTER], pmallocFunc: Pointer[FUNCTIONPOINTER], pmallocAtomicFunc: Pointer[FUNCTIONPOINTER], preallocFunc: Pointer[FUNCTIONPOINTER], pstrdupFunc: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlGcMemSetup[I32](pfreeFunc, pmallocFunc, pmallocAtomicFunc, preallocFunc, pstrdupFunc) tmpvar fun xmlGcMemGet(pfreeFunc: Pointer[Pointer[FUNCTIONPOINTER]], pmallocFunc: Pointer[Pointer[FUNCTIONPOINTER]], pmallocAtomicFunc: Pointer[Pointer[FUNCTIONPOINTER]], preallocFunc: Pointer[Pointer[FUNCTIONPOINTER]], pstrdupFunc: Pointer[Pointer[FUNCTIONPOINTER]]): I32 => var tmpvar: I32 = @xmlGcMemGet[I32](pfreeFunc, pmallocFunc, pmallocAtomicFunc, preallocFunc, pstrdupFunc) tmpvar fun xmlInitMemory(): I32 => var tmpvar: I32 = @xmlInitMemory[I32]() tmpvar fun xmlCleanupMemory(): None => var tmpvar: None = @xmlCleanupMemory[None]() tmpvar fun xmlMemUsed(): I32 => var tmpvar: I32 = @xmlMemUsed[I32]() tmpvar fun xmlMemBlocks(): I32 => var tmpvar: I32 = @xmlMemBlocks[I32]() tmpvar fun xmlMemDisplay(pfp: NullablePointer[IoFile]): None => var tmpvar: None = @xmlMemDisplay[None](pfp) tmpvar fun xmlMemDisplayLast(pfp: NullablePointer[IoFile], pnbBytes: I64): None => var tmpvar: None = @xmlMemDisplayLast[None](pfp, pnbBytes) tmpvar fun xmlMemShow(pfp: NullablePointer[IoFile], pnr: I32): None => var tmpvar: None = @xmlMemShow[None](pfp, pnr) tmpvar fun xmlMemoryDump(): None => var tmpvar: None = @xmlMemoryDump[None]() tmpvar fun xmlMemMalloc(psize: U64): String => var tmpvar: Pointer[U8] = @xmlMemMalloc[Pointer[U8]](psize) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlMemRealloc(pptr: Pointer[U8], psize: U64): String => var tmpvar: Pointer[U8] = @xmlMemRealloc[Pointer[U8]](pptr, psize) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlMemFree(pptr: Pointer[U8]): None => var tmpvar: None = @xmlMemFree[None](pptr) tmpvar fun xmlMemoryStrdup(pstr: String): String => var tmpvar: Pointer[U8] = @xmlMemoryStrdup[Pointer[U8]](pstr.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlMallocLoc(psize: U64, pfile: String, pline: I32): String => var tmpvar: Pointer[U8] = @xmlMallocLoc[Pointer[U8]](psize, pfile.cstring(), pline) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlReallocLoc(pptr: Pointer[U8], psize: U64, pfile: String, pline: I32): String => var tmpvar: Pointer[U8] = @xmlReallocLoc[Pointer[U8]](pptr, psize, pfile.cstring(), pline) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlMallocAtomicLoc(psize: U64, pfile: String, pline: I32): String => var tmpvar: Pointer[U8] = @xmlMallocAtomicLoc[Pointer[U8]](psize, pfile.cstring(), pline) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlMemStrdupLoc(pstr: String, pfile: String, pline: I32): String => var tmpvar: Pointer[U8] = @xmlMemStrdupLoc[Pointer[U8]](pstr.cstring(), pfile.cstring(), pline) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNewMutex(): NullablePointer[Xmlmutex] => var tmpvar: NullablePointer[Xmlmutex] = @xmlNewMutex[NullablePointer[Xmlmutex]]() tmpvar fun xmlMutexLock(ptok: NullablePointer[Xmlmutex]): None => var tmpvar: None = @xmlMutexLock[None](ptok) tmpvar fun xmlMutexUnlock(ptok: NullablePointer[Xmlmutex]): None => var tmpvar: None = @xmlMutexUnlock[None](ptok) tmpvar fun xmlFreeMutex(ptok: NullablePointer[Xmlmutex]): None => var tmpvar: None = @xmlFreeMutex[None](ptok) tmpvar fun xmlNewRMutex(): NullablePointer[Xmlrmutex] => var tmpvar: NullablePointer[Xmlrmutex] = @xmlNewRMutex[NullablePointer[Xmlrmutex]]() tmpvar fun xmlRMutexLock(ptok: NullablePointer[Xmlrmutex]): None => var tmpvar: None = @xmlRMutexLock[None](ptok) tmpvar fun xmlRMutexUnlock(ptok: NullablePointer[Xmlrmutex]): None => var tmpvar: None = @xmlRMutexUnlock[None](ptok) tmpvar fun xmlFreeRMutex(ptok: NullablePointer[Xmlrmutex]): None => var tmpvar: None = @xmlFreeRMutex[None](ptok) tmpvar fun xmlInitThreads(): None => var tmpvar: None = @xmlInitThreads[None]() tmpvar fun xmlLockLibrary(): None => var tmpvar: None = @xmlLockLibrary[None]() tmpvar fun xmlUnlockLibrary(): None => var tmpvar: None = @xmlUnlockLibrary[None]() tmpvar fun xmlGetThreadId(): I32 => var tmpvar: I32 = @xmlGetThreadId[I32]() tmpvar fun xmlIsMainThread(): I32 => var tmpvar: I32 = @xmlIsMainThread[I32]() tmpvar fun xmlCleanupThreads(): None => var tmpvar: None = @xmlCleanupThreads[None]() tmpvar fun xmlGetGlobalState(): NullablePointer[Xmlglobalstate] => var tmpvar: NullablePointer[Xmlglobalstate] = @xmlGetGlobalState[NullablePointer[Xmlglobalstate]]() tmpvar fun xmlHashCreate(psize: I32): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlHashCreate[NullablePointer[Xmlhashtable]](psize) tmpvar fun xmlHashCreateDict(psize: I32, pdict: NullablePointer[Xmldict]): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlHashCreateDict[NullablePointer[Xmlhashtable]](psize, pdict) tmpvar fun xmlHashFree(ptable: NullablePointer[Xmlhashtable], pf: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xmlHashFree[None](ptable, pf) tmpvar fun xmlHashDefaultDeallocator(pentry: Pointer[U8], pname: String): None => var tmpvar: None = @xmlHashDefaultDeallocator[None](pentry, pname.cstring()) tmpvar fun xmlHashAddEntry(ptable: NullablePointer[Xmlhashtable], pname: String, puserdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlHashAddEntry[I32](ptable, pname.cstring(), puserdata) tmpvar fun xmlHashUpdateEntry(ptable: NullablePointer[Xmlhashtable], pname: String, puserdata: Pointer[U8], pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlHashUpdateEntry[I32](ptable, pname.cstring(), puserdata, pf) tmpvar fun xmlHashAddEntry2(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, puserdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlHashAddEntry2[I32](ptable, pname.cstring(), pname2.cstring(), puserdata) tmpvar fun xmlHashUpdateEntry2(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, puserdata: Pointer[U8], pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlHashUpdateEntry2[I32](ptable, pname.cstring(), pname2.cstring(), puserdata, pf) tmpvar fun xmlHashAddEntry3(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, pname3: String, puserdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlHashAddEntry3[I32](ptable, pname.cstring(), pname2.cstring(), pname3.cstring(), puserdata) tmpvar fun xmlHashUpdateEntry3(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, pname3: String, puserdata: Pointer[U8], pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlHashUpdateEntry3[I32](ptable, pname.cstring(), pname2.cstring(), pname3.cstring(), puserdata, pf) tmpvar fun xmlHashRemoveEntry(ptable: NullablePointer[Xmlhashtable], pname: String, pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlHashRemoveEntry[I32](ptable, pname.cstring(), pf) tmpvar fun xmlHashRemoveEntry2(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlHashRemoveEntry2[I32](ptable, pname.cstring(), pname2.cstring(), pf) tmpvar fun xmlHashRemoveEntry3(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, pname3: String, pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlHashRemoveEntry3[I32](ptable, pname.cstring(), pname2.cstring(), pname3.cstring(), pf) tmpvar fun xmlHashLookup(ptable: NullablePointer[Xmlhashtable], pname: String): String => var tmpvar: Pointer[U8] = @xmlHashLookup[Pointer[U8]](ptable, pname.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHashLookup2(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String): String => var tmpvar: Pointer[U8] = @xmlHashLookup2[Pointer[U8]](ptable, pname.cstring(), pname2.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHashLookup3(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, pname3: String): String => var tmpvar: Pointer[U8] = @xmlHashLookup3[Pointer[U8]](ptable, pname.cstring(), pname2.cstring(), pname3.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHashQLookup(ptable: NullablePointer[Xmlhashtable], pname: String, pprefix: String): String => var tmpvar: Pointer[U8] = @xmlHashQLookup[Pointer[U8]](ptable, pname.cstring(), pprefix.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHashQLookup2(ptable: NullablePointer[Xmlhashtable], pname: String, pprefix: String, pname2: String, pprefix2: String): String => var tmpvar: Pointer[U8] = @xmlHashQLookup2[Pointer[U8]](ptable, pname.cstring(), pprefix.cstring(), pname2.cstring(), pprefix2.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHashQLookup3(ptable: NullablePointer[Xmlhashtable], pname: String, pprefix: String, pname2: String, pprefix2: String, pname3: String, pprefix3: String): String => var tmpvar: Pointer[U8] = @xmlHashQLookup3[Pointer[U8]](ptable, pname.cstring(), pprefix.cstring(), pname2.cstring(), pprefix2.cstring(), pname3.cstring(), pprefix3.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHashCopy(ptable: NullablePointer[Xmlhashtable], pf: Pointer[FUNCTIONPOINTER]): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlHashCopy[NullablePointer[Xmlhashtable]](ptable, pf) tmpvar fun xmlHashSize(ptable: NullablePointer[Xmlhashtable]): I32 => var tmpvar: I32 = @xmlHashSize[I32](ptable) tmpvar fun xmlHashScan(ptable: NullablePointer[Xmlhashtable], pf: Pointer[FUNCTIONPOINTER], pdata: Pointer[U8]): None => var tmpvar: None = @xmlHashScan[None](ptable, pf, pdata) tmpvar fun xmlHashScan3(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, pname3: String, pf: Pointer[FUNCTIONPOINTER], pdata: Pointer[U8]): None => var tmpvar: None = @xmlHashScan3[None](ptable, pname.cstring(), pname2.cstring(), pname3.cstring(), pf, pdata) tmpvar fun xmlHashScanFull(ptable: NullablePointer[Xmlhashtable], pf: Pointer[FUNCTIONPOINTER], pdata: Pointer[U8]): None => var tmpvar: None = @xmlHashScanFull[None](ptable, pf, pdata) tmpvar fun xmlHashScanFull3(ptable: NullablePointer[Xmlhashtable], pname: String, pname2: String, pname3: String, pf: Pointer[FUNCTIONPOINTER], pdata: Pointer[U8]): None => var tmpvar: None = @xmlHashScanFull3[None](ptable, pname.cstring(), pname2.cstring(), pname3.cstring(), pf, pdata) tmpvar fun xmlSetGenericErrorFunc(pctx: Pointer[U8], phandler: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xmlSetGenericErrorFunc[None](pctx, phandler) tmpvar fun initGenericErrorDefaultFunc(phandler: Pointer[Pointer[FUNCTIONPOINTER]]): None => var tmpvar: None = @initGenericErrorDefaultFunc[None](phandler) tmpvar fun xmlSetStructuredErrorFunc(pctx: Pointer[U8], phandler: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xmlSetStructuredErrorFunc[None](pctx, phandler) tmpvar fun xmlParserError(pctx: Pointer[U8], pmsg: String): None => var tmpvar: None = @xmlParserError[None](pctx, pmsg.cstring()) tmpvar fun xmlParserWarning(pctx: Pointer[U8], pmsg: String): None => var tmpvar: None = @xmlParserWarning[None](pctx, pmsg.cstring()) tmpvar fun xmlParserValidityError(pctx: Pointer[U8], pmsg: String): None => var tmpvar: None = @xmlParserValidityError[None](pctx, pmsg.cstring()) tmpvar fun xmlParserValidityWarning(pctx: Pointer[U8], pmsg: String): None => var tmpvar: None = @xmlParserValidityWarning[None](pctx, pmsg.cstring()) tmpvar fun xmlParserPrintFileInfo(pinput: NullablePointer[Xmlparserinput]): None => var tmpvar: None = @xmlParserPrintFileInfo[None](pinput) tmpvar fun xmlParserPrintFileContext(pinput: NullablePointer[Xmlparserinput]): None => var tmpvar: None = @xmlParserPrintFileContext[None](pinput) tmpvar fun xmlGetLastError(): NullablePointer[Xmlerror] => var tmpvar: NullablePointer[Xmlerror] = @xmlGetLastError[NullablePointer[Xmlerror]]() tmpvar fun xmlResetLastError(): None => var tmpvar: None = @xmlResetLastError[None]() tmpvar fun xmlCtxtGetLastError(pctx: Pointer[U8]): NullablePointer[Xmlerror] => var tmpvar: NullablePointer[Xmlerror] = @xmlCtxtGetLastError[NullablePointer[Xmlerror]](pctx) tmpvar fun xmlCtxtResetLastError(pctx: Pointer[U8]): None => var tmpvar: None = @xmlCtxtResetLastError[None](pctx) tmpvar fun xmlResetError(perr: NullablePointer[Xmlerror]): None => var tmpvar: None = @xmlResetError[None](perr) tmpvar fun xmlCopyError(pfrom: NullablePointer[Xmlerror], pto: NullablePointer[Xmlerror]): I32 => var tmpvar: I32 = @xmlCopyError[I32](pfrom, pto) tmpvar fun xmlListCreate(pdeallocator: Pointer[FUNCTIONPOINTER], pcompare: Pointer[FUNCTIONPOINTER]): NullablePointer[Xmllist] => var tmpvar: NullablePointer[Xmllist] = @xmlListCreate[NullablePointer[Xmllist]](pdeallocator, pcompare) tmpvar fun xmlListDelete(pl: NullablePointer[Xmllist]): None => var tmpvar: None = @xmlListDelete[None](pl) tmpvar fun xmlListSearch(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlListSearch[Pointer[U8]](pl, pdata) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlListReverseSearch(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlListReverseSearch[Pointer[U8]](pl, pdata) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlListInsert(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlListInsert[I32](pl, pdata) tmpvar fun xmlListAppend(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlListAppend[I32](pl, pdata) tmpvar fun xmlListRemoveFirst(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlListRemoveFirst[I32](pl, pdata) tmpvar fun xmlListRemoveLast(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlListRemoveLast[I32](pl, pdata) tmpvar fun xmlListRemoveAll(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlListRemoveAll[I32](pl, pdata) tmpvar fun xmlListClear(pl: NullablePointer[Xmllist]): None => var tmpvar: None = @xmlListClear[None](pl) tmpvar fun xmlListEmpty(pl: NullablePointer[Xmllist]): I32 => var tmpvar: I32 = @xmlListEmpty[I32](pl) tmpvar fun xmlListFront(pl: NullablePointer[Xmllist]): NullablePointer[Xmllink] => var tmpvar: NullablePointer[Xmllink] = @xmlListFront[NullablePointer[Xmllink]](pl) tmpvar fun xmlListEnd(pl: NullablePointer[Xmllist]): NullablePointer[Xmllink] => var tmpvar: NullablePointer[Xmllink] = @xmlListEnd[NullablePointer[Xmllink]](pl) tmpvar fun xmlListSize(pl: NullablePointer[Xmllist]): I32 => var tmpvar: I32 = @xmlListSize[I32](pl) tmpvar fun xmlListPopFront(pl: NullablePointer[Xmllist]): None => var tmpvar: None = @xmlListPopFront[None](pl) tmpvar fun xmlListPopBack(pl: NullablePointer[Xmllist]): None => var tmpvar: None = @xmlListPopBack[None](pl) tmpvar fun xmlListPushFront(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlListPushFront[I32](pl, pdata) tmpvar fun xmlListPushBack(pl: NullablePointer[Xmllist], pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlListPushBack[I32](pl, pdata) tmpvar fun xmlListReverse(pl: NullablePointer[Xmllist]): None => var tmpvar: None = @xmlListReverse[None](pl) tmpvar fun xmlListSort(pl: NullablePointer[Xmllist]): None => var tmpvar: None = @xmlListSort[None](pl) tmpvar fun xmlListWalk(pl: NullablePointer[Xmllist], pwalker: Pointer[FUNCTIONPOINTER], puser: Pointer[U8]): None => var tmpvar: None = @xmlListWalk[None](pl, pwalker, puser) tmpvar fun xmlListReverseWalk(pl: NullablePointer[Xmllist], pwalker: Pointer[FUNCTIONPOINTER], puser: Pointer[U8]): None => var tmpvar: None = @xmlListReverseWalk[None](pl, pwalker, puser) tmpvar fun xmlListMerge(pl1: NullablePointer[Xmllist], pl2: NullablePointer[Xmllist]): None => var tmpvar: None = @xmlListMerge[None](pl1, pl2) tmpvar fun xmlListDup(pold: NullablePointer[Xmllist]): NullablePointer[Xmllist] => var tmpvar: NullablePointer[Xmllist] = @xmlListDup[NullablePointer[Xmllist]](pold) tmpvar fun xmlListCopy(pcur: NullablePointer[Xmllist], pold: NullablePointer[Xmllist]): I32 => var tmpvar: I32 = @xmlListCopy[I32](pcur, pold) tmpvar fun xmlLinkGetData(plk: NullablePointer[Xmllink]): String => var tmpvar: Pointer[U8] = @xmlLinkGetData[Pointer[U8]](plk) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNewAutomata(): NullablePointer[Xmlautomata] => var tmpvar: NullablePointer[Xmlautomata] = @xmlNewAutomata[NullablePointer[Xmlautomata]]() tmpvar fun xmlFreeAutomata(pam: NullablePointer[Xmlautomata]): None => var tmpvar: None = @xmlFreeAutomata[None](pam) tmpvar fun xmlAutomataGetInitState(pam: NullablePointer[Xmlautomata]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataGetInitState[NullablePointer[Xmlautomatastate]](pam) tmpvar fun xmlAutomataSetFinalState(pam: NullablePointer[Xmlautomata], pstate: NullablePointer[Xmlautomatastate]): I32 => var tmpvar: I32 = @xmlAutomataSetFinalState[I32](pam, pstate) tmpvar fun xmlAutomataNewState(pam: NullablePointer[Xmlautomata]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewState[NullablePointer[Xmlautomatastate]](pam) tmpvar fun xmlAutomataNewTransition(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], ptoken: String, pdata: Pointer[U8]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewTransition[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, ptoken.cstring(), pdata) tmpvar fun xmlAutomataNewTransition2(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], ptoken: String, ptoken2: String, pdata: Pointer[U8]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewTransition2[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, ptoken.cstring(), ptoken2.cstring(), pdata) tmpvar fun xmlAutomataNewNegTrans(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], ptoken: String, ptoken2: String, pdata: Pointer[U8]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewNegTrans[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, ptoken.cstring(), ptoken2.cstring(), pdata) tmpvar fun xmlAutomataNewCountTrans(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], ptoken: String, pmin: I32, pmax: I32, pdata: Pointer[U8]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewCountTrans[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, ptoken.cstring(), pmin, pmax, pdata) tmpvar fun xmlAutomataNewCountTrans2(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], ptoken: String, ptoken2: String, pmin: I32, pmax: I32, pdata: Pointer[U8]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewCountTrans2[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, ptoken.cstring(), ptoken2.cstring(), pmin, pmax, pdata) tmpvar fun xmlAutomataNewOnceTrans(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], ptoken: String, pmin: I32, pmax: I32, pdata: Pointer[U8]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewOnceTrans[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, ptoken.cstring(), pmin, pmax, pdata) tmpvar fun xmlAutomataNewOnceTrans2(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], ptoken: String, ptoken2: String, pmin: I32, pmax: I32, pdata: Pointer[U8]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewOnceTrans2[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, ptoken.cstring(), ptoken2.cstring(), pmin, pmax, pdata) tmpvar fun xmlAutomataNewAllTrans(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], plax: I32): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewAllTrans[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, plax) tmpvar fun xmlAutomataNewEpsilon(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate]): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewEpsilon[NullablePointer[Xmlautomatastate]](pam, pfrom, pto) tmpvar fun xmlAutomataNewCountedTrans(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], pcounter: I32): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewCountedTrans[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, pcounter) tmpvar fun xmlAutomataNewCounterTrans(pam: NullablePointer[Xmlautomata], pfrom: NullablePointer[Xmlautomatastate], pto: NullablePointer[Xmlautomatastate], pcounter: I32): NullablePointer[Xmlautomatastate] => var tmpvar: NullablePointer[Xmlautomatastate] = @xmlAutomataNewCounterTrans[NullablePointer[Xmlautomatastate]](pam, pfrom, pto, pcounter) tmpvar fun xmlAutomataNewCounter(pam: NullablePointer[Xmlautomata], pmin: I32, pmax: I32): I32 => var tmpvar: I32 = @xmlAutomataNewCounter[I32](pam, pmin, pmax) tmpvar fun xmlAutomataCompile(pam: NullablePointer[Xmlautomata]): NullablePointer[Xmlregexp] => var tmpvar: NullablePointer[Xmlregexp] = @xmlAutomataCompile[NullablePointer[Xmlregexp]](pam) tmpvar fun xmlAutomataIsDeterminist(pam: NullablePointer[Xmlautomata]): I32 => var tmpvar: I32 = @xmlAutomataIsDeterminist[I32](pam) tmpvar fun xmlAddNotationDecl(pctxt: NullablePointer[Xmlvalidctxt], pdtd: NullablePointer[Xmldtd], pname: String, pPublicID: String, pSystemID: String): NullablePointer[Xmlnotation] => var tmpvar: NullablePointer[Xmlnotation] = @xmlAddNotationDecl[NullablePointer[Xmlnotation]](pctxt, pdtd, pname.cstring(), pPublicID.cstring(), pSystemID.cstring()) tmpvar fun xmlCopyNotationTable(ptable: NullablePointer[Xmlhashtable]): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlCopyNotationTable[NullablePointer[Xmlhashtable]](ptable) tmpvar fun xmlFreeNotationTable(ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlFreeNotationTable[None](ptable) tmpvar fun xmlDumpNotationDecl(pbuf: NullablePointer[Xmlbuffer], pnota: NullablePointer[Xmlnotation]): None => var tmpvar: None = @xmlDumpNotationDecl[None](pbuf, pnota) tmpvar fun xmlDumpNotationTable(pbuf: NullablePointer[Xmlbuffer], ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlDumpNotationTable[None](pbuf, ptable) tmpvar fun xmlNewElementContent(pname: String, ptype: I32): NullablePointer[Xmlelementcontent] => var tmpvar: NullablePointer[Xmlelementcontent] = @xmlNewElementContent[NullablePointer[Xmlelementcontent]](pname.cstring(), ptype) tmpvar fun xmlCopyElementContent(pcontent: NullablePointer[Xmlelementcontent]): NullablePointer[Xmlelementcontent] => var tmpvar: NullablePointer[Xmlelementcontent] = @xmlCopyElementContent[NullablePointer[Xmlelementcontent]](pcontent) tmpvar fun xmlFreeElementContent(pcur: NullablePointer[Xmlelementcontent]): None => var tmpvar: None = @xmlFreeElementContent[None](pcur) tmpvar fun xmlNewDocElementContent(pdoc: NullablePointer[Xmldoc] tag, pname: String, ptype: I32): NullablePointer[Xmlelementcontent] => var tmpvar: NullablePointer[Xmlelementcontent] = @xmlNewDocElementContent[NullablePointer[Xmlelementcontent]](pdoc, pname.cstring(), ptype) tmpvar fun xmlCopyDocElementContent(pdoc: NullablePointer[Xmldoc] tag, pcontent: NullablePointer[Xmlelementcontent]): NullablePointer[Xmlelementcontent] => var tmpvar: NullablePointer[Xmlelementcontent] = @xmlCopyDocElementContent[NullablePointer[Xmlelementcontent]](pdoc, pcontent) tmpvar fun xmlFreeDocElementContent(pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlelementcontent]): None => var tmpvar: None = @xmlFreeDocElementContent[None](pdoc, pcur) tmpvar fun xmlSnprintfElementContent(pbuf: String, psize: I32, pcontent: NullablePointer[Xmlelementcontent], penglob: I32): None => var tmpvar: None = @xmlSnprintfElementContent[None](pbuf.cstring(), psize, pcontent, penglob) tmpvar fun xmlSprintfElementContent(pbuf: String, pcontent: NullablePointer[Xmlelementcontent], penglob: I32): None => var tmpvar: None = @xmlSprintfElementContent[None](pbuf.cstring(), pcontent, penglob) tmpvar fun xmlAddElementDecl(pctxt: NullablePointer[Xmlvalidctxt], pdtd: NullablePointer[Xmldtd], pname: String, ptype: I32, pcontent: NullablePointer[Xmlelementcontent]): NullablePointer[Xmlelement] => var tmpvar: NullablePointer[Xmlelement] = @xmlAddElementDecl[NullablePointer[Xmlelement]](pctxt, pdtd, pname.cstring(), ptype, pcontent) tmpvar fun xmlCopyElementTable(ptable: NullablePointer[Xmlhashtable]): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlCopyElementTable[NullablePointer[Xmlhashtable]](ptable) tmpvar fun xmlFreeElementTable(ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlFreeElementTable[None](ptable) tmpvar fun xmlDumpElementTable(pbuf: NullablePointer[Xmlbuffer], ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlDumpElementTable[None](pbuf, ptable) tmpvar fun xmlDumpElementDecl(pbuf: NullablePointer[Xmlbuffer], pelem: NullablePointer[Xmlelement]): None => var tmpvar: None = @xmlDumpElementDecl[None](pbuf, pelem) tmpvar fun xmlCreateEnumeration(pname: String): NullablePointer[Xmlenumeration] => var tmpvar: NullablePointer[Xmlenumeration] = @xmlCreateEnumeration[NullablePointer[Xmlenumeration]](pname.cstring()) tmpvar fun xmlFreeEnumeration(pcur: NullablePointer[Xmlenumeration]): None => var tmpvar: None = @xmlFreeEnumeration[None](pcur) tmpvar fun xmlCopyEnumeration(pcur: NullablePointer[Xmlenumeration]): NullablePointer[Xmlenumeration] => var tmpvar: NullablePointer[Xmlenumeration] = @xmlCopyEnumeration[NullablePointer[Xmlenumeration]](pcur) tmpvar fun xmlAddAttributeDecl(pctxt: NullablePointer[Xmlvalidctxt], pdtd: NullablePointer[Xmldtd], pelem: String, pname: String, pns: String, ptype: I32, pdef: I32, pdefaultValue: String, ptree: NullablePointer[Xmlenumeration]): NullablePointer[Xmlattribute] => var tmpvar: NullablePointer[Xmlattribute] = @xmlAddAttributeDecl[NullablePointer[Xmlattribute]](pctxt, pdtd, pelem.cstring(), pname.cstring(), pns.cstring(), ptype, pdef, pdefaultValue.cstring(), ptree) tmpvar fun xmlCopyAttributeTable(ptable: NullablePointer[Xmlhashtable]): NullablePointer[Xmlhashtable] => var tmpvar: NullablePointer[Xmlhashtable] = @xmlCopyAttributeTable[NullablePointer[Xmlhashtable]](ptable) tmpvar fun xmlFreeAttributeTable(ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlFreeAttributeTable[None](ptable) tmpvar fun xmlDumpAttributeTable(pbuf: NullablePointer[Xmlbuffer], ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlDumpAttributeTable[None](pbuf, ptable) tmpvar fun xmlDumpAttributeDecl(pbuf: NullablePointer[Xmlbuffer], pattr: NullablePointer[Xmlattribute]): None => var tmpvar: None = @xmlDumpAttributeDecl[None](pbuf, pattr) tmpvar fun xmlAddID(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pvalue: String, pattr: NullablePointer[Xmlattr]): NullablePointer[Xmlid] => var tmpvar: NullablePointer[Xmlid] = @xmlAddID[NullablePointer[Xmlid]](pctxt, pdoc, pvalue.cstring(), pattr) tmpvar fun xmlFreeIDTable(ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlFreeIDTable[None](ptable) tmpvar fun xmlGetID(pdoc: NullablePointer[Xmldoc] tag, pID: String): NullablePointer[Xmlattr] => var tmpvar: NullablePointer[Xmlattr] = @xmlGetID[NullablePointer[Xmlattr]](pdoc, pID.cstring()) tmpvar fun xmlIsID(pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pattr: NullablePointer[Xmlattr]): I32 => var tmpvar: I32 = @xmlIsID[I32](pdoc, pelem, pattr) tmpvar fun xmlRemoveID(pdoc: NullablePointer[Xmldoc] tag, pattr: NullablePointer[Xmlattr]): I32 => var tmpvar: I32 = @xmlRemoveID[I32](pdoc, pattr) tmpvar fun xmlAddRef(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pvalue: String, pattr: NullablePointer[Xmlattr]): NullablePointer[Xmlref] => var tmpvar: NullablePointer[Xmlref] = @xmlAddRef[NullablePointer[Xmlref]](pctxt, pdoc, pvalue.cstring(), pattr) tmpvar fun xmlFreeRefTable(ptable: NullablePointer[Xmlhashtable]): None => var tmpvar: None = @xmlFreeRefTable[None](ptable) tmpvar fun xmlIsRef(pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pattr: NullablePointer[Xmlattr]): I32 => var tmpvar: I32 = @xmlIsRef[I32](pdoc, pelem, pattr) tmpvar fun xmlRemoveRef(pdoc: NullablePointer[Xmldoc] tag, pattr: NullablePointer[Xmlattr]): I32 => var tmpvar: I32 = @xmlRemoveRef[I32](pdoc, pattr) tmpvar fun xmlGetRefs(pdoc: NullablePointer[Xmldoc] tag, pID: String): NullablePointer[Xmllist] => var tmpvar: NullablePointer[Xmllist] = @xmlGetRefs[NullablePointer[Xmllist]](pdoc, pID.cstring()) tmpvar fun xmlNewValidCtxt(): NullablePointer[Xmlvalidctxt] => var tmpvar: NullablePointer[Xmlvalidctxt] = @xmlNewValidCtxt[NullablePointer[Xmlvalidctxt]]() tmpvar fun xmlFreeValidCtxt(p: NullablePointer[Xmlvalidctxt]): None => var tmpvar: None = @xmlFreeValidCtxt[None](p) tmpvar fun xmlValidateRoot(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlValidateRoot[I32](pctxt, pdoc) tmpvar fun xmlValidateElementDecl(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlelement]): I32 => var tmpvar: I32 = @xmlValidateElementDecl[I32](pctxt, pdoc, pelem) tmpvar fun xmlValidNormalizeAttributeValue(pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pname: String, pvalue: String): String => var tmpvar: Pointer[U8] = @xmlValidNormalizeAttributeValue[Pointer[U8]](pdoc, pelem, pname.cstring(), pvalue.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlValidCtxtNormalizeAttributeValue(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pname: String, pvalue: String): String => var tmpvar: Pointer[U8] = @xmlValidCtxtNormalizeAttributeValue[Pointer[U8]](pctxt, pdoc, pelem, pname.cstring(), pvalue.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlValidateAttributeDecl(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pattr: NullablePointer[Xmlattribute]): I32 => var tmpvar: I32 = @xmlValidateAttributeDecl[I32](pctxt, pdoc, pattr) tmpvar fun xmlValidateAttributeValue(ptype: I32, pvalue: String): I32 => var tmpvar: I32 = @xmlValidateAttributeValue[I32](ptype, pvalue.cstring()) tmpvar fun xmlValidateNotationDecl(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pnota: NullablePointer[Xmlnotation]): I32 => var tmpvar: I32 = @xmlValidateNotationDecl[I32](pctxt, pdoc, pnota) tmpvar fun xmlValidateDtd(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pdtd: NullablePointer[Xmldtd]): I32 => var tmpvar: I32 = @xmlValidateDtd[I32](pctxt, pdoc, pdtd) tmpvar fun xmlValidateDtdFinal(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlValidateDtdFinal[I32](pctxt, pdoc) tmpvar fun xmlValidateDocument(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlValidateDocument[I32](pctxt, pdoc) tmpvar fun xmlValidateElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlValidateElement[I32](pctxt, pdoc, pelem) tmpvar fun xmlValidateOneElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlValidateOneElement[I32](pctxt, pdoc, pelem) tmpvar fun xmlValidateOneAttribute(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pattr: NullablePointer[Xmlattr], pvalue: String): I32 => var tmpvar: I32 = @xmlValidateOneAttribute[I32](pctxt, pdoc, pelem, pattr, pvalue.cstring()) tmpvar fun xmlValidateOneNamespace(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pprefix: String, pns: NullablePointer[Xmlns], pvalue: String): I32 => var tmpvar: I32 = @xmlValidateOneNamespace[I32](pctxt, pdoc, pelem, pprefix.cstring(), pns, pvalue.cstring()) tmpvar fun xmlValidateDocumentFinal(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlValidateDocumentFinal[I32](pctxt, pdoc) tmpvar fun xmlValidateNotationUse(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pnotationName: String): I32 => var tmpvar: I32 = @xmlValidateNotationUse[I32](pctxt, pdoc, pnotationName.cstring()) tmpvar fun xmlIsMixedElement(pdoc: NullablePointer[Xmldoc] tag, pname: String): I32 => var tmpvar: I32 = @xmlIsMixedElement[I32](pdoc, pname.cstring()) tmpvar fun xmlGetDtdAttrDesc(pdtd: NullablePointer[Xmldtd], pelem: String, pname: String): NullablePointer[Xmlattribute] => var tmpvar: NullablePointer[Xmlattribute] = @xmlGetDtdAttrDesc[NullablePointer[Xmlattribute]](pdtd, pelem.cstring(), pname.cstring()) tmpvar fun xmlGetDtdQAttrDesc(pdtd: NullablePointer[Xmldtd], pelem: String, pname: String, pprefix: String): NullablePointer[Xmlattribute] => var tmpvar: NullablePointer[Xmlattribute] = @xmlGetDtdQAttrDesc[NullablePointer[Xmlattribute]](pdtd, pelem.cstring(), pname.cstring(), pprefix.cstring()) tmpvar fun xmlGetDtdNotationDesc(pdtd: NullablePointer[Xmldtd], pname: String): NullablePointer[Xmlnotation] => var tmpvar: NullablePointer[Xmlnotation] = @xmlGetDtdNotationDesc[NullablePointer[Xmlnotation]](pdtd, pname.cstring()) tmpvar fun xmlGetDtdQElementDesc(pdtd: NullablePointer[Xmldtd], pname: String, pprefix: String): NullablePointer[Xmlelement] => var tmpvar: NullablePointer[Xmlelement] = @xmlGetDtdQElementDesc[NullablePointer[Xmlelement]](pdtd, pname.cstring(), pprefix.cstring()) tmpvar fun xmlGetDtdElementDesc(pdtd: NullablePointer[Xmldtd], pname: String): NullablePointer[Xmlelement] => var tmpvar: NullablePointer[Xmlelement] = @xmlGetDtdElementDesc[NullablePointer[Xmlelement]](pdtd, pname.cstring()) tmpvar fun xmlValidGetPotentialChildren(pctree: NullablePointer[Xmlelementcontent], pnames: Pointer[Pointer[U8] tag], plen: Pointer[I32], pmax: I32): I32 => var tmpvar: I32 = @xmlValidGetPotentialChildren[I32](pctree, pnames, plen, pmax) tmpvar fun xmlValidGetValidElements(pprev: NullablePointer[Xmlnode], pnext: NullablePointer[Xmlnode], pnames: Pointer[Pointer[U8] tag], pmax: I32): I32 => var tmpvar: I32 = @xmlValidGetValidElements[I32](pprev, pnext, pnames, pmax) tmpvar fun xmlValidateNameValue(pvalue: String): I32 => var tmpvar: I32 = @xmlValidateNameValue[I32](pvalue.cstring()) tmpvar fun xmlValidateNamesValue(pvalue: String): I32 => var tmpvar: I32 = @xmlValidateNamesValue[I32](pvalue.cstring()) tmpvar fun xmlValidateNmtokenValue(pvalue: String): I32 => var tmpvar: I32 = @xmlValidateNmtokenValue[I32](pvalue.cstring()) tmpvar fun xmlValidateNmtokensValue(pvalue: String): I32 => var tmpvar: I32 = @xmlValidateNmtokensValue[I32](pvalue.cstring()) tmpvar fun xmlValidBuildContentModel(pctxt: NullablePointer[Xmlvalidctxt], pelem: NullablePointer[Xmlelement]): I32 => var tmpvar: I32 = @xmlValidBuildContentModel[I32](pctxt, pelem) tmpvar fun xmlValidatePushElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pqname: String): I32 => var tmpvar: I32 = @xmlValidatePushElement[I32](pctxt, pdoc, pelem, pqname.cstring()) tmpvar fun xmlValidatePushCData(pctxt: NullablePointer[Xmlvalidctxt], pdata: String, plen: I32): I32 => var tmpvar: I32 = @xmlValidatePushCData[I32](pctxt, pdata.cstring(), plen) tmpvar fun xmlValidatePopElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode], pqname: String): I32 => var tmpvar: I32 = @xmlValidatePopElement[I32](pctxt, pdoc, pelem, pqname.cstring()) tmpvar fun xmlInitCharEncodingHandlers(): None => var tmpvar: None = @xmlInitCharEncodingHandlers[None]() tmpvar fun xmlCleanupCharEncodingHandlers(): None => var tmpvar: None = @xmlCleanupCharEncodingHandlers[None]() tmpvar fun xmlRegisterCharEncodingHandler(phandler: NullablePointer[Xmlcharencodinghandler]): None => var tmpvar: None = @xmlRegisterCharEncodingHandler[None](phandler) tmpvar fun xmlGetCharEncodingHandler(penc: I32): NullablePointer[Xmlcharencodinghandler] => var tmpvar: NullablePointer[Xmlcharencodinghandler] = @xmlGetCharEncodingHandler[NullablePointer[Xmlcharencodinghandler]](penc) tmpvar fun xmlFindCharEncodingHandler(pname: String): NullablePointer[Xmlcharencodinghandler] => var tmpvar: NullablePointer[Xmlcharencodinghandler] = @xmlFindCharEncodingHandler[NullablePointer[Xmlcharencodinghandler]](pname.cstring()) tmpvar fun xmlNewCharEncodingHandler(pname: String, pinput: Pointer[FUNCTIONPOINTER], poutput: Pointer[FUNCTIONPOINTER]): NullablePointer[Xmlcharencodinghandler] => var tmpvar: NullablePointer[Xmlcharencodinghandler] = @xmlNewCharEncodingHandler[NullablePointer[Xmlcharencodinghandler]](pname.cstring(), pinput, poutput) tmpvar fun xmlAddEncodingAlias(pname: String, palias: String): I32 => var tmpvar: I32 = @xmlAddEncodingAlias[I32](pname.cstring(), palias.cstring()) tmpvar fun xmlDelEncodingAlias(palias: String): I32 => var tmpvar: I32 = @xmlDelEncodingAlias[I32](palias.cstring()) tmpvar fun xmlGetEncodingAlias(palias: String): String => var tmpvar: Pointer[U8] = @xmlGetEncodingAlias[Pointer[U8]](palias.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCleanupEncodingAliases(): None => var tmpvar: None = @xmlCleanupEncodingAliases[None]() tmpvar fun xmlParseCharEncoding(pname: String): I32 => var tmpvar: I32 = @xmlParseCharEncoding[I32](pname.cstring()) tmpvar fun xmlGetCharEncodingName(penc: I32): String => var tmpvar: Pointer[U8] = @xmlGetCharEncodingName[Pointer[U8]](penc) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlDetectCharEncoding(pin: String, plen: I32): I32 => var tmpvar: I32 = @xmlDetectCharEncoding[I32](pin.cstring(), plen) tmpvar fun xmlCharEncOutFunc(phandler: NullablePointer[Xmlcharencodinghandler], pout: NullablePointer[Xmlbuffer], pin: NullablePointer[Xmlbuffer]): I32 => var tmpvar: I32 = @xmlCharEncOutFunc[I32](phandler, pout, pin) tmpvar fun xmlCharEncInFunc(phandler: NullablePointer[Xmlcharencodinghandler], pout: NullablePointer[Xmlbuffer], pin: NullablePointer[Xmlbuffer]): I32 => var tmpvar: I32 = @xmlCharEncInFunc[I32](phandler, pout, pin) tmpvar fun xmlCharEncFirstLine(phandler: NullablePointer[Xmlcharencodinghandler], pout: NullablePointer[Xmlbuffer], pin: NullablePointer[Xmlbuffer]): I32 => var tmpvar: I32 = @xmlCharEncFirstLine[I32](phandler, pout, pin) tmpvar fun xmlCharEncCloseFunc(phandler: NullablePointer[Xmlcharencodinghandler]): I32 => var tmpvar: I32 = @xmlCharEncCloseFunc[I32](phandler) tmpvar fun utf8Toisolat1(pout: String, poutlen: Pointer[I32], pin: String, pinlen: Pointer[I32]): I32 => var tmpvar: I32 = @UTF8Toisolat1[I32](pout.cstring(), poutlen, pin.cstring(), pinlen) tmpvar fun isolat1ToUTF8(pout: String, poutlen: Pointer[I32], pin: String, pinlen: Pointer[I32]): I32 => var tmpvar: I32 = @isolat1ToUTF8[I32](pout.cstring(), poutlen, pin.cstring(), pinlen) tmpvar fun xlinkGetDefaultDetect(): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xlinkGetDefaultDetect[Pointer[FUNCTIONPOINTER]]() tmpvar fun xlinkSetDefaultDetect(pfunc: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xlinkSetDefaultDetect[None](pfunc) tmpvar fun xlinkGetDefaultHandler(): NullablePointer[Xlinkhandler] => var tmpvar: NullablePointer[Xlinkhandler] = @xlinkGetDefaultHandler[NullablePointer[Xlinkhandler]]() tmpvar fun xlinkSetDefaultHandler(phandler: NullablePointer[Xlinkhandler]): None => var tmpvar: None = @xlinkSetDefaultHandler[None](phandler) tmpvar fun xlinkIsLink(pdoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xlinkIsLink[I32](pdoc, pnode) tmpvar fun xmlSAX2GetPublicId(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlSAX2GetPublicId[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSAX2GetSystemId(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlSAX2GetSystemId[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSAX2SetDocumentLocator(pctx: Pointer[U8], ploc: NullablePointer[Xmlsaxlocator]): None => var tmpvar: None = @xmlSAX2SetDocumentLocator[None](pctx, ploc) tmpvar fun xmlSAX2GetLineNumber(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlSAX2GetLineNumber[I32](pctx) tmpvar fun xmlSAX2GetColumnNumber(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlSAX2GetColumnNumber[I32](pctx) tmpvar fun xmlSAX2IsStandalone(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlSAX2IsStandalone[I32](pctx) tmpvar fun xmlSAX2HasInternalSubset(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlSAX2HasInternalSubset[I32](pctx) tmpvar fun xmlSAX2HasExternalSubset(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlSAX2HasExternalSubset[I32](pctx) tmpvar fun xmlSAX2InternalSubset(pctx: Pointer[U8], pname: String, pExternalID: String, pSystemID: String): None => var tmpvar: None = @xmlSAX2InternalSubset[None](pctx, pname.cstring(), pExternalID.cstring(), pSystemID.cstring()) tmpvar fun xmlSAX2ExternalSubset(pctx: Pointer[U8], pname: String, pExternalID: String, pSystemID: String): None => var tmpvar: None = @xmlSAX2ExternalSubset[None](pctx, pname.cstring(), pExternalID.cstring(), pSystemID.cstring()) tmpvar fun xmlSAX2GetEntity(pctx: Pointer[U8], pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlSAX2GetEntity[NullablePointer[Xmlentity]](pctx, pname.cstring()) tmpvar fun xmlSAX2GetParameterEntity(pctx: Pointer[U8], pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlSAX2GetParameterEntity[NullablePointer[Xmlentity]](pctx, pname.cstring()) tmpvar fun xmlSAX2ResolveEntity(pctx: Pointer[U8], ppublicId: String, psystemId: String): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlSAX2ResolveEntity[NullablePointer[Xmlparserinput]](pctx, ppublicId.cstring(), psystemId.cstring()) tmpvar fun xmlSAX2EntityDecl(pctx: Pointer[U8], pname: String, ptype: I32, ppublicId: String, psystemId: String, pcontent: String): None => var tmpvar: None = @xmlSAX2EntityDecl[None](pctx, pname.cstring(), ptype, ppublicId.cstring(), psystemId.cstring(), pcontent.cstring()) tmpvar fun xmlSAX2AttributeDecl(pctx: Pointer[U8], pelem: String, pfullname: String, ptype: I32, pdef: I32, pdefaultValue: String, ptree: NullablePointer[Xmlenumeration]): None => var tmpvar: None = @xmlSAX2AttributeDecl[None](pctx, pelem.cstring(), pfullname.cstring(), ptype, pdef, pdefaultValue.cstring(), ptree) tmpvar fun xmlSAX2ElementDecl(pctx: Pointer[U8], pname: String, ptype: I32, pcontent: NullablePointer[Xmlelementcontent]): None => var tmpvar: None = @xmlSAX2ElementDecl[None](pctx, pname.cstring(), ptype, pcontent) tmpvar fun xmlSAX2NotationDecl(pctx: Pointer[U8], pname: String, ppublicId: String, psystemId: String): None => var tmpvar: None = @xmlSAX2NotationDecl[None](pctx, pname.cstring(), ppublicId.cstring(), psystemId.cstring()) tmpvar fun xmlSAX2UnparsedEntityDecl(pctx: Pointer[U8], pname: String, ppublicId: String, psystemId: String, pnotationName: String): None => var tmpvar: None = @xmlSAX2UnparsedEntityDecl[None](pctx, pname.cstring(), ppublicId.cstring(), psystemId.cstring(), pnotationName.cstring()) tmpvar fun xmlSAX2StartDocument(pctx: Pointer[U8]): None => var tmpvar: None = @xmlSAX2StartDocument[None](pctx) tmpvar fun xmlSAX2EndDocument(pctx: Pointer[U8]): None => var tmpvar: None = @xmlSAX2EndDocument[None](pctx) tmpvar fun xmlSAX2StartElement(pctx: Pointer[U8], pfullname: String, patts: Pointer[Pointer[U8] tag]): None => var tmpvar: None = @xmlSAX2StartElement[None](pctx, pfullname.cstring(), patts) tmpvar fun xmlSAX2EndElement(pctx: Pointer[U8], pname: String): None => var tmpvar: None = @xmlSAX2EndElement[None](pctx, pname.cstring()) tmpvar fun xmlSAX2StartElementNs(pctx: Pointer[U8], plocalname: String, pprefix: String, pURI: String, pnb_namespaces: I32, pnamespaces: Pointer[Pointer[U8] tag], pnb_attributes: I32, pnb_defaulted: I32, pattributes: Pointer[Pointer[U8] tag]): None => var tmpvar: None = @xmlSAX2StartElementNs[None](pctx, plocalname.cstring(), pprefix.cstring(), pURI.cstring(), pnb_namespaces, pnamespaces, pnb_attributes, pnb_defaulted, pattributes) tmpvar fun xmlSAX2EndElementNs(pctx: Pointer[U8], plocalname: String, pprefix: String, pURI: String): None => var tmpvar: None = @xmlSAX2EndElementNs[None](pctx, plocalname.cstring(), pprefix.cstring(), pURI.cstring()) tmpvar fun xmlSAX2Reference(pctx: Pointer[U8], pname: String): None => var tmpvar: None = @xmlSAX2Reference[None](pctx, pname.cstring()) tmpvar fun xmlSAX2Characters(pctx: Pointer[U8], pch: String, plen: I32): None => var tmpvar: None = @xmlSAX2Characters[None](pctx, pch.cstring(), plen) tmpvar fun xmlSAX2IgnorableWhitespace(pctx: Pointer[U8], pch: String, plen: I32): None => var tmpvar: None = @xmlSAX2IgnorableWhitespace[None](pctx, pch.cstring(), plen) tmpvar fun xmlSAX2ProcessingInstruction(pctx: Pointer[U8], ptarget: String, pdata: String): None => var tmpvar: None = @xmlSAX2ProcessingInstruction[None](pctx, ptarget.cstring(), pdata.cstring()) tmpvar fun xmlSAX2Comment(pctx: Pointer[U8], pvalue: String): None => var tmpvar: None = @xmlSAX2Comment[None](pctx, pvalue.cstring()) tmpvar fun xmlSAX2CDataBlock(pctx: Pointer[U8], pvalue: String, plen: I32): None => var tmpvar: None = @xmlSAX2CDataBlock[None](pctx, pvalue.cstring(), plen) tmpvar fun xmlSAXDefaultVersion(pversion: I32): I32 => var tmpvar: I32 = @xmlSAXDefaultVersion[I32](pversion) tmpvar fun xmlSAXVersion(phdlr: NullablePointer[Xmlsaxhandler], pversion: I32): I32 => var tmpvar: I32 = @xmlSAXVersion[I32](phdlr, pversion) tmpvar fun xmlSAX2InitDefaultSAXHandler(phdlr: NullablePointer[Xmlsaxhandler], pwarning: I32): None => var tmpvar: None = @xmlSAX2InitDefaultSAXHandler[None](phdlr, pwarning) tmpvar fun xmlSAX2InitHtmlDefaultSAXHandler(phdlr: NullablePointer[Xmlsaxhandler]): None => var tmpvar: None = @xmlSAX2InitHtmlDefaultSAXHandler[None](phdlr) tmpvar fun htmlDefaultSAXHandlerInit(): None => var tmpvar: None = @htmlDefaultSAXHandlerInit[None]() tmpvar fun xmlSAX2InitDocbDefaultSAXHandler(phdlr: NullablePointer[Xmlsaxhandler]): None => var tmpvar: None = @xmlSAX2InitDocbDefaultSAXHandler[None](phdlr) tmpvar fun docbDefaultSAXHandlerInit(): None => var tmpvar: None = @docbDefaultSAXHandlerInit[None]() tmpvar fun xmlDefaultSAXHandlerInit(): None => var tmpvar: None = @xmlDefaultSAXHandlerInit[None]() tmpvar fun xmlInitGlobals(): None => var tmpvar: None = @xmlInitGlobals[None]() tmpvar fun xmlCleanupGlobals(): None => var tmpvar: None = @xmlCleanupGlobals[None]() tmpvar fun xmlParserInputBufferCreateFilenameDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlParserInputBufferCreateFilenameDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlOutputBufferCreateFilenameDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlOutputBufferCreateFilenameDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlInitializeGlobalState(pgs: NullablePointer[Xmlglobalstate]): None => var tmpvar: None = @xmlInitializeGlobalState[None](pgs) tmpvar fun xmlThrDefSetGenericErrorFunc(pctx: Pointer[U8], phandler: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xmlThrDefSetGenericErrorFunc[None](pctx, phandler) tmpvar fun xmlThrDefSetStructuredErrorFunc(pctx: Pointer[U8], phandler: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xmlThrDefSetStructuredErrorFunc[None](pctx, phandler) tmpvar fun xmlRegisterNodeDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlRegisterNodeDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlThrDefRegisterNodeDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlThrDefRegisterNodeDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlDeregisterNodeDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlDeregisterNodeDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlThrDefDeregisterNodeDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlThrDefDeregisterNodeDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlThrDefOutputBufferCreateFilenameDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlThrDefOutputBufferCreateFilenameDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlThrDefParserInputBufferCreateFilenameDefault(pfunc: Pointer[FUNCTIONPOINTER]): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlThrDefParserInputBufferCreateFilenameDefault[Pointer[FUNCTIONPOINTER]](pfunc) tmpvar fun xmlThrDefBufferAllocScheme(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefBufferAllocScheme[I32](pv) tmpvar fun xmlThrDefDefaultBufferSize(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefDefaultBufferSize[I32](pv) tmpvar fun xmlThrDefDoValidityCheckingDefaultValue(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefDoValidityCheckingDefaultValue[I32](pv) tmpvar fun xmlThrDefGetWarningsDefaultValue(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefGetWarningsDefaultValue[I32](pv) tmpvar fun xmlThrDefIndentTreeOutput(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefIndentTreeOutput[I32](pv) tmpvar fun xmlThrDefTreeIndentString(pv: String): String => var tmpvar: Pointer[U8] = @xmlThrDefTreeIndentString[Pointer[U8]](pv.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlThrDefKeepBlanksDefaultValue(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefKeepBlanksDefaultValue[I32](pv) tmpvar fun xmlThrDefLineNumbersDefaultValue(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefLineNumbersDefaultValue[I32](pv) tmpvar fun xmlThrDefLoadExtDtdDefaultValue(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefLoadExtDtdDefaultValue[I32](pv) tmpvar fun xmlThrDefParserDebugEntities(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefParserDebugEntities[I32](pv) tmpvar fun xmlThrDefPedanticParserDefaultValue(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefPedanticParserDefaultValue[I32](pv) tmpvar fun xmlThrDefSaveNoEmptyTags(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefSaveNoEmptyTags[I32](pv) tmpvar fun xmlThrDefSubstituteEntitiesDefaultValue(pv: I32): I32 => var tmpvar: I32 = @xmlThrDefSubstituteEntitiesDefaultValue[I32](pv) tmpvar fun xmlNewCatalog(psgml: I32): NullablePointer[Xmlcatalog] => var tmpvar: NullablePointer[Xmlcatalog] = @xmlNewCatalog[NullablePointer[Xmlcatalog]](psgml) tmpvar fun xmlLoadACatalog(pfilename: String): NullablePointer[Xmlcatalog] => var tmpvar: NullablePointer[Xmlcatalog] = @xmlLoadACatalog[NullablePointer[Xmlcatalog]](pfilename.cstring()) tmpvar fun xmlLoadSGMLSuperCatalog(pfilename: String): NullablePointer[Xmlcatalog] => var tmpvar: NullablePointer[Xmlcatalog] = @xmlLoadSGMLSuperCatalog[NullablePointer[Xmlcatalog]](pfilename.cstring()) tmpvar fun xmlConvertSGMLCatalog(pcatal: NullablePointer[Xmlcatalog]): I32 => var tmpvar: I32 = @xmlConvertSGMLCatalog[I32](pcatal) tmpvar fun xmlACatalogAdd(pcatal: NullablePointer[Xmlcatalog], ptype: String, porig: String, preplace: String): I32 => var tmpvar: I32 = @xmlACatalogAdd[I32](pcatal, ptype.cstring(), porig.cstring(), preplace.cstring()) tmpvar fun xmlACatalogRemove(pcatal: NullablePointer[Xmlcatalog], pvalue: String): I32 => var tmpvar: I32 = @xmlACatalogRemove[I32](pcatal, pvalue.cstring()) tmpvar fun xmlACatalogResolve(pcatal: NullablePointer[Xmlcatalog], ppubID: String, psysID: String): String => var tmpvar: Pointer[U8] = @xmlACatalogResolve[Pointer[U8]](pcatal, ppubID.cstring(), psysID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlACatalogResolveSystem(pcatal: NullablePointer[Xmlcatalog], psysID: String): String => var tmpvar: Pointer[U8] = @xmlACatalogResolveSystem[Pointer[U8]](pcatal, psysID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlACatalogResolvePublic(pcatal: NullablePointer[Xmlcatalog], ppubID: String): String => var tmpvar: Pointer[U8] = @xmlACatalogResolvePublic[Pointer[U8]](pcatal, ppubID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlACatalogResolveURI(pcatal: NullablePointer[Xmlcatalog], pURI: String): String => var tmpvar: Pointer[U8] = @xmlACatalogResolveURI[Pointer[U8]](pcatal, pURI.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlACatalogDump(pcatal: NullablePointer[Xmlcatalog], pout: NullablePointer[IoFile]): None => var tmpvar: None = @xmlACatalogDump[None](pcatal, pout) tmpvar fun xmlFreeCatalog(pcatal: NullablePointer[Xmlcatalog]): None => var tmpvar: None = @xmlFreeCatalog[None](pcatal) tmpvar fun xmlCatalogIsEmpty(pcatal: NullablePointer[Xmlcatalog]): I32 => var tmpvar: I32 = @xmlCatalogIsEmpty[I32](pcatal) tmpvar fun xmlInitializeCatalog(): None => var tmpvar: None = @xmlInitializeCatalog[None]() tmpvar fun xmlLoadCatalog(pfilename: String): I32 => var tmpvar: I32 = @xmlLoadCatalog[I32](pfilename.cstring()) tmpvar fun xmlLoadCatalogs(ppaths: String): None => var tmpvar: None = @xmlLoadCatalogs[None](ppaths.cstring()) tmpvar fun xmlCatalogCleanup(): None => var tmpvar: None = @xmlCatalogCleanup[None]() tmpvar fun xmlCatalogDump(pout: NullablePointer[IoFile]): None => var tmpvar: None = @xmlCatalogDump[None](pout) tmpvar fun xmlCatalogResolve(ppubID: String, psysID: String): String => var tmpvar: Pointer[U8] = @xmlCatalogResolve[Pointer[U8]](ppubID.cstring(), psysID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogResolveSystem(psysID: String): String => var tmpvar: Pointer[U8] = @xmlCatalogResolveSystem[Pointer[U8]](psysID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogResolvePublic(ppubID: String): String => var tmpvar: Pointer[U8] = @xmlCatalogResolvePublic[Pointer[U8]](ppubID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogResolveURI(pURI: String): String => var tmpvar: Pointer[U8] = @xmlCatalogResolveURI[Pointer[U8]](pURI.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogAdd(ptype: String, porig: String, preplace: String): I32 => var tmpvar: I32 = @xmlCatalogAdd[I32](ptype.cstring(), porig.cstring(), preplace.cstring()) tmpvar fun xmlCatalogRemove(pvalue: String): I32 => var tmpvar: I32 = @xmlCatalogRemove[I32](pvalue.cstring()) tmpvar fun xmlParseCatalogFile(pfilename: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlParseCatalogFile[NullablePointer[Xmldoc]](pfilename.cstring()) tmpvar fun xmlCatalogConvert(): I32 => var tmpvar: I32 = @xmlCatalogConvert[I32]() tmpvar fun xmlCatalogFreeLocal(pcatalogs: Pointer[U8]): None => var tmpvar: None = @xmlCatalogFreeLocal[None](pcatalogs) tmpvar fun xmlCatalogAddLocal(pcatalogs: Pointer[U8], pURL: String): String => var tmpvar: Pointer[U8] = @xmlCatalogAddLocal[Pointer[U8]](pcatalogs, pURL.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogLocalResolve(pcatalogs: Pointer[U8], ppubID: String, psysID: String): String => var tmpvar: Pointer[U8] = @xmlCatalogLocalResolve[Pointer[U8]](pcatalogs, ppubID.cstring(), psysID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogLocalResolveURI(pcatalogs: Pointer[U8], pURI: String): String => var tmpvar: Pointer[U8] = @xmlCatalogLocalResolveURI[Pointer[U8]](pcatalogs, pURI.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogSetDebug(plevel: I32): I32 => var tmpvar: I32 = @xmlCatalogSetDebug[I32](plevel) tmpvar fun xmlCatalogSetDefaultPrefer(pprefer: I32): I32 => var tmpvar: I32 = @xmlCatalogSetDefaultPrefer[I32](pprefer) tmpvar fun xmlCatalogSetDefaults(pallow: I32): None => var tmpvar: None = @xmlCatalogSetDefaults[None](pallow) tmpvar fun xmlCatalogGetDefaults(): I32 => var tmpvar: I32 = @xmlCatalogGetDefaults[I32]() tmpvar fun xmlCatalogGetSystem(psysID: String): String => var tmpvar: Pointer[U8] = @xmlCatalogGetSystem[Pointer[U8]](psysID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCatalogGetPublic(ppubID: String): String => var tmpvar: Pointer[U8] = @xmlCatalogGetPublic[Pointer[U8]](ppubID.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlCharInRange(pval: U32, pgroup: NullablePointer[Xmlchrangegroup]): I32 => var tmpvar: I32 = @xmlCharInRange[I32](pval, pgroup) tmpvar fun xmlIsBaseChar(pch: U32): I32 => var tmpvar: I32 = @xmlIsBaseChar[I32](pch) tmpvar fun xmlIsBlank(pch: U32): I32 => var tmpvar: I32 = @xmlIsBlank[I32](pch) tmpvar fun xmlIsChar(pch: U32): I32 => var tmpvar: I32 = @xmlIsChar[I32](pch) tmpvar fun xmlIsCombining(pch: U32): I32 => var tmpvar: I32 = @xmlIsCombining[I32](pch) tmpvar fun xmlIsDigit(pch: U32): I32 => var tmpvar: I32 = @xmlIsDigit[I32](pch) tmpvar fun xmlIsExtender(pch: U32): I32 => var tmpvar: I32 = @xmlIsExtender[I32](pch) tmpvar fun xmlIsIdeographic(pch: U32): I32 => var tmpvar: I32 = @xmlIsIdeographic[I32](pch) tmpvar fun xmlIsPubidChar(pch: U32): I32 => var tmpvar: I32 = @xmlIsPubidChar[I32](pch) tmpvar fun xmlXPathFreeObject(pobj: NullablePointer[Xmlxpathobject]): None => var tmpvar: None = @xmlXPathFreeObject[None](pobj) tmpvar fun xmlXPathNodeSetCreate(pval: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathNodeSetCreate[NullablePointer[Xmlnodeset]](pval) tmpvar fun xmlXPathFreeNodeSetList(pobj: NullablePointer[Xmlxpathobject]): None => var tmpvar: None = @xmlXPathFreeNodeSetList[None](pobj) tmpvar fun xmlXPathFreeNodeSet(pobj: NullablePointer[Xmlnodeset]): None => var tmpvar: None = @xmlXPathFreeNodeSet[None](pobj) tmpvar fun xmlXPathObjectCopy(pval: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathObjectCopy[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathCmpNodes(pnode1: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlXPathCmpNodes[I32](pnode1, pnode2) tmpvar fun xmlXPathCastNumberToBoolean(pval: F64): I32 => var tmpvar: I32 = @xmlXPathCastNumberToBoolean[I32](pval) tmpvar fun xmlXPathCastStringToBoolean(pval: String): I32 => var tmpvar: I32 = @xmlXPathCastStringToBoolean[I32](pval.cstring()) tmpvar fun xmlXPathCastNodeSetToBoolean(pns: NullablePointer[Xmlnodeset]): I32 => var tmpvar: I32 = @xmlXPathCastNodeSetToBoolean[I32](pns) tmpvar fun xmlXPathCastToBoolean(pval: NullablePointer[Xmlxpathobject]): I32 => var tmpvar: I32 = @xmlXPathCastToBoolean[I32](pval) tmpvar fun xmlXPathCastBooleanToNumber(pval: I32): F64 => var tmpvar: F64 = @xmlXPathCastBooleanToNumber[F64](pval) tmpvar fun xmlXPathCastStringToNumber(pval: String): F64 => var tmpvar: F64 = @xmlXPathCastStringToNumber[F64](pval.cstring()) tmpvar fun xmlXPathCastNodeToNumber(pnode: NullablePointer[Xmlnode]): F64 => var tmpvar: F64 = @xmlXPathCastNodeToNumber[F64](pnode) tmpvar fun xmlXPathCastNodeSetToNumber(pns: NullablePointer[Xmlnodeset]): F64 => var tmpvar: F64 = @xmlXPathCastNodeSetToNumber[F64](pns) tmpvar fun xmlXPathCastToNumber(pval: NullablePointer[Xmlxpathobject]): F64 => var tmpvar: F64 = @xmlXPathCastToNumber[F64](pval) tmpvar fun xmlXPathCastBooleanToString(pval: I32): String => var tmpvar: Pointer[U8] = @xmlXPathCastBooleanToString[Pointer[U8]](pval) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathCastNumberToString(pval: F64): String => var tmpvar: Pointer[U8] = @xmlXPathCastNumberToString[Pointer[U8]](pval) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathCastNodeToString(pnode: NullablePointer[Xmlnode]): String => var tmpvar: Pointer[U8] = @xmlXPathCastNodeToString[Pointer[U8]](pnode) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathCastNodeSetToString(pns: NullablePointer[Xmlnodeset]): String => var tmpvar: Pointer[U8] = @xmlXPathCastNodeSetToString[Pointer[U8]](pns) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathCastToString(pval: NullablePointer[Xmlxpathobject]): String => var tmpvar: Pointer[U8] = @xmlXPathCastToString[Pointer[U8]](pval) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathConvertBoolean(pval: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathConvertBoolean[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathConvertNumber(pval: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathConvertNumber[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathConvertString(pval: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathConvertString[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathNewContext(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmlxpathcontext] => var tmpvar: NullablePointer[Xmlxpathcontext] = @xmlXPathNewContext[NullablePointer[Xmlxpathcontext]](pdoc) tmpvar fun xmlXPathFreeContext(pctxt: NullablePointer[Xmlxpathcontext] tag): None => var tmpvar: None = @xmlXPathFreeContext[None](pctxt) tmpvar fun xmlXPathContextSetCache(pctxt: NullablePointer[Xmlxpathcontext] tag, pactive: I32, pvalue: I32, poptions: I32): I32 => var tmpvar: I32 = @xmlXPathContextSetCache[I32](pctxt, pactive, pvalue, poptions) tmpvar fun xmlXPathOrderDocElems(pdoc: NullablePointer[Xmldoc] tag): I64 => var tmpvar: I64 = @xmlXPathOrderDocElems[I64](pdoc) tmpvar fun xmlXPathSetContextNode(pnode: NullablePointer[Xmlnode], pctx: NullablePointer[Xmlxpathcontext] tag): I32 => var tmpvar: I32 = @xmlXPathSetContextNode[I32](pnode, pctx) tmpvar fun xmlXPathNodeEval(pnode: NullablePointer[Xmlnode], pstr: String, pctx: NullablePointer[Xmlxpathcontext] tag): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNodeEval[NullablePointer[Xmlxpathobject]](pnode, pstr.cstring(), pctx) tmpvar fun xmlXPathEval(pstr: String, pctx: NullablePointer[Xmlxpathcontext] tag): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathEval[NullablePointer[Xmlxpathobject]](pstr.cstring(), pctx) tmpvar fun xmlXPathEvalExpression(pstr: String, pctxt: NullablePointer[Xmlxpathcontext] tag): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathEvalExpression[NullablePointer[Xmlxpathobject]](pstr.cstring(), pctxt) tmpvar fun xmlXPathEvalPredicate(pctxt: NullablePointer[Xmlxpathcontext] tag, pres: NullablePointer[Xmlxpathobject]): I32 => var tmpvar: I32 = @xmlXPathEvalPredicate[I32](pctxt, pres) tmpvar fun xmlXPathCompile(pstr: String): NullablePointer[Xmlxpathcompexpr] => var tmpvar: NullablePointer[Xmlxpathcompexpr] = @xmlXPathCompile[NullablePointer[Xmlxpathcompexpr]](pstr.cstring()) tmpvar fun xmlXPathCtxtCompile(pctxt: NullablePointer[Xmlxpathcontext] tag, pstr: String): NullablePointer[Xmlxpathcompexpr] => var tmpvar: NullablePointer[Xmlxpathcompexpr] = @xmlXPathCtxtCompile[NullablePointer[Xmlxpathcompexpr]](pctxt, pstr.cstring()) tmpvar fun xmlXPathCompiledEval(pcomp: NullablePointer[Xmlxpathcompexpr], pctx: NullablePointer[Xmlxpathcontext] tag): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathCompiledEval[NullablePointer[Xmlxpathobject]](pcomp, pctx) tmpvar fun xmlXPathCompiledEvalToBoolean(pcomp: NullablePointer[Xmlxpathcompexpr], pctxt: NullablePointer[Xmlxpathcontext] tag): I32 => var tmpvar: I32 = @xmlXPathCompiledEvalToBoolean[I32](pcomp, pctxt) tmpvar fun xmlXPathFreeCompExpr(pcomp: NullablePointer[Xmlxpathcompexpr]): None => var tmpvar: None = @xmlXPathFreeCompExpr[None](pcomp) tmpvar fun xmlXPathInit(): None => var tmpvar: None = @xmlXPathInit[None]() tmpvar fun xmlXPathIsNaN(pval: F64): I32 => var tmpvar: I32 = @xmlXPathIsNaN[I32](pval) tmpvar fun xmlXPathIsInf(pval: F64): I32 => var tmpvar: I32 = @xmlXPathIsInf[I32](pval) tmpvar fun xmlDebugDumpString(poutput: NullablePointer[IoFile], pstr: String): None => var tmpvar: None = @xmlDebugDumpString[None](poutput, pstr.cstring()) tmpvar fun xmlDebugDumpAttr(poutput: NullablePointer[IoFile], pattr: NullablePointer[Xmlattr], pdepth: I32): None => var tmpvar: None = @xmlDebugDumpAttr[None](poutput, pattr, pdepth) tmpvar fun xmlDebugDumpAttrList(poutput: NullablePointer[IoFile], pattr: NullablePointer[Xmlattr], pdepth: I32): None => var tmpvar: None = @xmlDebugDumpAttrList[None](poutput, pattr, pdepth) tmpvar fun xmlDebugDumpOneNode(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode], pdepth: I32): None => var tmpvar: None = @xmlDebugDumpOneNode[None](poutput, pnode, pdepth) tmpvar fun xmlDebugDumpNode(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode], pdepth: I32): None => var tmpvar: None = @xmlDebugDumpNode[None](poutput, pnode, pdepth) tmpvar fun xmlDebugDumpNodeList(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode], pdepth: I32): None => var tmpvar: None = @xmlDebugDumpNodeList[None](poutput, pnode, pdepth) tmpvar fun xmlDebugDumpDocumentHead(poutput: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc] tag): None => var tmpvar: None = @xmlDebugDumpDocumentHead[None](poutput, pdoc) tmpvar fun xmlDebugDumpDocument(poutput: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc] tag): None => var tmpvar: None = @xmlDebugDumpDocument[None](poutput, pdoc) tmpvar fun xmlDebugDumpDTD(poutput: NullablePointer[IoFile], pdtd: NullablePointer[Xmldtd]): None => var tmpvar: None = @xmlDebugDumpDTD[None](poutput, pdtd) tmpvar fun xmlDebugDumpEntities(poutput: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc] tag): None => var tmpvar: None = @xmlDebugDumpEntities[None](poutput, pdoc) tmpvar fun xmlDebugCheckDocument(poutput: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlDebugCheckDocument[I32](poutput, pdoc) tmpvar fun xmlLsOneNode(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode]): None => var tmpvar: None = @xmlLsOneNode[None](poutput, pnode) tmpvar fun xmlLsCountNode(pnode: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlLsCountNode[I32](pnode) tmpvar fun xmlBoolToText(pboolval: I32): String => var tmpvar: Pointer[U8] = @xmlBoolToText[Pointer[U8]](pboolval) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlShellPrintXPathError(perrorType: I32, parg: String): None => var tmpvar: None = @xmlShellPrintXPathError[None](perrorType, parg.cstring()) tmpvar fun xmlShellPrintXPathResult(plist: NullablePointer[Xmlxpathobject]): None => var tmpvar: None = @xmlShellPrintXPathResult[None](plist) tmpvar fun xmlShellList(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellList[I32](pctxt, parg.cstring(), pnode, pnode2) tmpvar fun xmlShellBase(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellBase[I32](pctxt, parg.cstring(), pnode, pnode2) tmpvar fun xmlShellDir(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellDir[I32](pctxt, parg.cstring(), pnode, pnode2) tmpvar fun xmlShellLoad(pctxt: NullablePointer[Xmlshellctxt], pfilename: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellLoad[I32](pctxt, pfilename.cstring(), pnode, pnode2) tmpvar fun xmlShellPrintNode(pnode: NullablePointer[Xmlnode]): None => var tmpvar: None = @xmlShellPrintNode[None](pnode) tmpvar fun xmlShellCat(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellCat[I32](pctxt, parg.cstring(), pnode, pnode2) tmpvar fun xmlShellWrite(pctxt: NullablePointer[Xmlshellctxt], pfilename: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellWrite[I32](pctxt, pfilename.cstring(), pnode, pnode2) tmpvar fun xmlShellSave(pctxt: NullablePointer[Xmlshellctxt], pfilename: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellSave[I32](pctxt, pfilename.cstring(), pnode, pnode2) tmpvar fun xmlShellValidate(pctxt: NullablePointer[Xmlshellctxt], pdtd: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellValidate[I32](pctxt, pdtd.cstring(), pnode, pnode2) tmpvar fun xmlShellDu(pctxt: NullablePointer[Xmlshellctxt], parg: String, ptree: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellDu[I32](pctxt, parg.cstring(), ptree, pnode2) tmpvar fun xmlShellPwd(pctxt: NullablePointer[Xmlshellctxt], pbuffer: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlShellPwd[I32](pctxt, pbuffer.cstring(), pnode, pnode2) tmpvar fun xmlShell(pdoc: NullablePointer[Xmldoc] tag, pfilename: String, pinput: Pointer[FUNCTIONPOINTER], poutput: NullablePointer[IoFile]): None => var tmpvar: None = @xmlShell[None](pdoc, pfilename.cstring(), pinput, poutput) tmpvar fun htmlTagLookup(ptag: String): NullablePointer[Htmlelemdesc] => var tmpvar: NullablePointer[Htmlelemdesc] = @htmlTagLookup[NullablePointer[Htmlelemdesc]](ptag.cstring()) tmpvar fun htmlEntityLookup(pname: String): NullablePointer[Htmlentitydesc] => var tmpvar: NullablePointer[Htmlentitydesc] = @htmlEntityLookup[NullablePointer[Htmlentitydesc]](pname.cstring()) tmpvar fun htmlEntityValueLookup(pvalue: U32): NullablePointer[Htmlentitydesc] => var tmpvar: NullablePointer[Htmlentitydesc] = @htmlEntityValueLookup[NullablePointer[Htmlentitydesc]](pvalue) tmpvar fun htmlIsAutoClosed(pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @htmlIsAutoClosed[I32](pdoc, pelem) tmpvar fun htmlAutoCloseTag(pdoc: NullablePointer[Xmldoc] tag, pname: String, pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @htmlAutoCloseTag[I32](pdoc, pname.cstring(), pelem) tmpvar fun htmlParseEntityRef(pctxt: NullablePointer[Xmlparserctxt], pstr: Pointer[Pointer[U8] tag]): NullablePointer[Htmlentitydesc] => var tmpvar: NullablePointer[Htmlentitydesc] = @htmlParseEntityRef[NullablePointer[Htmlentitydesc]](pctxt, pstr) tmpvar fun htmlParseCharRef(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @htmlParseCharRef[I32](pctxt) tmpvar fun htmlParseElement(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @htmlParseElement[None](pctxt) tmpvar fun htmlNewParserCtxt(): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @htmlNewParserCtxt[NullablePointer[Xmlparserctxt]]() tmpvar fun htmlCreateMemoryParserCtxt(pbuffer: String, psize: I32): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @htmlCreateMemoryParserCtxt[NullablePointer[Xmlparserctxt]](pbuffer.cstring(), psize) tmpvar fun htmlParseDocument(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @htmlParseDocument[I32](pctxt) tmpvar fun htmlSAXParseDoc(pcur: String, pencoding: String, psax: NullablePointer[Xmlsaxhandler], puserData: Pointer[U8]): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlSAXParseDoc[NullablePointer[Xmldoc]](pcur.cstring(), pencoding.cstring(), psax, puserData) tmpvar fun htmlParseDoc(pcur: String, pencoding: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlParseDoc[NullablePointer[Xmldoc]](pcur.cstring(), pencoding.cstring()) tmpvar fun htmlSAXParseFile(pfilename: String, pencoding: String, psax: NullablePointer[Xmlsaxhandler], puserData: Pointer[U8]): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlSAXParseFile[NullablePointer[Xmldoc]](pfilename.cstring(), pencoding.cstring(), psax, puserData) tmpvar fun htmlParseFile(pfilename: String, pencoding: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlParseFile[NullablePointer[Xmldoc]](pfilename.cstring(), pencoding.cstring()) tmpvar fun utf8ToHtml(pout: String, poutlen: Pointer[I32], pin: String, pinlen: Pointer[I32]): I32 => var tmpvar: I32 = @UTF8ToHtml[I32](pout.cstring(), poutlen, pin.cstring(), pinlen) tmpvar fun htmlEncodeEntities(pout: String, poutlen: Pointer[I32], pin: String, pinlen: Pointer[I32], pquoteChar: I32): I32 => var tmpvar: I32 = @htmlEncodeEntities[I32](pout.cstring(), poutlen, pin.cstring(), pinlen, pquoteChar) tmpvar fun htmlIsScriptAttribute(pname: String): I32 => var tmpvar: I32 = @htmlIsScriptAttribute[I32](pname.cstring()) tmpvar fun htmlHandleOmittedElem(pval: I32): I32 => var tmpvar: I32 = @htmlHandleOmittedElem[I32](pval) tmpvar fun htmlCreatePushParserCtxt(psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pchunk: String, psize: I32, pfilename: String, penc: I32): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @htmlCreatePushParserCtxt[NullablePointer[Xmlparserctxt]](psax, puser_data, pchunk.cstring(), psize, pfilename.cstring(), penc) tmpvar fun htmlParseChunk(pctxt: NullablePointer[Xmlparserctxt], pchunk: String, psize: I32, pterminate: I32): I32 => var tmpvar: I32 = @htmlParseChunk[I32](pctxt, pchunk.cstring(), psize, pterminate) tmpvar fun htmlFreeParserCtxt(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @htmlFreeParserCtxt[None](pctxt) tmpvar fun htmlCtxtReset(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @htmlCtxtReset[None](pctxt) tmpvar fun htmlCtxtUseOptions(pctxt: NullablePointer[Xmlparserctxt], poptions: I32): I32 => var tmpvar: I32 = @htmlCtxtUseOptions[I32](pctxt, poptions) tmpvar fun htmlReadDoc(pcur: String, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlReadDoc[NullablePointer[Xmldoc]](pcur.cstring(), pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlReadFile(pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlReadFile[NullablePointer[Xmldoc]](pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlReadMemory(pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlReadMemory[NullablePointer[Xmldoc]](pbuffer.cstring(), psize, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlReadFd(pfd: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlReadFd[NullablePointer[Xmldoc]](pfd, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlReadIO(pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlReadIO[NullablePointer[Xmldoc]](pioread, pioclose, pioctx, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlCtxtReadDoc(pctxt: NullablePointer[Xmlparserctxt], pcur: String, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlCtxtReadDoc[NullablePointer[Xmldoc]](pctxt, pcur.cstring(), pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlCtxtReadFile(pctxt: NullablePointer[Xmlparserctxt], pfilename: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlCtxtReadFile[NullablePointer[Xmldoc]](pctxt, pfilename.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlCtxtReadMemory(pctxt: NullablePointer[Xmlparserctxt], pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlCtxtReadMemory[NullablePointer[Xmldoc]](pctxt, pbuffer.cstring(), psize, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlCtxtReadFd(pctxt: NullablePointer[Xmlparserctxt], pfd: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlCtxtReadFd[NullablePointer[Xmldoc]](pctxt, pfd, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlCtxtReadIO(pctxt: NullablePointer[Xmlparserctxt], pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlCtxtReadIO[NullablePointer[Xmldoc]](pctxt, pioread, pioclose, pioctx, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun htmlNewDoc(pURI: String, pExternalID: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlNewDoc[NullablePointer[Xmldoc]](pURI.cstring(), pExternalID.cstring()) tmpvar fun htmlNewDocNoDtD(pURI: String, pExternalID: String): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @htmlNewDocNoDtD[NullablePointer[Xmldoc]](pURI.cstring(), pExternalID.cstring()) tmpvar fun htmlGetMetaEncoding(pdoc: NullablePointer[Xmldoc] tag): String => var tmpvar: Pointer[U8] = @htmlGetMetaEncoding[Pointer[U8]](pdoc) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun htmlSetMetaEncoding(pdoc: NullablePointer[Xmldoc] tag, pencoding: String): I32 => var tmpvar: I32 = @htmlSetMetaEncoding[I32](pdoc, pencoding.cstring()) tmpvar fun htmlDocDumpMemory(pcur: NullablePointer[Xmldoc] tag, pmem: Pointer[Pointer[U8] tag], psize: Pointer[I32]): None => var tmpvar: None = @htmlDocDumpMemory[None](pcur, pmem, psize) tmpvar fun htmlDocDumpMemoryFormat(pcur: NullablePointer[Xmldoc] tag, pmem: Pointer[Pointer[U8] tag], psize: Pointer[I32], pformat: I32): None => var tmpvar: None = @htmlDocDumpMemoryFormat[None](pcur, pmem, psize, pformat) tmpvar fun htmlDocDump(pf: NullablePointer[IoFile], pcur: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @htmlDocDump[I32](pf, pcur) tmpvar fun htmlSaveFile(pfilename: String, pcur: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @htmlSaveFile[I32](pfilename.cstring(), pcur) tmpvar fun htmlNodeDump(pbuf: NullablePointer[Xmlbuffer], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @htmlNodeDump[I32](pbuf, pdoc, pcur) tmpvar fun htmlNodeDumpFile(pout: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode]): None => var tmpvar: None = @htmlNodeDumpFile[None](pout, pdoc, pcur) tmpvar fun htmlNodeDumpFileFormat(pout: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode], pencoding: String, pformat: I32): I32 => var tmpvar: I32 = @htmlNodeDumpFileFormat[I32](pout, pdoc, pcur, pencoding.cstring(), pformat) tmpvar fun htmlSaveFileEnc(pfilename: String, pcur: NullablePointer[Xmldoc] tag, pencoding: String): I32 => var tmpvar: I32 = @htmlSaveFileEnc[I32](pfilename.cstring(), pcur, pencoding.cstring()) tmpvar fun htmlSaveFileFormat(pfilename: String, pcur: NullablePointer[Xmldoc] tag, pencoding: String, pformat: I32): I32 => var tmpvar: I32 = @htmlSaveFileFormat[I32](pfilename.cstring(), pcur, pencoding.cstring(), pformat) tmpvar fun htmlNodeDumpFormatOutput(pbuf: NullablePointer[Xmloutputbuffer], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode], pencoding: String, pformat: I32): None => var tmpvar: None = @htmlNodeDumpFormatOutput[None](pbuf, pdoc, pcur, pencoding.cstring(), pformat) tmpvar fun htmlDocContentDumpOutput(pbuf: NullablePointer[Xmloutputbuffer], pcur: NullablePointer[Xmldoc] tag, pencoding: String): None => var tmpvar: None = @htmlDocContentDumpOutput[None](pbuf, pcur, pencoding.cstring()) tmpvar fun htmlDocContentDumpFormatOutput(pbuf: NullablePointer[Xmloutputbuffer], pcur: NullablePointer[Xmldoc] tag, pencoding: String, pformat: I32): None => var tmpvar: None = @htmlDocContentDumpFormatOutput[None](pbuf, pcur, pencoding.cstring(), pformat) tmpvar fun htmlNodeDumpOutput(pbuf: NullablePointer[Xmloutputbuffer], pdoc: NullablePointer[Xmldoc] tag, pcur: NullablePointer[Xmlnode], pencoding: String): None => var tmpvar: None = @htmlNodeDumpOutput[None](pbuf, pdoc, pcur, pencoding.cstring()) tmpvar fun htmlIsBooleanAttr(pname: String): I32 => var tmpvar: I32 = @htmlIsBooleanAttr[I32](pname.cstring()) tmpvar fun xmlNanoFTPInit(): None => var tmpvar: None = @xmlNanoFTPInit[None]() tmpvar fun xmlNanoFTPCleanup(): None => var tmpvar: None = @xmlNanoFTPCleanup[None]() tmpvar fun xmlNanoFTPNewCtxt(pURL: String): String => var tmpvar: Pointer[U8] = @xmlNanoFTPNewCtxt[Pointer[U8]](pURL.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoFTPFreeCtxt(pctx: Pointer[U8]): None => var tmpvar: None = @xmlNanoFTPFreeCtxt[None](pctx) tmpvar fun xmlNanoFTPConnectTo(pserver: String, pport: I32): String => var tmpvar: Pointer[U8] = @xmlNanoFTPConnectTo[Pointer[U8]](pserver.cstring(), pport) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoFTPOpen(pURL: String): String => var tmpvar: Pointer[U8] = @xmlNanoFTPOpen[Pointer[U8]](pURL.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoFTPConnect(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoFTPConnect[I32](pctx) tmpvar fun xmlNanoFTPClose(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoFTPClose[I32](pctx) tmpvar fun xmlNanoFTPQuit(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoFTPQuit[I32](pctx) tmpvar fun xmlNanoFTPScanProxy(pURL: String): None => var tmpvar: None = @xmlNanoFTPScanProxy[None](pURL.cstring()) tmpvar fun xmlNanoFTPProxy(phost: String, pport: I32, puser: String, ppasswd: String, ptype: I32): None => var tmpvar: None = @xmlNanoFTPProxy[None](phost.cstring(), pport, puser.cstring(), ppasswd.cstring(), ptype) tmpvar fun xmlNanoFTPUpdateURL(pctx: Pointer[U8], pURL: String): I32 => var tmpvar: I32 = @xmlNanoFTPUpdateURL[I32](pctx, pURL.cstring()) tmpvar fun xmlNanoFTPGetResponse(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoFTPGetResponse[I32](pctx) tmpvar fun xmlNanoFTPCheckResponse(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoFTPCheckResponse[I32](pctx) tmpvar fun xmlNanoFTPCwd(pctx: Pointer[U8], pdirectory: String): I32 => var tmpvar: I32 = @xmlNanoFTPCwd[I32](pctx, pdirectory.cstring()) tmpvar fun xmlNanoFTPDele(pctx: Pointer[U8], pfile: String): I32 => var tmpvar: I32 = @xmlNanoFTPDele[I32](pctx, pfile.cstring()) tmpvar fun xmlNanoFTPGetConnection(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoFTPGetConnection[I32](pctx) tmpvar fun xmlNanoFTPCloseConnection(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoFTPCloseConnection[I32](pctx) tmpvar fun xmlNanoFTPList(pctx: Pointer[U8], pcallback: Pointer[FUNCTIONPOINTER], puserData: Pointer[U8], pfilename: String): I32 => var tmpvar: I32 = @xmlNanoFTPList[I32](pctx, pcallback, puserData, pfilename.cstring()) tmpvar fun xmlNanoFTPGetSocket(pctx: Pointer[U8], pfilename: String): I32 => var tmpvar: I32 = @xmlNanoFTPGetSocket[I32](pctx, pfilename.cstring()) tmpvar fun xmlNanoFTPGet(pctx: Pointer[U8], pcallback: Pointer[FUNCTIONPOINTER], puserData: Pointer[U8], pfilename: String): I32 => var tmpvar: I32 = @xmlNanoFTPGet[I32](pctx, pcallback, puserData, pfilename.cstring()) tmpvar fun xmlNanoFTPRead(pctx: Pointer[U8], pdest: Pointer[U8], plen: I32): I32 => var tmpvar: I32 = @xmlNanoFTPRead[I32](pctx, pdest, plen) tmpvar fun xmlNanoHTTPInit(): None => var tmpvar: None = @xmlNanoHTTPInit[None]() tmpvar fun xmlNanoHTTPCleanup(): None => var tmpvar: None = @xmlNanoHTTPCleanup[None]() tmpvar fun xmlNanoHTTPScanProxy(pURL: String): None => var tmpvar: None = @xmlNanoHTTPScanProxy[None](pURL.cstring()) tmpvar fun xmlNanoHTTPFetch(pURL: String, pfilename: String, pcontentType: Pointer[Pointer[U8] tag]): I32 => var tmpvar: I32 = @xmlNanoHTTPFetch[I32](pURL.cstring(), pfilename.cstring(), pcontentType) tmpvar fun xmlNanoHTTPMethod(pURL: String, pmethod: String, pinput: String, pcontentType: Pointer[Pointer[U8] tag], pheaders: String, pilen: I32): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPMethod[Pointer[U8]](pURL.cstring(), pmethod.cstring(), pinput.cstring(), pcontentType, pheaders.cstring(), pilen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPMethodRedir(pURL: String, pmethod: String, pinput: String, pcontentType: Pointer[Pointer[U8] tag], predir: Pointer[Pointer[U8] tag], pheaders: String, pilen: I32): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPMethodRedir[Pointer[U8]](pURL.cstring(), pmethod.cstring(), pinput.cstring(), pcontentType, predir, pheaders.cstring(), pilen) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPOpen(pURL: String, pcontentType: Pointer[Pointer[U8] tag]): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPOpen[Pointer[U8]](pURL.cstring(), pcontentType) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPOpenRedir(pURL: String, pcontentType: Pointer[Pointer[U8] tag], predir: Pointer[Pointer[U8] tag]): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPOpenRedir[Pointer[U8]](pURL.cstring(), pcontentType, predir) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPReturnCode(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoHTTPReturnCode[I32](pctx) tmpvar fun xmlNanoHTTPAuthHeader(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPAuthHeader[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPRedir(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPRedir[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPContentLength(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @xmlNanoHTTPContentLength[I32](pctx) tmpvar fun xmlNanoHTTPEncoding(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPEncoding[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPMimeType(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlNanoHTTPMimeType[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNanoHTTPRead(pctx: Pointer[U8], pdest: Pointer[U8], plen: I32): I32 => var tmpvar: I32 = @xmlNanoHTTPRead[I32](pctx, pdest, plen) tmpvar fun xmlNanoHTTPSave(pctxt: Pointer[U8], pfilename: String): I32 => var tmpvar: I32 = @xmlNanoHTTPSave[I32](pctxt, pfilename.cstring()) tmpvar fun xmlNanoHTTPClose(pctx: Pointer[U8]): None => var tmpvar: None = @xmlNanoHTTPClose[None](pctx) tmpvar fun xmlIsLetter(pc: I32): I32 => var tmpvar: I32 = @xmlIsLetter[I32](pc) tmpvar fun xmlCreateFileParserCtxt(pfilename: String): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlCreateFileParserCtxt[NullablePointer[Xmlparserctxt]](pfilename.cstring()) tmpvar fun xmlCreateURLParserCtxt(pfilename: String, poptions: I32): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlCreateURLParserCtxt[NullablePointer[Xmlparserctxt]](pfilename.cstring(), poptions) tmpvar fun xmlCreateMemoryParserCtxt(pbuffer: String, psize: I32): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlCreateMemoryParserCtxt[NullablePointer[Xmlparserctxt]](pbuffer.cstring(), psize) tmpvar fun xmlCreateEntityParserCtxt(pURL: String, pID: String, pbase: String): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlCreateEntityParserCtxt[NullablePointer[Xmlparserctxt]](pURL.cstring(), pID.cstring(), pbase.cstring()) tmpvar fun xmlSwitchEncoding(pctxt: NullablePointer[Xmlparserctxt], penc: I32): I32 => var tmpvar: I32 = @xmlSwitchEncoding[I32](pctxt, penc) tmpvar fun xmlSwitchToEncoding(pctxt: NullablePointer[Xmlparserctxt], phandler: NullablePointer[Xmlcharencodinghandler]): I32 => var tmpvar: I32 = @xmlSwitchToEncoding[I32](pctxt, phandler) tmpvar fun xmlSwitchInputEncoding(pctxt: NullablePointer[Xmlparserctxt], pinput: NullablePointer[Xmlparserinput], phandler: NullablePointer[Xmlcharencodinghandler]): I32 => var tmpvar: I32 = @xmlSwitchInputEncoding[I32](pctxt, pinput, phandler) tmpvar fun xmlNewStringInputStream(pctxt: NullablePointer[Xmlparserctxt], pbuffer: String): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlNewStringInputStream[NullablePointer[Xmlparserinput]](pctxt, pbuffer.cstring()) tmpvar fun xmlNewEntityInputStream(pctxt: NullablePointer[Xmlparserctxt], pentity: NullablePointer[Xmlentity]): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlNewEntityInputStream[NullablePointer[Xmlparserinput]](pctxt, pentity) tmpvar fun xmlPushInput(pctxt: NullablePointer[Xmlparserctxt], pinput: NullablePointer[Xmlparserinput]): I32 => var tmpvar: I32 = @xmlPushInput[I32](pctxt, pinput) tmpvar fun xmlPopInput(pctxt: NullablePointer[Xmlparserctxt]): U8 => var tmpvar: U8 = @xmlPopInput[U8](pctxt) tmpvar fun xmlFreeInputStream(pinput: NullablePointer[Xmlparserinput]): None => var tmpvar: None = @xmlFreeInputStream[None](pinput) tmpvar fun xmlNewInputFromFile(pctxt: NullablePointer[Xmlparserctxt], pfilename: String): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlNewInputFromFile[NullablePointer[Xmlparserinput]](pctxt, pfilename.cstring()) tmpvar fun xmlNewInputStream(pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @xmlNewInputStream[NullablePointer[Xmlparserinput]](pctxt) tmpvar fun xmlSplitQName(pctxt: NullablePointer[Xmlparserctxt], pname: String, pprefix: Pointer[Pointer[U8] tag]): String => var tmpvar: Pointer[U8] = @xmlSplitQName[Pointer[U8]](pctxt, pname.cstring(), pprefix) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseName(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseName[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseNmtoken(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseNmtoken[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseEntityValue(pctxt: NullablePointer[Xmlparserctxt], porig: Pointer[Pointer[U8] tag]): String => var tmpvar: Pointer[U8] = @xmlParseEntityValue[Pointer[U8]](pctxt, porig) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseAttValue(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseAttValue[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseSystemLiteral(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseSystemLiteral[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParsePubidLiteral(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParsePubidLiteral[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseCharData(pctxt: NullablePointer[Xmlparserctxt], pcdata: I32): None => var tmpvar: None = @xmlParseCharData[None](pctxt, pcdata) tmpvar fun xmlParseExternalID(pctxt: NullablePointer[Xmlparserctxt], ppublicID: Pointer[Pointer[U8] tag], pstrict: I32): String => var tmpvar: Pointer[U8] = @xmlParseExternalID[Pointer[U8]](pctxt, ppublicID, pstrict) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseComment(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseComment[None](pctxt) tmpvar fun xmlParsePITarget(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParsePITarget[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParsePI(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParsePI[None](pctxt) tmpvar fun xmlParseNotationDecl(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseNotationDecl[None](pctxt) tmpvar fun xmlParseEntityDecl(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseEntityDecl[None](pctxt) tmpvar fun xmlParseDefaultDecl(pctxt: NullablePointer[Xmlparserctxt], pvalue: Pointer[Pointer[U8] tag]): I32 => var tmpvar: I32 = @xmlParseDefaultDecl[I32](pctxt, pvalue) tmpvar fun xmlParseNotationType(pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlenumeration] => var tmpvar: NullablePointer[Xmlenumeration] = @xmlParseNotationType[NullablePointer[Xmlenumeration]](pctxt) tmpvar fun xmlParseEnumerationType(pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlenumeration] => var tmpvar: NullablePointer[Xmlenumeration] = @xmlParseEnumerationType[NullablePointer[Xmlenumeration]](pctxt) tmpvar fun xmlParseEnumeratedType(pctxt: NullablePointer[Xmlparserctxt], ptree: Pointer[NullablePointer[Xmlenumeration]]): I32 => var tmpvar: I32 = @xmlParseEnumeratedType[I32](pctxt, ptree) tmpvar fun xmlParseAttributeType(pctxt: NullablePointer[Xmlparserctxt], ptree: Pointer[NullablePointer[Xmlenumeration]]): I32 => var tmpvar: I32 = @xmlParseAttributeType[I32](pctxt, ptree) tmpvar fun xmlParseAttributeListDecl(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseAttributeListDecl[None](pctxt) tmpvar fun xmlParseElementMixedContentDecl(pctxt: NullablePointer[Xmlparserctxt], pinputchk: I32): NullablePointer[Xmlelementcontent] => var tmpvar: NullablePointer[Xmlelementcontent] = @xmlParseElementMixedContentDecl[NullablePointer[Xmlelementcontent]](pctxt, pinputchk) tmpvar fun xmlParseElementChildrenContentDecl(pctxt: NullablePointer[Xmlparserctxt], pinputchk: I32): NullablePointer[Xmlelementcontent] => var tmpvar: NullablePointer[Xmlelementcontent] = @xmlParseElementChildrenContentDecl[NullablePointer[Xmlelementcontent]](pctxt, pinputchk) tmpvar fun xmlParseElementContentDecl(pctxt: NullablePointer[Xmlparserctxt], pname: String, presult: Pointer[NullablePointer[Xmlelementcontent]]): I32 => var tmpvar: I32 = @xmlParseElementContentDecl[I32](pctxt, pname.cstring(), presult) tmpvar fun xmlParseElementDecl(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @xmlParseElementDecl[I32](pctxt) tmpvar fun xmlParseMarkupDecl(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseMarkupDecl[None](pctxt) tmpvar fun xmlParseCharRef(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @xmlParseCharRef[I32](pctxt) tmpvar fun xmlParseEntityRef(pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @xmlParseEntityRef[NullablePointer[Xmlentity]](pctxt) tmpvar fun xmlParseReference(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseReference[None](pctxt) tmpvar fun xmlParsePEReference(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParsePEReference[None](pctxt) tmpvar fun xmlParseDocTypeDecl(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseDocTypeDecl[None](pctxt) tmpvar fun xmlParseAttribute(pctxt: NullablePointer[Xmlparserctxt], pvalue: Pointer[Pointer[U8] tag]): String => var tmpvar: Pointer[U8] = @xmlParseAttribute[Pointer[U8]](pctxt, pvalue) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseStartTag(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseStartTag[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseEndTag(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseEndTag[None](pctxt) tmpvar fun xmlParseCDSect(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseCDSect[None](pctxt) tmpvar fun xmlParseContent(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseContent[None](pctxt) tmpvar fun xmlParseElement(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseElement[None](pctxt) tmpvar fun xmlParseVersionNum(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseVersionNum[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseVersionInfo(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseVersionInfo[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseEncName(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseEncName[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseEncodingDecl(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseEncodingDecl[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseSDDecl(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @xmlParseSDDecl[I32](pctxt) tmpvar fun xmlParseXMLDecl(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseXMLDecl[None](pctxt) tmpvar fun xmlParseTextDecl(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseTextDecl[None](pctxt) tmpvar fun xmlParseMisc(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseMisc[None](pctxt) tmpvar fun xmlParseExternalSubset(pctxt: NullablePointer[Xmlparserctxt], pExternalID: String, pSystemID: String): None => var tmpvar: None = @xmlParseExternalSubset[None](pctxt, pExternalID.cstring(), pSystemID.cstring()) tmpvar fun xmlStringDecodeEntities(pctxt: NullablePointer[Xmlparserctxt], pstr: String, pwhat: I32, pend: U8, pend2: U8, pend3: U8): String => var tmpvar: Pointer[U8] = @xmlStringDecodeEntities[Pointer[U8]](pctxt, pstr.cstring(), pwhat, pend, pend2, pend3) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlStringLenDecodeEntities(pctxt: NullablePointer[Xmlparserctxt], pstr: String, plen: I32, pwhat: I32, pend: U8, pend2: U8, pend3: U8): String => var tmpvar: Pointer[U8] = @xmlStringLenDecodeEntities[Pointer[U8]](pctxt, pstr.cstring(), plen, pwhat, pend, pend2, pend3) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun nodePush(pctxt: NullablePointer[Xmlparserctxt], pvalue: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @nodePush[I32](pctxt, pvalue) tmpvar fun nodePop(pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @nodePop[NullablePointer[Xmlnode]](pctxt) tmpvar fun inputPush(pctxt: NullablePointer[Xmlparserctxt], pvalue: NullablePointer[Xmlparserinput]): I32 => var tmpvar: I32 = @inputPush[I32](pctxt, pvalue) tmpvar fun inputPop(pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @inputPop[NullablePointer[Xmlparserinput]](pctxt) tmpvar fun namePop(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @namePop[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun namePush(pctxt: NullablePointer[Xmlparserctxt], pvalue: String): I32 => var tmpvar: I32 = @namePush[I32](pctxt, pvalue.cstring()) tmpvar fun xmlSkipBlankChars(pctxt: NullablePointer[Xmlparserctxt]): I32 => var tmpvar: I32 = @xmlSkipBlankChars[I32](pctxt) tmpvar fun xmlStringCurrentChar(pctxt: NullablePointer[Xmlparserctxt], pcur: String, plen: Pointer[I32]): I32 => var tmpvar: I32 = @xmlStringCurrentChar[I32](pctxt, pcur.cstring(), plen) tmpvar fun xmlParserHandlePEReference(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParserHandlePEReference[None](pctxt) tmpvar fun xmlCheckLanguageID(plang: String): I32 => var tmpvar: I32 = @xmlCheckLanguageID[I32](plang.cstring()) tmpvar fun xmlCurrentChar(pctxt: NullablePointer[Xmlparserctxt], plen: Pointer[I32]): I32 => var tmpvar: I32 = @xmlCurrentChar[I32](pctxt, plen) tmpvar fun xmlCopyCharMultiByte(pout: String, pval: I32): I32 => var tmpvar: I32 = @xmlCopyCharMultiByte[I32](pout.cstring(), pval) tmpvar fun xmlCopyChar(plen: I32, pout: String, pval: I32): I32 => var tmpvar: I32 = @xmlCopyChar[I32](plen, pout.cstring(), pval) tmpvar fun xmlNextChar(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlNextChar[None](pctxt) tmpvar fun xmlParserInputShrink(pin: NullablePointer[Xmlparserinput]): None => var tmpvar: None = @xmlParserInputShrink[None](pin) tmpvar fun htmlInitAutoClose(): None => var tmpvar: None = @htmlInitAutoClose[None]() tmpvar fun htmlCreateFileParserCtxt(pfilename: String, pencoding: String): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @htmlCreateFileParserCtxt[NullablePointer[Xmlparserctxt]](pfilename.cstring(), pencoding.cstring()) tmpvar fun xmlSetEntityReferenceFunc(pfunc: Pointer[FUNCTIONPOINTER]): None => var tmpvar: None = @xmlSetEntityReferenceFunc[None](pfunc) tmpvar fun xmlParseQuotedString(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlParseQuotedString[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseNamespace(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParseNamespace[None](pctxt) tmpvar fun xmlNamespaceParseNSDef(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlNamespaceParseNSDef[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlScanName(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlScanName[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNamespaceParseNCName(pctxt: NullablePointer[Xmlparserctxt]): String => var tmpvar: Pointer[U8] = @xmlNamespaceParseNCName[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParserHandleReference(pctxt: NullablePointer[Xmlparserctxt]): None => var tmpvar: None = @xmlParserHandleReference[None](pctxt) tmpvar fun xmlNamespaceParseQName(pctxt: NullablePointer[Xmlparserctxt], pprefix: Pointer[Pointer[U8] tag]): String => var tmpvar: Pointer[U8] = @xmlNamespaceParseQName[Pointer[U8]](pctxt, pprefix) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlDecodeEntities(pctxt: NullablePointer[Xmlparserctxt], plen: I32, pwhat: I32, pend: U8, pend2: U8, pend3: U8): String => var tmpvar: Pointer[U8] = @xmlDecodeEntities[Pointer[U8]](pctxt, plen, pwhat, pend, pend2, pend3) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlHandleEntity(pctxt: NullablePointer[Xmlparserctxt], pentity: NullablePointer[Xmlentity]): None => var tmpvar: None = @xmlHandleEntity[None](pctxt, pentity) tmpvar fun xmlFreePattern(pcomp: NullablePointer[Xmlpattern]): None => var tmpvar: None = @xmlFreePattern[None](pcomp) tmpvar fun xmlFreePatternList(pcomp: NullablePointer[Xmlpattern]): None => var tmpvar: None = @xmlFreePatternList[None](pcomp) tmpvar fun xmlPatterncompile(ppattern: String, pdict: NullablePointer[Xmldict], pflags: I32, pnamespaces: Pointer[Pointer[U8] tag]): NullablePointer[Xmlpattern] => var tmpvar: NullablePointer[Xmlpattern] = @xmlPatterncompile[NullablePointer[Xmlpattern]](ppattern.cstring(), pdict, pflags, pnamespaces) tmpvar fun xmlPatternMatch(pcomp: NullablePointer[Xmlpattern], pnode: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlPatternMatch[I32](pcomp, pnode) tmpvar fun xmlPatternStreamable(pcomp: NullablePointer[Xmlpattern]): I32 => var tmpvar: I32 = @xmlPatternStreamable[I32](pcomp) tmpvar fun xmlPatternMaxDepth(pcomp: NullablePointer[Xmlpattern]): I32 => var tmpvar: I32 = @xmlPatternMaxDepth[I32](pcomp) tmpvar fun xmlPatternMinDepth(pcomp: NullablePointer[Xmlpattern]): I32 => var tmpvar: I32 = @xmlPatternMinDepth[I32](pcomp) tmpvar fun xmlPatternFromRoot(pcomp: NullablePointer[Xmlpattern]): I32 => var tmpvar: I32 = @xmlPatternFromRoot[I32](pcomp) tmpvar fun xmlPatternGetStreamCtxt(pcomp: NullablePointer[Xmlpattern]): NullablePointer[Xmlstreamctxt] => var tmpvar: NullablePointer[Xmlstreamctxt] = @xmlPatternGetStreamCtxt[NullablePointer[Xmlstreamctxt]](pcomp) tmpvar fun xmlFreeStreamCtxt(pstream: NullablePointer[Xmlstreamctxt]): None => var tmpvar: None = @xmlFreeStreamCtxt[None](pstream) tmpvar fun xmlStreamPushNode(pstream: NullablePointer[Xmlstreamctxt], pname: String, pns: String, pnodeType: I32): I32 => var tmpvar: I32 = @xmlStreamPushNode[I32](pstream, pname.cstring(), pns.cstring(), pnodeType) tmpvar fun xmlStreamPush(pstream: NullablePointer[Xmlstreamctxt], pname: String, pns: String): I32 => var tmpvar: I32 = @xmlStreamPush[I32](pstream, pname.cstring(), pns.cstring()) tmpvar fun xmlStreamPushAttr(pstream: NullablePointer[Xmlstreamctxt], pname: String, pns: String): I32 => var tmpvar: I32 = @xmlStreamPushAttr[I32](pstream, pname.cstring(), pns.cstring()) tmpvar fun xmlStreamPop(pstream: NullablePointer[Xmlstreamctxt]): I32 => var tmpvar: I32 = @xmlStreamPop[I32](pstream) tmpvar fun xmlStreamWantsAnyNode(pstream: NullablePointer[Xmlstreamctxt]): I32 => var tmpvar: I32 = @xmlStreamWantsAnyNode[I32](pstream) tmpvar fun xmlRelaxNGInitTypes(): I32 => var tmpvar: I32 = @xmlRelaxNGInitTypes[I32]() tmpvar fun xmlRelaxNGCleanupTypes(): None => var tmpvar: None = @xmlRelaxNGCleanupTypes[None]() tmpvar fun xmlRelaxNGNewParserCtxt(pURL: String): NullablePointer[Xmlrelaxngparserctxt] => var tmpvar: NullablePointer[Xmlrelaxngparserctxt] = @xmlRelaxNGNewParserCtxt[NullablePointer[Xmlrelaxngparserctxt]](pURL.cstring()) tmpvar fun xmlRelaxNGNewMemParserCtxt(pbuffer: String, psize: I32): NullablePointer[Xmlrelaxngparserctxt] => var tmpvar: NullablePointer[Xmlrelaxngparserctxt] = @xmlRelaxNGNewMemParserCtxt[NullablePointer[Xmlrelaxngparserctxt]](pbuffer.cstring(), psize) tmpvar fun xmlRelaxNGNewDocParserCtxt(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmlrelaxngparserctxt] => var tmpvar: NullablePointer[Xmlrelaxngparserctxt] = @xmlRelaxNGNewDocParserCtxt[NullablePointer[Xmlrelaxngparserctxt]](pdoc) tmpvar fun xmlRelaxParserSetFlag(pctxt: NullablePointer[Xmlrelaxngparserctxt], pflag: I32): I32 => var tmpvar: I32 = @xmlRelaxParserSetFlag[I32](pctxt, pflag) tmpvar fun xmlRelaxNGFreeParserCtxt(pctxt: NullablePointer[Xmlrelaxngparserctxt]): None => var tmpvar: None = @xmlRelaxNGFreeParserCtxt[None](pctxt) tmpvar fun xmlRelaxNGSetParserErrors(pctxt: NullablePointer[Xmlrelaxngparserctxt], perr: Pointer[FUNCTIONPOINTER], pwarn: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlRelaxNGSetParserErrors[None](pctxt, perr, pwarn, pctx) tmpvar fun xmlRelaxNGGetParserErrors(pctxt: NullablePointer[Xmlrelaxngparserctxt], perr: Pointer[Pointer[FUNCTIONPOINTER]], pwarn: Pointer[Pointer[FUNCTIONPOINTER]], pctx: Pointer[Pointer[U8]]): I32 => var tmpvar: I32 = @xmlRelaxNGGetParserErrors[I32](pctxt, perr, pwarn, pctx) tmpvar fun xmlRelaxNGSetParserStructuredErrors(pctxt: NullablePointer[Xmlrelaxngparserctxt], pserror: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlRelaxNGSetParserStructuredErrors[None](pctxt, pserror, pctx) tmpvar fun xmlRelaxNGParse(pctxt: NullablePointer[Xmlrelaxngparserctxt]): NullablePointer[Xmlrelaxng] => var tmpvar: NullablePointer[Xmlrelaxng] = @xmlRelaxNGParse[NullablePointer[Xmlrelaxng]](pctxt) tmpvar fun xmlRelaxNGFree(pschema: NullablePointer[Xmlrelaxng]): None => var tmpvar: None = @xmlRelaxNGFree[None](pschema) tmpvar fun xmlRelaxNGDump(poutput: NullablePointer[IoFile], pschema: NullablePointer[Xmlrelaxng]): None => var tmpvar: None = @xmlRelaxNGDump[None](poutput, pschema) tmpvar fun xmlRelaxNGDumpTree(poutput: NullablePointer[IoFile], pschema: NullablePointer[Xmlrelaxng]): None => var tmpvar: None = @xmlRelaxNGDumpTree[None](poutput, pschema) tmpvar fun xmlRelaxNGSetValidErrors(pctxt: NullablePointer[Xmlrelaxngvalidctxt], perr: Pointer[FUNCTIONPOINTER], pwarn: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlRelaxNGSetValidErrors[None](pctxt, perr, pwarn, pctx) tmpvar fun xmlRelaxNGGetValidErrors(pctxt: NullablePointer[Xmlrelaxngvalidctxt], perr: Pointer[Pointer[FUNCTIONPOINTER]], pwarn: Pointer[Pointer[FUNCTIONPOINTER]], pctx: Pointer[Pointer[U8]]): I32 => var tmpvar: I32 = @xmlRelaxNGGetValidErrors[I32](pctxt, perr, pwarn, pctx) tmpvar fun xmlRelaxNGSetValidStructuredErrors(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pserror: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlRelaxNGSetValidStructuredErrors[None](pctxt, pserror, pctx) tmpvar fun xmlRelaxNGNewValidCtxt(pschema: NullablePointer[Xmlrelaxng]): NullablePointer[Xmlrelaxngvalidctxt] => var tmpvar: NullablePointer[Xmlrelaxngvalidctxt] = @xmlRelaxNGNewValidCtxt[NullablePointer[Xmlrelaxngvalidctxt]](pschema) tmpvar fun xmlRelaxNGFreeValidCtxt(pctxt: NullablePointer[Xmlrelaxngvalidctxt]): None => var tmpvar: None = @xmlRelaxNGFreeValidCtxt[None](pctxt) tmpvar fun xmlRelaxNGValidateDoc(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlRelaxNGValidateDoc[I32](pctxt, pdoc) tmpvar fun xmlRelaxNGValidatePushElement(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlRelaxNGValidatePushElement[I32](pctxt, pdoc, pelem) tmpvar fun xmlRelaxNGValidatePushCData(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdata: String, plen: I32): I32 => var tmpvar: I32 = @xmlRelaxNGValidatePushCData[I32](pctxt, pdata.cstring(), plen) tmpvar fun xmlRelaxNGValidatePopElement(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlRelaxNGValidatePopElement[I32](pctxt, pdoc, pelem) tmpvar fun xmlRelaxNGValidateFullElement(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdoc: NullablePointer[Xmldoc] tag, pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlRelaxNGValidateFullElement[I32](pctxt, pdoc, pelem) tmpvar fun getPublicId(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @getPublicId[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun getSystemId(pctx: Pointer[U8]): String => var tmpvar: Pointer[U8] = @getSystemId[Pointer[U8]](pctx) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun setDocumentLocator(pctx: Pointer[U8], ploc: NullablePointer[Xmlsaxlocator]): None => var tmpvar: None = @setDocumentLocator[None](pctx, ploc) tmpvar fun getLineNumber(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @getLineNumber[I32](pctx) tmpvar fun getColumnNumber(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @getColumnNumber[I32](pctx) tmpvar fun isStandalone(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @isStandalone[I32](pctx) tmpvar fun hasInternalSubset(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @hasInternalSubset[I32](pctx) tmpvar fun hasExternalSubset(pctx: Pointer[U8]): I32 => var tmpvar: I32 = @hasExternalSubset[I32](pctx) tmpvar fun internalSubset(pctx: Pointer[U8], pname: String, pExternalID: String, pSystemID: String): None => var tmpvar: None = @internalSubset[None](pctx, pname.cstring(), pExternalID.cstring(), pSystemID.cstring()) tmpvar fun externalSubset(pctx: Pointer[U8], pname: String, pExternalID: String, pSystemID: String): None => var tmpvar: None = @externalSubset[None](pctx, pname.cstring(), pExternalID.cstring(), pSystemID.cstring()) tmpvar fun getEntity(pctx: Pointer[U8], pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @getEntity[NullablePointer[Xmlentity]](pctx, pname.cstring()) tmpvar fun getParameterEntity(pctx: Pointer[U8], pname: String): NullablePointer[Xmlentity] => var tmpvar: NullablePointer[Xmlentity] = @getParameterEntity[NullablePointer[Xmlentity]](pctx, pname.cstring()) tmpvar fun resolveEntity(pctx: Pointer[U8], ppublicId: String, psystemId: String): NullablePointer[Xmlparserinput] => var tmpvar: NullablePointer[Xmlparserinput] = @resolveEntity[NullablePointer[Xmlparserinput]](pctx, ppublicId.cstring(), psystemId.cstring()) tmpvar fun entityDecl(pctx: Pointer[U8], pname: String, ptype: I32, ppublicId: String, psystemId: String, pcontent: String): None => var tmpvar: None = @entityDecl[None](pctx, pname.cstring(), ptype, ppublicId.cstring(), psystemId.cstring(), pcontent.cstring()) tmpvar fun attributeDecl(pctx: Pointer[U8], pelem: String, pfullname: String, ptype: I32, pdef: I32, pdefaultValue: String, ptree: NullablePointer[Xmlenumeration]): None => var tmpvar: None = @attributeDecl[None](pctx, pelem.cstring(), pfullname.cstring(), ptype, pdef, pdefaultValue.cstring(), ptree) tmpvar fun elementDecl(pctx: Pointer[U8], pname: String, ptype: I32, pcontent: NullablePointer[Xmlelementcontent]): None => var tmpvar: None = @elementDecl[None](pctx, pname.cstring(), ptype, pcontent) tmpvar fun notationDecl(pctx: Pointer[U8], pname: String, ppublicId: String, psystemId: String): None => var tmpvar: None = @notationDecl[None](pctx, pname.cstring(), ppublicId.cstring(), psystemId.cstring()) tmpvar fun unparsedEntityDecl(pctx: Pointer[U8], pname: String, ppublicId: String, psystemId: String, pnotationName: String): None => var tmpvar: None = @unparsedEntityDecl[None](pctx, pname.cstring(), ppublicId.cstring(), psystemId.cstring(), pnotationName.cstring()) tmpvar fun startDocument(pctx: Pointer[U8]): None => var tmpvar: None = @startDocument[None](pctx) tmpvar fun endDocument(pctx: Pointer[U8]): None => var tmpvar: None = @endDocument[None](pctx) tmpvar fun attribute(pctx: Pointer[U8], pfullname: String, pvalue: String): None => var tmpvar: None = @attribute[None](pctx, pfullname.cstring(), pvalue.cstring()) tmpvar fun startElement(pctx: Pointer[U8], pfullname: String, patts: Pointer[Pointer[U8] tag]): None => var tmpvar: None = @startElement[None](pctx, pfullname.cstring(), patts) tmpvar fun endElement(pctx: Pointer[U8], pname: String): None => var tmpvar: None = @endElement[None](pctx, pname.cstring()) tmpvar fun reference(pctx: Pointer[U8], pname: String): None => var tmpvar: None = @reference[None](pctx, pname.cstring()) tmpvar fun characters(pctx: Pointer[U8], pch: String, plen: I32): None => var tmpvar: None = @characters[None](pctx, pch.cstring(), plen) tmpvar fun ignorableWhitespace(pctx: Pointer[U8], pch: String, plen: I32): None => var tmpvar: None = @ignorableWhitespace[None](pctx, pch.cstring(), plen) tmpvar fun processingInstruction(pctx: Pointer[U8], ptarget: String, pdata: String): None => var tmpvar: None = @processingInstruction[None](pctx, ptarget.cstring(), pdata.cstring()) tmpvar fun globalNamespace(pctx: Pointer[U8], phref: String, pprefix: String): None => var tmpvar: None = @globalNamespace[None](pctx, phref.cstring(), pprefix.cstring()) tmpvar fun setNamespace(pctx: Pointer[U8], pname: String): None => var tmpvar: None = @setNamespace[None](pctx, pname.cstring()) tmpvar fun getNamespace(pctx: Pointer[U8]): NullablePointer[Xmlns] => var tmpvar: NullablePointer[Xmlns] = @getNamespace[NullablePointer[Xmlns]](pctx) tmpvar fun checkNamespace(pctx: Pointer[U8], pnameSpace: String): I32 => var tmpvar: I32 = @checkNamespace[I32](pctx, pnameSpace.cstring()) tmpvar fun namespaceDecl(pctx: Pointer[U8], phref: String, pprefix: String): None => var tmpvar: None = @namespaceDecl[None](pctx, phref.cstring(), pprefix.cstring()) tmpvar fun comment(pctx: Pointer[U8], pvalue: String): None => var tmpvar: None = @comment[None](pctx, pvalue.cstring()) tmpvar fun cdataBlock(pctx: Pointer[U8], pvalue: String, plen: I32): None => var tmpvar: None = @cdataBlock[None](pctx, pvalue.cstring(), plen) tmpvar fun initxmlDefaultSAXHandler(phdlr: NullablePointer[Xmlsaxhandlerv1], pwarning: I32): None => var tmpvar: None = @initxmlDefaultSAXHandler[None](phdlr, pwarning) tmpvar fun inithtmlDefaultSAXHandler(phdlr: NullablePointer[Xmlsaxhandlerv1]): None => var tmpvar: None = @inithtmlDefaultSAXHandler[None](phdlr) tmpvar fun initdocbDefaultSAXHandler(phdlr: NullablePointer[Xmlsaxhandlerv1]): None => var tmpvar: None = @initdocbDefaultSAXHandler[None](phdlr) tmpvar fun xmlSchemaFreeType(ptype: NullablePointer[Xmlschematype]): None => var tmpvar: None = @xmlSchemaFreeType[None](ptype) tmpvar fun xmlSchemaFreeWildcard(pwildcard: NullablePointer[Xmlschemawildcard]): None => var tmpvar: None = @xmlSchemaFreeWildcard[None](pwildcard) tmpvar fun xmlSchematronNewParserCtxt(pURL: String): NullablePointer[Xmlschematronparserctxt] => var tmpvar: NullablePointer[Xmlschematronparserctxt] = @xmlSchematronNewParserCtxt[NullablePointer[Xmlschematronparserctxt]](pURL.cstring()) tmpvar fun xmlSchematronNewMemParserCtxt(pbuffer: String, psize: I32): NullablePointer[Xmlschematronparserctxt] => var tmpvar: NullablePointer[Xmlschematronparserctxt] = @xmlSchematronNewMemParserCtxt[NullablePointer[Xmlschematronparserctxt]](pbuffer.cstring(), psize) tmpvar fun xmlSchematronNewDocParserCtxt(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmlschematronparserctxt] => var tmpvar: NullablePointer[Xmlschematronparserctxt] = @xmlSchematronNewDocParserCtxt[NullablePointer[Xmlschematronparserctxt]](pdoc) tmpvar fun xmlSchematronFreeParserCtxt(pctxt: NullablePointer[Xmlschematronparserctxt]): None => var tmpvar: None = @xmlSchematronFreeParserCtxt[None](pctxt) tmpvar fun xmlSchematronParse(pctxt: NullablePointer[Xmlschematronparserctxt]): NullablePointer[Xmlschematron] => var tmpvar: NullablePointer[Xmlschematron] = @xmlSchematronParse[NullablePointer[Xmlschematron]](pctxt) tmpvar fun xmlSchematronFree(pschema: NullablePointer[Xmlschematron]): None => var tmpvar: None = @xmlSchematronFree[None](pschema) tmpvar fun xmlSchematronSetValidStructuredErrors(pctxt: NullablePointer[Xmlschematronvalidctxt], pserror: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlSchematronSetValidStructuredErrors[None](pctxt, pserror, pctx) tmpvar fun xmlSchematronNewValidCtxt(pschema: NullablePointer[Xmlschematron], poptions: I32): NullablePointer[Xmlschematronvalidctxt] => var tmpvar: NullablePointer[Xmlschematronvalidctxt] = @xmlSchematronNewValidCtxt[NullablePointer[Xmlschematronvalidctxt]](pschema, poptions) tmpvar fun xmlSchematronFreeValidCtxt(pctxt: NullablePointer[Xmlschematronvalidctxt]): None => var tmpvar: None = @xmlSchematronFreeValidCtxt[None](pctxt) tmpvar fun xmlSchematronValidateDoc(pctxt: NullablePointer[Xmlschematronvalidctxt], pinstance: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlSchematronValidateDoc[I32](pctxt, pinstance) tmpvar fun xmlCreateURI(): NullablePointer[Xmluri] => var tmpvar: NullablePointer[Xmluri] = @xmlCreateURI[NullablePointer[Xmluri]]() tmpvar fun xmlBuildURI(pURI: String, pbase: String): String => var tmpvar: Pointer[U8] = @xmlBuildURI[Pointer[U8]](pURI.cstring(), pbase.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlBuildRelativeURI(pURI: String, pbase: String): String => var tmpvar: Pointer[U8] = @xmlBuildRelativeURI[Pointer[U8]](pURI.cstring(), pbase.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlParseURI(pstr: String): NullablePointer[Xmluri] => var tmpvar: NullablePointer[Xmluri] = @xmlParseURI[NullablePointer[Xmluri]](pstr.cstring()) tmpvar fun xmlParseURIRaw(pstr: String, praw: I32): NullablePointer[Xmluri] => var tmpvar: NullablePointer[Xmluri] = @xmlParseURIRaw[NullablePointer[Xmluri]](pstr.cstring(), praw) tmpvar fun xmlParseURIReference(puri: NullablePointer[Xmluri], pstr: String): I32 => var tmpvar: I32 = @xmlParseURIReference[I32](puri, pstr.cstring()) tmpvar fun xmlSaveUri(puri: NullablePointer[Xmluri]): String => var tmpvar: Pointer[U8] = @xmlSaveUri[Pointer[U8]](puri) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlPrintURI(pstream: NullablePointer[IoFile], puri: NullablePointer[Xmluri]): None => var tmpvar: None = @xmlPrintURI[None](pstream, puri) tmpvar fun xmlURIEscapeStr(pstr: String, plist: String): String => var tmpvar: Pointer[U8] = @xmlURIEscapeStr[Pointer[U8]](pstr.cstring(), plist.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlURIUnescapeString(pstr: String, plen: I32, ptarget: String): String => var tmpvar: Pointer[U8] = @xmlURIUnescapeString[Pointer[U8]](pstr.cstring(), plen, ptarget.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlNormalizeURIPath(ppath: String): I32 => var tmpvar: I32 = @xmlNormalizeURIPath[I32](ppath.cstring()) tmpvar fun xmlURIEscape(pstr: String): String => var tmpvar: Pointer[U8] = @xmlURIEscape[Pointer[U8]](pstr.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlFreeURI(puri: NullablePointer[Xmluri]): None => var tmpvar: None = @xmlFreeURI[None](puri) tmpvar fun xmlCanonicPath(ppath: String): String => var tmpvar: Pointer[U8] = @xmlCanonicPath[Pointer[U8]](ppath.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlPathToURI(ppath: String): String => var tmpvar: Pointer[U8] = @xmlPathToURI[Pointer[U8]](ppath.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXIncludeProcess(pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlXIncludeProcess[I32](pdoc) tmpvar fun xmlXIncludeProcessFlags(pdoc: NullablePointer[Xmldoc] tag, pflags: I32): I32 => var tmpvar: I32 = @xmlXIncludeProcessFlags[I32](pdoc, pflags) tmpvar fun xmlXIncludeProcessFlagsData(pdoc: NullablePointer[Xmldoc] tag, pflags: I32, pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlXIncludeProcessFlagsData[I32](pdoc, pflags, pdata) tmpvar fun xmlXIncludeProcessTreeFlagsData(ptree: NullablePointer[Xmlnode], pflags: I32, pdata: Pointer[U8]): I32 => var tmpvar: I32 = @xmlXIncludeProcessTreeFlagsData[I32](ptree, pflags, pdata) tmpvar fun xmlXIncludeProcessTree(ptree: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlXIncludeProcessTree[I32](ptree) tmpvar fun xmlXIncludeProcessTreeFlags(ptree: NullablePointer[Xmlnode], pflags: I32): I32 => var tmpvar: I32 = @xmlXIncludeProcessTreeFlags[I32](ptree, pflags) tmpvar fun xmlXIncludeNewContext(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmlxincludectxt] => var tmpvar: NullablePointer[Xmlxincludectxt] = @xmlXIncludeNewContext[NullablePointer[Xmlxincludectxt]](pdoc) tmpvar fun xmlXIncludeSetFlags(pctxt: NullablePointer[Xmlxincludectxt], pflags: I32): I32 => var tmpvar: I32 = @xmlXIncludeSetFlags[I32](pctxt, pflags) tmpvar fun xmlXIncludeFreeContext(pctxt: NullablePointer[Xmlxincludectxt]): None => var tmpvar: None = @xmlXIncludeFreeContext[None](pctxt) tmpvar fun xmlXIncludeProcessNode(pctxt: NullablePointer[Xmlxincludectxt], ptree: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlXIncludeProcessNode[I32](pctxt, ptree) tmpvar fun xmlModuleOpen(pfilename: String, poptions: I32): NullablePointer[Xmlmodule] => var tmpvar: NullablePointer[Xmlmodule] = @xmlModuleOpen[NullablePointer[Xmlmodule]](pfilename.cstring(), poptions) tmpvar fun xmlModuleSymbol(pmodule: NullablePointer[Xmlmodule], pname: String, presult: Pointer[Pointer[U8]]): I32 => var tmpvar: I32 = @xmlModuleSymbol[I32](pmodule, pname.cstring(), presult) tmpvar fun xmlModuleClose(pmodule: NullablePointer[Xmlmodule]): I32 => var tmpvar: I32 = @xmlModuleClose[I32](pmodule) tmpvar fun xmlModuleFree(pmodule: NullablePointer[Xmlmodule]): I32 => var tmpvar: I32 = @xmlModuleFree[I32](pmodule) tmpvar fun xmlSchemaNewParserCtxt(pURL: String): NullablePointer[Xmlschemaparserctxt] => var tmpvar: NullablePointer[Xmlschemaparserctxt] = @xmlSchemaNewParserCtxt[NullablePointer[Xmlschemaparserctxt]](pURL.cstring()) tmpvar fun xmlSchemaNewMemParserCtxt(pbuffer: String, psize: I32): NullablePointer[Xmlschemaparserctxt] => var tmpvar: NullablePointer[Xmlschemaparserctxt] = @xmlSchemaNewMemParserCtxt[NullablePointer[Xmlschemaparserctxt]](pbuffer.cstring(), psize) tmpvar fun xmlSchemaNewDocParserCtxt(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmlschemaparserctxt] => var tmpvar: NullablePointer[Xmlschemaparserctxt] = @xmlSchemaNewDocParserCtxt[NullablePointer[Xmlschemaparserctxt]](pdoc) tmpvar fun xmlSchemaFreeParserCtxt(pctxt: NullablePointer[Xmlschemaparserctxt]): None => var tmpvar: None = @xmlSchemaFreeParserCtxt[None](pctxt) tmpvar fun xmlSchemaSetParserErrors(pctxt: NullablePointer[Xmlschemaparserctxt], perr: Pointer[FUNCTIONPOINTER], pwarn: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlSchemaSetParserErrors[None](pctxt, perr, pwarn, pctx) tmpvar fun xmlSchemaSetParserStructuredErrors(pctxt: NullablePointer[Xmlschemaparserctxt], pserror: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlSchemaSetParserStructuredErrors[None](pctxt, pserror, pctx) tmpvar fun xmlSchemaGetParserErrors(pctxt: NullablePointer[Xmlschemaparserctxt], perr: Pointer[Pointer[FUNCTIONPOINTER]], pwarn: Pointer[Pointer[FUNCTIONPOINTER]], pctx: Pointer[Pointer[U8]]): I32 => var tmpvar: I32 = @xmlSchemaGetParserErrors[I32](pctxt, perr, pwarn, pctx) tmpvar fun xmlSchemaIsValid(pctxt: NullablePointer[Xmlschemavalidctxt]): I32 => var tmpvar: I32 = @xmlSchemaIsValid[I32](pctxt) tmpvar fun xmlSchemaParse(pctxt: NullablePointer[Xmlschemaparserctxt]): NullablePointer[Xmlschema] => var tmpvar: NullablePointer[Xmlschema] = @xmlSchemaParse[NullablePointer[Xmlschema]](pctxt) tmpvar fun xmlSchemaFree(pschema: NullablePointer[Xmlschema]): None => var tmpvar: None = @xmlSchemaFree[None](pschema) tmpvar fun xmlSchemaDump(poutput: NullablePointer[IoFile], pschema: NullablePointer[Xmlschema]): None => var tmpvar: None = @xmlSchemaDump[None](poutput, pschema) tmpvar fun xmlSchemaSetValidErrors(pctxt: NullablePointer[Xmlschemavalidctxt], perr: Pointer[FUNCTIONPOINTER], pwarn: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlSchemaSetValidErrors[None](pctxt, perr, pwarn, pctx) tmpvar fun xmlSchemaSetValidStructuredErrors(pctxt: NullablePointer[Xmlschemavalidctxt], pserror: Pointer[FUNCTIONPOINTER], pctx: Pointer[U8]): None => var tmpvar: None = @xmlSchemaSetValidStructuredErrors[None](pctxt, pserror, pctx) tmpvar fun xmlSchemaGetValidErrors(pctxt: NullablePointer[Xmlschemavalidctxt], perr: Pointer[Pointer[FUNCTIONPOINTER]], pwarn: Pointer[Pointer[FUNCTIONPOINTER]], pctx: Pointer[Pointer[U8]]): I32 => var tmpvar: I32 = @xmlSchemaGetValidErrors[I32](pctxt, perr, pwarn, pctx) tmpvar fun xmlSchemaSetValidOptions(pctxt: NullablePointer[Xmlschemavalidctxt], poptions: I32): I32 => var tmpvar: I32 = @xmlSchemaSetValidOptions[I32](pctxt, poptions) tmpvar fun xmlSchemaValidateSetFilename(pvctxt: NullablePointer[Xmlschemavalidctxt], pfilename: String): None => var tmpvar: None = @xmlSchemaValidateSetFilename[None](pvctxt, pfilename.cstring()) tmpvar fun xmlSchemaValidCtxtGetOptions(pctxt: NullablePointer[Xmlschemavalidctxt]): I32 => var tmpvar: I32 = @xmlSchemaValidCtxtGetOptions[I32](pctxt) tmpvar fun xmlSchemaNewValidCtxt(pschema: NullablePointer[Xmlschema]): NullablePointer[Xmlschemavalidctxt] => var tmpvar: NullablePointer[Xmlschemavalidctxt] = @xmlSchemaNewValidCtxt[NullablePointer[Xmlschemavalidctxt]](pschema) tmpvar fun xmlSchemaFreeValidCtxt(pctxt: NullablePointer[Xmlschemavalidctxt]): None => var tmpvar: None = @xmlSchemaFreeValidCtxt[None](pctxt) tmpvar fun xmlSchemaValidateDoc(pctxt: NullablePointer[Xmlschemavalidctxt], pinstance: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlSchemaValidateDoc[I32](pctxt, pinstance) tmpvar fun xmlSchemaValidateOneElement(pctxt: NullablePointer[Xmlschemavalidctxt], pelem: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlSchemaValidateOneElement[I32](pctxt, pelem) tmpvar fun xmlSchemaValidateStream(pctxt: NullablePointer[Xmlschemavalidctxt], pinput: NullablePointer[Xmlparserinputbuffer], penc: I32, psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8]): I32 => var tmpvar: I32 = @xmlSchemaValidateStream[I32](pctxt, pinput, penc, psax, puser_data) tmpvar fun xmlSchemaValidateFile(pctxt: NullablePointer[Xmlschemavalidctxt], pfilename: String, poptions: I32): I32 => var tmpvar: I32 = @xmlSchemaValidateFile[I32](pctxt, pfilename.cstring(), poptions) tmpvar fun xmlSchemaValidCtxtGetParserCtxt(pctxt: NullablePointer[Xmlschemavalidctxt]): NullablePointer[Xmlparserctxt] => var tmpvar: NullablePointer[Xmlparserctxt] = @xmlSchemaValidCtxtGetParserCtxt[NullablePointer[Xmlparserctxt]](pctxt) tmpvar fun xmlSchemaSAXPlug(pctxt: NullablePointer[Xmlschemavalidctxt], psax: Pointer[NullablePointer[Xmlsaxhandler]], puser_data: Pointer[Pointer[U8]]): NullablePointer[Xmlschemasaxplug] => var tmpvar: NullablePointer[Xmlschemasaxplug] = @xmlSchemaSAXPlug[NullablePointer[Xmlschemasaxplug]](pctxt, psax, puser_data) tmpvar fun xmlSchemaSAXUnplug(pplug: NullablePointer[Xmlschemasaxplug]): I32 => var tmpvar: I32 = @xmlSchemaSAXUnplug[I32](pplug) tmpvar fun xmlSchemaValidateSetLocator(pvctxt: NullablePointer[Xmlschemavalidctxt], pf: Pointer[FUNCTIONPOINTER], pctxt: Pointer[U8]): None => var tmpvar: None = @xmlSchemaValidateSetLocator[None](pvctxt, pf, pctxt) tmpvar fun xmlNewTextReader(pinput: NullablePointer[Xmlparserinputbuffer], pURI: String): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlNewTextReader[NullablePointer[Xmltextreader]](pinput, pURI.cstring()) tmpvar fun xmlNewTextReaderFilename(pURI: String): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlNewTextReaderFilename[NullablePointer[Xmltextreader]](pURI.cstring()) tmpvar fun xmlFreeTextReader(preader: NullablePointer[Xmltextreader]): None => var tmpvar: None = @xmlFreeTextReader[None](preader) tmpvar fun xmlTextReaderSetup(preader: NullablePointer[Xmltextreader], pinput: NullablePointer[Xmlparserinputbuffer], pURL: String, pencoding: String, poptions: I32): I32 => var tmpvar: I32 = @xmlTextReaderSetup[I32](preader, pinput, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlTextReaderRead(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderRead[I32](preader) tmpvar fun xmlTextReaderReadInnerXml(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderReadInnerXml[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderReadOuterXml(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderReadOuterXml[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderReadString(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderReadString[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderReadAttributeValue(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderReadAttributeValue[I32](preader) tmpvar fun xmlTextReaderAttributeCount(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderAttributeCount[I32](preader) tmpvar fun xmlTextReaderDepth(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderDepth[I32](preader) tmpvar fun xmlTextReaderHasAttributes(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderHasAttributes[I32](preader) tmpvar fun xmlTextReaderHasValue(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderHasValue[I32](preader) tmpvar fun xmlTextReaderIsDefault(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderIsDefault[I32](preader) tmpvar fun xmlTextReaderIsEmptyElement(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderIsEmptyElement[I32](preader) tmpvar fun xmlTextReaderNodeType(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderNodeType[I32](preader) tmpvar fun xmlTextReaderQuoteChar(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderQuoteChar[I32](preader) tmpvar fun xmlTextReaderReadState(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderReadState[I32](preader) tmpvar fun xmlTextReaderIsNamespaceDecl(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderIsNamespaceDecl[I32](preader) tmpvar fun xmlTextReaderConstBaseUri(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstBaseUri[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderConstLocalName(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstLocalName[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderConstName(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstName[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderConstNamespaceUri(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstNamespaceUri[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderConstPrefix(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstPrefix[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderConstXmlLang(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstXmlLang[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderConstString(preader: NullablePointer[Xmltextreader], pstr: String): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstString[Pointer[U8]](preader, pstr.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderConstValue(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstValue[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderBaseUri(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderBaseUri[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderLocalName(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderLocalName[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderName(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderName[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderNamespaceUri(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderNamespaceUri[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderPrefix(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderPrefix[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderXmlLang(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderXmlLang[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderValue(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderValue[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderClose(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderClose[I32](preader) tmpvar fun xmlTextReaderGetAttributeNo(preader: NullablePointer[Xmltextreader], pno: I32): String => var tmpvar: Pointer[U8] = @xmlTextReaderGetAttributeNo[Pointer[U8]](preader, pno) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderGetAttribute(preader: NullablePointer[Xmltextreader], pname: String): String => var tmpvar: Pointer[U8] = @xmlTextReaderGetAttribute[Pointer[U8]](preader, pname.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderGetAttributeNs(preader: NullablePointer[Xmltextreader], plocalName: String, pnamespaceURI: String): String => var tmpvar: Pointer[U8] = @xmlTextReaderGetAttributeNs[Pointer[U8]](preader, plocalName.cstring(), pnamespaceURI.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderGetRemainder(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlparserinputbuffer] => var tmpvar: NullablePointer[Xmlparserinputbuffer] = @xmlTextReaderGetRemainder[NullablePointer[Xmlparserinputbuffer]](preader) tmpvar fun xmlTextReaderLookupNamespace(preader: NullablePointer[Xmltextreader], pprefix: String): String => var tmpvar: Pointer[U8] = @xmlTextReaderLookupNamespace[Pointer[U8]](preader, pprefix.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderMoveToAttributeNo(preader: NullablePointer[Xmltextreader], pno: I32): I32 => var tmpvar: I32 = @xmlTextReaderMoveToAttributeNo[I32](preader, pno) tmpvar fun xmlTextReaderMoveToAttribute(preader: NullablePointer[Xmltextreader], pname: String): I32 => var tmpvar: I32 = @xmlTextReaderMoveToAttribute[I32](preader, pname.cstring()) tmpvar fun xmlTextReaderMoveToAttributeNs(preader: NullablePointer[Xmltextreader], plocalName: String, pnamespaceURI: String): I32 => var tmpvar: I32 = @xmlTextReaderMoveToAttributeNs[I32](preader, plocalName.cstring(), pnamespaceURI.cstring()) tmpvar fun xmlTextReaderMoveToFirstAttribute(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderMoveToFirstAttribute[I32](preader) tmpvar fun xmlTextReaderMoveToNextAttribute(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderMoveToNextAttribute[I32](preader) tmpvar fun xmlTextReaderMoveToElement(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderMoveToElement[I32](preader) tmpvar fun xmlTextReaderNormalization(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderNormalization[I32](preader) tmpvar fun xmlTextReaderConstEncoding(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstEncoding[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderSetParserProp(preader: NullablePointer[Xmltextreader], pprop: I32, pvalue: I32): I32 => var tmpvar: I32 = @xmlTextReaderSetParserProp[I32](preader, pprop, pvalue) tmpvar fun xmlTextReaderGetParserProp(preader: NullablePointer[Xmltextreader], pprop: I32): I32 => var tmpvar: I32 = @xmlTextReaderGetParserProp[I32](preader, pprop) tmpvar fun xmlTextReaderCurrentNode(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlTextReaderCurrentNode[NullablePointer[Xmlnode]](preader) tmpvar fun xmlTextReaderGetParserLineNumber(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderGetParserLineNumber[I32](preader) tmpvar fun xmlTextReaderGetParserColumnNumber(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderGetParserColumnNumber[I32](preader) tmpvar fun xmlTextReaderPreserve(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlTextReaderPreserve[NullablePointer[Xmlnode]](preader) tmpvar fun xmlTextReaderPreservePattern(preader: NullablePointer[Xmltextreader], ppattern: String, pnamespaces: Pointer[Pointer[U8] tag]): I32 => var tmpvar: I32 = @xmlTextReaderPreservePattern[I32](preader, ppattern.cstring(), pnamespaces) tmpvar fun xmlTextReaderCurrentDoc(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmldoc] => var tmpvar: NullablePointer[Xmldoc] = @xmlTextReaderCurrentDoc[NullablePointer[Xmldoc]](preader) tmpvar fun xmlTextReaderExpand(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlTextReaderExpand[NullablePointer[Xmlnode]](preader) tmpvar fun xmlTextReaderNext(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderNext[I32](preader) tmpvar fun xmlTextReaderNextSibling(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderNextSibling[I32](preader) tmpvar fun xmlTextReaderIsValid(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderIsValid[I32](preader) tmpvar fun xmlTextReaderRelaxNGValidate(preader: NullablePointer[Xmltextreader], prng: String): I32 => var tmpvar: I32 = @xmlTextReaderRelaxNGValidate[I32](preader, prng.cstring()) tmpvar fun xmlTextReaderRelaxNGValidateCtxt(preader: NullablePointer[Xmltextreader], pctxt: NullablePointer[Xmlrelaxngvalidctxt], poptions: I32): I32 => var tmpvar: I32 = @xmlTextReaderRelaxNGValidateCtxt[I32](preader, pctxt, poptions) tmpvar fun xmlTextReaderRelaxNGSetSchema(preader: NullablePointer[Xmltextreader], pschema: NullablePointer[Xmlrelaxng]): I32 => var tmpvar: I32 = @xmlTextReaderRelaxNGSetSchema[I32](preader, pschema) tmpvar fun xmlTextReaderSchemaValidate(preader: NullablePointer[Xmltextreader], pxsd: String): I32 => var tmpvar: I32 = @xmlTextReaderSchemaValidate[I32](preader, pxsd.cstring()) tmpvar fun xmlTextReaderSchemaValidateCtxt(preader: NullablePointer[Xmltextreader], pctxt: NullablePointer[Xmlschemavalidctxt], poptions: I32): I32 => var tmpvar: I32 = @xmlTextReaderSchemaValidateCtxt[I32](preader, pctxt, poptions) tmpvar fun xmlTextReaderSetSchema(preader: NullablePointer[Xmltextreader], pschema: NullablePointer[Xmlschema]): I32 => var tmpvar: I32 = @xmlTextReaderSetSchema[I32](preader, pschema) tmpvar fun xmlTextReaderConstXmlVersion(preader: NullablePointer[Xmltextreader]): String => var tmpvar: Pointer[U8] = @xmlTextReaderConstXmlVersion[Pointer[U8]](preader) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderStandalone(preader: NullablePointer[Xmltextreader]): I32 => var tmpvar: I32 = @xmlTextReaderStandalone[I32](preader) tmpvar fun xmlTextReaderByteConsumed(preader: NullablePointer[Xmltextreader]): I64 => var tmpvar: I64 = @xmlTextReaderByteConsumed[I64](preader) tmpvar fun xmlReaderWalker(pdoc: NullablePointer[Xmldoc] tag): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlReaderWalker[NullablePointer[Xmltextreader]](pdoc) tmpvar fun xmlReaderForDoc(pcur: String, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlReaderForDoc[NullablePointer[Xmltextreader]](pcur.cstring(), pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderForFile(pfilename: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlReaderForFile[NullablePointer[Xmltextreader]](pfilename.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderForMemory(pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlReaderForMemory[NullablePointer[Xmltextreader]](pbuffer.cstring(), psize, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderForFd(pfd: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlReaderForFd[NullablePointer[Xmltextreader]](pfd, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderForIO(pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => var tmpvar: NullablePointer[Xmltextreader] = @xmlReaderForIO[NullablePointer[Xmltextreader]](pioread, pioclose, pioctx, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderNewWalker(preader: NullablePointer[Xmltextreader], pdoc: NullablePointer[Xmldoc] tag): I32 => var tmpvar: I32 = @xmlReaderNewWalker[I32](preader, pdoc) tmpvar fun xmlReaderNewDoc(preader: NullablePointer[Xmltextreader], pcur: String, pURL: String, pencoding: String, poptions: I32): I32 => var tmpvar: I32 = @xmlReaderNewDoc[I32](preader, pcur.cstring(), pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderNewFile(preader: NullablePointer[Xmltextreader], pfilename: String, pencoding: String, poptions: I32): I32 => var tmpvar: I32 = @xmlReaderNewFile[I32](preader, pfilename.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderNewMemory(preader: NullablePointer[Xmltextreader], pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): I32 => var tmpvar: I32 = @xmlReaderNewMemory[I32](preader, pbuffer.cstring(), psize, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderNewFd(preader: NullablePointer[Xmltextreader], pfd: I32, pURL: String, pencoding: String, poptions: I32): I32 => var tmpvar: I32 = @xmlReaderNewFd[I32](preader, pfd, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlReaderNewIO(preader: NullablePointer[Xmltextreader], pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): I32 => var tmpvar: I32 = @xmlReaderNewIO[I32](preader, pioread, pioclose, pioctx, pURL.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlTextReaderLocatorLineNumber(plocator: Pointer[U8]): I32 => var tmpvar: I32 = @xmlTextReaderLocatorLineNumber[I32](plocator) tmpvar fun xmlTextReaderLocatorBaseURI(plocator: Pointer[U8]): String => var tmpvar: Pointer[U8] = @xmlTextReaderLocatorBaseURI[Pointer[U8]](plocator) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlTextReaderSetErrorHandler(preader: NullablePointer[Xmltextreader], pf: Pointer[FUNCTIONPOINTER], parg: Pointer[U8]): None => var tmpvar: None = @xmlTextReaderSetErrorHandler[None](preader, pf, parg) tmpvar fun xmlTextReaderSetStructuredErrorHandler(preader: NullablePointer[Xmltextreader], pf: Pointer[FUNCTIONPOINTER], parg: Pointer[U8]): None => var tmpvar: None = @xmlTextReaderSetStructuredErrorHandler[None](preader, pf, parg) tmpvar fun xmlTextReaderGetErrorHandler(preader: NullablePointer[Xmltextreader], pf: Pointer[Pointer[FUNCTIONPOINTER]], parg: Pointer[Pointer[U8]]): None => var tmpvar: None = @xmlTextReaderGetErrorHandler[None](preader, pf, parg) tmpvar fun xmlSaveToFd(pfd: I32, pencoding: String, poptions: I32): NullablePointer[Xmlsavectxt] => var tmpvar: NullablePointer[Xmlsavectxt] = @xmlSaveToFd[NullablePointer[Xmlsavectxt]](pfd, pencoding.cstring(), poptions) tmpvar fun xmlSaveToFilename(pfilename: String, pencoding: String, poptions: I32): NullablePointer[Xmlsavectxt] => var tmpvar: NullablePointer[Xmlsavectxt] = @xmlSaveToFilename[NullablePointer[Xmlsavectxt]](pfilename.cstring(), pencoding.cstring(), poptions) tmpvar fun xmlSaveToBuffer(pbuffer: NullablePointer[Xmlbuffer], pencoding: String, poptions: I32): NullablePointer[Xmlsavectxt] => var tmpvar: NullablePointer[Xmlsavectxt] = @xmlSaveToBuffer[NullablePointer[Xmlsavectxt]](pbuffer, pencoding.cstring(), poptions) tmpvar fun xmlSaveToIO(piowrite: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pencoding: String, poptions: I32): NullablePointer[Xmlsavectxt] => var tmpvar: NullablePointer[Xmlsavectxt] = @xmlSaveToIO[NullablePointer[Xmlsavectxt]](piowrite, pioclose, pioctx, pencoding.cstring(), poptions) tmpvar fun xmlSaveDoc(pctxt: NullablePointer[Xmlsavectxt], pdoc: NullablePointer[Xmldoc] tag): I64 => var tmpvar: I64 = @xmlSaveDoc[I64](pctxt, pdoc) tmpvar fun xmlSaveTree(pctxt: NullablePointer[Xmlsavectxt], pnode: NullablePointer[Xmlnode]): I64 => var tmpvar: I64 = @xmlSaveTree[I64](pctxt, pnode) tmpvar fun xmlSaveFlush(pctxt: NullablePointer[Xmlsavectxt]): I32 => var tmpvar: I32 = @xmlSaveFlush[I32](pctxt) tmpvar fun xmlSaveClose(pctxt: NullablePointer[Xmlsavectxt]): I32 => var tmpvar: I32 = @xmlSaveClose[I32](pctxt) tmpvar fun xmlSaveSetEscape(pctxt: NullablePointer[Xmlsavectxt], pescape: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlSaveSetEscape[I32](pctxt, pescape) tmpvar fun xmlSaveSetAttrEscape(pctxt: NullablePointer[Xmlsavectxt], pescape: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlSaveSetAttrEscape[I32](pctxt, pescape) tmpvar fun xmlSchemaInitTypes(): None => var tmpvar: None = @xmlSchemaInitTypes[None]() tmpvar fun xmlSchemaCleanupTypes(): None => var tmpvar: None = @xmlSchemaCleanupTypes[None]() tmpvar fun xmlSchemaGetPredefinedType(pname: String, pns: String): NullablePointer[Xmlschematype] => var tmpvar: NullablePointer[Xmlschematype] = @xmlSchemaGetPredefinedType[NullablePointer[Xmlschematype]](pname.cstring(), pns.cstring()) tmpvar fun xmlSchemaValidatePredefinedType(ptype: NullablePointer[Xmlschematype], pvalue: String, pval: Pointer[NullablePointer[Xmlschemaval]]): I32 => var tmpvar: I32 = @xmlSchemaValidatePredefinedType[I32](ptype, pvalue.cstring(), pval) tmpvar fun xmlSchemaValPredefTypeNode(ptype: NullablePointer[Xmlschematype], pvalue: String, pval: Pointer[NullablePointer[Xmlschemaval]], pnode: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlSchemaValPredefTypeNode[I32](ptype, pvalue.cstring(), pval, pnode) tmpvar fun xmlSchemaValidateFacet(pbase: NullablePointer[Xmlschematype], pfacet: NullablePointer[Xmlschemafacet], pvalue: String, pval: NullablePointer[Xmlschemaval]): I32 => var tmpvar: I32 = @xmlSchemaValidateFacet[I32](pbase, pfacet, pvalue.cstring(), pval) tmpvar fun xmlSchemaValidateFacetWhtsp(pfacet: NullablePointer[Xmlschemafacet], pfws: I32, pvalType: I32, pvalue: String, pval: NullablePointer[Xmlschemaval], pws: I32): I32 => var tmpvar: I32 = @xmlSchemaValidateFacetWhtsp[I32](pfacet, pfws, pvalType, pvalue.cstring(), pval, pws) tmpvar fun xmlSchemaFreeValue(pval: NullablePointer[Xmlschemaval]): None => var tmpvar: None = @xmlSchemaFreeValue[None](pval) tmpvar fun xmlSchemaNewFacet(): NullablePointer[Xmlschemafacet] => var tmpvar: NullablePointer[Xmlschemafacet] = @xmlSchemaNewFacet[NullablePointer[Xmlschemafacet]]() tmpvar fun xmlSchemaCheckFacet(pfacet: NullablePointer[Xmlschemafacet], ptypeDecl: NullablePointer[Xmlschematype], pctxt: NullablePointer[Xmlschemaparserctxt], pname: String): I32 => var tmpvar: I32 = @xmlSchemaCheckFacet[I32](pfacet, ptypeDecl, pctxt, pname.cstring()) tmpvar fun xmlSchemaFreeFacet(pfacet: NullablePointer[Xmlschemafacet]): None => var tmpvar: None = @xmlSchemaFreeFacet[None](pfacet) tmpvar fun xmlSchemaCompareValues(px: NullablePointer[Xmlschemaval], py: NullablePointer[Xmlschemaval]): I32 => var tmpvar: I32 = @xmlSchemaCompareValues[I32](px, py) tmpvar fun xmlSchemaGetBuiltInListSimpleTypeItemType(ptype: NullablePointer[Xmlschematype]): NullablePointer[Xmlschematype] => var tmpvar: NullablePointer[Xmlschematype] = @xmlSchemaGetBuiltInListSimpleTypeItemType[NullablePointer[Xmlschematype]](ptype) tmpvar fun xmlSchemaValidateListSimpleTypeFacet(pfacet: NullablePointer[Xmlschemafacet], pvalue: String, pactualLen: U64, pexpectedLen: Pointer[U64]): I32 => var tmpvar: I32 = @xmlSchemaValidateListSimpleTypeFacet[I32](pfacet, pvalue.cstring(), pactualLen, pexpectedLen) tmpvar fun xmlSchemaGetBuiltInType(ptype: I32): NullablePointer[Xmlschematype] => var tmpvar: NullablePointer[Xmlschematype] = @xmlSchemaGetBuiltInType[NullablePointer[Xmlschematype]](ptype) tmpvar fun xmlSchemaIsBuiltInTypeFacet(ptype: NullablePointer[Xmlschematype], pfacetType: I32): I32 => var tmpvar: I32 = @xmlSchemaIsBuiltInTypeFacet[I32](ptype, pfacetType) tmpvar fun xmlSchemaCollapseString(pvalue: String): String => var tmpvar: Pointer[U8] = @xmlSchemaCollapseString[Pointer[U8]](pvalue.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSchemaWhiteSpaceReplace(pvalue: String): String => var tmpvar: Pointer[U8] = @xmlSchemaWhiteSpaceReplace[Pointer[U8]](pvalue.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSchemaGetFacetValueAsULong(pfacet: NullablePointer[Xmlschemafacet]): U64 => var tmpvar: U64 = @xmlSchemaGetFacetValueAsULong[U64](pfacet) tmpvar fun xmlSchemaValidateLengthFacet(ptype: NullablePointer[Xmlschematype], pfacet: NullablePointer[Xmlschemafacet], pvalue: String, pval: NullablePointer[Xmlschemaval], plength: Pointer[U64]): I32 => var tmpvar: I32 = @xmlSchemaValidateLengthFacet[I32](ptype, pfacet, pvalue.cstring(), pval, plength) tmpvar fun xmlSchemaValidateLengthFacetWhtsp(pfacet: NullablePointer[Xmlschemafacet], pvalType: I32, pvalue: String, pval: NullablePointer[Xmlschemaval], plength: Pointer[U64], pws: I32): I32 => var tmpvar: I32 = @xmlSchemaValidateLengthFacetWhtsp[I32](pfacet, pvalType, pvalue.cstring(), pval, plength, pws) tmpvar fun xmlSchemaValPredefTypeNodeNoNorm(ptype: NullablePointer[Xmlschematype], pvalue: String, pval: Pointer[NullablePointer[Xmlschemaval]], pnode: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlSchemaValPredefTypeNodeNoNorm[I32](ptype, pvalue.cstring(), pval, pnode) tmpvar fun xmlSchemaGetCanonValue(pval: NullablePointer[Xmlschemaval], pretValue: Pointer[Pointer[U8] tag]): I32 => var tmpvar: I32 = @xmlSchemaGetCanonValue[I32](pval, pretValue) tmpvar fun xmlSchemaGetCanonValueWhtsp(pval: NullablePointer[Xmlschemaval], pretValue: Pointer[Pointer[U8] tag], pws: I32): I32 => var tmpvar: I32 = @xmlSchemaGetCanonValueWhtsp[I32](pval, pretValue, pws) tmpvar fun xmlSchemaValueAppend(pprev: NullablePointer[Xmlschemaval], pcur: NullablePointer[Xmlschemaval]): I32 => var tmpvar: I32 = @xmlSchemaValueAppend[I32](pprev, pcur) tmpvar fun xmlSchemaValueGetNext(pcur: NullablePointer[Xmlschemaval]): NullablePointer[Xmlschemaval] => var tmpvar: NullablePointer[Xmlschemaval] = @xmlSchemaValueGetNext[NullablePointer[Xmlschemaval]](pcur) tmpvar fun xmlSchemaValueGetAsString(pval: NullablePointer[Xmlschemaval]): String => var tmpvar: Pointer[U8] = @xmlSchemaValueGetAsString[Pointer[U8]](pval) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlSchemaValueGetAsBoolean(pval: NullablePointer[Xmlschemaval]): I32 => var tmpvar: I32 = @xmlSchemaValueGetAsBoolean[I32](pval) tmpvar fun xmlSchemaNewStringValue(ptype: I32, pvalue: String): NullablePointer[Xmlschemaval] => var tmpvar: NullablePointer[Xmlschemaval] = @xmlSchemaNewStringValue[NullablePointer[Xmlschemaval]](ptype, pvalue.cstring()) tmpvar fun xmlSchemaNewNOTATIONValue(pname: String, pns: String): NullablePointer[Xmlschemaval] => var tmpvar: NullablePointer[Xmlschemaval] = @xmlSchemaNewNOTATIONValue[NullablePointer[Xmlschemaval]](pname.cstring(), pns.cstring()) tmpvar fun xmlSchemaNewQNameValue(pnamespaceName: String, plocalName: String): NullablePointer[Xmlschemaval] => var tmpvar: NullablePointer[Xmlschemaval] = @xmlSchemaNewQNameValue[NullablePointer[Xmlschemaval]](pnamespaceName.cstring(), plocalName.cstring()) tmpvar fun xmlSchemaCompareValuesWhtsp(px: NullablePointer[Xmlschemaval], pxws: I32, py: NullablePointer[Xmlschemaval], pyws: I32): I32 => var tmpvar: I32 = @xmlSchemaCompareValuesWhtsp[I32](px, pxws, py, pyws) tmpvar fun xmlSchemaCopyValue(pval: NullablePointer[Xmlschemaval]): NullablePointer[Xmlschemaval] => var tmpvar: NullablePointer[Xmlschemaval] = @xmlSchemaCopyValue[NullablePointer[Xmlschemaval]](pval) tmpvar fun xmlSchemaGetValType(pval: NullablePointer[Xmlschemaval]): I32 => var tmpvar: I32 = @xmlSchemaGetValType[I32](pval) tmpvar fun xmlUCSIsAegeanNumbers(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsAegeanNumbers[I32](pcode) tmpvar fun xmlUCSIsAlphabeticPresentationForms(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsAlphabeticPresentationForms[I32](pcode) tmpvar fun xmlUCSIsArabic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsArabic[I32](pcode) tmpvar fun xmlUCSIsArabicPresentationFormsA(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsArabicPresentationFormsA[I32](pcode) tmpvar fun xmlUCSIsArabicPresentationFormsB(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsArabicPresentationFormsB[I32](pcode) tmpvar fun xmlUCSIsArmenian(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsArmenian[I32](pcode) tmpvar fun xmlUCSIsArrows(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsArrows[I32](pcode) tmpvar fun xmlUCSIsBasicLatin(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBasicLatin[I32](pcode) tmpvar fun xmlUCSIsBengali(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBengali[I32](pcode) tmpvar fun xmlUCSIsBlockElements(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBlockElements[I32](pcode) tmpvar fun xmlUCSIsBopomofo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBopomofo[I32](pcode) tmpvar fun xmlUCSIsBopomofoExtended(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBopomofoExtended[I32](pcode) tmpvar fun xmlUCSIsBoxDrawing(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBoxDrawing[I32](pcode) tmpvar fun xmlUCSIsBraillePatterns(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBraillePatterns[I32](pcode) tmpvar fun xmlUCSIsBuhid(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsBuhid[I32](pcode) tmpvar fun xmlUCSIsByzantineMusicalSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsByzantineMusicalSymbols[I32](pcode) tmpvar fun xmlUCSIsCJKCompatibility(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKCompatibility[I32](pcode) tmpvar fun xmlUCSIsCJKCompatibilityForms(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKCompatibilityForms[I32](pcode) tmpvar fun xmlUCSIsCJKCompatibilityIdeographs(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKCompatibilityIdeographs[I32](pcode) tmpvar fun xmlUCSIsCJKCompatibilityIdeographsSupplement(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKCompatibilityIdeographsSupplement[I32](pcode) tmpvar fun xmlUCSIsCJKRadicalsSupplement(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKRadicalsSupplement[I32](pcode) tmpvar fun xmlUCSIsCJKSymbolsandPunctuation(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKSymbolsandPunctuation[I32](pcode) tmpvar fun xmlUCSIsCJKUnifiedIdeographs(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKUnifiedIdeographs[I32](pcode) tmpvar fun xmlUCSIsCJKUnifiedIdeographsExtensionA(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKUnifiedIdeographsExtensionA[I32](pcode) tmpvar fun xmlUCSIsCJKUnifiedIdeographsExtensionB(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCJKUnifiedIdeographsExtensionB[I32](pcode) tmpvar fun xmlUCSIsCherokee(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCherokee[I32](pcode) tmpvar fun xmlUCSIsCombiningDiacriticalMarks(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCombiningDiacriticalMarks[I32](pcode) tmpvar fun xmlUCSIsCombiningDiacriticalMarksforSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCombiningDiacriticalMarksforSymbols[I32](pcode) tmpvar fun xmlUCSIsCombiningHalfMarks(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCombiningHalfMarks[I32](pcode) tmpvar fun xmlUCSIsCombiningMarksforSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCombiningMarksforSymbols[I32](pcode) tmpvar fun xmlUCSIsControlPictures(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsControlPictures[I32](pcode) tmpvar fun xmlUCSIsCurrencySymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCurrencySymbols[I32](pcode) tmpvar fun xmlUCSIsCypriotSyllabary(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCypriotSyllabary[I32](pcode) tmpvar fun xmlUCSIsCyrillic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCyrillic[I32](pcode) tmpvar fun xmlUCSIsCyrillicSupplement(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCyrillicSupplement[I32](pcode) tmpvar fun xmlUCSIsDeseret(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsDeseret[I32](pcode) tmpvar fun xmlUCSIsDevanagari(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsDevanagari[I32](pcode) tmpvar fun xmlUCSIsDingbats(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsDingbats[I32](pcode) tmpvar fun xmlUCSIsEnclosedAlphanumerics(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsEnclosedAlphanumerics[I32](pcode) tmpvar fun xmlUCSIsEnclosedCJKLettersandMonths(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsEnclosedCJKLettersandMonths[I32](pcode) tmpvar fun xmlUCSIsEthiopic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsEthiopic[I32](pcode) tmpvar fun xmlUCSIsGeneralPunctuation(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGeneralPunctuation[I32](pcode) tmpvar fun xmlUCSIsGeometricShapes(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGeometricShapes[I32](pcode) tmpvar fun xmlUCSIsGeorgian(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGeorgian[I32](pcode) tmpvar fun xmlUCSIsGothic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGothic[I32](pcode) tmpvar fun xmlUCSIsGreek(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGreek[I32](pcode) tmpvar fun xmlUCSIsGreekExtended(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGreekExtended[I32](pcode) tmpvar fun xmlUCSIsGreekandCoptic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGreekandCoptic[I32](pcode) tmpvar fun xmlUCSIsGujarati(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGujarati[I32](pcode) tmpvar fun xmlUCSIsGurmukhi(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsGurmukhi[I32](pcode) tmpvar fun xmlUCSIsHalfwidthandFullwidthForms(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHalfwidthandFullwidthForms[I32](pcode) tmpvar fun xmlUCSIsHangulCompatibilityJamo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHangulCompatibilityJamo[I32](pcode) tmpvar fun xmlUCSIsHangulJamo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHangulJamo[I32](pcode) tmpvar fun xmlUCSIsHangulSyllables(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHangulSyllables[I32](pcode) tmpvar fun xmlUCSIsHanunoo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHanunoo[I32](pcode) tmpvar fun xmlUCSIsHebrew(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHebrew[I32](pcode) tmpvar fun xmlUCSIsHighPrivateUseSurrogates(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHighPrivateUseSurrogates[I32](pcode) tmpvar fun xmlUCSIsHighSurrogates(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHighSurrogates[I32](pcode) tmpvar fun xmlUCSIsHiragana(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsHiragana[I32](pcode) tmpvar fun xmlUCSIsIPAExtensions(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsIPAExtensions[I32](pcode) tmpvar fun xmlUCSIsIdeographicDescriptionCharacters(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsIdeographicDescriptionCharacters[I32](pcode) tmpvar fun xmlUCSIsKanbun(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsKanbun[I32](pcode) tmpvar fun xmlUCSIsKangxiRadicals(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsKangxiRadicals[I32](pcode) tmpvar fun xmlUCSIsKannada(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsKannada[I32](pcode) tmpvar fun xmlUCSIsKatakana(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsKatakana[I32](pcode) tmpvar fun xmlUCSIsKatakanaPhoneticExtensions(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsKatakanaPhoneticExtensions[I32](pcode) tmpvar fun xmlUCSIsKhmer(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsKhmer[I32](pcode) tmpvar fun xmlUCSIsKhmerSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsKhmerSymbols[I32](pcode) tmpvar fun xmlUCSIsLao(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLao[I32](pcode) tmpvar fun xmlUCSIsLatin1Supplement(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLatin1Supplement[I32](pcode) tmpvar fun xmlUCSIsLatinExtendedA(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLatinExtendedA[I32](pcode) tmpvar fun xmlUCSIsLatinExtendedB(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLatinExtendedB[I32](pcode) tmpvar fun xmlUCSIsLatinExtendedAdditional(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLatinExtendedAdditional[I32](pcode) tmpvar fun xmlUCSIsLetterlikeSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLetterlikeSymbols[I32](pcode) tmpvar fun xmlUCSIsLimbu(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLimbu[I32](pcode) tmpvar fun xmlUCSIsLinearBIdeograms(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLinearBIdeograms[I32](pcode) tmpvar fun xmlUCSIsLinearBSyllabary(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLinearBSyllabary[I32](pcode) tmpvar fun xmlUCSIsLowSurrogates(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsLowSurrogates[I32](pcode) tmpvar fun xmlUCSIsMalayalam(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMalayalam[I32](pcode) tmpvar fun xmlUCSIsMathematicalAlphanumericSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMathematicalAlphanumericSymbols[I32](pcode) tmpvar fun xmlUCSIsMathematicalOperators(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMathematicalOperators[I32](pcode) tmpvar fun xmlUCSIsMiscellaneousMathematicalSymbolsA(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMiscellaneousMathematicalSymbolsA[I32](pcode) tmpvar fun xmlUCSIsMiscellaneousMathematicalSymbolsB(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMiscellaneousMathematicalSymbolsB[I32](pcode) tmpvar fun xmlUCSIsMiscellaneousSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMiscellaneousSymbols[I32](pcode) tmpvar fun xmlUCSIsMiscellaneousSymbolsandArrows(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMiscellaneousSymbolsandArrows[I32](pcode) tmpvar fun xmlUCSIsMiscellaneousTechnical(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMiscellaneousTechnical[I32](pcode) tmpvar fun xmlUCSIsMongolian(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMongolian[I32](pcode) tmpvar fun xmlUCSIsMusicalSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMusicalSymbols[I32](pcode) tmpvar fun xmlUCSIsMyanmar(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsMyanmar[I32](pcode) tmpvar fun xmlUCSIsNumberForms(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsNumberForms[I32](pcode) tmpvar fun xmlUCSIsOgham(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsOgham[I32](pcode) tmpvar fun xmlUCSIsOldItalic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsOldItalic[I32](pcode) tmpvar fun xmlUCSIsOpticalCharacterRecognition(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsOpticalCharacterRecognition[I32](pcode) tmpvar fun xmlUCSIsOriya(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsOriya[I32](pcode) tmpvar fun xmlUCSIsOsmanya(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsOsmanya[I32](pcode) tmpvar fun xmlUCSIsPhoneticExtensions(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsPhoneticExtensions[I32](pcode) tmpvar fun xmlUCSIsPrivateUse(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsPrivateUse[I32](pcode) tmpvar fun xmlUCSIsPrivateUseArea(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsPrivateUseArea[I32](pcode) tmpvar fun xmlUCSIsRunic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsRunic[I32](pcode) tmpvar fun xmlUCSIsShavian(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsShavian[I32](pcode) tmpvar fun xmlUCSIsSinhala(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSinhala[I32](pcode) tmpvar fun xmlUCSIsSmallFormVariants(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSmallFormVariants[I32](pcode) tmpvar fun xmlUCSIsSpacingModifierLetters(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSpacingModifierLetters[I32](pcode) tmpvar fun xmlUCSIsSpecials(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSpecials[I32](pcode) tmpvar fun xmlUCSIsSuperscriptsandSubscripts(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSuperscriptsandSubscripts[I32](pcode) tmpvar fun xmlUCSIsSupplementalArrowsA(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSupplementalArrowsA[I32](pcode) tmpvar fun xmlUCSIsSupplementalArrowsB(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSupplementalArrowsB[I32](pcode) tmpvar fun xmlUCSIsSupplementalMathematicalOperators(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSupplementalMathematicalOperators[I32](pcode) tmpvar fun xmlUCSIsSupplementaryPrivateUseAreaA(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSupplementaryPrivateUseAreaA[I32](pcode) tmpvar fun xmlUCSIsSupplementaryPrivateUseAreaB(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSupplementaryPrivateUseAreaB[I32](pcode) tmpvar fun xmlUCSIsSyriac(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsSyriac[I32](pcode) tmpvar fun xmlUCSIsTagalog(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTagalog[I32](pcode) tmpvar fun xmlUCSIsTagbanwa(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTagbanwa[I32](pcode) tmpvar fun xmlUCSIsTags(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTags[I32](pcode) tmpvar fun xmlUCSIsTaiLe(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTaiLe[I32](pcode) tmpvar fun xmlUCSIsTaiXuanJingSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTaiXuanJingSymbols[I32](pcode) tmpvar fun xmlUCSIsTamil(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTamil[I32](pcode) tmpvar fun xmlUCSIsTelugu(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTelugu[I32](pcode) tmpvar fun xmlUCSIsThaana(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsThaana[I32](pcode) tmpvar fun xmlUCSIsThai(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsThai[I32](pcode) tmpvar fun xmlUCSIsTibetan(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsTibetan[I32](pcode) tmpvar fun xmlUCSIsUgaritic(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsUgaritic[I32](pcode) tmpvar fun xmlUCSIsUnifiedCanadianAboriginalSyllabics(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsUnifiedCanadianAboriginalSyllabics[I32](pcode) tmpvar fun xmlUCSIsVariationSelectors(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsVariationSelectors[I32](pcode) tmpvar fun xmlUCSIsVariationSelectorsSupplement(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsVariationSelectorsSupplement[I32](pcode) tmpvar fun xmlUCSIsYiRadicals(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsYiRadicals[I32](pcode) tmpvar fun xmlUCSIsYiSyllables(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsYiSyllables[I32](pcode) tmpvar fun xmlUCSIsYijingHexagramSymbols(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsYijingHexagramSymbols[I32](pcode) tmpvar fun xmlUCSIsBlock(pcode: I32, pblock: String): I32 => var tmpvar: I32 = @xmlUCSIsBlock[I32](pcode, pblock.cstring()) tmpvar fun xmlUCSIsCatC(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatC[I32](pcode) tmpvar fun xmlUCSIsCatCc(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatCc[I32](pcode) tmpvar fun xmlUCSIsCatCf(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatCf[I32](pcode) tmpvar fun xmlUCSIsCatCo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatCo[I32](pcode) tmpvar fun xmlUCSIsCatCs(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatCs[I32](pcode) tmpvar fun xmlUCSIsCatL(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatL[I32](pcode) tmpvar fun xmlUCSIsCatLl(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatLl[I32](pcode) tmpvar fun xmlUCSIsCatLm(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatLm[I32](pcode) tmpvar fun xmlUCSIsCatLo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatLo[I32](pcode) tmpvar fun xmlUCSIsCatLt(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatLt[I32](pcode) tmpvar fun xmlUCSIsCatLu(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatLu[I32](pcode) tmpvar fun xmlUCSIsCatM(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatM[I32](pcode) tmpvar fun xmlUCSIsCatMc(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatMc[I32](pcode) tmpvar fun xmlUCSIsCatMe(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatMe[I32](pcode) tmpvar fun xmlUCSIsCatMn(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatMn[I32](pcode) tmpvar fun xmlUCSIsCatN(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatN[I32](pcode) tmpvar fun xmlUCSIsCatNd(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatNd[I32](pcode) tmpvar fun xmlUCSIsCatNl(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatNl[I32](pcode) tmpvar fun xmlUCSIsCatNo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatNo[I32](pcode) tmpvar fun xmlUCSIsCatP(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatP[I32](pcode) tmpvar fun xmlUCSIsCatPc(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatPc[I32](pcode) tmpvar fun xmlUCSIsCatPd(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatPd[I32](pcode) tmpvar fun xmlUCSIsCatPe(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatPe[I32](pcode) tmpvar fun xmlUCSIsCatPf(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatPf[I32](pcode) tmpvar fun xmlUCSIsCatPi(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatPi[I32](pcode) tmpvar fun xmlUCSIsCatPo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatPo[I32](pcode) tmpvar fun xmlUCSIsCatPs(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatPs[I32](pcode) tmpvar fun xmlUCSIsCatS(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatS[I32](pcode) tmpvar fun xmlUCSIsCatSc(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatSc[I32](pcode) tmpvar fun xmlUCSIsCatSk(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatSk[I32](pcode) tmpvar fun xmlUCSIsCatSm(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatSm[I32](pcode) tmpvar fun xmlUCSIsCatSo(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatSo[I32](pcode) tmpvar fun xmlUCSIsCatZ(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatZ[I32](pcode) tmpvar fun xmlUCSIsCatZl(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatZl[I32](pcode) tmpvar fun xmlUCSIsCatZp(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatZp[I32](pcode) tmpvar fun xmlUCSIsCatZs(pcode: I32): I32 => var tmpvar: I32 = @xmlUCSIsCatZs[I32](pcode) tmpvar fun xmlUCSIsCat(pcode: I32, pcat: String): I32 => var tmpvar: I32 = @xmlUCSIsCat[I32](pcode, pcat.cstring()) tmpvar fun xmlNewTextWriter(pout: NullablePointer[Xmloutputbuffer]): NullablePointer[Xmltextwriter] => var tmpvar: NullablePointer[Xmltextwriter] = @xmlNewTextWriter[NullablePointer[Xmltextwriter]](pout) tmpvar fun xmlNewTextWriterFilename(puri: String, pcompression: I32): NullablePointer[Xmltextwriter] => var tmpvar: NullablePointer[Xmltextwriter] = @xmlNewTextWriterFilename[NullablePointer[Xmltextwriter]](puri.cstring(), pcompression) tmpvar fun xmlNewTextWriterMemory(pbuf: NullablePointer[Xmlbuffer], pcompression: I32): NullablePointer[Xmltextwriter] => var tmpvar: NullablePointer[Xmltextwriter] = @xmlNewTextWriterMemory[NullablePointer[Xmltextwriter]](pbuf, pcompression) tmpvar fun xmlNewTextWriterPushParser(pctxt: NullablePointer[Xmlparserctxt], pcompression: I32): NullablePointer[Xmltextwriter] => var tmpvar: NullablePointer[Xmltextwriter] = @xmlNewTextWriterPushParser[NullablePointer[Xmltextwriter]](pctxt, pcompression) tmpvar fun xmlNewTextWriterDoc(pdoc: Pointer[NullablePointer[Xmldoc] tag], pcompression: I32): NullablePointer[Xmltextwriter] => var tmpvar: NullablePointer[Xmltextwriter] = @xmlNewTextWriterDoc[NullablePointer[Xmltextwriter]](pdoc, pcompression) tmpvar fun xmlNewTextWriterTree(pdoc: NullablePointer[Xmldoc] tag, pnode: NullablePointer[Xmlnode], pcompression: I32): NullablePointer[Xmltextwriter] => var tmpvar: NullablePointer[Xmltextwriter] = @xmlNewTextWriterTree[NullablePointer[Xmltextwriter]](pdoc, pnode, pcompression) tmpvar fun xmlFreeTextWriter(pwriter: NullablePointer[Xmltextwriter]): None => var tmpvar: None = @xmlFreeTextWriter[None](pwriter) tmpvar fun xmlTextWriterStartDocument(pwriter: NullablePointer[Xmltextwriter], pversion: String, pencoding: String, pstandalone: String): I32 => var tmpvar: I32 = @xmlTextWriterStartDocument[I32](pwriter, pversion.cstring(), pencoding.cstring(), pstandalone.cstring()) tmpvar fun xmlTextWriterEndDocument(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndDocument[I32](pwriter) tmpvar fun xmlTextWriterStartComment(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterStartComment[I32](pwriter) tmpvar fun xmlTextWriterEndComment(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndComment[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatComment(pwriter: NullablePointer[Xmltextwriter], pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatComment[I32](pwriter, pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatComment(pwriter: NullablePointer[Xmltextwriter], pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatComment[I32](pwriter, pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteComment(pwriter: NullablePointer[Xmltextwriter], pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteComment[I32](pwriter, pcontent.cstring()) tmpvar fun xmlTextWriterStartElement(pwriter: NullablePointer[Xmltextwriter], pname: String): I32 => var tmpvar: I32 = @xmlTextWriterStartElement[I32](pwriter, pname.cstring()) tmpvar fun xmlTextWriterStartElementNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String): I32 => var tmpvar: I32 = @xmlTextWriterStartElementNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring()) tmpvar fun xmlTextWriterEndElement(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndElement[I32](pwriter) tmpvar fun xmlTextWriterFullEndElement(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterFullEndElement[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatElement(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatElement[I32](pwriter, pname.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatElement(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatElement[I32](pwriter, pname.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteElement(pwriter: NullablePointer[Xmltextwriter], pname: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteElement[I32](pwriter, pname.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterWriteFormatElementNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatElementNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatElementNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatElementNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteElementNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteElementNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterWriteFormatRaw(pwriter: NullablePointer[Xmltextwriter], pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatRaw[I32](pwriter, pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatRaw(pwriter: NullablePointer[Xmltextwriter], pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatRaw[I32](pwriter, pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteRawLen(pwriter: NullablePointer[Xmltextwriter], pcontent: String, plen: I32): I32 => var tmpvar: I32 = @xmlTextWriterWriteRawLen[I32](pwriter, pcontent.cstring(), plen) tmpvar fun xmlTextWriterWriteRaw(pwriter: NullablePointer[Xmltextwriter], pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteRaw[I32](pwriter, pcontent.cstring()) tmpvar fun xmlTextWriterWriteFormatString(pwriter: NullablePointer[Xmltextwriter], pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatString[I32](pwriter, pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatString(pwriter: NullablePointer[Xmltextwriter], pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatString[I32](pwriter, pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteString(pwriter: NullablePointer[Xmltextwriter], pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteString[I32](pwriter, pcontent.cstring()) tmpvar fun xmlTextWriterWriteBase64(pwriter: NullablePointer[Xmltextwriter], pdata: String, pstart: I32, plen: I32): I32 => var tmpvar: I32 = @xmlTextWriterWriteBase64[I32](pwriter, pdata.cstring(), pstart, plen) tmpvar fun xmlTextWriterWriteBinHex(pwriter: NullablePointer[Xmltextwriter], pdata: String, pstart: I32, plen: I32): I32 => var tmpvar: I32 = @xmlTextWriterWriteBinHex[I32](pwriter, pdata.cstring(), pstart, plen) tmpvar fun xmlTextWriterStartAttribute(pwriter: NullablePointer[Xmltextwriter], pname: String): I32 => var tmpvar: I32 = @xmlTextWriterStartAttribute[I32](pwriter, pname.cstring()) tmpvar fun xmlTextWriterStartAttributeNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String): I32 => var tmpvar: I32 = @xmlTextWriterStartAttributeNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring()) tmpvar fun xmlTextWriterEndAttribute(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndAttribute[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatAttribute(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatAttribute[I32](pwriter, pname.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatAttribute(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatAttribute[I32](pwriter, pname.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteAttribute(pwriter: NullablePointer[Xmltextwriter], pname: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteAttribute[I32](pwriter, pname.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterWriteFormatAttributeNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatAttributeNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatAttributeNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatAttributeNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteAttributeNS(pwriter: NullablePointer[Xmltextwriter], pprefix: String, pname: String, pnamespaceURI: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteAttributeNS[I32](pwriter, pprefix.cstring(), pname.cstring(), pnamespaceURI.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterStartPI(pwriter: NullablePointer[Xmltextwriter], ptarget: String): I32 => var tmpvar: I32 = @xmlTextWriterStartPI[I32](pwriter, ptarget.cstring()) tmpvar fun xmlTextWriterEndPI(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndPI[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatPI(pwriter: NullablePointer[Xmltextwriter], ptarget: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatPI[I32](pwriter, ptarget.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatPI(pwriter: NullablePointer[Xmltextwriter], ptarget: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatPI[I32](pwriter, ptarget.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWritePI(pwriter: NullablePointer[Xmltextwriter], ptarget: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWritePI[I32](pwriter, ptarget.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterStartCDATA(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterStartCDATA[I32](pwriter) tmpvar fun xmlTextWriterEndCDATA(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndCDATA[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatCDATA(pwriter: NullablePointer[Xmltextwriter], pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatCDATA[I32](pwriter, pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatCDATA(pwriter: NullablePointer[Xmltextwriter], pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatCDATA[I32](pwriter, pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteCDATA(pwriter: NullablePointer[Xmltextwriter], pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteCDATA[I32](pwriter, pcontent.cstring()) tmpvar fun xmlTextWriterStartDTD(pwriter: NullablePointer[Xmltextwriter], pname: String, ppubid: String, psysid: String): I32 => var tmpvar: I32 = @xmlTextWriterStartDTD[I32](pwriter, pname.cstring(), ppubid.cstring(), psysid.cstring()) tmpvar fun xmlTextWriterEndDTD(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndDTD[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatDTD(pwriter: NullablePointer[Xmltextwriter], pname: String, ppubid: String, psysid: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatDTD[I32](pwriter, pname.cstring(), ppubid.cstring(), psysid.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatDTD(pwriter: NullablePointer[Xmltextwriter], pname: String, ppubid: String, psysid: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatDTD[I32](pwriter, pname.cstring(), ppubid.cstring(), psysid.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteDTD(pwriter: NullablePointer[Xmltextwriter], pname: String, ppubid: String, psysid: String, psubset: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTD[I32](pwriter, pname.cstring(), ppubid.cstring(), psysid.cstring(), psubset.cstring()) tmpvar fun xmlTextWriterStartDTDElement(pwriter: NullablePointer[Xmltextwriter], pname: String): I32 => var tmpvar: I32 = @xmlTextWriterStartDTDElement[I32](pwriter, pname.cstring()) tmpvar fun xmlTextWriterEndDTDElement(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndDTDElement[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatDTDElement(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatDTDElement[I32](pwriter, pname.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatDTDElement(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatDTDElement[I32](pwriter, pname.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteDTDElement(pwriter: NullablePointer[Xmltextwriter], pname: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTDElement[I32](pwriter, pname.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterStartDTDAttlist(pwriter: NullablePointer[Xmltextwriter], pname: String): I32 => var tmpvar: I32 = @xmlTextWriterStartDTDAttlist[I32](pwriter, pname.cstring()) tmpvar fun xmlTextWriterEndDTDAttlist(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndDTDAttlist[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatDTDAttlist(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatDTDAttlist[I32](pwriter, pname.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatDTDAttlist(pwriter: NullablePointer[Xmltextwriter], pname: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatDTDAttlist[I32](pwriter, pname.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteDTDAttlist(pwriter: NullablePointer[Xmltextwriter], pname: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTDAttlist[I32](pwriter, pname.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterStartDTDEntity(pwriter: NullablePointer[Xmltextwriter], ppe: I32, pname: String): I32 => var tmpvar: I32 = @xmlTextWriterStartDTDEntity[I32](pwriter, ppe, pname.cstring()) tmpvar fun xmlTextWriterEndDTDEntity(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterEndDTDEntity[I32](pwriter) tmpvar fun xmlTextWriterWriteFormatDTDInternalEntity(pwriter: NullablePointer[Xmltextwriter], ppe: I32, pname: String, pformat: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteFormatDTDInternalEntity[I32](pwriter, ppe, pname.cstring(), pformat.cstring()) tmpvar fun xmlTextWriterWriteVFormatDTDInternalEntity(pwriter: NullablePointer[Xmltextwriter], ppe: I32, pname: String, pformat: String, pargptr: NullablePointer[VaListTag]): I32 => var tmpvar: I32 = @xmlTextWriterWriteVFormatDTDInternalEntity[I32](pwriter, ppe, pname.cstring(), pformat.cstring(), pargptr) tmpvar fun xmlTextWriterWriteDTDInternalEntity(pwriter: NullablePointer[Xmltextwriter], ppe: I32, pname: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTDInternalEntity[I32](pwriter, ppe, pname.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterWriteDTDExternalEntity(pwriter: NullablePointer[Xmltextwriter], ppe: I32, pname: String, ppubid: String, psysid: String, pndataid: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTDExternalEntity[I32](pwriter, ppe, pname.cstring(), ppubid.cstring(), psysid.cstring(), pndataid.cstring()) tmpvar fun xmlTextWriterWriteDTDExternalEntityContents(pwriter: NullablePointer[Xmltextwriter], ppubid: String, psysid: String, pndataid: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTDExternalEntityContents[I32](pwriter, ppubid.cstring(), psysid.cstring(), pndataid.cstring()) tmpvar fun xmlTextWriterWriteDTDEntity(pwriter: NullablePointer[Xmltextwriter], ppe: I32, pname: String, ppubid: String, psysid: String, pndataid: String, pcontent: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTDEntity[I32](pwriter, ppe, pname.cstring(), ppubid.cstring(), psysid.cstring(), pndataid.cstring(), pcontent.cstring()) tmpvar fun xmlTextWriterWriteDTDNotation(pwriter: NullablePointer[Xmltextwriter], pname: String, ppubid: String, psysid: String): I32 => var tmpvar: I32 = @xmlTextWriterWriteDTDNotation[I32](pwriter, pname.cstring(), ppubid.cstring(), psysid.cstring()) tmpvar fun xmlTextWriterSetIndent(pwriter: NullablePointer[Xmltextwriter], pindent: I32): I32 => var tmpvar: I32 = @xmlTextWriterSetIndent[I32](pwriter, pindent) tmpvar fun xmlTextWriterSetIndentString(pwriter: NullablePointer[Xmltextwriter], pstr: String): I32 => var tmpvar: I32 = @xmlTextWriterSetIndentString[I32](pwriter, pstr.cstring()) tmpvar fun xmlTextWriterSetQuoteChar(pwriter: NullablePointer[Xmltextwriter], pquotechar: U8): I32 => var tmpvar: I32 = @xmlTextWriterSetQuoteChar[I32](pwriter, pquotechar) tmpvar fun xmlTextWriterFlush(pwriter: NullablePointer[Xmltextwriter]): I32 => var tmpvar: I32 = @xmlTextWriterFlush[I32](pwriter) tmpvar fun xmlXPathPopBoolean(pctxt: NullablePointer[Xmlxpathparsercontext]): I32 => var tmpvar: I32 = @xmlXPathPopBoolean[I32](pctxt) tmpvar fun xmlXPathPopNumber(pctxt: NullablePointer[Xmlxpathparsercontext]): F64 => var tmpvar: F64 = @xmlXPathPopNumber[F64](pctxt) tmpvar fun xmlXPathPopString(pctxt: NullablePointer[Xmlxpathparsercontext]): String => var tmpvar: Pointer[U8] = @xmlXPathPopString[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathPopNodeSet(pctxt: NullablePointer[Xmlxpathparsercontext]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathPopNodeSet[NullablePointer[Xmlnodeset]](pctxt) tmpvar fun xmlXPathPopExternal(pctxt: NullablePointer[Xmlxpathparsercontext]): String => var tmpvar: Pointer[U8] = @xmlXPathPopExternal[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathRegisterVariableLookup(pctxt: NullablePointer[Xmlxpathcontext] tag, pf: Pointer[FUNCTIONPOINTER], pdata: Pointer[U8]): None => var tmpvar: None = @xmlXPathRegisterVariableLookup[None](pctxt, pf, pdata) tmpvar fun xmlXPathRegisterFuncLookup(pctxt: NullablePointer[Xmlxpathcontext] tag, pf: Pointer[FUNCTIONPOINTER], pfuncCtxt: Pointer[U8]): None => var tmpvar: None = @xmlXPathRegisterFuncLookup[None](pctxt, pf, pfuncCtxt) tmpvar fun xmlXPatherror(pctxt: NullablePointer[Xmlxpathparsercontext], pfile: String, pline: I32, pno: I32): None => var tmpvar: None = @xmlXPatherror[None](pctxt, pfile.cstring(), pline, pno) tmpvar fun xmlXPathErr(pctxt: NullablePointer[Xmlxpathparsercontext], perror: I32): None => var tmpvar: None = @xmlXPathErr[None](pctxt, perror) tmpvar fun xmlXPathDebugDumpObject(poutput: NullablePointer[IoFile], pcur: NullablePointer[Xmlxpathobject], pdepth: I32): None => var tmpvar: None = @xmlXPathDebugDumpObject[None](poutput, pcur, pdepth) tmpvar fun xmlXPathDebugDumpCompExpr(poutput: NullablePointer[IoFile], pcomp: NullablePointer[Xmlxpathcompexpr], pdepth: I32): None => var tmpvar: None = @xmlXPathDebugDumpCompExpr[None](poutput, pcomp, pdepth) tmpvar fun xmlXPathNodeSetContains(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlXPathNodeSetContains[I32](pcur, pval) tmpvar fun xmlXPathDifference(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathDifference[NullablePointer[Xmlnodeset]](pnodes1, pnodes2) tmpvar fun xmlXPathIntersection(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathIntersection[NullablePointer[Xmlnodeset]](pnodes1, pnodes2) tmpvar fun xmlXPathDistinctSorted(pnodes: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathDistinctSorted[NullablePointer[Xmlnodeset]](pnodes) tmpvar fun xmlXPathDistinct(pnodes: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathDistinct[NullablePointer[Xmlnodeset]](pnodes) tmpvar fun xmlXPathHasSameNodes(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): I32 => var tmpvar: I32 = @xmlXPathHasSameNodes[I32](pnodes1, pnodes2) tmpvar fun xmlXPathNodeLeadingSorted(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathNodeLeadingSorted[NullablePointer[Xmlnodeset]](pnodes, pnode) tmpvar fun xmlXPathLeadingSorted(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathLeadingSorted[NullablePointer[Xmlnodeset]](pnodes1, pnodes2) tmpvar fun xmlXPathNodeLeading(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathNodeLeading[NullablePointer[Xmlnodeset]](pnodes, pnode) tmpvar fun xmlXPathLeading(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathLeading[NullablePointer[Xmlnodeset]](pnodes1, pnodes2) tmpvar fun xmlXPathNodeTrailingSorted(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathNodeTrailingSorted[NullablePointer[Xmlnodeset]](pnodes, pnode) tmpvar fun xmlXPathTrailingSorted(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathTrailingSorted[NullablePointer[Xmlnodeset]](pnodes1, pnodes2) tmpvar fun xmlXPathNodeTrailing(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathNodeTrailing[NullablePointer[Xmlnodeset]](pnodes, pnode) tmpvar fun xmlXPathTrailing(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathTrailing[NullablePointer[Xmlnodeset]](pnodes1, pnodes2) tmpvar fun xmlXPathRegisterNs(pctxt: NullablePointer[Xmlxpathcontext] tag, pprefix: String, pns_uri: String): I32 => var tmpvar: I32 = @xmlXPathRegisterNs[I32](pctxt, pprefix.cstring(), pns_uri.cstring()) tmpvar fun xmlXPathNsLookup(pctxt: NullablePointer[Xmlxpathcontext] tag, pprefix: String): String => var tmpvar: Pointer[U8] = @xmlXPathNsLookup[Pointer[U8]](pctxt, pprefix.cstring()) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathRegisteredNsCleanup(pctxt: NullablePointer[Xmlxpathcontext] tag): None => var tmpvar: None = @xmlXPathRegisteredNsCleanup[None](pctxt) tmpvar fun xmlXPathRegisterFunc(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String, pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlXPathRegisterFunc[I32](pctxt, pname.cstring(), pf) tmpvar fun xmlXPathRegisterFuncNS(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String, pns_uri: String, pf: Pointer[FUNCTIONPOINTER]): I32 => var tmpvar: I32 = @xmlXPathRegisterFuncNS[I32](pctxt, pname.cstring(), pns_uri.cstring(), pf) tmpvar fun xmlXPathRegisterVariable(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String, pvalue: NullablePointer[Xmlxpathobject]): I32 => var tmpvar: I32 = @xmlXPathRegisterVariable[I32](pctxt, pname.cstring(), pvalue) tmpvar fun xmlXPathRegisterVariableNS(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String, pns_uri: String, pvalue: NullablePointer[Xmlxpathobject]): I32 => var tmpvar: I32 = @xmlXPathRegisterVariableNS[I32](pctxt, pname.cstring(), pns_uri.cstring(), pvalue) tmpvar fun xmlXPathFunctionLookup(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlXPathFunctionLookup[Pointer[FUNCTIONPOINTER]](pctxt, pname.cstring()) tmpvar fun xmlXPathFunctionLookupNS(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String, pns_uri: String): Pointer[FUNCTIONPOINTER] => var tmpvar: Pointer[FUNCTIONPOINTER] = @xmlXPathFunctionLookupNS[Pointer[FUNCTIONPOINTER]](pctxt, pname.cstring(), pns_uri.cstring()) tmpvar fun xmlXPathRegisteredFuncsCleanup(pctxt: NullablePointer[Xmlxpathcontext] tag): None => var tmpvar: None = @xmlXPathRegisteredFuncsCleanup[None](pctxt) tmpvar fun xmlXPathVariableLookup(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathVariableLookup[NullablePointer[Xmlxpathobject]](pctxt, pname.cstring()) tmpvar fun xmlXPathVariableLookupNS(pctxt: NullablePointer[Xmlxpathcontext] tag, pname: String, pns_uri: String): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathVariableLookupNS[NullablePointer[Xmlxpathobject]](pctxt, pname.cstring(), pns_uri.cstring()) tmpvar fun xmlXPathRegisteredVariablesCleanup(pctxt: NullablePointer[Xmlxpathcontext] tag): None => var tmpvar: None = @xmlXPathRegisteredVariablesCleanup[None](pctxt) tmpvar fun xmlXPathNewParserContext(pstr: String, pctxt: NullablePointer[Xmlxpathcontext] tag): NullablePointer[Xmlxpathparsercontext] => var tmpvar: NullablePointer[Xmlxpathparsercontext] = @xmlXPathNewParserContext[NullablePointer[Xmlxpathparsercontext]](pstr.cstring(), pctxt) tmpvar fun xmlXPathFreeParserContext(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathFreeParserContext[None](pctxt) tmpvar fun valuePop(pctxt: NullablePointer[Xmlxpathparsercontext]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @valuePop[NullablePointer[Xmlxpathobject]](pctxt) tmpvar fun valuePush(pctxt: NullablePointer[Xmlxpathparsercontext], pvalue: NullablePointer[Xmlxpathobject]): I32 => var tmpvar: I32 = @valuePush[I32](pctxt, pvalue) tmpvar fun xmlXPathNewString(pval: String): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNewString[NullablePointer[Xmlxpathobject]](pval.cstring()) tmpvar fun xmlXPathNewCString(pval: String): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNewCString[NullablePointer[Xmlxpathobject]](pval.cstring()) tmpvar fun xmlXPathWrapString(pval: String): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathWrapString[NullablePointer[Xmlxpathobject]](pval.cstring()) tmpvar fun xmlXPathWrapCString(pval: String): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathWrapCString[NullablePointer[Xmlxpathobject]](pval.cstring()) tmpvar fun xmlXPathNewFloat(pval: F64): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNewFloat[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathNewBoolean(pval: I32): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNewBoolean[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathNewNodeSet(pval: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNewNodeSet[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathNewValueTree(pval: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNewValueTree[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathNodeSetAdd(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlXPathNodeSetAdd[I32](pcur, pval) tmpvar fun xmlXPathNodeSetAddUnique(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): I32 => var tmpvar: I32 = @xmlXPathNodeSetAddUnique[I32](pcur, pval) tmpvar fun xmlXPathNodeSetAddNs(pcur: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns]): I32 => var tmpvar: I32 = @xmlXPathNodeSetAddNs[I32](pcur, pnode, pns) tmpvar fun xmlXPathNodeSetSort(pset: NullablePointer[Xmlnodeset]): None => var tmpvar: None = @xmlXPathNodeSetSort[None](pset) tmpvar fun xmlXPathRoot(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathRoot[None](pctxt) tmpvar fun xmlXPathEvalExpr(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathEvalExpr[None](pctxt) tmpvar fun xmlXPathParseName(pctxt: NullablePointer[Xmlxpathparsercontext]): String => var tmpvar: Pointer[U8] = @xmlXPathParseName[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathParseNCName(pctxt: NullablePointer[Xmlxpathparsercontext]): String => var tmpvar: Pointer[U8] = @xmlXPathParseNCName[Pointer[U8]](pctxt) let p: String iso = String.from_cstring(tmpvar).clone() consume p fun xmlXPathStringEvalNumber(pstr: String): F64 => var tmpvar: F64 = @xmlXPathStringEvalNumber[F64](pstr.cstring()) tmpvar fun xmlXPathEvaluatePredicateResult(pctxt: NullablePointer[Xmlxpathparsercontext], pres: NullablePointer[Xmlxpathobject]): I32 => var tmpvar: I32 = @xmlXPathEvaluatePredicateResult[I32](pctxt, pres) tmpvar fun xmlXPathRegisterAllFunctions(pctxt: NullablePointer[Xmlxpathcontext] tag): None => var tmpvar: None = @xmlXPathRegisterAllFunctions[None](pctxt) tmpvar fun xmlXPathNodeSetMerge(pval1: NullablePointer[Xmlnodeset], pval2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => var tmpvar: NullablePointer[Xmlnodeset] = @xmlXPathNodeSetMerge[NullablePointer[Xmlnodeset]](pval1, pval2) tmpvar fun xmlXPathNodeSetDel(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): None => var tmpvar: None = @xmlXPathNodeSetDel[None](pcur, pval) tmpvar fun xmlXPathNodeSetRemove(pcur: NullablePointer[Xmlnodeset], pval: I32): None => var tmpvar: None = @xmlXPathNodeSetRemove[None](pcur, pval) tmpvar fun xmlXPathNewNodeSetList(pval: NullablePointer[Xmlnodeset]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathNewNodeSetList[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathWrapNodeSet(pval: NullablePointer[Xmlnodeset]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathWrapNodeSet[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathWrapExternal(pval: Pointer[U8]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPathWrapExternal[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPathEqualValues(pctxt: NullablePointer[Xmlxpathparsercontext]): I32 => var tmpvar: I32 = @xmlXPathEqualValues[I32](pctxt) tmpvar fun xmlXPathNotEqualValues(pctxt: NullablePointer[Xmlxpathparsercontext]): I32 => var tmpvar: I32 = @xmlXPathNotEqualValues[I32](pctxt) tmpvar fun xmlXPathCompareValues(pctxt: NullablePointer[Xmlxpathparsercontext], pinf: I32, pstrict: I32): I32 => var tmpvar: I32 = @xmlXPathCompareValues[I32](pctxt, pinf, pstrict) tmpvar fun xmlXPathValueFlipSign(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathValueFlipSign[None](pctxt) tmpvar fun xmlXPathAddValues(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathAddValues[None](pctxt) tmpvar fun xmlXPathSubValues(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathSubValues[None](pctxt) tmpvar fun xmlXPathMultValues(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathMultValues[None](pctxt) tmpvar fun xmlXPathDivValues(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathDivValues[None](pctxt) tmpvar fun xmlXPathModValues(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPathModValues[None](pctxt) tmpvar fun xmlXPathIsNodeType(pname: String): I32 => var tmpvar: I32 = @xmlXPathIsNodeType[I32](pname.cstring()) tmpvar fun xmlXPathNextSelf(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextSelf[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextChild(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextChild[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextDescendant(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextDescendant[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextDescendantOrSelf(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextDescendantOrSelf[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextParent(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextParent[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextAncestorOrSelf(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextAncestorOrSelf[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextFollowingSibling(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextFollowingSibling[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextFollowing(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextFollowing[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextNamespace(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextNamespace[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextAttribute(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextAttribute[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextPreceding(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextPreceding[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextAncestor(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextAncestor[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathNextPrecedingSibling(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPathNextPrecedingSibling[NullablePointer[Xmlnode]](pctxt, pcur) tmpvar fun xmlXPathLastFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathLastFunction[None](pctxt, pnargs) tmpvar fun xmlXPathPositionFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathPositionFunction[None](pctxt, pnargs) tmpvar fun xmlXPathCountFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathCountFunction[None](pctxt, pnargs) tmpvar fun xmlXPathIdFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathIdFunction[None](pctxt, pnargs) tmpvar fun xmlXPathLocalNameFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathLocalNameFunction[None](pctxt, pnargs) tmpvar fun xmlXPathNamespaceURIFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathNamespaceURIFunction[None](pctxt, pnargs) tmpvar fun xmlXPathStringFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathStringFunction[None](pctxt, pnargs) tmpvar fun xmlXPathStringLengthFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathStringLengthFunction[None](pctxt, pnargs) tmpvar fun xmlXPathConcatFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathConcatFunction[None](pctxt, pnargs) tmpvar fun xmlXPathContainsFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathContainsFunction[None](pctxt, pnargs) tmpvar fun xmlXPathStartsWithFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathStartsWithFunction[None](pctxt, pnargs) tmpvar fun xmlXPathSubstringFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathSubstringFunction[None](pctxt, pnargs) tmpvar fun xmlXPathSubstringBeforeFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathSubstringBeforeFunction[None](pctxt, pnargs) tmpvar fun xmlXPathSubstringAfterFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathSubstringAfterFunction[None](pctxt, pnargs) tmpvar fun xmlXPathNormalizeFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathNormalizeFunction[None](pctxt, pnargs) tmpvar fun xmlXPathTranslateFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathTranslateFunction[None](pctxt, pnargs) tmpvar fun xmlXPathNotFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathNotFunction[None](pctxt, pnargs) tmpvar fun xmlXPathTrueFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathTrueFunction[None](pctxt, pnargs) tmpvar fun xmlXPathFalseFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathFalseFunction[None](pctxt, pnargs) tmpvar fun xmlXPathLangFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathLangFunction[None](pctxt, pnargs) tmpvar fun xmlXPathNumberFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathNumberFunction[None](pctxt, pnargs) tmpvar fun xmlXPathSumFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathSumFunction[None](pctxt, pnargs) tmpvar fun xmlXPathFloorFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathFloorFunction[None](pctxt, pnargs) tmpvar fun xmlXPathCeilingFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathCeilingFunction[None](pctxt, pnargs) tmpvar fun xmlXPathRoundFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathRoundFunction[None](pctxt, pnargs) tmpvar fun xmlXPathBooleanFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPathBooleanFunction[None](pctxt, pnargs) tmpvar fun xmlXPathNodeSetFreeNs(pns: NullablePointer[Xmlns]): None => var tmpvar: None = @xmlXPathNodeSetFreeNs[None](pns) tmpvar fun xmlXPtrLocationSetCreate(pval: NullablePointer[Xmlxpathobject]): NullablePointer[Xmllocationset] => var tmpvar: NullablePointer[Xmllocationset] = @xmlXPtrLocationSetCreate[NullablePointer[Xmllocationset]](pval) tmpvar fun xmlXPtrFreeLocationSet(pobj: NullablePointer[Xmllocationset]): None => var tmpvar: None = @xmlXPtrFreeLocationSet[None](pobj) tmpvar fun xmlXPtrLocationSetMerge(pval1: NullablePointer[Xmllocationset], pval2: NullablePointer[Xmllocationset]): NullablePointer[Xmllocationset] => var tmpvar: NullablePointer[Xmllocationset] = @xmlXPtrLocationSetMerge[NullablePointer[Xmllocationset]](pval1, pval2) tmpvar fun xmlXPtrNewRange(pstart: NullablePointer[Xmlnode], pstartindex: I32, pend: NullablePointer[Xmlnode], pendindex: I32): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewRange[NullablePointer[Xmlxpathobject]](pstart, pstartindex, pend, pendindex) tmpvar fun xmlXPtrNewRangePoints(pstart: NullablePointer[Xmlxpathobject], pend: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewRangePoints[NullablePointer[Xmlxpathobject]](pstart, pend) tmpvar fun xmlXPtrNewRangeNodePoint(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewRangeNodePoint[NullablePointer[Xmlxpathobject]](pstart, pend) tmpvar fun xmlXPtrNewRangePointNode(pstart: NullablePointer[Xmlxpathobject], pend: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewRangePointNode[NullablePointer[Xmlxpathobject]](pstart, pend) tmpvar fun xmlXPtrNewRangeNodes(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewRangeNodes[NullablePointer[Xmlxpathobject]](pstart, pend) tmpvar fun xmlXPtrNewLocationSetNodes(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewLocationSetNodes[NullablePointer[Xmlxpathobject]](pstart, pend) tmpvar fun xmlXPtrNewLocationSetNodeSet(pset: NullablePointer[Xmlnodeset]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewLocationSetNodeSet[NullablePointer[Xmlxpathobject]](pset) tmpvar fun xmlXPtrNewRangeNodeObject(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewRangeNodeObject[NullablePointer[Xmlxpathobject]](pstart, pend) tmpvar fun xmlXPtrNewCollapsedRange(pstart: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrNewCollapsedRange[NullablePointer[Xmlxpathobject]](pstart) tmpvar fun xmlXPtrLocationSetAdd(pcur: NullablePointer[Xmllocationset], pval: NullablePointer[Xmlxpathobject]): None => var tmpvar: None = @xmlXPtrLocationSetAdd[None](pcur, pval) tmpvar fun xmlXPtrWrapLocationSet(pval: NullablePointer[Xmllocationset]): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrWrapLocationSet[NullablePointer[Xmlxpathobject]](pval) tmpvar fun xmlXPtrLocationSetDel(pcur: NullablePointer[Xmllocationset], pval: NullablePointer[Xmlxpathobject]): None => var tmpvar: None = @xmlXPtrLocationSetDel[None](pcur, pval) tmpvar fun xmlXPtrLocationSetRemove(pcur: NullablePointer[Xmllocationset], pval: I32): None => var tmpvar: None = @xmlXPtrLocationSetRemove[None](pcur, pval) tmpvar fun xmlXPtrNewContext(pdoc: NullablePointer[Xmldoc] tag, phere: NullablePointer[Xmlnode], porigin: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathcontext] => var tmpvar: NullablePointer[Xmlxpathcontext] = @xmlXPtrNewContext[NullablePointer[Xmlxpathcontext]](pdoc, phere, porigin) tmpvar fun xmlXPtrEval(pstr: String, pctx: NullablePointer[Xmlxpathcontext] tag): NullablePointer[Xmlxpathobject] => var tmpvar: NullablePointer[Xmlxpathobject] = @xmlXPtrEval[NullablePointer[Xmlxpathobject]](pstr.cstring(), pctx) tmpvar fun xmlXPtrRangeToFunction(pctxt: NullablePointer[Xmlxpathparsercontext], pnargs: I32): None => var tmpvar: None = @xmlXPtrRangeToFunction[None](pctxt, pnargs) tmpvar fun xmlXPtrBuildNodeList(pobj: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlnode] => var tmpvar: NullablePointer[Xmlnode] = @xmlXPtrBuildNodeList[NullablePointer[Xmlnode]](pobj) tmpvar fun xmlXPtrEvalRangePredicate(pctxt: NullablePointer[Xmlxpathparsercontext]): None => var tmpvar: None = @xmlXPtrEvalRangePredicate[None](pctxt) tmpvar","title":"functions.pony"},{"location":"src/pony-libxml2/structs/","text":"primitive FUNCTIONPOINTER struct IoFile struct VaListTag struct Xmlparserinputbuffer var pcontext: Pointer[U8] = Pointer[U8] // offset: 0 var preadcallback: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var pclosecallback: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 var pencoder: NullablePointer[Xmlcharencodinghandler] = NullablePointer[Xmlcharencodinghandler].none() // offset: 192 var pbuffer: NullablePointer[Xmlbuf] = NullablePointer[Xmlbuf].none() // offset: 256 var praw: NullablePointer[Xmlbuf] = NullablePointer[Xmlbuf].none() // offset: 320 var pcompressed: I32 = I32(0) // offset: 384 var perror: I32 = I32(0) // offset: 416 var prawconsumed: U64 = U64(0) // offset: 448 struct Xmloutputbuffer var pcontext: Pointer[U8] = Pointer[U8] // offset: 0 var pwritecallback: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var pclosecallback: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 var pencoder: NullablePointer[Xmlcharencodinghandler] = NullablePointer[Xmlcharencodinghandler].none() // offset: 192 var pbuffer: NullablePointer[Xmlbuf] = NullablePointer[Xmlbuf].none() // offset: 256 var pconv: NullablePointer[Xmlbuf] = NullablePointer[Xmlbuf].none() // offset: 320 var pwritten: I32 = I32(0) // offset: 384 var perror: I32 = I32(0) // offset: 416 struct Xmlbuffer var pcontent: Pointer[U8] tag = Pointer[U8] // offset: 0 var puse: U32 = U32(0) // offset: 64 var psize: U32 = U32(0) // offset: 96 var palloc: I32 = I32(0) // offset: 128 var pcontentIO: Pointer[U8] tag = Pointer[U8] // offset: 192 struct Xmlbuf struct Xmlnotation var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var pPublicID: Pointer[U8] tag = Pointer[U8] // offset: 64 var pSystemID: Pointer[U8] tag = Pointer[U8] // offset: 128 struct Xmlenumeration var pnext: NullablePointer[Xmlenumeration] = NullablePointer[Xmlenumeration].none() // offset: 0 var pname: Pointer[U8] tag = Pointer[U8] // offset: 64 struct Xmlattribute var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pchildren: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var plast: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 256 var pparent: NullablePointer[Xmldtd] = NullablePointer[Xmldtd].none() // offset: 320 var pnext: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 384 var pprev: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 448 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 512 var pnexth: NullablePointer[Xmlattribute] = NullablePointer[Xmlattribute].none() // offset: 576 var patype: I32 = I32(0) // offset: 640 var pdef: I32 = I32(0) // offset: 672 var pdefaultValue: Pointer[U8] tag = Pointer[U8] // offset: 704 var ptree: NullablePointer[Xmlenumeration] = NullablePointer[Xmlenumeration].none() // offset: 768 var pprefix: Pointer[U8] tag = Pointer[U8] // offset: 832 var pelem: Pointer[U8] tag = Pointer[U8] // offset: 896 struct Xmlelementcontent var ptype: I32 = I32(0) // offset: 0 var pocur: I32 = I32(0) // offset: 32 var pname: Pointer[U8] tag = Pointer[U8] // offset: 64 var pc1: NullablePointer[Xmlelementcontent] = NullablePointer[Xmlelementcontent].none() // offset: 128 var pc2: NullablePointer[Xmlelementcontent] = NullablePointer[Xmlelementcontent].none() // offset: 192 var pparent: NullablePointer[Xmlelementcontent] = NullablePointer[Xmlelementcontent].none() // offset: 256 var pprefix: Pointer[U8] tag = Pointer[U8] // offset: 320 struct Xmlelement var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pchildren: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var plast: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 256 var pparent: NullablePointer[Xmldtd] = NullablePointer[Xmldtd].none() // offset: 320 var pnext: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 384 var pprev: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 448 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 512 var petype: I32 = I32(0) // offset: 576 var pcontent: NullablePointer[Xmlelementcontent] = NullablePointer[Xmlelementcontent].none() // offset: 640 var pattributes: NullablePointer[Xmlattribute] = NullablePointer[Xmlattribute].none() // offset: 704 var pprefix: Pointer[U8] tag = Pointer[U8] // offset: 768 var pcontModel: NullablePointer[Xmlregexp] = NullablePointer[Xmlregexp].none() // offset: 832 struct Xmlns var pnext: NullablePointer[Xmlns] = NullablePointer[Xmlns].none() // offset: 0 var ptype: I32 = I32(0) // offset: 64 var phref: Pointer[U8] tag = Pointer[U8] // offset: 128 var pprefix: Pointer[U8] tag = Pointer[U8] // offset: 192 var p_private: Pointer[U8] = Pointer[U8] // offset: 256 var pcontext: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 320 struct Xmldtd var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pchildren: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var plast: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 256 var pparent: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 320 var pnext: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 384 var pprev: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 448 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 512 var pnotations: Pointer[U8] = Pointer[U8] // offset: 576 var pelements: Pointer[U8] = Pointer[U8] // offset: 640 var pattributes: Pointer[U8] = Pointer[U8] // offset: 704 var pentities: Pointer[U8] = Pointer[U8] // offset: 768 var pExternalID: Pointer[U8] tag = Pointer[U8] // offset: 832 var pSystemID: Pointer[U8] tag = Pointer[U8] // offset: 896 var ppentities: Pointer[U8] = Pointer[U8] // offset: 960 struct Xmlattr var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pchildren: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var plast: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 256 var pparent: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 320 var pnext: NullablePointer[Xmlattr] = NullablePointer[Xmlattr].none() // offset: 384 var pprev: NullablePointer[Xmlattr] = NullablePointer[Xmlattr].none() // offset: 448 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 512 var pns: NullablePointer[Xmlns] = NullablePointer[Xmlns].none() // offset: 576 var patype: I32 = I32(0) // offset: 640 var ppsvi: Pointer[U8] = Pointer[U8] // offset: 704 struct Xmlid var pnext: NullablePointer[Xmlid] = NullablePointer[Xmlid].none() // offset: 0 var pvalue: Pointer[U8] tag = Pointer[U8] // offset: 64 var pattr: NullablePointer[Xmlattr] = NullablePointer[Xmlattr].none() // offset: 128 var pname: Pointer[U8] tag = Pointer[U8] // offset: 192 var plineno: I32 = I32(0) // offset: 256 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 320 struct Xmlref var pnext: NullablePointer[Xmlref] = NullablePointer[Xmlref].none() // offset: 0 var pvalue: Pointer[U8] tag = Pointer[U8] // offset: 64 var pattr: NullablePointer[Xmlattr] = NullablePointer[Xmlattr].none() // offset: 128 var pname: Pointer[U8] tag = Pointer[U8] // offset: 192 var plineno: I32 = I32(0) // offset: 256 struct Xmlnode var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pname: Pointer[U8] = Pointer[U8] // offset: 128 var pchildren: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var plast: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 256 var pparent: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 320 var pnext: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 384 var pprev: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 448 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 512 var pns: NullablePointer[Xmlns] = NullablePointer[Xmlns].none() // offset: 576 var pcontent: Pointer[U8] tag = Pointer[U8] // offset: 640 var pproperties: NullablePointer[Xmlattr] = NullablePointer[Xmlattr].none() // offset: 704 var pnsDef: NullablePointer[Xmlns] = NullablePointer[Xmlns].none() // offset: 768 var ppsvi: Pointer[U8] = Pointer[U8] // offset: 832 var pline: U16 = U16(0) // offset: 896 var pextra: U16 = U16(0) // offset: 912 struct Xmldoc var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pname: Pointer[U8] = Pointer[U8] // offset: 128 // remove tag var pchildren: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var plast: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 256 var pparent: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 320 var pnext: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 384 var pprev: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 448 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 512 var pcompression: I32 = I32(0) // offset: 576 var pstandalone: I32 = I32(0) // offset: 608 var pintSubset: NullablePointer[Xmldtd] = NullablePointer[Xmldtd].none() // offset: 640 var pextSubset: NullablePointer[Xmldtd] = NullablePointer[Xmldtd].none() // offset: 704 var poldNs: NullablePointer[Xmlns] = NullablePointer[Xmlns].none() // offset: 768 var pversion: Pointer[U8] = Pointer[U8] // offset: 832 // remove tag var pencoding: Pointer[U8] = Pointer[U8] // offset: 896 // remove tag var pids: Pointer[U8] = Pointer[U8] // offset: 960 var prefs: Pointer[U8] = Pointer[U8] // offset: 1024 var pURL: Pointer[U8] = Pointer[U8] // offset: 1088 // remove tag var pcharset: I32 = I32(0) // offset: 1152 var pdict: NullablePointer[Xmldict] = NullablePointer[Xmldict].none() // offset: 1216 var ppsvi: Pointer[U8] = Pointer[U8] // offset: 1280 var pparseFlags: I32 = I32(0) // offset: 1344 var pproperties: I32 = I32(0) // offset: 1376 struct Xmldomwrapctxt var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pnamespaceMap: Pointer[U8] = Pointer[U8] // offset: 128 var pgetNsForNodeFunc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 192 struct Xmlparserinput var pbuf: NullablePointer[Xmlparserinputbuffer] = NullablePointer[Xmlparserinputbuffer].none() // offset: 0 var pfilename: Pointer[U8] tag = Pointer[U8] // offset: 64 var pdirectory: Pointer[U8] tag = Pointer[U8] // offset: 128 var pbase: Pointer[U8] tag = Pointer[U8] // offset: 192 var pcur: Pointer[U8] tag = Pointer[U8] // offset: 256 var pend: Pointer[U8] tag = Pointer[U8] // offset: 320 var plength: I32 = I32(0) // offset: 384 var pline: I32 = I32(0) // offset: 416 var pcol: I32 = I32(0) // offset: 448 var pconsumed: U64 = U64(0) // offset: 512 var pfree: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 576 var pencoding: Pointer[U8] tag = Pointer[U8] // offset: 640 var pversion: Pointer[U8] tag = Pointer[U8] // offset: 704 var pstandalone: I32 = I32(0) // offset: 768 var pid: I32 = I32(0) // offset: 800 struct Xmlparserctxt var psax: NullablePointer[Xmlsaxhandler] = NullablePointer[Xmlsaxhandler].none() // offset: 0 var puserData: Pointer[U8] = Pointer[U8] // offset: 64 var pmyDoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 128 var pwellFormed: I32 = I32(0) // offset: 192 var preplaceEntities: I32 = I32(0) // offset: 224 var pversion: Pointer[U8] tag = Pointer[U8] // offset: 256 var pencoding: Pointer[U8] tag = Pointer[U8] // offset: 320 var pstandalone: I32 = I32(0) // offset: 384 var phtml: I32 = I32(0) // offset: 416 var pinput: NullablePointer[Xmlparserinput] = NullablePointer[Xmlparserinput].none() // offset: 448 var pinputNr: I32 = I32(0) // offset: 512 var pinputMax: I32 = I32(0) // offset: 544 var pinputTab: Pointer[NullablePointer[Xmlparserinput]] = Pointer[NullablePointer[Xmlparserinput]] // offset: 576 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 640 var pnodeNr: I32 = I32(0) // offset: 704 var pnodeMax: I32 = I32(0) // offset: 736 var pnodeTab: Pointer[NullablePointer[Xmlnode]] = Pointer[NullablePointer[Xmlnode]] // offset: 768 var precord_info: I32 = I32(0) // offset: 832 var pnode_seq: Xmlparsernodeinfoseq = Xmlparsernodeinfoseq // offset: 896 var perrNo: I32 = I32(0) // offset: 1088 var phasExternalSubset: I32 = I32(0) // offset: 1120 var phasPErefs: I32 = I32(0) // offset: 1152 var pexternal: I32 = I32(0) // offset: 1184 var pvalid: I32 = I32(0) // offset: 1216 var pvalidate: I32 = I32(0) // offset: 1248 var pvctxt: Xmlvalidctxt = Xmlvalidctxt // offset: 1280 var pinstate: I32 = I32(0) // offset: 2176 var ptoken: I32 = I32(0) // offset: 2208 var pdirectory: Pointer[U8] tag = Pointer[U8] // offset: 2240 var pname: Pointer[U8] tag = Pointer[U8] // offset: 2304 var pnameNr: I32 = I32(0) // offset: 2368 var pnameMax: I32 = I32(0) // offset: 2400 var pnameTab: Pointer[Pointer[U8] tag] = Pointer[Pointer[U8] tag] // offset: 2432 var pnbChars: I64 = I64(0) // offset: 2496 var pcheckIndex: I64 = I64(0) // offset: 2560 var pkeepBlanks: I32 = I32(0) // offset: 2624 var pdisableSAX: I32 = I32(0) // offset: 2656 var pinSubset: I32 = I32(0) // offset: 2688 var pintSubName: Pointer[U8] tag = Pointer[U8] // offset: 2752 var pextSubURI: Pointer[U8] tag = Pointer[U8] // offset: 2816 var pextSubSystem: Pointer[U8] tag = Pointer[U8] // offset: 2880 var pspace: Pointer[I32] = Pointer[I32] // offset: 2944 var pspaceNr: I32 = I32(0) // offset: 3008 var pspaceMax: I32 = I32(0) // offset: 3040 var pspaceTab: Pointer[I32] = Pointer[I32] // offset: 3072 var pdepth: I32 = I32(0) // offset: 3136 var pentity: NullablePointer[Xmlparserinput] = NullablePointer[Xmlparserinput].none() // offset: 3200 var pcharset: I32 = I32(0) // offset: 3264 var pnodelen: I32 = I32(0) // offset: 3296 var pnodemem: I32 = I32(0) // offset: 3328 var ppedantic: I32 = I32(0) // offset: 3360 var p_private: Pointer[U8] = Pointer[U8] // offset: 3392 var ploadsubset: I32 = I32(0) // offset: 3456 var plinenumbers: I32 = I32(0) // offset: 3488 var pcatalogs: Pointer[U8] = Pointer[U8] // offset: 3520 var precovery: I32 = I32(0) // offset: 3584 var pprogressive: I32 = I32(0) // offset: 3616 var pdict: NullablePointer[Xmldict] = NullablePointer[Xmldict].none() // offset: 3648 var patts: Pointer[Pointer[U8] tag] = Pointer[Pointer[U8] tag] // offset: 3712 var pmaxatts: I32 = I32(0) // offset: 3776 var pdocdict: I32 = I32(0) // offset: 3808 var pstr_xml: Pointer[U8] tag = Pointer[U8] // offset: 3840 var pstr_xmlns: Pointer[U8] tag = Pointer[U8] // offset: 3904 var pstr_xml_ns: Pointer[U8] tag = Pointer[U8] // offset: 3968 var psax2: I32 = I32(0) // offset: 4032 var pnsNr: I32 = I32(0) // offset: 4064 var pnsMax: I32 = I32(0) // offset: 4096 var pnsTab: Pointer[Pointer[U8] tag] = Pointer[Pointer[U8] tag] // offset: 4160 var pattallocs: Pointer[I32] = Pointer[I32] // offset: 4224 var ppushTab: Pointer[Pointer[U8]] = Pointer[Pointer[U8]] // offset: 4288 var pattsDefault: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 4352 var pattsSpecial: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 4416 var pnsWellFormed: I32 = I32(0) // offset: 4480 var poptions: I32 = I32(0) // offset: 4512 var pdictNames: I32 = I32(0) // offset: 4544 var pfreeElemsNr: I32 = I32(0) // offset: 4576 var pfreeElems: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 4608 var pfreeAttrsNr: I32 = I32(0) // offset: 4672 var pfreeAttrs: NullablePointer[Xmlattr] = NullablePointer[Xmlattr].none() // offset: 4736 var plastError: Xmlerror = Xmlerror // offset: 4800 var pparseMode: I32 = I32(0) // offset: 5504 var pnbentities: U64 = U64(0) // offset: 5568 var psizeentities: U64 = U64(0) // offset: 5632 var pnodeInfo: NullablePointer[Xmlparsernodeinfo] = NullablePointer[Xmlparsernodeinfo].none() // offset: 5696 var pnodeInfoNr: I32 = I32(0) // offset: 5760 var pnodeInfoMax: I32 = I32(0) // offset: 5792 var pnodeInfoTab: NullablePointer[Xmlparsernodeinfo] = NullablePointer[Xmlparsernodeinfo].none() // offset: 5824 var pinput_id: I32 = I32(0) // offset: 5888 var psizeentcopy: U64 = U64(0) // offset: 5952 struct Xmlsaxlocator var pgetPublicId: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 0 var pgetSystemId: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var pgetLineNumber: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 var pgetColumnNumber: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 192 struct Xmlsaxhandler var pinternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 0 var pisStandalone: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var phasInternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 var phasExternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 192 var presolveEntity: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 256 var pgetEntity: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 320 var pentityDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 384 var pnotationDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 448 var pattributeDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 512 var pelementDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 576 var punparsedEntityDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 640 var psetDocumentLocator: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 704 var pstartDocument: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 768 var pendDocument: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 832 var pstartElement: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 896 var pendElement: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 960 var preference: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1024 var pcharacters: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1088 var pignorableWhitespace: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1152 var pprocessingInstruction: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1216 var pcomment: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1280 var pwarning: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1344 var perror: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1408 var pfatalError: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1472 var pgetParameterEntity: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1536 var pcdataBlock: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1600 var pexternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1664 var pinitialized: U32 = U32(0) // offset: 1728 var p_private: Pointer[U8] = Pointer[U8] // offset: 1792 var pstartElementNs: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1856 var pendElementNs: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1920 var pserror: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1984 struct Xmlparsernodeinfo var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 0 var pbegin_pos: U64 = U64(0) // offset: 64 var pbegin_line: U64 = U64(0) // offset: 128 var pend_pos: U64 = U64(0) // offset: 192 var pend_line: U64 = U64(0) // offset: 256 struct Xmlparsernodeinfoseq var pmaximum: U64 = U64(0) // offset: 0 var plength: U64 = U64(0) // offset: 64 var pbuffer: NullablePointer[Xmlparsernodeinfo] = NullablePointer[Xmlparsernodeinfo].none() // offset: 128 struct Xmlsaxhandlerv1 var pinternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 0 var pisStandalone: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var phasInternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 var phasExternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 192 var presolveEntity: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 256 var pgetEntity: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 320 var pentityDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 384 var pnotationDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 448 var pattributeDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 512 var pelementDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 576 var punparsedEntityDecl: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 640 var psetDocumentLocator: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 704 var pstartDocument: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 768 var pendDocument: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 832 var pstartElement: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 896 var pendElement: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 960 var preference: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1024 var pcharacters: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1088 var pignorableWhitespace: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1152 var pprocessingInstruction: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1216 var pcomment: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1280 var pwarning: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1344 var perror: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1408 var pfatalError: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1472 var pgetParameterEntity: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1536 var pcdataBlock: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1600 var pexternalSubset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1664 var pinitialized: U32 = U32(0) // offset: 1728 struct Xmlentity var p_private: Pointer[U8] = Pointer[U8] // offset: 0 var ptype: I32 = I32(0) // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pchildren: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var plast: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 256 var pparent: NullablePointer[Xmldtd] = NullablePointer[Xmldtd].none() // offset: 320 var pnext: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 384 var pprev: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 448 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 512 var porig: Pointer[U8] tag = Pointer[U8] // offset: 576 var pcontent: Pointer[U8] tag = Pointer[U8] // offset: 640 var plength: I32 = I32(0) // offset: 704 var petype: I32 = I32(0) // offset: 736 var pExternalID: Pointer[U8] tag = Pointer[U8] // offset: 768 var pSystemID: Pointer[U8] tag = Pointer[U8] // offset: 832 var pnexte: NullablePointer[Xmlentity] = NullablePointer[Xmlentity].none() // offset: 896 var pURI: Pointer[U8] tag = Pointer[U8] // offset: 960 var powner: I32 = I32(0) // offset: 1024 var pchecked: I32 = I32(0) // offset: 1056 struct Xmlregexp struct Xmlregexecctxt struct Xmldict struct Xmlmutex struct Xmlrmutex struct Xmlhashtable struct Xmlerror var pdomain: I32 = I32(0) // offset: 0 var pcode: I32 = I32(0) // offset: 32 var pmessage: Pointer[U8] tag = Pointer[U8] // offset: 64 var plevel: I32 = I32(0) // offset: 128 var pfile: Pointer[U8] tag = Pointer[U8] // offset: 192 var pline: I32 = I32(0) // offset: 256 var pstr1: Pointer[U8] tag = Pointer[U8] // offset: 320 var pstr2: Pointer[U8] tag = Pointer[U8] // offset: 384 var pstr3: Pointer[U8] tag = Pointer[U8] // offset: 448 var pint1: I32 = I32(0) // offset: 512 var pint2: I32 = I32(0) // offset: 544 var pctxt: Pointer[U8] = Pointer[U8] // offset: 576 var pnode: Pointer[U8] = Pointer[U8] // offset: 640 struct Xmllink struct Xmllist struct Xmlautomata struct Xmlautomatastate struct Xmlvalidstate struct Xmlvalidctxt var puserData: Pointer[U8] = Pointer[U8] // offset: 0 var perror: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var pwarning: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var pnodeNr: I32 = I32(0) // offset: 256 var pnodeMax: I32 = I32(0) // offset: 288 var pnodeTab: Pointer[NullablePointer[Xmlnode]] = Pointer[NullablePointer[Xmlnode]] // offset: 320 var pfinishDtd: U32 = U32(0) // offset: 384 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 448 var pvalid: I32 = I32(0) // offset: 512 var pvstate: NullablePointer[Xmlvalidstate] = NullablePointer[Xmlvalidstate].none() // offset: 576 var pvstateNr: I32 = I32(0) // offset: 640 var pvstateMax: I32 = I32(0) // offset: 672 var pvstateTab: NullablePointer[Xmlvalidstate] = NullablePointer[Xmlvalidstate].none() // offset: 704 var pam: NullablePointer[Xmlautomata] = NullablePointer[Xmlautomata].none() // offset: 768 var pstate: NullablePointer[Xmlautomatastate] = NullablePointer[Xmlautomatastate].none() // offset: 832 struct Xmlcharencodinghandler var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var pinput: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var poutput: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 var piconv_in: Pointer[U8] = Pointer[U8] // offset: 192 var piconv_out: Pointer[U8] = Pointer[U8] // offset: 256 struct Xlinkhandler var psimple: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 0 var pextended: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 var pset: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 128 struct Xmlglobalstate var pxmlParserVersion: Pointer[U8] tag = Pointer[U8] // offset: 0 var pxmlDefaultSAXLocator: Xmlsaxlocator = Xmlsaxlocator // offset: 64 var pxmlDefaultSAXHandler: Xmlsaxhandlerv1 = Xmlsaxhandlerv1 // offset: 320 var pdocbDefaultSAXHandler: Xmlsaxhandlerv1 = Xmlsaxhandlerv1 // offset: 2112 var phtmlDefaultSAXHandler: Xmlsaxhandlerv1 = Xmlsaxhandlerv1 // offset: 3904 var pxmlFree: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 5696 var pxmlMalloc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 5760 var pxmlMemStrdup: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 5824 var pxmlRealloc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 5888 var pxmlGenericError: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 5952 var pxmlStructuredError: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 6016 var pxmlGenericErrorContext: Pointer[U8] = Pointer[U8] // offset: 6080 var poldXMLWDcompatibility: I32 = I32(0) // offset: 6144 var pxmlBufferAllocScheme: I32 = I32(0) // offset: 6176 var pxmlDefaultBufferSize: I32 = I32(0) // offset: 6208 var pxmlSubstituteEntitiesDefaultValue: I32 = I32(0) // offset: 6240 var pxmlDoValidityCheckingDefaultValue: I32 = I32(0) // offset: 6272 var pxmlGetWarningsDefaultValue: I32 = I32(0) // offset: 6304 var pxmlKeepBlanksDefaultValue: I32 = I32(0) // offset: 6336 var pxmlLineNumbersDefaultValue: I32 = I32(0) // offset: 6368 var pxmlLoadExtDtdDefaultValue: I32 = I32(0) // offset: 6400 var pxmlParserDebugEntities: I32 = I32(0) // offset: 6432 var pxmlPedanticParserDefaultValue: I32 = I32(0) // offset: 6464 var pxmlSaveNoEmptyTags: I32 = I32(0) // offset: 6496 var pxmlIndentTreeOutput: I32 = I32(0) // offset: 6528 var pxmlTreeIndentString: Pointer[U8] tag = Pointer[U8] // offset: 6592 var pxmlRegisterNodeDefaultValue: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 6656 var pxmlDeregisterNodeDefaultValue: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 6720 var pxmlMallocAtomic: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 6784 var pxmlLastError: Xmlerror = Xmlerror // offset: 6848 var pxmlParserInputBufferCreateFilenameValue: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 7552 var pxmlOutputBufferCreateFilenameValue: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 7616 var pxmlStructuredErrorContext: Pointer[U8] = Pointer[U8] // offset: 7680 struct Xmlcatalog struct Xmlchsrange var plow: U16 = U16(0) // offset: 0 var phigh: U16 = U16(0) // offset: 16 struct Xmlchlrange var plow: U32 = U32(0) // offset: 0 var phigh: U32 = U32(0) // offset: 32 struct Xmlchrangegroup var pnbShortRange: I32 = I32(0) // offset: 0 var pnbLongRange: I32 = I32(0) // offset: 32 var pshortRange: NullablePointer[Xmlchsrange] = NullablePointer[Xmlchsrange].none() // offset: 64 var plongRange: NullablePointer[Xmlchlrange] = NullablePointer[Xmlchlrange].none() // offset: 128 struct Xmlxpathcontext var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 0 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 64 var pnb_variables_unused: I32 = I32(0) // offset: 128 var pmax_variables_unused: I32 = I32(0) // offset: 160 var pvarHash: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 192 var pnb_types: I32 = I32(0) // offset: 256 var pmax_types: I32 = I32(0) // offset: 288 var ptypes: NullablePointer[Xmlxpathtype] = NullablePointer[Xmlxpathtype].none() // offset: 320 var pnb_funcs_unused: I32 = I32(0) // offset: 384 var pmax_funcs_unused: I32 = I32(0) // offset: 416 var pfuncHash: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 448 var pnb_axis: I32 = I32(0) // offset: 512 var pmax_axis: I32 = I32(0) // offset: 544 var paxis: NullablePointer[Xmlxpathaxis] = NullablePointer[Xmlxpathaxis].none() // offset: 576 var pnamespaces: Pointer[NullablePointer[Xmlns]] = Pointer[NullablePointer[Xmlns]] // offset: 640 var pnsNr: I32 = I32(0) // offset: 704 var puser: Pointer[U8] = Pointer[U8] // offset: 768 var pcontextSize: I32 = I32(0) // offset: 832 var pproximityPosition: I32 = I32(0) // offset: 864 var pxptr: I32 = I32(0) // offset: 896 var phere: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 960 var porigin: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 1024 var pnsHash: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 1088 var pvarLookupFunc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1152 var pvarLookupData: Pointer[U8] = Pointer[U8] // offset: 1216 var pextra: Pointer[U8] = Pointer[U8] // offset: 1280 var pfunction: Pointer[U8] tag = Pointer[U8] // offset: 1344 var pfunctionURI: Pointer[U8] tag = Pointer[U8] // offset: 1408 var pfuncLookupFunc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1472 var pfuncLookupData: Pointer[U8] = Pointer[U8] // offset: 1536 var ptmpNsList: Pointer[NullablePointer[Xmlns]] = Pointer[NullablePointer[Xmlns]] // offset: 1600 var ptmpNsNr: I32 = I32(0) // offset: 1664 var puserData: Pointer[U8] = Pointer[U8] // offset: 1728 var perror: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 1792 var plastError: Xmlerror = Xmlerror // offset: 1856 var pdebugNode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 2560 var pdict: NullablePointer[Xmldict] = NullablePointer[Xmldict].none() // offset: 2624 var pflags: I32 = I32(0) // offset: 2688 var pcache: Pointer[U8] = Pointer[U8] // offset: 2752 var popLimit: U64 = U64(0) // offset: 2816 var popCount: U64 = U64(0) // offset: 2880 var pdepth: I32 = I32(0) // offset: 2944 var pmaxDepth: I32 = I32(0) // offset: 2976 var pmaxParserDepth: I32 = I32(0) // offset: 3008 struct Xmlxpathparsercontext var pcur: Pointer[U8] tag = Pointer[U8] // offset: 0 var pbase: Pointer[U8] tag = Pointer[U8] // offset: 64 var perror: I32 = I32(0) // offset: 128 var pcontext: NullablePointer[Xmlxpathcontext] = NullablePointer[Xmlxpathcontext].none() // offset: 192 var pvalue: NullablePointer[Xmlxpathobject] = NullablePointer[Xmlxpathobject].none() // offset: 256 var pvalueNr: I32 = I32(0) // offset: 320 var pvalueMax: I32 = I32(0) // offset: 352 var pvalueTab: Pointer[NullablePointer[Xmlxpathobject]] = Pointer[NullablePointer[Xmlxpathobject]] // offset: 384 var pcomp: NullablePointer[Xmlxpathcompexpr] = NullablePointer[Xmlxpathcompexpr].none() // offset: 448 var pxptr: I32 = I32(0) // offset: 512 var pancestor: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 576 var pvalueFrame: I32 = I32(0) // offset: 640 struct Xmlnodeset var pnodeNr: I32 = I32(0) // offset: 0 var pnodeMax: I32 = I32(0) // offset: 32 var pnodeTab: Pointer[NullablePointer[Xmlnode]] = Pointer[NullablePointer[Xmlnode]] // offset: 64 struct Xmlxpathobject var ptype: I32 = I32(0) // offset: 0 var pnodesetval: NullablePointer[Xmlnodeset] = NullablePointer[Xmlnodeset].none() // offset: 64 var pboolval: I32 = I32(0) // offset: 128 var pfloatval: F64 = F64(0) // offset: 192 var pstringval: Pointer[U8] = Pointer[U8] // offset: 256 var puser: Pointer[U8] = Pointer[U8] // offset: 320 var pindex: I32 = I32(0) // offset: 384 var puser2: Pointer[U8] = Pointer[U8] // offset: 448 var pindex2: I32 = I32(0) // offset: 512 struct Xmlxpathtype var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var pfunc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 struct Xmlxpathvariable var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var pvalue: NullablePointer[Xmlxpathobject] = NullablePointer[Xmlxpathobject].none() // offset: 64 struct Xmlxpathfunct var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var pfunc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 struct Xmlxpathaxis var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var pfunc: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 64 struct Xmlxpathcompexpr struct Xmlshellctxt var pfilename: Pointer[U8] tag = Pointer[U8] // offset: 0 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 64 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 128 var ppctxt: NullablePointer[Xmlxpathcontext] = NullablePointer[Xmlxpathcontext].none() // offset: 192 var ploaded: I32 = I32(0) // offset: 256 var poutput: NullablePointer[IoFile] = NullablePointer[IoFile].none() // offset: 320 var pinput: Pointer[FUNCTIONPOINTER] = Pointer[FUNCTIONPOINTER] // offset: 384 struct Htmlelemdesc var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var pstartTag: I8 = I8(0) // offset: 64 var pendTag: I8 = I8(0) // offset: 72 var psaveEndTag: I8 = I8(0) // offset: 80 var pempty: I8 = I8(0) // offset: 88 var pdepr: I8 = I8(0) // offset: 96 var pdtd: I8 = I8(0) // offset: 104 var pisinline: I8 = I8(0) // offset: 112 var pdesc: Pointer[U8] tag = Pointer[U8] // offset: 128 var psubelts: Pointer[Pointer[U8] tag] = Pointer[Pointer[U8] tag] // offset: 192 var pdefaultsubelt: Pointer[U8] tag = Pointer[U8] // offset: 256 var pattrs_opt: Pointer[Pointer[U8] tag] = Pointer[Pointer[U8] tag] // offset: 320 var pattrs_depr: Pointer[Pointer[U8] tag] = Pointer[Pointer[U8] tag] // offset: 384 var pattrs_req: Pointer[Pointer[U8] tag] = Pointer[Pointer[U8] tag] // offset: 448 struct Htmlentitydesc var pvalue: U32 = U32(0) // offset: 0 var pname: Pointer[U8] tag = Pointer[U8] // offset: 64 var pdesc: Pointer[U8] tag = Pointer[U8] // offset: 128 struct Xmlpattern struct Xmlstreamctxt struct Xmlrelaxng struct Xmlrelaxngparserctxt struct Xmlrelaxngvalidctxt struct Xmlschemaval struct Xmlschematype var ptype: I32 = I32(0) // offset: 0 var pnext: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pid: Pointer[U8] tag = Pointer[U8] // offset: 192 var pref: Pointer[U8] tag = Pointer[U8] // offset: 256 var prefNs: Pointer[U8] tag = Pointer[U8] // offset: 320 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 384 var psubtypes: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 448 var pattributes: NullablePointer[Xmlschemaattribute] = NullablePointer[Xmlschemaattribute].none() // offset: 512 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 576 var pminOccurs: I32 = I32(0) // offset: 640 var pmaxOccurs: I32 = I32(0) // offset: 672 var pflags: I32 = I32(0) // offset: 704 var pcontentType: I32 = I32(0) // offset: 736 var pbase: Pointer[U8] tag = Pointer[U8] // offset: 768 var pbaseNs: Pointer[U8] tag = Pointer[U8] // offset: 832 var pbaseType: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 896 var pfacets: NullablePointer[Xmlschemafacet] = NullablePointer[Xmlschemafacet].none() // offset: 960 var predef: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 1024 var precurse: I32 = I32(0) // offset: 1088 var pattributeUses: Pointer[NullablePointer[Xmlschemaattributelink]] = Pointer[NullablePointer[Xmlschemaattributelink]] // offset: 1152 var pattributeWildcard: NullablePointer[Xmlschemawildcard] = NullablePointer[Xmlschemawildcard].none() // offset: 1216 var pbuiltInType: I32 = I32(0) // offset: 1280 var pmemberTypes: NullablePointer[Xmlschematypelink] = NullablePointer[Xmlschematypelink].none() // offset: 1344 var pfacetSet: NullablePointer[Xmlschemafacetlink] = NullablePointer[Xmlschemafacetlink].none() // offset: 1408 var prefPrefix: Pointer[U8] tag = Pointer[U8] // offset: 1472 var pcontentTypeDef: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 1536 var pcontModel: NullablePointer[Xmlregexp] = NullablePointer[Xmlregexp].none() // offset: 1600 var ptargetNamespace: Pointer[U8] tag = Pointer[U8] // offset: 1664 var pattrUses: Pointer[U8] = Pointer[U8] // offset: 1728 struct Xmlschemafacet var ptype: I32 = I32(0) // offset: 0 var pnext: NullablePointer[Xmlschemafacet] = NullablePointer[Xmlschemafacet].none() // offset: 64 var pvalue: Pointer[U8] tag = Pointer[U8] // offset: 128 var pid: Pointer[U8] tag = Pointer[U8] // offset: 192 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 256 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 320 var pfixed: I32 = I32(0) // offset: 384 var pwhitespace: I32 = I32(0) // offset: 416 var pval: NullablePointer[Xmlschemaval] = NullablePointer[Xmlschemaval].none() // offset: 448 var pregexp: NullablePointer[Xmlregexp] = NullablePointer[Xmlregexp].none() // offset: 512 struct Xmlschemaannot var pnext: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 0 var pcontent: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 64 struct Xmlschemaattribute var ptype: I32 = I32(0) // offset: 0 var pnext: NullablePointer[Xmlschemaattribute] = NullablePointer[Xmlschemaattribute].none() // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pid: Pointer[U8] tag = Pointer[U8] // offset: 192 var pref: Pointer[U8] tag = Pointer[U8] // offset: 256 var prefNs: Pointer[U8] tag = Pointer[U8] // offset: 320 var ptypeName: Pointer[U8] tag = Pointer[U8] // offset: 384 var ptypeNs: Pointer[U8] tag = Pointer[U8] // offset: 448 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 512 var pbase: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 576 var poccurs: I32 = I32(0) // offset: 640 var pdefValue: Pointer[U8] tag = Pointer[U8] // offset: 704 var psubtypes: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 768 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 832 var ptargetNamespace: Pointer[U8] tag = Pointer[U8] // offset: 896 var pflags: I32 = I32(0) // offset: 960 var prefPrefix: Pointer[U8] tag = Pointer[U8] // offset: 1024 var pdefVal: NullablePointer[Xmlschemaval] = NullablePointer[Xmlschemaval].none() // offset: 1088 var prefDecl: NullablePointer[Xmlschemaattribute] = NullablePointer[Xmlschemaattribute].none() // offset: 1152 struct Xmlschemaattributelink var pnext: NullablePointer[Xmlschemaattributelink] = NullablePointer[Xmlschemaattributelink].none() // offset: 0 var pattr: NullablePointer[Xmlschemaattribute] = NullablePointer[Xmlschemaattribute].none() // offset: 64 struct Xmlschemawildcardns var pnext: NullablePointer[Xmlschemawildcardns] = NullablePointer[Xmlschemawildcardns].none() // offset: 0 var pvalue: Pointer[U8] tag = Pointer[U8] // offset: 64 struct Xmlschemawildcard var ptype: I32 = I32(0) // offset: 0 var pid: Pointer[U8] tag = Pointer[U8] // offset: 64 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 128 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 192 var pminOccurs: I32 = I32(0) // offset: 256 var pmaxOccurs: I32 = I32(0) // offset: 288 var pprocessContents: I32 = I32(0) // offset: 320 var pany: I32 = I32(0) // offset: 352 var pnsSet: NullablePointer[Xmlschemawildcardns] = NullablePointer[Xmlschemawildcardns].none() // offset: 384 var pnegNsSet: NullablePointer[Xmlschemawildcardns] = NullablePointer[Xmlschemawildcardns].none() // offset: 448 var pflags: I32 = I32(0) // offset: 512 struct Xmlschemaattributegroup var ptype: I32 = I32(0) // offset: 0 var pnext: NullablePointer[Xmlschemaattribute] = NullablePointer[Xmlschemaattribute].none() // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pid: Pointer[U8] tag = Pointer[U8] // offset: 192 var pref: Pointer[U8] tag = Pointer[U8] // offset: 256 var prefNs: Pointer[U8] tag = Pointer[U8] // offset: 320 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 384 var pattributes: NullablePointer[Xmlschemaattribute] = NullablePointer[Xmlschemaattribute].none() // offset: 448 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 512 var pflags: I32 = I32(0) // offset: 576 var pattributeWildcard: NullablePointer[Xmlschemawildcard] = NullablePointer[Xmlschemawildcard].none() // offset: 640 var prefPrefix: Pointer[U8] tag = Pointer[U8] // offset: 704 var prefItem: NullablePointer[Xmlschemaattributegroup] = NullablePointer[Xmlschemaattributegroup].none() // offset: 768 var ptargetNamespace: Pointer[U8] tag = Pointer[U8] // offset: 832 var pattrUses: Pointer[U8] = Pointer[U8] // offset: 896 struct Xmlschematypelink var pnext: NullablePointer[Xmlschematypelink] = NullablePointer[Xmlschematypelink].none() // offset: 0 var ptype: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 64 struct Xmlschemafacetlink var pnext: NullablePointer[Xmlschemafacetlink] = NullablePointer[Xmlschemafacetlink].none() // offset: 0 var pfacet: NullablePointer[Xmlschemafacet] = NullablePointer[Xmlschemafacet].none() // offset: 64 struct Xmlschemaelement var ptype: I32 = I32(0) // offset: 0 var pnext: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 64 var pname: Pointer[U8] tag = Pointer[U8] // offset: 128 var pid: Pointer[U8] tag = Pointer[U8] // offset: 192 var pref: Pointer[U8] tag = Pointer[U8] // offset: 256 var prefNs: Pointer[U8] tag = Pointer[U8] // offset: 320 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 384 var psubtypes: NullablePointer[Xmlschematype] = NullablePointer[Xmlschematype].none() // offset: 448 var pattributes: NullablePointer[Xmlschemaattribute] = NullablePointer[Xmlschemaattribute].none() // offset: 512 var pnode: NullablePointer[Xmlnode] = NullablePointer[Xmlnode].none() // offset: 576 var pminOccurs: I32 = I32(0) // offset: 640 var pmaxOccurs: I32 = I32(0) // offset: 672 var pflags: I32 = I32(0) // offset: 704 var ptargetNamespace: Pointer[U8] tag = Pointer[U8] // offset: 768 var pnamedType: Pointer[U8] tag = Pointer[U8] // offset: 832 var pnamedTypeNs: Pointer[U8] tag = Pointer[U8] // offset: 896 var psubstGroup: Pointer[U8] tag = Pointer[U8] // offset: 960 var psubstGroupNs: Pointer[U8] tag = Pointer[U8] // offset: 1024 var pscope: Pointer[U8] tag = Pointer[U8] // offset: 1088 var pvalue: Pointer[U8] tag = Pointer[U8] // offset: 1152 var prefDecl: NullablePointer[Xmlschemaelement] = NullablePointer[Xmlschemaelement].none() // offset: 1216 var pcontModel: NullablePointer[Xmlregexp] = NullablePointer[Xmlregexp].none() // offset: 1280 var pcontentType: I32 = I32(0) // offset: 1344 var prefPrefix: Pointer[U8] tag = Pointer[U8] // offset: 1408 var pdefVal: NullablePointer[Xmlschemaval] = NullablePointer[Xmlschemaval].none() // offset: 1472 var pidcs: Pointer[U8] = Pointer[U8] // offset: 1536 struct Xmlschemanotation var ptype: I32 = I32(0) // offset: 0 var pname: Pointer[U8] tag = Pointer[U8] // offset: 64 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 128 var pidentifier: Pointer[U8] tag = Pointer[U8] // offset: 192 var ptargetNamespace: Pointer[U8] tag = Pointer[U8] // offset: 256 struct Xmlschema var pname: Pointer[U8] tag = Pointer[U8] // offset: 0 var ptargetNamespace: Pointer[U8] tag = Pointer[U8] // offset: 64 var pversion: Pointer[U8] tag = Pointer[U8] // offset: 128 var pid: Pointer[U8] tag = Pointer[U8] // offset: 192 var pdoc: NullablePointer[Xmldoc] = NullablePointer[Xmldoc].none() // offset: 256 var pannot: NullablePointer[Xmlschemaannot] = NullablePointer[Xmlschemaannot].none() // offset: 320 var pflags: I32 = I32(0) // offset: 384 var ptypeDecl: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 448 var pattrDecl: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 512 var pattrgrpDecl: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 576 var pelemDecl: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 640 var pnotaDecl: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 704 var pschemasImports: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 768 var p_private: Pointer[U8] = Pointer[U8] // offset: 832 var pgroupDecl: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 896 var pdict: NullablePointer[Xmldict] = NullablePointer[Xmldict].none() // offset: 960 var pincludes: Pointer[U8] = Pointer[U8] // offset: 1024 var ppreserve: I32 = I32(0) // offset: 1088 var pcounter: I32 = I32(0) // offset: 1120 var pidcDef: NullablePointer[Xmlhashtable] = NullablePointer[Xmlhashtable].none() // offset: 1152 var pvolatiles: Pointer[U8] = Pointer[U8] // offset: 1216 struct Xmlschematron struct Xmlschematronparserctxt struct Xmlschematronvalidctxt struct Xmluri var pscheme: Pointer[U8] tag = Pointer[U8] // offset: 0 var popaque: Pointer[U8] tag = Pointer[U8] // offset: 64 var pauthority: Pointer[U8] tag = Pointer[U8] // offset: 128 var pserver: Pointer[U8] tag = Pointer[U8] // offset: 192 var puser: Pointer[U8] tag = Pointer[U8] // offset: 256 var pport: I32 = I32(0) // offset: 320 var ppath: Pointer[U8] tag = Pointer[U8] // offset: 384 var pquery: Pointer[U8] tag = Pointer[U8] // offset: 448 var pfragment: Pointer[U8] tag = Pointer[U8] // offset: 512 var pcleanup: I32 = I32(0) // offset: 576 var pquery_raw: Pointer[U8] tag = Pointer[U8] // offset: 640 struct Xmlxincludectxt struct Xmlmodule struct Xmlschemaparserctxt struct Xmlschemavalidctxt struct Xmlschemasaxplug struct Xmltextreader struct Xmlsavectxt struct Xmltextwriter struct Xmllocationset var plocNr: I32 = I32(0) // offset: 0 var plocMax: I32 = I32(0) // offset: 32 var plocTab: Pointer[NullablePointer[Xmlxpathobject]] = Pointer[NullablePointer[Xmlxpathobject]] // offset: 64","title":"structs.pony"},{"location":"src/pony-libxml2/xml2attr/","text":"class Xml2attr var ptr': NullablePointer[Xmlattr] var ptr: Xmlattr new fromPTR(ptrx: NullablePointer[Xmlattr])? => if (ptrx.is_none()) then error else ptr' = ptrx ptr = ptr'.apply()? end","title":"xml2attr.pony"},{"location":"src/pony-libxml2/xml2doc/","text":"class Xml2Doc var ptr': NullablePointer[Xmldoc] var allocated: Bool new fromPTR(ptrx: NullablePointer[Xmldoc])? => if (ptrx.is_none()) then error else ptr' = ptrx allocated = true end new parseFile(pfilename: String val)? => let ptrx: NullablePointer[Xmldoc] = LibXML2.xmlParseFile(pfilename) if (ptrx.is_none()) then error else ptr' = ptrx allocated = true end new parseDoc(pcur: String val)? => let ptrx: NullablePointer[Xmldoc] = LibXML2.xmlParseDoc(pcur) if (ptrx.is_none()) then error else ptr' = ptrx allocated = true end // fun ref readerWalker(): Xml2textreader ? => // Xml2textreader.fromPTR(LibXML2.xmlReaderWalker(ptr'))? // use @xmlDocGetRootElement[NullablePointer[Xmlnode]](anon0: NullablePointer[Xmldoc]) fun ref getRootElement(): Xml2node ? => if (allocated) then let ptrx: NullablePointer[Xmlnode] = LibXML2.xmlDocGetRootElement(ptr') Xml2node.fromPTR(ptrx)? else error end fun ref final() => if (allocated) then @xmlFreeDoc[None](ptr') allocated = false end fun _final() => if (allocated) then @xmlFreeDoc[None](ptr') end //use @xmlDocCopyNode[NullablePointer[Xmlnode]](anon0: NullablePointer[Xmlnode], anon1: NullablePointer[Xmldoc], anon2: I32) //use @xmlDocCopyNodeList[NullablePointer[Xmlnode]](anon0: NullablePointer[Xmldoc], anon1: NullablePointer[Xmlnode]) //use @xmlDocSetRootElement[NullablePointer[Xmlnode]](anon0: NullablePointer[Xmldoc], anon1: NullablePointer[Xmlnode]) //use @xmlDocDumpFormatMemory[None](anon0: NullablePointer[Xmldoc], anon1: Pointer[Pointer[U8] tag], anon2: Pointer[I32], anon3: I32) //use @xmlDocDumpMemory[None](anon0: NullablePointer[Xmldoc], anon1: Pointer[Pointer[U8] tag], anon2: Pointer[I32]) //use @xmlDocDumpMemoryEnc[None](anon0: NullablePointer[Xmldoc], anon1: Pointer[Pointer[U8] tag], anon2: Pointer[I32], anon3: Pointer[U8] tag) //use @xmlDocDumpFormatMemoryEnc[None](anon0: NullablePointer[Xmldoc], anon1: Pointer[Pointer[U8] tag], anon2: Pointer[I32], anon3: Pointer[U8] tag, anon4: I32) //use @xmlDocFormatDump[I32](anon0: NullablePointer[IoFile], anon1: NullablePointer[Xmldoc], anon2: I32) //use @xmlDocDump[I32](anon0: NullablePointer[IoFile], anon1: NullablePointer[Xmldoc])","title":"xml2doc.pony"},{"location":"src/pony-libxml2/xml2node/","text":"class Xml2node var ptr': NullablePointer[Xmlnode] var ptr: Xmlnode new fromPTR(ptrx: NullablePointer[Xmlnode])? => if (ptrx.is_none()) then error else ptr' = ptrx ptr = ptr'.apply()? end fun ref name(): String val => String.from_cstring(ptr.pname).clone() // use @xmlHasNsProp[NullablePointer[Xmlattr]](anon0: NullablePointer[Xmlnode], anon1: Pointer[U8] tag, anon2: Pointer[U8] tag) fun ref hasNsProp(pname: String, pnamespace: String): Xml2attr ? => let ptrx:NullablePointer[Xmlattr] = LibXML2.xmlHasNsProp(ptr', pname, pnamespace) Xml2attr.fromPTR(ptrx)? // fun xmlGetLineNo(pnode: NullablePointer[Xmlnode]): I64 => fun ref getLineNo(): I64 => LibXML2.xmlGetLineNo(ptr') // fun xmlGetNodePath(pnode: NullablePointer[Xmlnode]): String => fun ref getNodePath(): String => LibXML2.xmlGetNodePath(ptr') // fun xmlXPathCastNodeToString(pnode: NullablePointer[Xmlnode]): String => fun ref xpathCastNodeToString(): String => LibXML2.xmlXPathCastNodeToString(ptr') // fun xmlGetProp(pnode: NullablePointer[Xmlnode], pname: String): String => fun ref getProp(pname: String): String => LibXML2.xmlGetProp(ptr', pname) // fun xmlNodeGetContent(pcur: NullablePointer[Xmlnode]): String => fun ref getContent(): String => LibXML2.xmlNodeGetContent(ptr') // fun xmlNodeGetLang(pcur: NullablePointer[Xmlnode]): String => fun ref getLang(): String => LibXML2.xmlNodeGetLang(ptr') // xmlXPathCastNodeToString[Pointer[U8]](anon0: NullablePointer[Xmlxpathobject]) fun ref castNodeToString(): String => LibXML2.xmlXPathCastNodeToString(ptr') fun ref dispose() => @xmlFreeNode[None](ptr') // fun htmlAutoCloseTag(pdoc: NullablePointer[Xmldoc], pname: String, pelem: NullablePointer[Xmlnode]): I32 => // fun htmlIsAutoClosed(pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode]): I32 => // fun htmlNodeDumpFileFormat(pout: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode], pencoding: String, pformat: I32): I32 => // fun htmlNodeDumpFile(pout: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode]): None => // fun htmlNodeDumpFormatOutput(pbuf: NullablePointer[Xmloutputbuffer], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode], pencoding: String, pformat: I32): None => // fun htmlNodeDumpOutput(pbuf: NullablePointer[Xmloutputbuffer], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode], pencoding: String): None => // fun htmlNodeDump(pbuf: NullablePointer[Xmlbuffer], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode]): I32 => // fun nodePop(pctxt: NullablePointer[Xmlparserctxt]): NullablePointer[Xmlnode] => // fun nodePush(pctxt: NullablePointer[Xmlparserctxt], pvalue: NullablePointer[Xmlnode]): I32 => // fun xlinkIsLink(pdoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode]): I32 => // fun xmlAddChildList(pparent: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlAddChild(pparent: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlAddNextSibling(pcur: NullablePointer[Xmlnode], pelem: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlAddPrevSibling(pcur: NullablePointer[Xmlnode], pelem: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlAddSibling(pcur: NullablePointer[Xmlnode], pelem: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlBufGetNodeContent(pbuf: NullablePointer[Xmlbuf], pcur: NullablePointer[Xmlnode]): I32 => // fun xmlBufNodeDump(pbuf: NullablePointer[Xmlbuf], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode], plevel: I32, pformat: I32): U64 => // fun xmlChildElementCount(pparent: NullablePointer[Xmlnode]): U64 => // fun xmlCopyNodeList(pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlCopyNode(pnode: NullablePointer[Xmlnode], precursive: I32): NullablePointer[Xmlnode] => // fun xmlCopyPropList(ptarget: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlattr]): NullablePointer[Xmlattr] => // fun xmlCopyProp(ptarget: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlattr]): NullablePointer[Xmlattr] => // fun xmlDebugDumpNodeList(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode], pdepth: I32): None => // fun xmlDebugDumpNode(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode], pdepth: I32): None => // fun xmlDebugDumpOneNode(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode], pdepth: I32): None => // fun xmlDocCopyNodeList(pdoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlDocCopyNode(pnode: NullablePointer[Xmlnode], pdoc: NullablePointer[Xmldoc], precursive: I32): NullablePointer[Xmlnode] => // fun xmlDocSetRootElement(pdoc: NullablePointer[Xmldoc], proot: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlDOMWrapAdoptNode(pctxt: NullablePointer[Xmldomwrapctxt], psourceDoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode], pdestDoc: NullablePointer[Xmldoc], pdestParent: NullablePointer[Xmlnode], poptions: I32): I32 => // fun xmlDOMWrapCloneNode(pctxt: NullablePointer[Xmldomwrapctxt], psourceDoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode], pclonedNode: Pointer[NullablePointer[Xmlnode]], pdestDoc: NullablePointer[Xmldoc], pdestParent: NullablePointer[Xmlnode], pdeep: I32, poptions: I32): I32 => // fun xmlDOMWrapReconcileNamespaces(pctxt: NullablePointer[Xmldomwrapctxt], pelem: NullablePointer[Xmlnode], poptions: I32): I32 => // fun xmlDOMWrapRemoveNode(pctxt: NullablePointer[Xmldomwrapctxt], pdoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode], poptions: I32): I32 => // fun xmlElemDump(pf: NullablePointer[IoFile], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode]): None => // fun xmlFirstElementChild(pparent: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlFreeNodeList(pcur: NullablePointer[Xmlnode]): None => // fun xmlFreeNode(pcur: NullablePointer[Xmlnode]): None => // fun xmlGetLastChild(pparent: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlGetNoNsProp(pnode: NullablePointer[Xmlnode], pname: String): String => // fun xmlGetNsList(pdoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode]): Pointer[NullablePointer[Xmlns]] => // fun xmlGetNsProp(pnode: NullablePointer[Xmlnode], pname: String, pnameSpace: String): String => // fun xmlGetProp(pnode: NullablePointer[Xmlnode], pname: String): String => // fun xmlHasNsProp(pnode: NullablePointer[Xmlnode], pname: String, pnameSpace: String): NullablePointer[Xmlattr] => // fun xmlHasProp(pnode: NullablePointer[Xmlnode], pname: String): NullablePointer[Xmlattr] => // fun xmlIsBlankNode(pnode: NullablePointer[Xmlnode]): I32 => // fun xmlIsID(pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pattr: NullablePointer[Xmlattr]): I32 => // fun xmlIsRef(pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pattr: NullablePointer[Xmlattr]): I32 => // fun xmlLastElementChild(pparent: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlLsCountNode(pnode: NullablePointer[Xmlnode]): I32 => // fun xmlLsOneNode(poutput: NullablePointer[IoFile], pnode: NullablePointer[Xmlnode]): None => // fun xmlNewCDataBlock(pdoc: NullablePointer[Xmldoc], pcontent: String, plen: I32): NullablePointer[Xmlnode] => // fun xmlNewCharRef(pdoc: NullablePointer[Xmldoc], pname: String): NullablePointer[Xmlnode] => // fun xmlNewChild(pparent: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewComment(pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewDocComment(pdoc: NullablePointer[Xmldoc], pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewDocFragment(pdoc: NullablePointer[Xmldoc]): NullablePointer[Xmlnode] => // fun xmlNewDocNodeEatName(pdoc: NullablePointer[Xmldoc], pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewDocNode(pdoc: NullablePointer[Xmldoc], pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewDocPI(pdoc: NullablePointer[Xmldoc], pname: String, pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewDocRawNode(pdoc: NullablePointer[Xmldoc], pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewDocTextLen(pdoc: NullablePointer[Xmldoc], pcontent: String, plen: I32): NullablePointer[Xmlnode] => // fun xmlNewDocText(pdoc: NullablePointer[Xmldoc], pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewNodeEatName(pns: NullablePointer[Xmlns], pname: String): NullablePointer[Xmlnode] => // fun xmlNewNode(pns: NullablePointer[Xmlns], pname: String): NullablePointer[Xmlnode] => // fun xmlNewNs(pnode: NullablePointer[Xmlnode], phref: String, pprefix: String): NullablePointer[Xmlns] => // fun xmlNewNsPropEatName(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pvalue: String): NullablePointer[Xmlattr] => // fun xmlNewNsProp(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pvalue: String): NullablePointer[Xmlattr] => // fun xmlNewPI(pname: String, pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewProp(pnode: NullablePointer[Xmlnode], pname: String, pvalue: String): NullablePointer[Xmlattr] => // fun xmlNewReference(pdoc: NullablePointer[Xmldoc], pname: String): NullablePointer[Xmlnode] => // fun xmlNewTextChild(pparent: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewTextLen(pcontent: String, plen: I32): NullablePointer[Xmlnode] => // fun xmlNewText(pcontent: String): NullablePointer[Xmlnode] => // fun xmlNewTextWriterTree(pdoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode], pcompression: I32): NullablePointer[Xmltextwriter] => // fun xmlNextElementSibling(pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlNodeAddContentLen(pcur: NullablePointer[Xmlnode], pcontent: String, plen: I32): None => // fun xmlNodeAddContent(pcur: NullablePointer[Xmlnode], pcontent: String): None => // fun xmlNodeBufGetContent(pbuffer: NullablePointer[Xmlbuffer], pcur: NullablePointer[Xmlnode]): I32 => // fun xmlNodeDumpOutput(pbuf: NullablePointer[Xmloutputbuffer], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode], plevel: I32, pformat: I32, pencoding: String): None => // fun xmlNodeDump(pbuf: NullablePointer[Xmlbuffer], pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode], plevel: I32, pformat: I32): I32 => // fun xmlNodeGetBase(pdoc: NullablePointer[Xmldoc], pcur: NullablePointer[Xmlnode]): String => // fun xmlNodeGetContent(pcur: NullablePointer[Xmlnode]): String => // fun xmlNodeGetLang(pcur: NullablePointer[Xmlnode]): String => // fun xmlNodeGetSpacePreserve(pcur: NullablePointer[Xmlnode]): I32 => // fun xmlNodeIsText(pnode: NullablePointer[Xmlnode]): I32 => // fun xmlNodeListGetRawString(pdoc: NullablePointer[Xmldoc], plist: NullablePointer[Xmlnode], pinLine: I32): String => // fun xmlNodeListGetString(pdoc: NullablePointer[Xmldoc], plist: NullablePointer[Xmlnode], pinLine: I32): String => // fun xmlNodeSetBase(pcur: NullablePointer[Xmlnode], puri: String): None => // fun xmlNodeSetContentLen(pcur: NullablePointer[Xmlnode], pcontent: String, plen: I32): None => // fun xmlNodeSetContent(pcur: NullablePointer[Xmlnode], pcontent: String): None => // fun xmlNodeSetLang(pcur: NullablePointer[Xmlnode], plang: String): None => // fun xmlNodeSetName(pcur: NullablePointer[Xmlnode], pname: String): None => // fun xmlNodeSetSpacePreserve(pcur: NullablePointer[Xmlnode], pval: I32): None => // fun xmlParseBalancedChunkMemory(pdoc: NullablePointer[Xmldoc], psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pdepth: I32, pstring: String, plst: Pointer[NullablePointer[Xmlnode]]): I32 => // fun xmlParseBalancedChunkMemoryRecover(pdoc: NullablePointer[Xmldoc], psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pdepth: I32, pstring: String, plst: Pointer[NullablePointer[Xmlnode]], precover: I32): I32 => // fun xmlParseCtxtExternalEntity(pctx: NullablePointer[Xmlparserctxt], pURL: String, pID: String, plst: Pointer[NullablePointer[Xmlnode]]): I32 => // fun xmlParseExternalEntity(pdoc: NullablePointer[Xmldoc], psax: NullablePointer[Xmlsaxhandler], puser_data: Pointer[U8], pdepth: I32, pURL: String, pID: String, plst: Pointer[NullablePointer[Xmlnode]]): I32 => // fun xmlParseInNodeContext(pnode: NullablePointer[Xmlnode], pdata: String, pdatalen: I32, poptions: I32, plst: Pointer[NullablePointer[Xmlnode]]): I32 => // fun xmlParserFindNodeInfoIndex(pseq: NullablePointer[Xmlparsernodeinfoseq], pnode: NullablePointer[Xmlnode]): U64 => // fun xmlParserFindNodeInfo(pctxt: NullablePointer[Xmlparserctxt], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlparsernodeinfo] => // fun xmlPatternMatch(pcomp: NullablePointer[Xmlpattern], pnode: NullablePointer[Xmlnode]): I32 => // fun xmlPreviousElementSibling(pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlReconciliateNs(pdoc: NullablePointer[Xmldoc], ptree: NullablePointer[Xmlnode]): I32 => // fun xmlRelaxNGValidateFullElement(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode]): I32 => // fun xmlRelaxNGValidatePopElement(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode]): I32 => // fun xmlRelaxNGValidatePushElement(pctxt: NullablePointer[Xmlrelaxngvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode]): I32 => // fun xmlReplaceNode(pold: NullablePointer[Xmlnode], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlSaveTree(pctxt: NullablePointer[Xmlsavectxt], pnode: NullablePointer[Xmlnode]): I64 => // fun xmlSchemaValidateOneElement(pctxt: NullablePointer[Xmlschemavalidctxt], pelem: NullablePointer[Xmlnode]): I32 => // fun xmlSchemaValPredefTypeNodeNoNorm(ptype: NullablePointer[Xmlschematype], pvalue: String, pval: Pointer[NullablePointer[Xmlschemaval]], pnode: NullablePointer[Xmlnode]): I32 => // fun xmlSchemaValPredefTypeNode(ptype: NullablePointer[Xmlschematype], pvalue: String, pval: Pointer[NullablePointer[Xmlschemaval]], pnode: NullablePointer[Xmlnode]): I32 => // fun xmlSearchNsByHref(pdoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode], phref: String): NullablePointer[Xmlns] => // fun xmlSearchNs(pdoc: NullablePointer[Xmldoc], pnode: NullablePointer[Xmlnode], pnameSpace: String): NullablePointer[Xmlns] => // fun xmlSetListDoc(plist: NullablePointer[Xmlnode], pdoc: NullablePointer[Xmldoc]): None => // fun xmlSetNs(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns]): None => // fun xmlSetNsProp(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String, pvalue: String): NullablePointer[Xmlattr] => // fun xmlSetProp(pnode: NullablePointer[Xmlnode], pname: String, pvalue: String): NullablePointer[Xmlattr] => // fun xmlSetTreeDoc(ptree: NullablePointer[Xmlnode], pdoc: NullablePointer[Xmldoc]): None => // fun xmlShellBase(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellCat(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellDir(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellDu(pctxt: NullablePointer[Xmlshellctxt], parg: String, ptree: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellList(pctxt: NullablePointer[Xmlshellctxt], parg: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellLoad(pctxt: NullablePointer[Xmlshellctxt], pfilename: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellPrintNode(pnode: NullablePointer[Xmlnode]): None => // fun xmlShellPwd(pctxt: NullablePointer[Xmlshellctxt], pbuffer: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellSave(pctxt: NullablePointer[Xmlshellctxt], pfilename: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellValidate(pctxt: NullablePointer[Xmlshellctxt], pdtd: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlShellWrite(pctxt: NullablePointer[Xmlshellctxt], pfilename: String, pnode: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlStringGetNodeList(pdoc: NullablePointer[Xmldoc], pvalue: String): NullablePointer[Xmlnode] => // fun xmlStringLenGetNodeList(pdoc: NullablePointer[Xmldoc], pvalue: String, plen: I32): NullablePointer[Xmlnode] => // fun xmlTextConcat(pnode: NullablePointer[Xmlnode], pcontent: String, plen: I32): I32 => // fun xmlTextMerge(pfirst: NullablePointer[Xmlnode], psecond: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlTextReaderCurrentNode(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => // fun xmlTextReaderExpand(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => // fun xmlTextReaderPreserve(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => // fun xmlUnlinkNode(pcur: NullablePointer[Xmlnode]): None => // fun xmlUnsetNsProp(pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns], pname: String): I32 => // fun xmlUnsetProp(pnode: NullablePointer[Xmlnode], pname: String): I32 => // fun xmlValidateElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode]): I32 => // fun xmlValidateOneAttribute(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pattr: NullablePointer[Xmlattr], pvalue: String): I32 => // fun xmlValidateOneElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode]): I32 => // fun xmlValidateOneNamespace(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pprefix: String, pns: NullablePointer[Xmlns], pvalue: String): I32 => // fun xmlValidatePopElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pqname: String): I32 => // fun xmlValidatePushElement(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pqname: String): I32 => // fun xmlValidCtxtNormalizeAttributeValue(pctxt: NullablePointer[Xmlvalidctxt], pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pname: String, pvalue: String): String => // fun xmlValidGetValidElements(pprev: NullablePointer[Xmlnode], pnext: NullablePointer[Xmlnode], pnames: Pointer[Pointer[U8] tag], pmax: I32): I32 => // fun xmlValidNormalizeAttributeValue(pdoc: NullablePointer[Xmldoc], pelem: NullablePointer[Xmlnode], pname: String, pvalue: String): String => // fun xmlXIncludeProcessNode(pctxt: NullablePointer[Xmlxincludectxt], ptree: NullablePointer[Xmlnode]): I32 => // fun xmlXIncludeProcessTreeFlagsData(ptree: NullablePointer[Xmlnode], pflags: I32, pdata: Pointer[U8]): I32 => // fun xmlXIncludeProcessTreeFlags(ptree: NullablePointer[Xmlnode], pflags: I32): I32 => // fun xmlXIncludeProcessTree(ptree: NullablePointer[Xmlnode]): I32 => // fun xmlXPathCastNodeSetToBoolean(pns: NullablePointer[Xmlnodeset]): I32 => // fun xmlXPathCastNodeSetToNumber(pns: NullablePointer[Xmlnodeset]): F64 => // fun xmlXPathCastNodeSetToString(pns: NullablePointer[Xmlnodeset]): String => // fun xmlXPathCastNodeToNumber(pnode: NullablePointer[Xmlnode]): F64 => // fun xmlXPathCmpNodes(pnode1: NullablePointer[Xmlnode], pnode2: NullablePointer[Xmlnode]): I32 => // fun xmlXPathDifference(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathDistinct(pnodes: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathDistinctSorted(pnodes: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathFreeNodeSet(pobj: NullablePointer[Xmlnodeset]): None => // fun xmlXPathHasSameNodes(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): I32 => // fun xmlXPathIntersection(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathLeading(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathLeadingSorted(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathNewNodeSetList(pval: NullablePointer[Xmlnodeset]): NullablePointer[Xmlxpathobject] => // fun xmlXPathNewNodeSet(pval: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => // fun xmlXPathNewValueTree(pval: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => // fun xmlXPathNextAncestorOrSelf(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextAncestor(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextAttribute(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextChild(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextDescendantOrSelf(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextDescendant(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextFollowing(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextFollowingSibling(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextNamespace(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextParent(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextPreceding(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextPrecedingSibling(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNextSelf(pctxt: NullablePointer[Xmlxpathparsercontext], pcur: NullablePointer[Xmlnode]): NullablePointer[Xmlnode] => // fun xmlXPathNodeEval(pnode: NullablePointer[Xmlnode], pstr: String, pctx: NullablePointer[Xmlxpathcontext]): NullablePointer[Xmlxpathobject] => // fun xmlXPathNodeLeading(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => // fun xmlXPathNodeLeadingSorted(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => // fun xmlXPathNodeSetAddNs(pcur: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode], pns: NullablePointer[Xmlns]): I32 => // fun xmlXPathNodeSetAdd(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): I32 => // fun xmlXPathNodeSetAddUnique(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): I32 => // fun xmlXPathNodeSetContains(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): I32 => // fun xmlXPathNodeSetCreate(pval: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => // fun xmlXPathNodeSetDel(pcur: NullablePointer[Xmlnodeset], pval: NullablePointer[Xmlnode]): None => // fun xmlXPathNodeSetMerge(pval1: NullablePointer[Xmlnodeset], pval2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathNodeSetRemove(pcur: NullablePointer[Xmlnodeset], pval: I32): None => // fun xmlXPathNodeSetSort(pset: NullablePointer[Xmlnodeset]): None => // fun xmlXPathNodeTrailing(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => // fun xmlXPathNodeTrailingSorted(pnodes: NullablePointer[Xmlnodeset], pnode: NullablePointer[Xmlnode]): NullablePointer[Xmlnodeset] => // fun xmlXPathPopNodeSet(pctxt: NullablePointer[Xmlxpathparsercontext]): NullablePointer[Xmlnodeset] => // fun xmlXPathSetContextNode(pnode: NullablePointer[Xmlnode], pctx: NullablePointer[Xmlxpathcontext]): I32 => // fun xmlXPathTrailing(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathTrailingSorted(pnodes1: NullablePointer[Xmlnodeset], pnodes2: NullablePointer[Xmlnodeset]): NullablePointer[Xmlnodeset] => // fun xmlXPathWrapNodeSet(pval: NullablePointer[Xmlnodeset]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrBuildNodeList(pobj: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlnode] => // fun xmlXPtrNewCollapsedRange(pstart: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrNewContext(pdoc: NullablePointer[Xmldoc], phere: NullablePointer[Xmlnode], porigin: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathcontext] => // fun xmlXPtrNewLocationSetNodeSet(pset: NullablePointer[Xmlnodeset]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrNewLocationSetNodes(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrNewRangeNodeObject(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrNewRangeNodePoint(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlxpathobject]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrNewRangeNodes(pstart: NullablePointer[Xmlnode], pend: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrNewRangePointNode(pstart: NullablePointer[Xmlxpathobject], pend: NullablePointer[Xmlnode]): NullablePointer[Xmlxpathobject] => // fun xmlXPtrNewRange(pstart: NullablePointer[Xmlnode], pstartindex: I32, pend: NullablePointer[Xmlnode], pendindex: I32): NullablePointer[Xmlxpathobject] =>","title":"xml2node.pony"},{"location":"src/pony-libxml2/xml2parserinputbuffer/","text":"class Xml2parserinputbuffer var ptr': NullablePointer[Xmlparserinputbuffer] var ptr: Xmlparserinputbuffer var buffersize: I32 new createMem(str: String) ? => buffersize = str.size().i32() ptr' = LibXML2.xmlParserInputBufferCreateMem(str, buffersize, I32(1)) if (ptr'.is_none()) then error else ptr = ptr'.apply()? end new createFilename(uri: String, encoding: I32) ? => ptr' = LibXML2.xmlParserInputBufferCreateFilename(uri, encoding) if (ptr'.is_none()) then error else ptr = ptr'.apply()? buffersize = I32(0) end fun ref newTextReader(pURI: String): Xml2textreader ? => let ptrx: NullablePointer[Xmltextreader] = LibXML2.xmlNewTextReader(ptr', pURI) Xml2textreader.fromPTR(ptrx)?","title":"xml2parserinputbuffer.pony"},{"location":"src/pony-libxml2/xml2textreader/","text":"class Xml2textreader var ptr': NullablePointer[Xmltextreader] var ptr: Xmltextreader new fromPTR(ptrx: NullablePointer[Xmltextreader])? => if (ptrx.is_none()) then error else ptr' = ptrx ptr = ptr'.apply()? end // fun xmlTextReaderRead(preader: NullablePointer[Xmltextreader]): I32 => fun ref read(): I32 => LibXML2.xmlTextReaderRead(ptr') // fun xmlTextReaderDepth(preader: NullablePointer[Xmltextreader]): I32 => fun ref depth(): I32 => LibXML2.xmlTextReaderDepth(ptr') // fun xmlTextReaderNodeType(preader: NullablePointer[Xmltextreader]): I32 => fun ref nodeType(): I32 => LibXML2.xmlTextReaderNodeType(ptr') // fun xmlTextReaderName(preader: NullablePointer[Xmltextreader]): String => fun ref name(): String => LibXML2.xmlTextReaderName(ptr') // fun xmlTextReaderValue(preader: NullablePointer[Xmltextreader]): String => fun ref value(): String => LibXML2.xmlTextReaderValue(ptr') // fun xmlTextReaderIsEmptyElement(preader: NullablePointer[Xmltextreader]): I32 => fun ref isEmptyElement(): I32 => LibXML2.xmlTextReaderIsEmptyElement(ptr') // fun xmlReaderNewWalker(preader: NullablePointer[Xmltextreader], pdoc: NullablePointer[Xmldoc]): I32 => // fun ref newWalker(xmldoc: Xml2Doc): I32 => // LibXML2.xmlReaderNewWalker(ptr', xmldoc.ptr') // fun xmlTextReaderSetParserProp(preader: NullablePointer[Xmltextreader], pprop: I32, pvalue: I32): I32 => fun ref setParserProp(pprop: I32, pvalue: I32): I32 => LibXML2.xmlTextReaderSetParserProp(ptr', pprop, pvalue) // fun xmlTextReaderExpand(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => fun ref expand(): Xml2node ? => let ptrx: NullablePointer[Xmlnode] = LibXML2.xmlTextReaderExpand(ptr') Xml2node.fromPTR(ptrx)? // fun xmlTextReaderCurrentDoc(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmldoc] // fun ref currentDoc(): Xml2Doc ? => // let ptrx: XmldocPTR = LibXML2.xmlTextReaderCurrentDoc(ptr') // Xml2Doc.fromPTR(ptrx)? // fun xmlTextReaderBaseUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstBaseUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstEncoding(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstLocalName(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstName(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstNamespaceUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstPrefix(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstString(preader: NullablePointer[Xmltextreader], pstr: String): String => // fun xmlTextReaderConstValue(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstXmlLang(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstXmlVersion(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderGetAttributeNo(preader: NullablePointer[Xmltextreader], pno: I32): String => // fun xmlTextReaderGetAttributeNs(preader: NullablePointer[Xmltextreader], plocalName: String, pnamespaceURI: String): String => // fun xmlTextReaderGetAttribute(preader: NullablePointer[Xmltextreader], pname: String): String => // fun xmlTextReaderLocalName(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderLocatorBaseURI(plocator: Pointer[U8]): String => // fun xmlTextReaderLookupNamespace(preader: NullablePointer[Xmltextreader], pprefix: String): String => // fun xmlTextReaderName(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderNamespaceUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderPrefix(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderReadInnerXml(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderReadOuterXml(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderReadString(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderValue(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderXmlLang(preader: NullablePointer[Xmltextreader]): String => // fun xmlNewTextReaderFilename(pURI: String): NullablePointer[Xmltextreader] => // fun xmlFreeTextReader(preader: NullablePointer[Xmltextreader]): None => // fun xmlTextReaderSetup(preader: NullablePointer[Xmltextreader], pinput: NullablePointer[Xmlparserinputbuffer], pURL: String, pencoding: String, poptions: I32): I32 => // fun xmlTextReaderReadInnerXml(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderReadOuterXml(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderReadString(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderReadAttributeValue(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderAttributeCount(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderHasAttributes(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderHasValue(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderIsDefault(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderQuoteChar(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderReadState(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderIsNamespaceDecl(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderConstBaseUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstLocalName(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstName(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstNamespaceUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstPrefix(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstXmlLang(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderConstString(preader: NullablePointer[Xmltextreader], pstr: String): String => // fun xmlTextReaderConstValue(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderBaseUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderLocalName(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderNamespaceUri(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderPrefix(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderXmlLang(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderClose(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderGetAttributeNo(preader: NullablePointer[Xmltextreader], pno: I32): String => // fun xmlTextReaderGetAttribute(preader: NullablePointer[Xmltextreader], pname: String): String => // fun xmlTextReaderGetAttributeNs(preader: NullablePointer[Xmltextreader], plocalName: String, pnamespaceURI: String): String => // fun xmlTextReaderGetRemainder(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlparserinputbuffer] => // fun xmlTextReaderLookupNamespace(preader: NullablePointer[Xmltextreader], pprefix: String): String => // fun xmlTextReaderMoveToAttributeNo(preader: NullablePointer[Xmltextreader], pno: I32): I32 => // fun xmlTextReaderMoveToAttribute(preader: NullablePointer[Xmltextreader], pname: String): I32 => // fun xmlTextReaderMoveToAttributeNs(preader: NullablePointer[Xmltextreader], plocalName: String, pnamespaceURI: String): I32 => // fun xmlTextReaderMoveToFirstAttribute(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderMoveToNextAttribute(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderMoveToElement(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderNormalization(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderConstEncoding(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderGetParserProp(preader: NullablePointer[Xmltextreader], pprop: I32): I32 => // fun xmlTextReaderCurrentNode(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => // fun xmlTextReaderGetParserLineNumber(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderGetParserColumnNumber(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderPreserve(preader: NullablePointer[Xmltextreader]): NullablePointer[Xmlnode] => // fun xmlTextReaderPreservePattern(preader: NullablePointer[Xmltextreader], ppattern: String, pnamespaces: Pointer[Pointer[U8] tag]): I32 => // fun xmlTextReaderNext(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderNextSibling(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderIsValid(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderRelaxNGValidate(preader: NullablePointer[Xmltextreader], prng: String): I32 => // fun xmlTextReaderRelaxNGValidateCtxt(preader: NullablePointer[Xmltextreader], pctxt: NullablePointer[Xmlrelaxngvalidctxt], poptions: I32): I32 => // fun xmlTextReaderRelaxNGSetSchema(preader: NullablePointer[Xmltextreader], pschema: NullablePointer[Xmlrelaxng]): I32 => // fun xmlTextReaderSchemaValidate(preader: NullablePointer[Xmltextreader], pxsd: String): I32 => // fun xmlTextReaderSchemaValidateCtxt(preader: NullablePointer[Xmltextreader], pctxt: NullablePointer[Xmlschemavalidctxt], poptions: I32): I32 => // fun xmlTextReaderSetSchema(preader: NullablePointer[Xmltextreader], pschema: NullablePointer[Xmlschema]): I32 => // fun xmlTextReaderConstXmlVersion(preader: NullablePointer[Xmltextreader]): String => // fun xmlTextReaderStandalone(preader: NullablePointer[Xmltextreader]): I32 => // fun xmlTextReaderByteConsumed(preader: NullablePointer[Xmltextreader]): I64 => // fun xmlReaderWalker(pdoc: NullablePointer[Xmldoc]): NullablePointer[Xmltextreader] => // fun xmlReaderForDoc(pcur: String, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => // fun xmlReaderForFile(pfilename: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => // fun xmlReaderForMemory(pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => // fun xmlReaderForFd(pfd: I32, pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => // fun xmlReaderForIO(pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): NullablePointer[Xmltextreader] => // fun xmlReaderNewDoc(preader: NullablePointer[Xmltextreader], pcur: String, pURL: String, pencoding: String, poptions: I32): I32 => // fun xmlReaderNewFile(preader: NullablePointer[Xmltextreader], pfilename: String, pencoding: String, poptions: I32): I32 => // fun xmlReaderNewMemory(preader: NullablePointer[Xmltextreader], pbuffer: String, psize: I32, pURL: String, pencoding: String, poptions: I32): I32 => // fun xmlReaderNewFd(preader: NullablePointer[Xmltextreader], pfd: I32, pURL: String, pencoding: String, poptions: I32): I32 => // fun xmlReaderNewIO(preader: NullablePointer[Xmltextreader], pioread: Pointer[FUNCTIONPOINTER], pioclose: Pointer[FUNCTIONPOINTER], pioctx: Pointer[U8], pURL: String, pencoding: String, poptions: I32): I32 => // fun xmlTextReaderLocatorLineNumber(plocator: Pointer[U8]): I32 => // fun xmlTextReaderLocatorBaseURI(plocator: Pointer[U8]): String => // fun xmlTextReaderSetErrorHandler(preader: NullablePointer[Xmltextreader], pf: Pointer[FUNCTIONPOINTER], parg: Pointer[U8]): None => // fun xmlTextReaderSetStructuredErrorHandler(preader: NullablePointer[Xmltextreader], pf: Pointer[FUNCTIONPOINTER], parg: Pointer[U8]): None => // fun xmlTextReaderGetErrorHandler(preader: NullablePointer[Xmltextreader], pf: Pointer[Pointer[FUNCTIONPOINTER]], parg: Pointer[Pointer[U8]]): None =>","title":"xml2textreader.pony"},{"location":"src/pony-libxml2/xml2xpath/","text":"class Xml2pathobject var allocated: Bool var ptr': NullablePointer[Xmlxpathobject] var ptr: Xmlxpathobject var nodeset': NullablePointer[Xmlnodeset] var nodeset: Xmlnodeset var nodearray: Array[Xml2node] = Array[Xml2node] new fromPTR(ptrx: NullablePointer[Xmlxpathobject])? => if (ptrx.is_none()) then error else ptr' = ptrx ptr = ptr'.apply()? if (ptr.pnodesetval.is_none()) then error else nodeset' = ptr.pnodesetval nodeset = nodeset'.apply()? let nodearray': Array[NullablePointer[Xmlnode]] = Array[NullablePointer[Xmlnode]].from_cpointer(nodeset.pnodeTab, nodeset.pnodeNr.usize()) for f in nodearray'.values() do nodearray.push(Xml2node.fromPTR(f)?) end allocated = true end end fun size(): USize ? => if (allocated) then nodearray.size() else error end fun values(): ArrayValues[Xml2node, this->Array[Xml2node]]^ ? => if (allocated) then ArrayValues[Xml2node, this->Array[Xml2node]](nodearray) else error end fun ref apply(index: USize): Xml2node ref ? => if (allocated) then nodearray.apply(index)? else error end fun ref final() => if (allocated) then @xmlXPathFreeNodeSetList[None](ptr') @xmlXPathFreeNodeSet[None](nodeset') nodearray.clear() nodearray.compact() allocated = false end fun _final() => if (allocated) then @xmlXPathFreeNodeSetList[None](ptr') @xmlXPathFreeNodeSet[None](nodeset') end // fun xmlXPathCastNodeSetToString(pns: NullablePointer[Xmlnodeset]): String => fun ref castNodeSetToString(): String => LibXML2.xmlXPathCastNodeSetToString(nodeset') // xmlXPathCastToString[Pointer[U8]](anon0: NullablePointer[Xmlxpathobject]) fun ref castToString(): String => LibXML2.xmlXPathCastToString(ptr')","title":"xml2xpath.pony"},{"location":"src/pony-libxml2/xml2xpathcontext/","text":"class Xml2xpathcontext var ptr': NullablePointer[Xmlxpathcontext] var allocated: Bool new create(xmldoc: Xml2Doc)? => ptr' = LibXML2.xmlXPathNewContext(xmldoc.ptr') if (ptr'.is_none()) then error else allocated = true end fun ref xpathEval(str: String): Xml2pathobject? => if (allocated) then let xptr: NullablePointer[Xmlxpathobject] = LibXML2.xmlXPathEval(str, ptr') Xml2pathobject.fromPTR(xptr)? else error end fun ref xpathSetContextNode(xmlnode: Xml2node): I32 ? => if (allocated) then LibXML2.xmlXPathSetContextNode(xmlnode.ptr', ptr') else error end fun ref final() => if (allocated) then @xmlXPathFreeContext[None](ptr') allocated = false end fun _final() => if (allocated) then @xmlXPathFreeContext[None](ptr') end","title":"xml2xpathcontext.pony"}]}